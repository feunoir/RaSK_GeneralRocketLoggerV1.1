
RaSK_GeneralRocketLoggerV1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c24  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  08007dc4  08007dc4  00017dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008284  08008284  00018284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008288  08008288  00018288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000025c  20000000  0800828c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002025c  2**0
                  CONTENTS
  7 .bss          00002070  2000025c  2000025c  0002025c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200022cc  200022cc  0002025c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003182d  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005226  00000000  00000000  00051ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00015e61  00000000  00000000  00056cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001670  00000000  00000000  0006cb40  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001c50  00000000  00000000  0006e1b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ce7e  00000000  00000000  0006fe00  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00008255  00000000  00000000  0007cc7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00084ed3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005240  00000000  00000000  00084f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         0000009c  00000000  00000000  0008a190  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000014d  00000000  00000000  0008a22c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000025c 	.word	0x2000025c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007dac 	.word	0x08007dac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000260 	.word	0x20000260
 80001dc:	08007dac 	.word	0x08007dac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f0:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <HAL_InitTick+0x24>)
{
 80005f4:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80005f6:	6818      	ldr	r0, [r3, #0]
 80005f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000600:	f000 f88c 	bl	800071c <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000604:	2200      	movs	r2, #0
 8000606:	4621      	mov	r1, r4
 8000608:	f04f 30ff 	mov.w	r0, #4294967295
 800060c:	f000 f846 	bl	800069c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000610:	2000      	movs	r0, #0
 8000612:	bd10      	pop	{r4, pc}
 8000614:	20000070 	.word	0x20000070

08000618 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000618:	4a07      	ldr	r2, [pc, #28]	; (8000638 <HAL_Init+0x20>)
{
 800061a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800061c:	6813      	ldr	r3, [r2, #0]
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f827 	bl	8000678 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800062a:	2000      	movs	r0, #0
 800062c:	f7ff ffe0 	bl	80005f0 <HAL_InitTick>
  HAL_MspInit();
 8000630:	f006 f816 	bl	8006660 <HAL_MspInit>
}
 8000634:	2000      	movs	r0, #0
 8000636:	bd08      	pop	{r3, pc}
 8000638:	40022000 	.word	0x40022000

0800063c <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800063c:	4a02      	ldr	r2, [pc, #8]	; (8000648 <HAL_IncTick+0xc>)
 800063e:	6813      	ldr	r3, [r2, #0]
 8000640:	3301      	adds	r3, #1
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	200002b8 	.word	0x200002b8

0800064c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800064c:	4b01      	ldr	r3, [pc, #4]	; (8000654 <HAL_GetTick+0x8>)
 800064e:	6818      	ldr	r0, [r3, #0]
}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	200002b8 	.word	0x200002b8

08000658 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800065a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800065c:	f7ff fff6 	bl	800064c <HAL_GetTick>
  uint32_t wait = Delay;
 8000660:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000662:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000664:	4605      	mov	r5, r0
  {
     wait++;
 8000666:	bf18      	it	ne
 8000668:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800066a:	f7ff ffef 	bl	800064c <HAL_GetTick>
 800066e:	1b40      	subs	r0, r0, r5
 8000670:	42a0      	cmp	r0, r4
 8000672:	d3fa      	bcc.n	800066a <HAL_Delay+0x12>
  {
  }
}
 8000674:	b003      	add	sp, #12
 8000676:	bd30      	pop	{r4, r5, pc}

08000678 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000678:	4a07      	ldr	r2, [pc, #28]	; (8000698 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800067a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000680:	041b      	lsls	r3, r3, #16
 8000682:	0c1b      	lsrs	r3, r3, #16
 8000684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000688:	0200      	lsls	r0, r0, #8
 800068a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000692:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000694:	60d3      	str	r3, [r2, #12]
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	68dc      	ldr	r4, [r3, #12]
 80006a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006aa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ac:	2b04      	cmp	r3, #4
 80006ae:	bf28      	it	cs
 80006b0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	f04f 0501 	mov.w	r5, #1
 80006b8:	fa05 f303 	lsl.w	r3, r5, r3
 80006bc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c0:	bf8c      	ite	hi
 80006c2:	3c03      	subhi	r4, #3
 80006c4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c6:	4019      	ands	r1, r3
 80006c8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ca:	fa05 f404 	lsl.w	r4, r5, r4
 80006ce:	3c01      	subs	r4, #1
 80006d0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80006d2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	ea42 0201 	orr.w	r2, r2, r1
 80006d8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	bfaf      	iteee	ge
 80006de:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	f000 000f 	andlt.w	r0, r0, #15
 80006e6:	4b06      	ldrlt	r3, [pc, #24]	; (8000700 <HAL_NVIC_SetPriority+0x64>)
 80006e8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ea:	bfa5      	ittet	ge
 80006ec:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80006f0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00
 8000700:	e000ed14 	.word	0xe000ed14

08000704 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000704:	0942      	lsrs	r2, r0, #5
 8000706:	2301      	movs	r3, #1
 8000708:	f000 001f 	and.w	r0, r0, #31
 800070c:	fa03 f000 	lsl.w	r0, r3, r0
 8000710:	4b01      	ldr	r3, [pc, #4]	; (8000718 <HAL_NVIC_EnableIRQ+0x14>)
 8000712:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000716:	4770      	bx	lr
 8000718:	e000e100 	.word	0xe000e100

0800071c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800071c:	3801      	subs	r0, #1
 800071e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000722:	d20a      	bcs.n	800073a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000726:	4a07      	ldr	r2, [pc, #28]	; (8000744 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000728:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072a:	21f0      	movs	r1, #240	; 0xf0
 800072c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000730:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000732:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000734:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800073a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	e000e010 	.word	0xe000e010
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800074a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800074c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800074e:	bf0c      	ite	eq
 8000750:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000754:	f022 0204 	bicne.w	r2, r2, #4
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	4770      	bx	lr
 800075c:	e000e010 	.word	0xe000e010

08000760 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000760:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000762:	f003 fb7f 	bl	8003e64 <HAL_SYSTICK_Callback>
 8000766:	bd08      	pop	{r3, pc}

08000768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800076c:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000770:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8000904 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000774:	4a61      	ldr	r2, [pc, #388]	; (80008fc <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 8000776:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000778:	fa38 f403 	lsrs.w	r4, r8, r3
 800077c:	d102      	bne.n	8000784 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 800077e:	b003      	add	sp, #12
 8000780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000784:	f04f 0e01 	mov.w	lr, #1
 8000788:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 800078c:	ea18 060e 	ands.w	r6, r8, lr
 8000790:	f000 80a6 	beq.w	80008e0 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000794:	684c      	ldr	r4, [r1, #4]
 8000796:	f024 0710 	bic.w	r7, r4, #16
 800079a:	2f02      	cmp	r7, #2
 800079c:	d116      	bne.n	80007cc <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 800079e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80007a2:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007a6:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80007aa:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007ae:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80007b2:	f04f 0c0f 	mov.w	ip, #15
 80007b6:	fa0c fc0b 	lsl.w	ip, ip, fp
 80007ba:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007be:	690d      	ldr	r5, [r1, #16]
 80007c0:	fa05 f50b 	lsl.w	r5, r5, fp
 80007c4:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80007c8:	f8ca 5020 	str.w	r5, [sl, #32]
 80007cc:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007d0:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80007d2:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007d6:	fa05 f50a 	lsl.w	r5, r5, sl
 80007da:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007dc:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007e0:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007e4:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007e8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007ea:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ee:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80007f0:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007f4:	d811      	bhi.n	800081a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80007f6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007f8:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007fc:	68cf      	ldr	r7, [r1, #12]
 80007fe:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000802:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000806:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000808:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800080a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800080e:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000812:	409f      	lsls	r7, r3
 8000814:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000818:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800081a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800081c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800081e:	688f      	ldr	r7, [r1, #8]
 8000820:	fa07 f70a 	lsl.w	r7, r7, sl
 8000824:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000826:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000828:	00e5      	lsls	r5, r4, #3
 800082a:	d559      	bpl.n	80008e0 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082c:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000830:	f045 0501 	orr.w	r5, r5, #1
 8000834:	f8c9 5018 	str.w	r5, [r9, #24]
 8000838:	f8d9 5018 	ldr.w	r5, [r9, #24]
 800083c:	f023 0703 	bic.w	r7, r3, #3
 8000840:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000844:	f005 0501 	and.w	r5, r5, #1
 8000848:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800084c:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800084e:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000854:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000856:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800085a:	f04f 0e0f 	mov.w	lr, #15
 800085e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000862:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000866:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800086a:	d03b      	beq.n	80008e4 <HAL_GPIO_Init+0x17c>
 800086c:	4d24      	ldr	r5, [pc, #144]	; (8000900 <HAL_GPIO_Init+0x198>)
 800086e:	42a8      	cmp	r0, r5
 8000870:	d03a      	beq.n	80008e8 <HAL_GPIO_Init+0x180>
 8000872:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000876:	42a8      	cmp	r0, r5
 8000878:	d038      	beq.n	80008ec <HAL_GPIO_Init+0x184>
 800087a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800087e:	42a8      	cmp	r0, r5
 8000880:	d036      	beq.n	80008f0 <HAL_GPIO_Init+0x188>
 8000882:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000886:	42a8      	cmp	r0, r5
 8000888:	d034      	beq.n	80008f4 <HAL_GPIO_Init+0x18c>
 800088a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800088e:	42a8      	cmp	r0, r5
 8000890:	d032      	beq.n	80008f8 <HAL_GPIO_Init+0x190>
 8000892:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000896:	42a8      	cmp	r0, r5
 8000898:	bf14      	ite	ne
 800089a:	2507      	movne	r5, #7
 800089c:	2506      	moveq	r5, #6
 800089e:	fa05 f50c 	lsl.w	r5, r5, ip
 80008a2:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80008a6:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80008a8:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80008aa:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008ac:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80008b0:	bf0c      	ite	eq
 80008b2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80008b4:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 80008b6:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80008b8:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008ba:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80008be:	bf0c      	ite	eq
 80008c0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80008c2:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 80008c4:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80008c6:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008c8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80008cc:	bf0c      	ite	eq
 80008ce:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80008d0:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 80008d2:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80008d4:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008d6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008d8:	bf54      	ite	pl
 80008da:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80008dc:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 80008de:	60d5      	str	r5, [r2, #12]
    position++;
 80008e0:	3301      	adds	r3, #1
 80008e2:	e749      	b.n	8000778 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80008e4:	2500      	movs	r5, #0
 80008e6:	e7da      	b.n	800089e <HAL_GPIO_Init+0x136>
 80008e8:	2501      	movs	r5, #1
 80008ea:	e7d8      	b.n	800089e <HAL_GPIO_Init+0x136>
 80008ec:	2502      	movs	r5, #2
 80008ee:	e7d6      	b.n	800089e <HAL_GPIO_Init+0x136>
 80008f0:	2503      	movs	r5, #3
 80008f2:	e7d4      	b.n	800089e <HAL_GPIO_Init+0x136>
 80008f4:	2504      	movs	r5, #4
 80008f6:	e7d2      	b.n	800089e <HAL_GPIO_Init+0x136>
 80008f8:	2505      	movs	r5, #5
 80008fa:	e7d0      	b.n	800089e <HAL_GPIO_Init+0x136>
 80008fc:	40010400 	.word	0x40010400
 8000900:	48000400 	.word	0x48000400
 8000904:	40021000 	.word	0x40021000

08000908 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000908:	b10a      	cbz	r2, 800090e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800090a:	6181      	str	r1, [r0, #24]
 800090c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800090e:	6281      	str	r1, [r0, #40]	; 0x28
 8000910:	4770      	bx	lr
	...

08000914 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000914:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000916:	4b04      	ldr	r3, [pc, #16]	; (8000928 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000918:	6959      	ldr	r1, [r3, #20]
 800091a:	4201      	tst	r1, r0
 800091c:	d002      	beq.n	8000924 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800091e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000920:	f005 fb32 	bl	8005f88 <HAL_GPIO_EXTI_Callback>
 8000924:	bd08      	pop	{r3, pc}
 8000926:	bf00      	nop
 8000928:	40010400 	.word	0x40010400

0800092c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800092c:	6803      	ldr	r3, [r0, #0]
 800092e:	699a      	ldr	r2, [r3, #24]
 8000930:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8000932:	bf44      	itt	mi
 8000934:	2200      	movmi	r2, #0
 8000936:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000938:	699a      	ldr	r2, [r3, #24]
 800093a:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800093c:	bf5e      	ittt	pl
 800093e:	699a      	ldrpl	r2, [r3, #24]
 8000940:	f042 0201 	orrpl.w	r2, r2, #1
 8000944:	619a      	strpl	r2, [r3, #24]
 8000946:	4770      	bx	lr

08000948 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000948:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 800094a:	6805      	ldr	r5, [r0, #0]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 800094c:	9c03      	ldr	r4, [sp, #12]
  tmpreg = hi2c->Instance->CR2;
 800094e:	6868      	ldr	r0, [r5, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8000950:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
 8000954:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8000958:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800095c:	4323      	orrs	r3, r4
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800095e:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8000962:	4319      	orrs	r1, r3
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8000964:	f020 0003 	bic.w	r0, r0, #3
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8000968:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800096c:	4301      	orrs	r1, r0
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 800096e:	6069      	str	r1, [r5, #4]
 8000970:	bd30      	pop	{r4, r5, pc}

08000972 <I2C_WaitOnFlagUntilTimeout>:
{
 8000972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000976:	9f06      	ldr	r7, [sp, #24]
 8000978:	4604      	mov	r4, r0
 800097a:	4688      	mov	r8, r1
 800097c:	4616      	mov	r6, r2
 800097e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000980:	6822      	ldr	r2, [r4, #0]
 8000982:	6993      	ldr	r3, [r2, #24]
 8000984:	ea38 0303 	bics.w	r3, r8, r3
 8000988:	bf0c      	ite	eq
 800098a:	2301      	moveq	r3, #1
 800098c:	2300      	movne	r3, #0
 800098e:	42b3      	cmp	r3, r6
 8000990:	d002      	beq.n	8000998 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8000992:	2000      	movs	r0, #0
}
 8000994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000998:	1c6b      	adds	r3, r5, #1
 800099a:	d0f2      	beq.n	8000982 <I2C_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800099c:	b955      	cbnz	r5, 80009b4 <I2C_WaitOnFlagUntilTimeout+0x42>
        hi2c->State = HAL_I2C_STATE_READY;
 800099e:	2320      	movs	r3, #32
 80009a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80009aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 80009ae:	2003      	movs	r0, #3
 80009b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80009b4:	f7ff fe4a 	bl	800064c <HAL_GetTick>
 80009b8:	1bc0      	subs	r0, r0, r7
 80009ba:	4285      	cmp	r5, r0
 80009bc:	d2e0      	bcs.n	8000980 <I2C_WaitOnFlagUntilTimeout+0xe>
 80009be:	e7ee      	b.n	800099e <I2C_WaitOnFlagUntilTimeout+0x2c>

080009c0 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80009c0:	6803      	ldr	r3, [r0, #0]
{
 80009c2:	b570      	push	{r4, r5, r6, lr}
 80009c4:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80009c6:	6998      	ldr	r0, [r3, #24]
 80009c8:	f010 0010 	ands.w	r0, r0, #16
{
 80009cc:	460d      	mov	r5, r1
 80009ce:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80009d0:	d112      	bne.n	80009f8 <I2C_IsAcknowledgeFailed+0x38>
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 80009d4:	1c69      	adds	r1, r5, #1
 80009d6:	d010      	beq.n	80009fa <I2C_IsAcknowledgeFailed+0x3a>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80009d8:	b94d      	cbnz	r5, 80009ee <I2C_IsAcknowledgeFailed+0x2e>
          hi2c->State = HAL_I2C_STATE_READY;
 80009da:	2320      	movs	r3, #32
 80009dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80009e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 80009ea:	2003      	movs	r0, #3
 80009ec:	bd70      	pop	{r4, r5, r6, pc}
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80009ee:	f7ff fe2d 	bl	800064c <HAL_GetTick>
 80009f2:	1b80      	subs	r0, r0, r6
 80009f4:	4285      	cmp	r5, r0
 80009f6:	d3f0      	bcc.n	80009da <I2C_IsAcknowledgeFailed+0x1a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80009f8:	6823      	ldr	r3, [r4, #0]
 80009fa:	6999      	ldr	r1, [r3, #24]
 80009fc:	068a      	lsls	r2, r1, #26
 80009fe:	d5e9      	bpl.n	80009d4 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000a00:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000a02:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000a04:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000a06:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000a08:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000a0a:	f7ff ff8f 	bl	800092c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000a0e:	6822      	ldr	r2, [r4, #0]
 8000a10:	6853      	ldr	r3, [r2, #4]
 8000a12:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000a16:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000a1a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000a1e:	f023 0301 	bic.w	r3, r3, #1
 8000a22:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000a24:	2304      	movs	r3, #4
 8000a26:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a28:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000a2a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000a2e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_ERROR;
 8000a36:	2001      	movs	r0, #1
}
 8000a38:	bd70      	pop	{r4, r5, r6, pc}

08000a3a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000a3a:	b570      	push	{r4, r5, r6, lr}
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	460d      	mov	r5, r1
 8000a40:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000a42:	6823      	ldr	r3, [r4, #0]
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	079b      	lsls	r3, r3, #30
 8000a48:	d501      	bpl.n	8000a4e <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000a4e:	4632      	mov	r2, r6
 8000a50:	4629      	mov	r1, r5
 8000a52:	4620      	mov	r0, r4
 8000a54:	f7ff ffb4 	bl	80009c0 <I2C_IsAcknowledgeFailed>
 8000a58:	b9b0      	cbnz	r0, 8000a88 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8000a5a:	1c6a      	adds	r2, r5, #1
 8000a5c:	d0f1      	beq.n	8000a42 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000a5e:	b96d      	cbnz	r5, 8000a7c <I2C_WaitOnTXISFlagUntilTimeout+0x42>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000a60:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a62:	f043 0320 	orr.w	r3, r3, #32
 8000a66:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000a68:	2320      	movs	r3, #32
 8000a6a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000a74:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000a78:	2003      	movs	r0, #3
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000a7c:	f7ff fde6 	bl	800064c <HAL_GetTick>
 8000a80:	1b80      	subs	r0, r0, r6
 8000a82:	4285      	cmp	r5, r0
 8000a84:	d2dd      	bcs.n	8000a42 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 8000a86:	e7eb      	b.n	8000a60 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
      return HAL_ERROR;
 8000a88:	2001      	movs	r0, #1
}
 8000a8a:	bd70      	pop	{r4, r5, r6, pc}

08000a8c <I2C_RequestMemoryWrite>:
{
 8000a8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000a8e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000a90:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000a92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 8000a96:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000a98:	9300      	str	r3, [sp, #0]
{
 8000a9a:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000a9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aa0:	b2fa      	uxtb	r2, r7
 8000aa2:	f7ff ff51 	bl	8000948 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000aa6:	4632      	mov	r2, r6
 8000aa8:	9908      	ldr	r1, [sp, #32]
 8000aaa:	4620      	mov	r0, r4
 8000aac:	f7ff ffc5 	bl	8000a3a <I2C_WaitOnTXISFlagUntilTimeout>
 8000ab0:	b128      	cbz	r0, 8000abe <I2C_RequestMemoryWrite+0x32>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ab2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ab4:	2b04      	cmp	r3, #4
 8000ab6:	d110      	bne.n	8000ada <I2C_RequestMemoryWrite+0x4e>
      return HAL_ERROR;
 8000ab8:	2001      	movs	r0, #1
}
 8000aba:	b003      	add	sp, #12
 8000abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000abe:	2f01      	cmp	r7, #1
 8000ac0:	6823      	ldr	r3, [r4, #0]
 8000ac2:	d10c      	bne.n	8000ade <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000ac4:	b2ed      	uxtb	r5, r5
 8000ac6:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8000ac8:	9b08      	ldr	r3, [sp, #32]
 8000aca:	9600      	str	r6, [sp, #0]
 8000acc:	2200      	movs	r2, #0
 8000ace:	2180      	movs	r1, #128	; 0x80
 8000ad0:	4620      	mov	r0, r4
 8000ad2:	f7ff ff4e 	bl	8000972 <I2C_WaitOnFlagUntilTimeout>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	d0ef      	beq.n	8000aba <I2C_RequestMemoryWrite+0x2e>
      return HAL_TIMEOUT;
 8000ada:	2003      	movs	r0, #3
 8000adc:	e7ed      	b.n	8000aba <I2C_RequestMemoryWrite+0x2e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000ade:	0a2a      	lsrs	r2, r5, #8
 8000ae0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000ae2:	9908      	ldr	r1, [sp, #32]
 8000ae4:	4632      	mov	r2, r6
 8000ae6:	4620      	mov	r0, r4
 8000ae8:	f7ff ffa7 	bl	8000a3a <I2C_WaitOnTXISFlagUntilTimeout>
 8000aec:	2800      	cmp	r0, #0
 8000aee:	d1e0      	bne.n	8000ab2 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000af0:	6823      	ldr	r3, [r4, #0]
 8000af2:	e7e7      	b.n	8000ac4 <I2C_RequestMemoryWrite+0x38>

08000af4 <I2C_RequestMemoryRead>:
{
 8000af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000af6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000af8:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000afa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 8000afe:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000b00:	9300      	str	r3, [sp, #0]
{
 8000b02:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000b04:	2300      	movs	r3, #0
 8000b06:	b2fa      	uxtb	r2, r7
 8000b08:	f7ff ff1e 	bl	8000948 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b0c:	4632      	mov	r2, r6
 8000b0e:	9908      	ldr	r1, [sp, #32]
 8000b10:	4620      	mov	r0, r4
 8000b12:	f7ff ff92 	bl	8000a3a <I2C_WaitOnTXISFlagUntilTimeout>
 8000b16:	b128      	cbz	r0, 8000b24 <I2C_RequestMemoryRead+0x30>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b18:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	d110      	bne.n	8000b40 <I2C_RequestMemoryRead+0x4c>
      return HAL_ERROR;
 8000b1e:	2001      	movs	r0, #1
}
 8000b20:	b003      	add	sp, #12
 8000b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000b24:	2f01      	cmp	r7, #1
 8000b26:	6823      	ldr	r3, [r4, #0]
 8000b28:	d10c      	bne.n	8000b44 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000b2a:	b2ed      	uxtb	r5, r5
 8000b2c:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8000b2e:	9b08      	ldr	r3, [sp, #32]
 8000b30:	9600      	str	r6, [sp, #0]
 8000b32:	2200      	movs	r2, #0
 8000b34:	2140      	movs	r1, #64	; 0x40
 8000b36:	4620      	mov	r0, r4
 8000b38:	f7ff ff1b 	bl	8000972 <I2C_WaitOnFlagUntilTimeout>
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	d0ef      	beq.n	8000b20 <I2C_RequestMemoryRead+0x2c>
      return HAL_TIMEOUT;
 8000b40:	2003      	movs	r0, #3
 8000b42:	e7ed      	b.n	8000b20 <I2C_RequestMemoryRead+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000b44:	0a2a      	lsrs	r2, r5, #8
 8000b46:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b48:	9908      	ldr	r1, [sp, #32]
 8000b4a:	4632      	mov	r2, r6
 8000b4c:	4620      	mov	r0, r4
 8000b4e:	f7ff ff74 	bl	8000a3a <I2C_WaitOnTXISFlagUntilTimeout>
 8000b52:	2800      	cmp	r0, #0
 8000b54:	d1e0      	bne.n	8000b18 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000b56:	6823      	ldr	r3, [r4, #0]
 8000b58:	e7e7      	b.n	8000b2a <I2C_RequestMemoryRead+0x36>

08000b5a <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000b5a:	b570      	push	{r4, r5, r6, lr}
 8000b5c:	4604      	mov	r4, r0
 8000b5e:	460d      	mov	r5, r1
 8000b60:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000b62:	6823      	ldr	r3, [r4, #0]
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	075b      	lsls	r3, r3, #29
 8000b68:	d501      	bpl.n	8000b6e <I2C_WaitOnRXNEFlagUntilTimeout+0x14>
  return HAL_OK;
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b6e:	4632      	mov	r2, r6
 8000b70:	4629      	mov	r1, r5
 8000b72:	4620      	mov	r0, r4
 8000b74:	f7ff ff24 	bl	80009c0 <I2C_IsAcknowledgeFailed>
 8000b78:	b9b0      	cbnz	r0, 8000ba8 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000b7a:	6823      	ldr	r3, [r4, #0]
 8000b7c:	699a      	ldr	r2, [r3, #24]
 8000b7e:	0692      	lsls	r2, r2, #26
 8000b80:	d514      	bpl.n	8000bac <I2C_WaitOnRXNEFlagUntilTimeout+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b82:	2120      	movs	r1, #32
 8000b84:	61d9      	str	r1, [r3, #28]
      I2C_RESET_CR2(hi2c);
 8000b86:	685a      	ldr	r2, [r3, #4]
 8000b88:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000b8c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000b90:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000b94:	f022 0201 	bic.w	r2, r2, #1
 8000b98:	605a      	str	r2, [r3, #4]
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b9a:	6460      	str	r0, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000b9c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 8000ba0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ba4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      return HAL_ERROR;
 8000ba8:	2001      	movs	r0, #1
}
 8000baa:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000bac:	b95d      	cbnz	r5, 8000bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000bae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000bb0:	f043 0320 	orr.w	r3, r3, #32
 8000bb4:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000bb6:	2320      	movs	r3, #32
 8000bb8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000bc2:	2003      	movs	r0, #3
 8000bc4:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000bc6:	f7ff fd41 	bl	800064c <HAL_GetTick>
 8000bca:	1b80      	subs	r0, r0, r6
 8000bcc:	4285      	cmp	r5, r0
 8000bce:	d2c8      	bcs.n	8000b62 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8000bd0:	e7ed      	b.n	8000bae <I2C_WaitOnRXNEFlagUntilTimeout+0x54>

08000bd2 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000bd2:	b570      	push	{r4, r5, r6, lr}
 8000bd4:	4604      	mov	r4, r0
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000bda:	6823      	ldr	r3, [r4, #0]
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	069b      	lsls	r3, r3, #26
 8000be0:	d501      	bpl.n	8000be6 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8000be2:	2000      	movs	r0, #0
 8000be4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000be6:	4632      	mov	r2, r6
 8000be8:	4629      	mov	r1, r5
 8000bea:	4620      	mov	r0, r4
 8000bec:	f7ff fee8 	bl	80009c0 <I2C_IsAcknowledgeFailed>
 8000bf0:	b9a0      	cbnz	r0, 8000c1c <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000bf2:	b96d      	cbnz	r5, 8000c10 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000bf4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000bf6:	f043 0320 	orr.w	r3, r3, #32
 8000bfa:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000bfc:	2320      	movs	r3, #32
 8000bfe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000c08:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000c10:	f7ff fd1c 	bl	800064c <HAL_GetTick>
 8000c14:	1b80      	subs	r0, r0, r6
 8000c16:	4285      	cmp	r5, r0
 8000c18:	d2df      	bcs.n	8000bda <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 8000c1a:	e7eb      	b.n	8000bf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000c1c:	2001      	movs	r0, #1
}
 8000c1e:	bd70      	pop	{r4, r5, r6, pc}

08000c20 <HAL_I2C_Init>:
{
 8000c20:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8000c22:	4604      	mov	r4, r0
 8000c24:	2800      	cmp	r0, #0
 8000c26:	d04a      	beq.n	8000cbe <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c28:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000c2c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c30:	b91b      	cbnz	r3, 8000c3a <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000c32:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000c36:	f005 fd51 	bl	80066dc <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c3a:	2324      	movs	r3, #36	; 0x24
 8000c3c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000c40:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c42:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	f022 0201 	bic.w	r2, r2, #1
 8000c4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000c4c:	6862      	ldr	r2, [r4, #4]
 8000c4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c52:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c54:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c56:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c60:	d124      	bne.n	8000cac <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c66:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c68:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000c6a:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c6c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000c70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c74:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000c76:	68da      	ldr	r2, [r3, #12]
 8000c78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c7c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000c7e:	6922      	ldr	r2, [r4, #16]
 8000c80:	430a      	orrs	r2, r1
 8000c82:	69a1      	ldr	r1, [r4, #24]
 8000c84:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000c88:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c8a:	6a21      	ldr	r1, [r4, #32]
 8000c8c:	69e2      	ldr	r2, [r4, #28]
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	f042 0201 	orr.w	r2, r2, #1
 8000c98:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c9a:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000c9c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c9e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ca0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ca4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ca6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000caa:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000cac:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000cb0:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000cb2:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000cb4:	bf04      	itt	eq
 8000cb6:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000cba:	605a      	streq	r2, [r3, #4]
 8000cbc:	e7d4      	b.n	8000c68 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000cbe:	2001      	movs	r0, #1
}
 8000cc0:	bd10      	pop	{r4, pc}

08000cc2 <HAL_I2C_Master_Transmit>:
{
 8000cc2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000cc6:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cc8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000ccc:	2b20      	cmp	r3, #32
{
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460e      	mov	r6, r1
 8000cd2:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cd4:	f040 808c 	bne.w	8000df0 <HAL_I2C_Master_Transmit+0x12e>
    __HAL_LOCK(hi2c);
 8000cd8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	f000 8087 	beq.w	8000df0 <HAL_I2C_Master_Transmit+0x12e>
 8000ce2:	2701      	movs	r7, #1
 8000ce4:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000ce8:	f7ff fcb0 	bl	800064c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000cec:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8000cee:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000cf0:	9000      	str	r0, [sp, #0]
 8000cf2:	463a      	mov	r2, r7
 8000cf4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	f7ff fe3a 	bl	8000972 <I2C_WaitOnFlagUntilTimeout>
 8000cfe:	2800      	cmp	r0, #0
 8000d00:	d14b      	bne.n	8000d9a <HAL_I2C_Master_Transmit+0xd8>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000d02:	2321      	movs	r3, #33	; 0x21
 8000d04:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000d08:	2310      	movs	r3, #16
 8000d0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d0e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8000d10:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8000d16:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8000d1e:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000d20:	d927      	bls.n	8000d72 <HAL_I2C_Master_Transmit+0xb0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d22:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000d24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000d28:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000d2a:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000d2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000d30:	4631      	mov	r1, r6
 8000d32:	4620      	mov	r0, r4
 8000d34:	f7ff fe08 	bl	8000948 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000d38:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d3a:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8000d3c:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d3e:	462a      	mov	r2, r5
 8000d40:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8000d42:	bb03      	cbnz	r3, 8000d86 <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d44:	f7ff ff45 	bl	8000bd2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000d48:	bb00      	cbnz	r0, 8000d8c <HAL_I2C_Master_Transmit+0xca>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000d4a:	6823      	ldr	r3, [r4, #0]
 8000d4c:	2120      	movs	r1, #32
 8000d4e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000d56:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000d5a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000d5e:	f022 0201 	bic.w	r2, r2, #1
 8000d62:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000d64:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000d68:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000d6c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000d70:	e010      	b.n	8000d94 <HAL_I2C_Master_Transmit+0xd2>
      hi2c->XferSize = hi2c->XferCount;
 8000d72:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000d74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
      hi2c->XferSize = hi2c->XferCount;
 8000d78:	b292      	uxth	r2, r2
 8000d7a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000d7c:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000d7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d82:	b2d2      	uxtb	r2, r2
 8000d84:	e7d4      	b.n	8000d30 <HAL_I2C_Master_Transmit+0x6e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000d86:	f7ff fe58 	bl	8000a3a <I2C_WaitOnTXISFlagUntilTimeout>
 8000d8a:	b140      	cbz	r0, 8000d9e <HAL_I2C_Master_Transmit+0xdc>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000d8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	d103      	bne.n	8000d9a <HAL_I2C_Master_Transmit+0xd8>
          return HAL_ERROR;
 8000d92:	2001      	movs	r0, #1
}
 8000d94:	b003      	add	sp, #12
 8000d96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return HAL_TIMEOUT;
 8000d9a:	2003      	movs	r0, #3
 8000d9c:	e7fa      	b.n	8000d94 <HAL_I2C_Master_Transmit+0xd2>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000d9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000da0:	6822      	ldr	r2, [r4, #0]
 8000da2:	1c59      	adds	r1, r3, #1
 8000da4:	6261      	str	r1, [r4, #36]	; 0x24
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8000daa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000dac:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000dae:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8000db0:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8000db2:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000db4:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8000db6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000db8:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000dba:	2a00      	cmp	r2, #0
 8000dbc:	d1bc      	bne.n	8000d38 <HAL_I2C_Master_Transmit+0x76>
 8000dbe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0b8      	beq.n	8000d38 <HAL_I2C_Master_Transmit+0x76>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000dc6:	9500      	str	r5, [sp, #0]
 8000dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000dca:	2180      	movs	r1, #128	; 0x80
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f7ff fdd0 	bl	8000972 <I2C_WaitOnFlagUntilTimeout>
 8000dd2:	2800      	cmp	r0, #0
 8000dd4:	d1e1      	bne.n	8000d9a <HAL_I2C_Master_Transmit+0xd8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000dd6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	2bff      	cmp	r3, #255	; 0xff
 8000ddc:	d903      	bls.n	8000de6 <HAL_I2C_Master_Transmit+0x124>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000dde:	22ff      	movs	r2, #255	; 0xff
 8000de0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000de2:	9000      	str	r0, [sp, #0]
 8000de4:	e7a2      	b.n	8000d2c <HAL_I2C_Master_Transmit+0x6a>
          hi2c->XferSize = hi2c->XferCount;
 8000de6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000de8:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000dea:	b292      	uxth	r2, r2
 8000dec:	8522      	strh	r2, [r4, #40]	; 0x28
 8000dee:	e7c6      	b.n	8000d7e <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 8000df0:	2002      	movs	r0, #2
 8000df2:	e7cf      	b.n	8000d94 <HAL_I2C_Master_Transmit+0xd2>

08000df4 <HAL_I2C_Master_Receive>:
{
 8000df4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000df8:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dfa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000dfe:	2b20      	cmp	r3, #32
{
 8000e00:	4604      	mov	r4, r0
 8000e02:	460e      	mov	r6, r1
 8000e04:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e06:	f040 808c 	bne.w	8000f22 <HAL_I2C_Master_Receive+0x12e>
    __HAL_LOCK(hi2c);
 8000e0a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	f000 8087 	beq.w	8000f22 <HAL_I2C_Master_Receive+0x12e>
 8000e14:	2701      	movs	r7, #1
 8000e16:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000e1a:	f7ff fc17 	bl	800064c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e1e:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8000e20:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e22:	9000      	str	r0, [sp, #0]
 8000e24:	463a      	mov	r2, r7
 8000e26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	f7ff fda1 	bl	8000972 <I2C_WaitOnFlagUntilTimeout>
 8000e30:	2800      	cmp	r0, #0
 8000e32:	d14b      	bne.n	8000ecc <HAL_I2C_Master_Receive+0xd8>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000e34:	2322      	movs	r3, #34	; 0x22
 8000e36:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000e3a:	2310      	movs	r3, #16
 8000e3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e40:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8000e42:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e46:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8000e48:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8000e50:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e52:	d927      	bls.n	8000ea4 <HAL_I2C_Master_Receive+0xb0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e54:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000e56:	f44f 5310 	mov.w	r3, #9216	; 0x2400
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e5a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000e5c:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000e5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e62:	4631      	mov	r1, r6
 8000e64:	4620      	mov	r0, r4
 8000e66:	f7ff fd6f 	bl	8000948 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000e6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e6c:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8000e6e:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e70:	462a      	mov	r2, r5
 8000e72:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8000e74:	bb03      	cbnz	r3, 8000eb8 <HAL_I2C_Master_Receive+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e76:	f7ff feac 	bl	8000bd2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000e7a:	bb00      	cbnz	r0, 8000ebe <HAL_I2C_Master_Receive+0xca>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e7c:	6823      	ldr	r3, [r4, #0]
 8000e7e:	2120      	movs	r1, #32
 8000e80:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000e88:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000e8c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000e90:	f022 0201 	bic.w	r2, r2, #1
 8000e94:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000e96:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000e9a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000e9e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000ea2:	e010      	b.n	8000ec6 <HAL_I2C_Master_Receive+0xd2>
      hi2c->XferSize = hi2c->XferCount;
 8000ea4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000ea6:	f44f 5310 	mov.w	r3, #9216	; 0x2400
      hi2c->XferSize = hi2c->XferCount;
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000eae:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000eb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	e7d4      	b.n	8000e62 <HAL_I2C_Master_Receive+0x6e>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000eb8:	f7ff fe4f 	bl	8000b5a <I2C_WaitOnRXNEFlagUntilTimeout>
 8000ebc:	b140      	cbz	r0, 8000ed0 <HAL_I2C_Master_Receive+0xdc>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ebe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	d103      	bne.n	8000ecc <HAL_I2C_Master_Receive+0xd8>
          return HAL_ERROR;
 8000ec4:	2001      	movs	r0, #1
}
 8000ec6:	b003      	add	sp, #12
 8000ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return HAL_TIMEOUT;
 8000ecc:	2003      	movs	r0, #3
 8000ece:	e7fa      	b.n	8000ec6 <HAL_I2C_Master_Receive+0xd2>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8000ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ed2:	1c5a      	adds	r2, r3, #1
 8000ed4:	6262      	str	r2, [r4, #36]	; 0x24
 8000ed6:	6822      	ldr	r2, [r4, #0]
 8000ed8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000eda:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8000edc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000ede:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000ee0:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8000ee2:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8000ee4:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8000ee6:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000ee8:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000eea:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000eec:	2a00      	cmp	r2, #0
 8000eee:	d1bc      	bne.n	8000e6a <HAL_I2C_Master_Receive+0x76>
 8000ef0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0b8      	beq.n	8000e6a <HAL_I2C_Master_Receive+0x76>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000ef8:	9500      	str	r5, [sp, #0]
 8000efa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000efc:	2180      	movs	r1, #128	; 0x80
 8000efe:	4620      	mov	r0, r4
 8000f00:	f7ff fd37 	bl	8000972 <I2C_WaitOnFlagUntilTimeout>
 8000f04:	2800      	cmp	r0, #0
 8000f06:	d1e1      	bne.n	8000ecc <HAL_I2C_Master_Receive+0xd8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	2bff      	cmp	r3, #255	; 0xff
 8000f0e:	d903      	bls.n	8000f18 <HAL_I2C_Master_Receive+0x124>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f10:	22ff      	movs	r2, #255	; 0xff
 8000f12:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000f14:	9000      	str	r0, [sp, #0]
 8000f16:	e7a2      	b.n	8000e5e <HAL_I2C_Master_Receive+0x6a>
          hi2c->XferSize = hi2c->XferCount;
 8000f18:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000f1a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000f1c:	b292      	uxth	r2, r2
 8000f1e:	8522      	strh	r2, [r4, #40]	; 0x28
 8000f20:	e7c6      	b.n	8000eb0 <HAL_I2C_Master_Receive+0xbc>
    return HAL_BUSY;
 8000f22:	2002      	movs	r0, #2
 8000f24:	e7cf      	b.n	8000ec6 <HAL_I2C_Master_Receive+0xd2>

08000f26 <HAL_I2C_Mem_Write>:
{
 8000f26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f2a:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f2c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8000f30:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f32:	2b20      	cmp	r3, #32
{
 8000f34:	4604      	mov	r4, r0
 8000f36:	460f      	mov	r7, r1
 8000f38:	9203      	str	r2, [sp, #12]
 8000f3a:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8000f3e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f42:	f040 80a6 	bne.w	8001092 <HAL_I2C_Mem_Write+0x16c>
    if ((pData == NULL) || (Size == 0U))
 8000f46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000f48:	b91b      	cbnz	r3, 8000f52 <HAL_I2C_Mem_Write+0x2c>
      return  HAL_ERROR;
 8000f4a:	2001      	movs	r0, #1
}
 8000f4c:	b005      	add	sp, #20
 8000f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 8000f52:	f1ba 0f00 	cmp.w	sl, #0
 8000f56:	d0f8      	beq.n	8000f4a <HAL_I2C_Mem_Write+0x24>
    __HAL_LOCK(hi2c);
 8000f58:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	f000 8098 	beq.w	8001092 <HAL_I2C_Mem_Write+0x16c>
 8000f62:	2501      	movs	r5, #1
 8000f64:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000f68:	f7ff fb70 	bl	800064c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f6c:	2319      	movs	r3, #25
 8000f6e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8000f70:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f72:	462a      	mov	r2, r5
 8000f74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f78:	4620      	mov	r0, r4
 8000f7a:	f7ff fcfa 	bl	8000972 <I2C_WaitOnFlagUntilTimeout>
 8000f7e:	4680      	mov	r8, r0
 8000f80:	b9d0      	cbnz	r0, 8000fb8 <HAL_I2C_Mem_Write+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000f82:	2321      	movs	r3, #33	; 0x21
 8000f84:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f88:	2340      	movs	r3, #64	; 0x40
 8000f8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8000f8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f90:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000f92:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8000f94:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000f96:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000f9a:	9601      	str	r6, [sp, #4]
 8000f9c:	f8cd 9000 	str.w	r9, [sp]
 8000fa0:	465b      	mov	r3, fp
 8000fa2:	9a03      	ldr	r2, [sp, #12]
 8000fa4:	4639      	mov	r1, r7
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	f7ff fd70 	bl	8000a8c <I2C_RequestMemoryWrite>
 8000fac:	b130      	cbz	r0, 8000fbc <HAL_I2C_Mem_Write+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fae:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8000fb0:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	d0c8      	beq.n	8000f4a <HAL_I2C_Mem_Write+0x24>
          return HAL_TIMEOUT;
 8000fb8:	2003      	movs	r0, #3
 8000fba:	e7c7      	b.n	8000f4c <HAL_I2C_Mem_Write+0x26>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fbc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	2bff      	cmp	r3, #255	; 0xff
 8000fc2:	d910      	bls.n	8000fe6 <HAL_I2C_Mem_Write+0xc0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fc4:	22ff      	movs	r2, #255	; 0xff
 8000fc6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000fc8:	9000      	str	r0, [sp, #0]
 8000fca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000fce:	4639      	mov	r1, r7
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f7ff fcb9 	bl	8000948 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fd6:	4632      	mov	r2, r6
 8000fd8:	4649      	mov	r1, r9
 8000fda:	4620      	mov	r0, r4
 8000fdc:	f7ff fd2d 	bl	8000a3a <I2C_WaitOnTXISFlagUntilTimeout>
 8000fe0:	b148      	cbz	r0, 8000ff6 <HAL_I2C_Mem_Write+0xd0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fe2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fe4:	e7e6      	b.n	8000fb4 <HAL_I2C_Mem_Write+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 8000fe6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000fe8:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8000fea:	b292      	uxth	r2, r2
 8000fec:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	e7eb      	b.n	8000fce <HAL_I2C_Mem_Write+0xa8>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ff8:	6822      	ldr	r2, [r4, #0]
 8000ffa:	1c59      	adds	r1, r3, #1
 8000ffc:	6261      	str	r1, [r4, #36]	; 0x24
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8001002:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001004:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001006:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8001008:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800100a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800100c:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800100e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001010:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001012:	b9ba      	cbnz	r2, 8001044 <HAL_I2C_Mem_Write+0x11e>
 8001014:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001016:	b29b      	uxth	r3, r3
 8001018:	b1a3      	cbz	r3, 8001044 <HAL_I2C_Mem_Write+0x11e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800101a:	9600      	str	r6, [sp, #0]
 800101c:	464b      	mov	r3, r9
 800101e:	2180      	movs	r1, #128	; 0x80
 8001020:	4620      	mov	r0, r4
 8001022:	f7ff fca6 	bl	8000972 <I2C_WaitOnFlagUntilTimeout>
 8001026:	2800      	cmp	r0, #0
 8001028:	d1c6      	bne.n	8000fb8 <HAL_I2C_Mem_Write+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800102a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800102c:	b29b      	uxth	r3, r3
 800102e:	2bff      	cmp	r3, #255	; 0xff
 8001030:	d927      	bls.n	8001082 <HAL_I2C_Mem_Write+0x15c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001032:	22ff      	movs	r2, #255	; 0xff
 8001034:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001036:	9000      	str	r0, [sp, #0]
 8001038:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800103c:	4639      	mov	r1, r7
 800103e:	4620      	mov	r0, r4
 8001040:	f7ff fc82 	bl	8000948 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8001044:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001046:	b29b      	uxth	r3, r3
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1c4      	bne.n	8000fd6 <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800104c:	4632      	mov	r2, r6
 800104e:	4649      	mov	r1, r9
 8001050:	4620      	mov	r0, r4
 8001052:	f7ff fdbe 	bl	8000bd2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001056:	2800      	cmp	r0, #0
 8001058:	d1c3      	bne.n	8000fe2 <HAL_I2C_Mem_Write+0xbc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800105a:	6823      	ldr	r3, [r4, #0]
 800105c:	2120      	movs	r1, #32
 800105e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001066:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800106a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800106e:	f022 0201 	bic.w	r2, r2, #1
 8001072:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001074:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001078:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800107c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001080:	e764      	b.n	8000f4c <HAL_I2C_Mem_Write+0x26>
          hi2c->XferSize = hi2c->XferCount;
 8001082:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001084:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001086:	b292      	uxth	r2, r2
 8001088:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800108a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	e7d4      	b.n	800103c <HAL_I2C_Mem_Write+0x116>
    return HAL_BUSY;
 8001092:	2002      	movs	r0, #2
 8001094:	e75a      	b.n	8000f4c <HAL_I2C_Mem_Write+0x26>

08001096 <HAL_I2C_Mem_Read>:
{
 8001096:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800109a:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800109c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80010a0:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 80010a2:	2b20      	cmp	r3, #32
{
 80010a4:	4604      	mov	r4, r0
 80010a6:	460f      	mov	r7, r1
 80010a8:	9203      	str	r2, [sp, #12]
 80010aa:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80010ae:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80010b2:	f040 80ac 	bne.w	800120e <HAL_I2C_Mem_Read+0x178>
    if ((pData == NULL) || (Size == 0U))
 80010b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80010b8:	b91b      	cbnz	r3, 80010c2 <HAL_I2C_Mem_Read+0x2c>
      return  HAL_ERROR;
 80010ba:	2001      	movs	r0, #1
}
 80010bc:	b005      	add	sp, #20
 80010be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 80010c2:	f1ba 0f00 	cmp.w	sl, #0
 80010c6:	d0f8      	beq.n	80010ba <HAL_I2C_Mem_Read+0x24>
    __HAL_LOCK(hi2c);
 80010c8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	f000 809e 	beq.w	800120e <HAL_I2C_Mem_Read+0x178>
 80010d2:	2501      	movs	r5, #1
 80010d4:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80010d8:	f7ff fab8 	bl	800064c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010dc:	2319      	movs	r3, #25
 80010de:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80010e0:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010e2:	462a      	mov	r2, r5
 80010e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010e8:	4620      	mov	r0, r4
 80010ea:	f7ff fc42 	bl	8000972 <I2C_WaitOnFlagUntilTimeout>
 80010ee:	4680      	mov	r8, r0
 80010f0:	b9d0      	cbnz	r0, 8001128 <HAL_I2C_Mem_Read+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80010f2:	2322      	movs	r3, #34	; 0x22
 80010f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80010f8:	2340      	movs	r3, #64	; 0x40
 80010fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80010fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001100:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001102:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8001104:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001106:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800110a:	9601      	str	r6, [sp, #4]
 800110c:	f8cd 9000 	str.w	r9, [sp]
 8001110:	465b      	mov	r3, fp
 8001112:	9a03      	ldr	r2, [sp, #12]
 8001114:	4639      	mov	r1, r7
 8001116:	4620      	mov	r0, r4
 8001118:	f7ff fcec 	bl	8000af4 <I2C_RequestMemoryRead>
 800111c:	b130      	cbz	r0, 800112c <HAL_I2C_Mem_Read+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800111e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8001120:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001124:	2b04      	cmp	r3, #4
 8001126:	d0c8      	beq.n	80010ba <HAL_I2C_Mem_Read+0x24>
        return HAL_TIMEOUT;
 8001128:	2003      	movs	r0, #3
 800112a:	e7c7      	b.n	80010bc <HAL_I2C_Mem_Read+0x26>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800112c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800112e:	b29b      	uxth	r3, r3
 8001130:	2bff      	cmp	r3, #255	; 0xff
 8001132:	d946      	bls.n	80011c2 <HAL_I2C_Mem_Read+0x12c>
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001134:	f44f 5310 	mov.w	r3, #9216	; 0x2400
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001138:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800113a:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800113c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800113e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001142:	4639      	mov	r1, r7
 8001144:	4620      	mov	r0, r4
 8001146:	f7ff fbff 	bl	8000948 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800114a:	9600      	str	r6, [sp, #0]
 800114c:	464b      	mov	r3, r9
 800114e:	2200      	movs	r2, #0
 8001150:	2104      	movs	r1, #4
 8001152:	4620      	mov	r0, r4
 8001154:	f7ff fc0d 	bl	8000972 <I2C_WaitOnFlagUntilTimeout>
 8001158:	2800      	cmp	r0, #0
 800115a:	d1e5      	bne.n	8001128 <HAL_I2C_Mem_Read+0x92>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800115c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	6262      	str	r2, [r4, #36]	; 0x24
 8001162:	6822      	ldr	r2, [r4, #0]
 8001164:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001166:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8001168:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800116a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800116c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800116e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8001170:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8001172:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001174:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001176:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001178:	b9ba      	cbnz	r2, 80011aa <HAL_I2C_Mem_Read+0x114>
 800117a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800117c:	b29b      	uxth	r3, r3
 800117e:	b1a3      	cbz	r3, 80011aa <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001180:	9600      	str	r6, [sp, #0]
 8001182:	464b      	mov	r3, r9
 8001184:	2180      	movs	r1, #128	; 0x80
 8001186:	4620      	mov	r0, r4
 8001188:	f7ff fbf3 	bl	8000972 <I2C_WaitOnFlagUntilTimeout>
 800118c:	2800      	cmp	r0, #0
 800118e:	d1cb      	bne.n	8001128 <HAL_I2C_Mem_Read+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001190:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001192:	b29b      	uxth	r3, r3
 8001194:	2bff      	cmp	r3, #255	; 0xff
 8001196:	d91e      	bls.n	80011d6 <HAL_I2C_Mem_Read+0x140>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001198:	22ff      	movs	r2, #255	; 0xff
 800119a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800119c:	9000      	str	r0, [sp, #0]
 800119e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011a2:	4639      	mov	r1, r7
 80011a4:	4620      	mov	r0, r4
 80011a6:	f7ff fbcf 	bl	8000948 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80011aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1cb      	bne.n	800114a <HAL_I2C_Mem_Read+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011b2:	4632      	mov	r2, r6
 80011b4:	4649      	mov	r1, r9
 80011b6:	4620      	mov	r0, r4
 80011b8:	f7ff fd0b 	bl	8000bd2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80011bc:	b198      	cbz	r0, 80011e6 <HAL_I2C_Mem_Read+0x150>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011c0:	e7b0      	b.n	8001124 <HAL_I2C_Mem_Read+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 80011c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80011c4:	f44f 5310 	mov.w	r3, #9216	; 0x2400
      hi2c->XferSize = hi2c->XferCount;
 80011c8:	b292      	uxth	r2, r2
 80011ca:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011d4:	e7b5      	b.n	8001142 <HAL_I2C_Mem_Read+0xac>
          hi2c->XferSize = hi2c->XferCount;
 80011d6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011d8:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80011da:	b292      	uxth	r2, r2
 80011dc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	e7dd      	b.n	80011a2 <HAL_I2C_Mem_Read+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	2120      	movs	r1, #32
 80011ea:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80011f2:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80011f6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80011fa:	f022 0201 	bic.w	r2, r2, #1
 80011fe:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001200:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001204:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001208:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800120c:	e756      	b.n	80010bc <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 800120e:	2002      	movs	r0, #2
 8001210:	e754      	b.n	80010bc <HAL_I2C_Mem_Read+0x26>

08001212 <HAL_I2C_IsDeviceReady>:
{
 8001212:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001216:	461d      	mov	r5, r3
  __IO uint32_t I2C_Trials = 0U;
 8001218:	2300      	movs	r3, #0
 800121a:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800121c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001220:	2b20      	cmp	r3, #32
{
 8001222:	4604      	mov	r4, r0
 8001224:	4690      	mov	r8, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001226:	d17c      	bne.n	8001322 <HAL_I2C_IsDeviceReady+0x110>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001228:	6803      	ldr	r3, [r0, #0]
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 8001230:	d177      	bne.n	8001322 <HAL_I2C_IsDeviceReady+0x110>
    __HAL_LOCK(hi2c);
 8001232:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8001236:	2a01      	cmp	r2, #1
 8001238:	d073      	beq.n	8001322 <HAL_I2C_IsDeviceReady+0x110>
 800123a:	2201      	movs	r2, #1
 800123c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 8001240:	f3c1 0609 	ubfx	r6, r1, #0, #10
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001244:	2224      	movs	r2, #36	; 0x24
 8001246:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800124a:	f446 5920 	orr.w	r9, r6, #10240	; 0x2800
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800124e:	6443      	str	r3, [r0, #68]	; 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001250:	68e3      	ldr	r3, [r4, #12]
 8001252:	6822      	ldr	r2, [r4, #0]
 8001254:	2b01      	cmp	r3, #1
 8001256:	bf06      	itte	eq
 8001258:	f046 7300 	orreq.w	r3, r6, #33554432	; 0x2000000
 800125c:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
 8001260:	464b      	movne	r3, r9
 8001262:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8001264:	f7ff f9f2 	bl	800064c <HAL_GetTick>
 8001268:	4607      	mov	r7, r0
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 800126a:	6823      	ldr	r3, [r4, #0]
 800126c:	699a      	ldr	r2, [r3, #24]
 800126e:	0691      	lsls	r1, r2, #26
 8001270:	d512      	bpl.n	8001298 <HAL_I2C_IsDeviceReady+0x86>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001272:	699a      	ldr	r2, [r3, #24]
 8001274:	f012 0210 	ands.w	r2, r2, #16
 8001278:	d12a      	bne.n	80012d0 <HAL_I2C_IsDeviceReady+0xbe>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800127a:	9700      	str	r7, [sp, #0]
 800127c:	462b      	mov	r3, r5
 800127e:	2120      	movs	r1, #32
 8001280:	4620      	mov	r0, r4
 8001282:	f7ff fb76 	bl	8000972 <I2C_WaitOnFlagUntilTimeout>
 8001286:	b1c8      	cbz	r0, 80012bc <HAL_I2C_IsDeviceReady+0xaa>
    return HAL_TIMEOUT;
 8001288:	2003      	movs	r0, #3
 800128a:	e01e      	b.n	80012ca <HAL_I2C_IsDeviceReady+0xb8>
          if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800128c:	f7ff f9de 	bl	800064c <HAL_GetTick>
 8001290:	1bc0      	subs	r0, r0, r7
 8001292:	4285      	cmp	r5, r0
 8001294:	d2e9      	bcs.n	800126a <HAL_I2C_IsDeviceReady+0x58>
 8001296:	e00a      	b.n	80012ae <HAL_I2C_IsDeviceReady+0x9c>
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8001298:	699a      	ldr	r2, [r3, #24]
 800129a:	06d2      	lsls	r2, r2, #27
 800129c:	d4e9      	bmi.n	8001272 <HAL_I2C_IsDeviceReady+0x60>
 800129e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80012a2:	2aa0      	cmp	r2, #160	; 0xa0
 80012a4:	d0e5      	beq.n	8001272 <HAL_I2C_IsDeviceReady+0x60>
        if (Timeout != HAL_MAX_DELAY)
 80012a6:	1c68      	adds	r0, r5, #1
 80012a8:	d0e0      	beq.n	800126c <HAL_I2C_IsDeviceReady+0x5a>
          if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80012aa:	2d00      	cmp	r5, #0
 80012ac:	d1ee      	bne.n	800128c <HAL_I2C_IsDeviceReady+0x7a>
    hi2c->State = HAL_I2C_STATE_READY;
 80012ae:	2320      	movs	r3, #32
 80012b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80012b4:	2300      	movs	r3, #0
 80012b6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80012ba:	e7e5      	b.n	8001288 <HAL_I2C_IsDeviceReady+0x76>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012bc:	6822      	ldr	r2, [r4, #0]
 80012be:	2320      	movs	r3, #32
 80012c0:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 80012c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 80012c6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80012ca:	b004      	add	sp, #16
 80012cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80012d0:	2200      	movs	r2, #0
 80012d2:	9700      	str	r7, [sp, #0]
 80012d4:	462b      	mov	r3, r5
 80012d6:	2120      	movs	r1, #32
 80012d8:	4620      	mov	r0, r4
 80012da:	f7ff fb4a 	bl	8000972 <I2C_WaitOnFlagUntilTimeout>
 80012de:	4602      	mov	r2, r0
 80012e0:	2800      	cmp	r0, #0
 80012e2:	d1d1      	bne.n	8001288 <HAL_I2C_IsDeviceReady+0x76>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012e4:	6823      	ldr	r3, [r4, #0]
 80012e6:	2110      	movs	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012e8:	f04f 0a20 	mov.w	sl, #32
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012ec:	61d9      	str	r1, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012ee:	f8c3 a01c 	str.w	sl, [r3, #28]
      if (I2C_Trials++ == Trials)
 80012f2:	9903      	ldr	r1, [sp, #12]
 80012f4:	1c48      	adds	r0, r1, #1
 80012f6:	4541      	cmp	r1, r8
 80012f8:	9003      	str	r0, [sp, #12]
 80012fa:	d10e      	bne.n	800131a <HAL_I2C_IsDeviceReady+0x108>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80012fc:	6859      	ldr	r1, [r3, #4]
 80012fe:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001302:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001304:	4620      	mov	r0, r4
 8001306:	9700      	str	r7, [sp, #0]
 8001308:	462b      	mov	r3, r5
 800130a:	4651      	mov	r1, sl
 800130c:	f7ff fb31 	bl	8000972 <I2C_WaitOnFlagUntilTimeout>
 8001310:	2800      	cmp	r0, #0
 8001312:	d1b9      	bne.n	8001288 <HAL_I2C_IsDeviceReady+0x76>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001314:	6823      	ldr	r3, [r4, #0]
 8001316:	f8c3 a01c 	str.w	sl, [r3, #28]
    while (I2C_Trials < Trials);
 800131a:	9b03      	ldr	r3, [sp, #12]
 800131c:	4598      	cmp	r8, r3
 800131e:	d897      	bhi.n	8001250 <HAL_I2C_IsDeviceReady+0x3e>
 8001320:	e7c5      	b.n	80012ae <HAL_I2C_IsDeviceReady+0x9c>
    return HAL_BUSY;
 8001322:	2002      	movs	r0, #2
 8001324:	e7d1      	b.n	80012ca <HAL_I2C_IsDeviceReady+0xb8>

08001326 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001326:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	2a20      	cmp	r2, #32
{
 800132e:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001330:	d11d      	bne.n	800136e <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001332:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001336:	2b01      	cmp	r3, #1
 8001338:	d019      	beq.n	800136e <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800133a:	2324      	movs	r3, #36	; 0x24
 800133c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001340:	6803      	ldr	r3, [r0, #0]
 8001342:	681c      	ldr	r4, [r3, #0]
 8001344:	f024 0401 	bic.w	r4, r4, #1
 8001348:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800134a:	681c      	ldr	r4, [r3, #0]
 800134c:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001350:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001352:	681c      	ldr	r4, [r3, #0]
 8001354:	4321      	orrs	r1, r4
 8001356:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001358:	6819      	ldr	r1, [r3, #0]
 800135a:	f041 0101 	orr.w	r1, r1, #1
 800135e:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001360:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001362:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001366:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800136a:	4618      	mov	r0, r3
 800136c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800136e:	2002      	movs	r0, #2
  }
}
 8001370:	bd10      	pop	{r4, pc}

08001372 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001372:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001374:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8001378:	b2e4      	uxtb	r4, r4
 800137a:	2c20      	cmp	r4, #32
 800137c:	d11c      	bne.n	80013b8 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800137e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001382:	2b01      	cmp	r3, #1
 8001384:	d018      	beq.n	80013b8 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001386:	2324      	movs	r3, #36	; 0x24
 8001388:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800138c:	6803      	ldr	r3, [r0, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	f022 0201 	bic.w	r2, r2, #1
 8001394:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001396:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001398:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800139c:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80013a0:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	f042 0201 	orr.w	r2, r2, #1
 80013a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013aa:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80013ac:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80013b0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80013b4:	4618      	mov	r0, r3
 80013b6:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80013b8:	2002      	movs	r0, #2
  }
}
 80013ba:	bd10      	pop	{r4, pc}

080013bc <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013bc:	6803      	ldr	r3, [r0, #0]
{
 80013be:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c2:	07df      	lsls	r7, r3, #31
{
 80013c4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c6:	d411      	bmi.n	80013ec <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c8:	682b      	ldr	r3, [r5, #0]
 80013ca:	079e      	lsls	r6, r3, #30
 80013cc:	f100 808b 	bmi.w	80014e6 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013d0:	682b      	ldr	r3, [r5, #0]
 80013d2:	071c      	lsls	r4, r3, #28
 80013d4:	f100 80fe 	bmi.w	80015d4 <HAL_RCC_OscConfig+0x218>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d8:	682b      	ldr	r3, [r5, #0]
 80013da:	0758      	lsls	r0, r3, #29
 80013dc:	f100 8147 	bmi.w	800166e <HAL_RCC_OscConfig+0x2b2>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013e0:	69aa      	ldr	r2, [r5, #24]
 80013e2:	2a00      	cmp	r2, #0
 80013e4:	f040 81db 	bne.w	800179e <HAL_RCC_OscConfig+0x3e2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80013e8:	2000      	movs	r0, #0
 80013ea:	e024      	b.n	8001436 <HAL_RCC_OscConfig+0x7a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013ec:	4cbd      	ldr	r4, [pc, #756]	; (80016e4 <HAL_RCC_OscConfig+0x328>)
 80013ee:	6863      	ldr	r3, [r4, #4]
 80013f0:	f003 030c 	and.w	r3, r3, #12
 80013f4:	2b04      	cmp	r3, #4
 80013f6:	d00a      	beq.n	800140e <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013f8:	6863      	ldr	r3, [r4, #4]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	2b08      	cmp	r3, #8
 8001400:	d11c      	bne.n	800143c <HAL_RCC_OscConfig+0x80>
 8001402:	6863      	ldr	r3, [r4, #4]
 8001404:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800140c:	d116      	bne.n	800143c <HAL_RCC_OscConfig+0x80>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001412:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001416:	6821      	ldr	r1, [r4, #0]
 8001418:	fa93 f3a3 	rbit	r3, r3
 800141c:	fab3 f383 	clz	r3, r3
 8001420:	f003 031f 	and.w	r3, r3, #31
 8001424:	2201      	movs	r2, #1
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	420b      	tst	r3, r1
 800142c:	d0cc      	beq.n	80013c8 <HAL_RCC_OscConfig+0xc>
 800142e:	686b      	ldr	r3, [r5, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1c9      	bne.n	80013c8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001434:	2001      	movs	r0, #1
}
 8001436:	b002      	add	sp, #8
 8001438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143c:	686b      	ldr	r3, [r5, #4]
 800143e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001442:	d11e      	bne.n	8001482 <HAL_RCC_OscConfig+0xc6>
 8001444:	6823      	ldr	r3, [r4, #0]
 8001446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800144a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800144c:	f7ff f8fe 	bl	800064c <HAL_GetTick>
 8001450:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001454:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001456:	2701      	movs	r7, #1
 8001458:	fa96 f3a6 	rbit	r3, r6
 800145c:	6822      	ldr	r2, [r4, #0]
 800145e:	fa96 f3a6 	rbit	r3, r6
 8001462:	fab3 f383 	clz	r3, r3
 8001466:	f003 031f 	and.w	r3, r3, #31
 800146a:	fa07 f303 	lsl.w	r3, r7, r3
 800146e:	4213      	tst	r3, r2
 8001470:	d1aa      	bne.n	80013c8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001472:	f7ff f8eb 	bl	800064c <HAL_GetTick>
 8001476:	eba0 0008 	sub.w	r0, r0, r8
 800147a:	2864      	cmp	r0, #100	; 0x64
 800147c:	d9ec      	bls.n	8001458 <HAL_RCC_OscConfig+0x9c>
            return HAL_TIMEOUT;
 800147e:	2003      	movs	r0, #3
 8001480:	e7d9      	b.n	8001436 <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001482:	bb0b      	cbnz	r3, 80014c8 <HAL_RCC_OscConfig+0x10c>
 8001484:	6823      	ldr	r3, [r4, #0]
 8001486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800148a:	6023      	str	r3, [r4, #0]
 800148c:	6823      	ldr	r3, [r4, #0]
 800148e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001492:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001494:	f7ff f8da 	bl	800064c <HAL_GetTick>
 8001498:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800149c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149e:	2701      	movs	r7, #1
 80014a0:	fa96 f3a6 	rbit	r3, r6
 80014a4:	6822      	ldr	r2, [r4, #0]
 80014a6:	fa96 f3a6 	rbit	r3, r6
 80014aa:	fab3 f383 	clz	r3, r3
 80014ae:	f003 031f 	and.w	r3, r3, #31
 80014b2:	fa07 f303 	lsl.w	r3, r7, r3
 80014b6:	4213      	tst	r3, r2
 80014b8:	d086      	beq.n	80013c8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ba:	f7ff f8c7 	bl	800064c <HAL_GetTick>
 80014be:	eba0 0008 	sub.w	r0, r0, r8
 80014c2:	2864      	cmp	r0, #100	; 0x64
 80014c4:	d9ec      	bls.n	80014a0 <HAL_RCC_OscConfig+0xe4>
 80014c6:	e7da      	b.n	800147e <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014cc:	6823      	ldr	r3, [r4, #0]
 80014ce:	d103      	bne.n	80014d8 <HAL_RCC_OscConfig+0x11c>
 80014d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d4:	6023      	str	r3, [r4, #0]
 80014d6:	e7b5      	b.n	8001444 <HAL_RCC_OscConfig+0x88>
 80014d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014dc:	6023      	str	r3, [r4, #0]
 80014de:	6823      	ldr	r3, [r4, #0]
 80014e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e4:	e7b1      	b.n	800144a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014e6:	4c7f      	ldr	r4, [pc, #508]	; (80016e4 <HAL_RCC_OscConfig+0x328>)
 80014e8:	6863      	ldr	r3, [r4, #4]
 80014ea:	f013 0f0c 	tst.w	r3, #12
 80014ee:	d00a      	beq.n	8001506 <HAL_RCC_OscConfig+0x14a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014f0:	6863      	ldr	r3, [r4, #4]
 80014f2:	f003 030c 	and.w	r3, r3, #12
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d124      	bne.n	8001544 <HAL_RCC_OscConfig+0x188>
 80014fa:	6863      	ldr	r3, [r4, #4]
 80014fc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001504:	d11e      	bne.n	8001544 <HAL_RCC_OscConfig+0x188>
 8001506:	2302      	movs	r3, #2
 8001508:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150c:	6821      	ldr	r1, [r4, #0]
 800150e:	fa93 f3a3 	rbit	r3, r3
 8001512:	fab3 f383 	clz	r3, r3
 8001516:	f003 031f 	and.w	r3, r3, #31
 800151a:	2201      	movs	r2, #1
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	420b      	tst	r3, r1
 8001522:	d002      	beq.n	800152a <HAL_RCC_OscConfig+0x16e>
 8001524:	68eb      	ldr	r3, [r5, #12]
 8001526:	4293      	cmp	r3, r2
 8001528:	d184      	bne.n	8001434 <HAL_RCC_OscConfig+0x78>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152a:	6821      	ldr	r1, [r4, #0]
 800152c:	23f8      	movs	r3, #248	; 0xf8
 800152e:	fa93 f3a3 	rbit	r3, r3
 8001532:	fab3 f283 	clz	r2, r3
 8001536:	692b      	ldr	r3, [r5, #16]
 8001538:	4093      	lsls	r3, r2
 800153a:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800153e:	4313      	orrs	r3, r2
 8001540:	6023      	str	r3, [r4, #0]
 8001542:	e745      	b.n	80013d0 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001544:	68ea      	ldr	r2, [r5, #12]
 8001546:	2601      	movs	r6, #1
 8001548:	b30a      	cbz	r2, 800158e <HAL_RCC_OscConfig+0x1d2>
 800154a:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 800154e:	fab3 f383 	clz	r3, r3
 8001552:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001556:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	2702      	movs	r7, #2
 800155e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001560:	f7ff f874 	bl	800064c <HAL_GetTick>
 8001564:	4680      	mov	r8, r0
 8001566:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156a:	6822      	ldr	r2, [r4, #0]
 800156c:	fa97 f3a7 	rbit	r3, r7
 8001570:	fab3 f383 	clz	r3, r3
 8001574:	f003 031f 	and.w	r3, r3, #31
 8001578:	fa06 f303 	lsl.w	r3, r6, r3
 800157c:	4213      	tst	r3, r2
 800157e:	d1d4      	bne.n	800152a <HAL_RCC_OscConfig+0x16e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001580:	f7ff f864 	bl	800064c <HAL_GetTick>
 8001584:	eba0 0008 	sub.w	r0, r0, r8
 8001588:	2802      	cmp	r0, #2
 800158a:	d9ec      	bls.n	8001566 <HAL_RCC_OscConfig+0x1aa>
 800158c:	e777      	b.n	800147e <HAL_RCC_OscConfig+0xc2>
 800158e:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8001592:	fab3 f383 	clz	r3, r3
 8001596:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800159a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	2702      	movs	r7, #2
 80015a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015a4:	f7ff f852 	bl	800064c <HAL_GetTick>
 80015a8:	4680      	mov	r8, r0
 80015aa:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ae:	6822      	ldr	r2, [r4, #0]
 80015b0:	fa97 f3a7 	rbit	r3, r7
 80015b4:	fab3 f383 	clz	r3, r3
 80015b8:	f003 031f 	and.w	r3, r3, #31
 80015bc:	fa06 f303 	lsl.w	r3, r6, r3
 80015c0:	4213      	tst	r3, r2
 80015c2:	f43f af05 	beq.w	80013d0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c6:	f7ff f841 	bl	800064c <HAL_GetTick>
 80015ca:	eba0 0008 	sub.w	r0, r0, r8
 80015ce:	2802      	cmp	r0, #2
 80015d0:	d9eb      	bls.n	80015aa <HAL_RCC_OscConfig+0x1ee>
 80015d2:	e754      	b.n	800147e <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015d4:	696a      	ldr	r2, [r5, #20]
 80015d6:	4e43      	ldr	r6, [pc, #268]	; (80016e4 <HAL_RCC_OscConfig+0x328>)
 80015d8:	4943      	ldr	r1, [pc, #268]	; (80016e8 <HAL_RCC_OscConfig+0x32c>)
 80015da:	2401      	movs	r4, #1
 80015dc:	b31a      	cbz	r2, 8001626 <HAL_RCC_OscConfig+0x26a>
 80015de:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80015e2:	fab3 f383 	clz	r3, r3
 80015e6:	440b      	add	r3, r1
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	2702      	movs	r7, #2
 80015ec:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80015ee:	f7ff f82d 	bl	800064c <HAL_GetTick>
 80015f2:	4680      	mov	r8, r0
 80015f4:	fa97 f3a7 	rbit	r3, r7
 80015f8:	fa97 f3a7 	rbit	r3, r7
 80015fc:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001600:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001602:	fa97 f3a7 	rbit	r3, r7
 8001606:	fab3 f383 	clz	r3, r3
 800160a:	f003 031f 	and.w	r3, r3, #31
 800160e:	fa04 f303 	lsl.w	r3, r4, r3
 8001612:	4213      	tst	r3, r2
 8001614:	f47f aee0 	bne.w	80013d8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001618:	f7ff f818 	bl	800064c <HAL_GetTick>
 800161c:	eba0 0008 	sub.w	r0, r0, r8
 8001620:	2802      	cmp	r0, #2
 8001622:	d9e7      	bls.n	80015f4 <HAL_RCC_OscConfig+0x238>
 8001624:	e72b      	b.n	800147e <HAL_RCC_OscConfig+0xc2>
 8001626:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 800162a:	fab3 f383 	clz	r3, r3
 800162e:	440b      	add	r3, r1
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	2702      	movs	r7, #2
 8001634:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001636:	f7ff f809 	bl	800064c <HAL_GetTick>
 800163a:	4680      	mov	r8, r0
 800163c:	fa97 f3a7 	rbit	r3, r7
 8001640:	fa97 f3a7 	rbit	r3, r7
 8001644:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001648:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800164a:	fa97 f3a7 	rbit	r3, r7
 800164e:	fab3 f383 	clz	r3, r3
 8001652:	f003 031f 	and.w	r3, r3, #31
 8001656:	fa04 f303 	lsl.w	r3, r4, r3
 800165a:	4213      	tst	r3, r2
 800165c:	f43f aebc 	beq.w	80013d8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001660:	f7fe fff4 	bl	800064c <HAL_GetTick>
 8001664:	eba0 0008 	sub.w	r0, r0, r8
 8001668:	2802      	cmp	r0, #2
 800166a:	d9e7      	bls.n	800163c <HAL_RCC_OscConfig+0x280>
 800166c:	e707      	b.n	800147e <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800166e:	4c1d      	ldr	r4, [pc, #116]	; (80016e4 <HAL_RCC_OscConfig+0x328>)
 8001670:	69e3      	ldr	r3, [r4, #28]
 8001672:	00d9      	lsls	r1, r3, #3
 8001674:	d434      	bmi.n	80016e0 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001676:	69e3      	ldr	r3, [r4, #28]
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	61e3      	str	r3, [r4, #28]
 800167e:	69e3      	ldr	r3, [r4, #28]
 8001680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001684:	9301      	str	r3, [sp, #4]
 8001686:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001688:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168a:	4f18      	ldr	r7, [pc, #96]	; (80016ec <HAL_RCC_OscConfig+0x330>)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	05da      	lsls	r2, r3, #23
 8001690:	d52e      	bpl.n	80016f0 <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001692:	68ab      	ldr	r3, [r5, #8]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d13c      	bne.n	8001712 <HAL_RCC_OscConfig+0x356>
 8001698:	6a23      	ldr	r3, [r4, #32]
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80016a0:	f7fe ffd4 	bl	800064c <HAL_GetTick>
 80016a4:	2702      	movs	r7, #2
 80016a6:	4682      	mov	sl, r0
 80016a8:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016aa:	f04f 0801 	mov.w	r8, #1
 80016ae:	fa97 f3a7 	rbit	r3, r7
 80016b2:	fa97 f3a7 	rbit	r3, r7
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d069      	beq.n	800178e <HAL_RCC_OscConfig+0x3d2>
 80016ba:	6a22      	ldr	r2, [r4, #32]
 80016bc:	fa99 f3a9 	rbit	r3, r9
 80016c0:	fab3 f383 	clz	r3, r3
 80016c4:	f003 031f 	and.w	r3, r3, #31
 80016c8:	fa08 f303 	lsl.w	r3, r8, r3
 80016cc:	4213      	tst	r3, r2
 80016ce:	d056      	beq.n	800177e <HAL_RCC_OscConfig+0x3c2>
    if(pwrclkchanged == SET)
 80016d0:	2e00      	cmp	r6, #0
 80016d2:	f43f ae85 	beq.w	80013e0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d6:	69e3      	ldr	r3, [r4, #28]
 80016d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016dc:	61e3      	str	r3, [r4, #28]
 80016de:	e67f      	b.n	80013e0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80016e0:	2600      	movs	r6, #0
 80016e2:	e7d2      	b.n	800168a <HAL_RCC_OscConfig+0x2ce>
 80016e4:	40021000 	.word	0x40021000
 80016e8:	10908120 	.word	0x10908120
 80016ec:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80016f8:	f7fe ffa8 	bl	800064c <HAL_GetTick>
 80016fc:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	05db      	lsls	r3, r3, #23
 8001702:	d4c6      	bmi.n	8001692 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001704:	f7fe ffa2 	bl	800064c <HAL_GetTick>
 8001708:	eba0 0008 	sub.w	r0, r0, r8
 800170c:	2864      	cmp	r0, #100	; 0x64
 800170e:	d9f6      	bls.n	80016fe <HAL_RCC_OscConfig+0x342>
 8001710:	e6b5      	b.n	800147e <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001712:	bb33      	cbnz	r3, 8001762 <HAL_RCC_OscConfig+0x3a6>
 8001714:	6a23      	ldr	r3, [r4, #32]
 8001716:	f023 0301 	bic.w	r3, r3, #1
 800171a:	6223      	str	r3, [r4, #32]
 800171c:	6a23      	ldr	r3, [r4, #32]
 800171e:	f023 0304 	bic.w	r3, r3, #4
 8001722:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001724:	f7fe ff92 	bl	800064c <HAL_GetTick>
 8001728:	2702      	movs	r7, #2
 800172a:	4682      	mov	sl, r0
 800172c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172e:	f04f 0801 	mov.w	r8, #1
 8001732:	fa97 f3a7 	rbit	r3, r7
 8001736:	fa97 f3a7 	rbit	r3, r7
 800173a:	b363      	cbz	r3, 8001796 <HAL_RCC_OscConfig+0x3da>
 800173c:	6a22      	ldr	r2, [r4, #32]
 800173e:	fa99 f3a9 	rbit	r3, r9
 8001742:	fab3 f383 	clz	r3, r3
 8001746:	f003 031f 	and.w	r3, r3, #31
 800174a:	fa08 f303 	lsl.w	r3, r8, r3
 800174e:	4213      	tst	r3, r2
 8001750:	d0be      	beq.n	80016d0 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001752:	f7fe ff7b 	bl	800064c <HAL_GetTick>
 8001756:	eba0 000a 	sub.w	r0, r0, sl
 800175a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800175e:	d9e8      	bls.n	8001732 <HAL_RCC_OscConfig+0x376>
 8001760:	e68d      	b.n	800147e <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001762:	2b05      	cmp	r3, #5
 8001764:	6a23      	ldr	r3, [r4, #32]
 8001766:	d103      	bne.n	8001770 <HAL_RCC_OscConfig+0x3b4>
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	6223      	str	r3, [r4, #32]
 800176e:	e793      	b.n	8001698 <HAL_RCC_OscConfig+0x2dc>
 8001770:	f023 0301 	bic.w	r3, r3, #1
 8001774:	6223      	str	r3, [r4, #32]
 8001776:	6a23      	ldr	r3, [r4, #32]
 8001778:	f023 0304 	bic.w	r3, r3, #4
 800177c:	e78f      	b.n	800169e <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800177e:	f7fe ff65 	bl	800064c <HAL_GetTick>
 8001782:	eba0 000a 	sub.w	r0, r0, sl
 8001786:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800178a:	d990      	bls.n	80016ae <HAL_RCC_OscConfig+0x2f2>
 800178c:	e677      	b.n	800147e <HAL_RCC_OscConfig+0xc2>
 800178e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001792:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001794:	e792      	b.n	80016bc <HAL_RCC_OscConfig+0x300>
 8001796:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800179c:	e7cf      	b.n	800173e <HAL_RCC_OscConfig+0x382>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800179e:	4c44      	ldr	r4, [pc, #272]	; (80018b0 <HAL_RCC_OscConfig+0x4f4>)
 80017a0:	6863      	ldr	r3, [r4, #4]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	2b08      	cmp	r3, #8
 80017a8:	f43f ae44 	beq.w	8001434 <HAL_RCC_OscConfig+0x78>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ac:	2a02      	cmp	r2, #2
 80017ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017b2:	d158      	bne.n	8001866 <HAL_RCC_OscConfig+0x4aa>
 80017b4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80017b8:	fab3 f383 	clz	r3, r3
 80017bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017ca:	f7fe ff3f 	bl	800064c <HAL_GetTick>
 80017ce:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80017d2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d4:	2601      	movs	r6, #1
 80017d6:	fa97 f3a7 	rbit	r3, r7
 80017da:	6822      	ldr	r2, [r4, #0]
 80017dc:	fa97 f3a7 	rbit	r3, r7
 80017e0:	fab3 f383 	clz	r3, r3
 80017e4:	f003 031f 	and.w	r3, r3, #31
 80017e8:	fa06 f303 	lsl.w	r3, r6, r3
 80017ec:	4213      	tst	r3, r2
 80017ee:	d133      	bne.n	8001858 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80017f2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80017f4:	f023 030f 	bic.w	r3, r3, #15
 80017f8:	4313      	orrs	r3, r2
 80017fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80017fc:	6862      	ldr	r2, [r4, #4]
 80017fe:	6a2b      	ldr	r3, [r5, #32]
 8001800:	69e9      	ldr	r1, [r5, #28]
 8001802:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8001806:	430b      	orrs	r3, r1
 8001808:	4313      	orrs	r3, r2
 800180a:	6063      	str	r3, [r4, #4]
 800180c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001810:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001814:	fab3 f383 	clz	r3, r3
 8001818:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800181c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001826:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001828:	f7fe ff10 	bl	800064c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800182c:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800182e:	4607      	mov	r7, r0
 8001830:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001834:	6822      	ldr	r2, [r4, #0]
 8001836:	fa95 f3a5 	rbit	r3, r5
 800183a:	fab3 f383 	clz	r3, r3
 800183e:	f003 031f 	and.w	r3, r3, #31
 8001842:	fa06 f303 	lsl.w	r3, r6, r3
 8001846:	4213      	tst	r3, r2
 8001848:	f47f adce 	bne.w	80013e8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184c:	f7fe fefe 	bl	800064c <HAL_GetTick>
 8001850:	1bc0      	subs	r0, r0, r7
 8001852:	2802      	cmp	r0, #2
 8001854:	d9ec      	bls.n	8001830 <HAL_RCC_OscConfig+0x474>
 8001856:	e612      	b.n	800147e <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001858:	f7fe fef8 	bl	800064c <HAL_GetTick>
 800185c:	eba0 0008 	sub.w	r0, r0, r8
 8001860:	2802      	cmp	r0, #2
 8001862:	d9b8      	bls.n	80017d6 <HAL_RCC_OscConfig+0x41a>
 8001864:	e60b      	b.n	800147e <HAL_RCC_OscConfig+0xc2>
 8001866:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800186a:	fab3 f383 	clz	r3, r3
 800186e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001872:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800187c:	f7fe fee6 	bl	800064c <HAL_GetTick>
 8001880:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001884:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001886:	2601      	movs	r6, #1
 8001888:	fa95 f3a5 	rbit	r3, r5
 800188c:	6822      	ldr	r2, [r4, #0]
 800188e:	fa95 f3a5 	rbit	r3, r5
 8001892:	fab3 f383 	clz	r3, r3
 8001896:	f003 031f 	and.w	r3, r3, #31
 800189a:	fa06 f303 	lsl.w	r3, r6, r3
 800189e:	4213      	tst	r3, r2
 80018a0:	f43f ada2 	beq.w	80013e8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a4:	f7fe fed2 	bl	800064c <HAL_GetTick>
 80018a8:	1bc0      	subs	r0, r0, r7
 80018aa:	2802      	cmp	r0, #2
 80018ac:	d9ec      	bls.n	8001888 <HAL_RCC_OscConfig+0x4cc>
 80018ae:	e5e6      	b.n	800147e <HAL_RCC_OscConfig+0xc2>
 80018b0:	40021000 	.word	0x40021000

080018b4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80018b4:	4911      	ldr	r1, [pc, #68]	; (80018fc <HAL_RCC_GetSysClockFreq+0x48>)
 80018b6:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018b8:	f003 020c 	and.w	r2, r3, #12
 80018bc:	2a08      	cmp	r2, #8
 80018be:	d11a      	bne.n	80018f6 <HAL_RCC_GetSysClockFreq+0x42>
 80018c0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80018c4:	fa92 f2a2 	rbit	r2, r2
 80018c8:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80018ca:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80018ce:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80018d0:	fa90 f0a0 	rbit	r0, r0
 80018d4:	fab0 f080 	clz	r0, r0
 80018d8:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80018dc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80018e0:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80018e2:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80018e4:	4a06      	ldr	r2, [pc, #24]	; (8001900 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80018e6:	4807      	ldr	r0, [pc, #28]	; (8001904 <HAL_RCC_GetSysClockFreq+0x50>)
 80018e8:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80018ea:	4807      	ldr	r0, [pc, #28]	; (8001908 <HAL_RCC_GetSysClockFreq+0x54>)
 80018ec:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80018f0:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80018f2:	4348      	muls	r0, r1
 80018f4:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80018f6:	4804      	ldr	r0, [pc, #16]	; (8001908 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000
 8001900:	08007dc4 	.word	0x08007dc4
 8001904:	08007dd4 	.word	0x08007dd4
 8001908:	007a1200 	.word	0x007a1200

0800190c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800190c:	4a5c      	ldr	r2, [pc, #368]	; (8001a80 <HAL_RCC_ClockConfig+0x174>)
 800190e:	6813      	ldr	r3, [r2, #0]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	428b      	cmp	r3, r1
{
 8001916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800191a:	4606      	mov	r6, r0
 800191c:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800191e:	d330      	bcc.n	8001982 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001920:	6832      	ldr	r2, [r6, #0]
 8001922:	0791      	lsls	r1, r2, #30
 8001924:	d43a      	bmi.n	800199c <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001926:	07d2      	lsls	r2, r2, #31
 8001928:	d440      	bmi.n	80019ac <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800192a:	4a55      	ldr	r2, [pc, #340]	; (8001a80 <HAL_RCC_ClockConfig+0x174>)
 800192c:	6813      	ldr	r3, [r2, #0]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	429d      	cmp	r5, r3
 8001934:	f0c0 8092 	bcc.w	8001a5c <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001938:	6832      	ldr	r2, [r6, #0]
 800193a:	4c52      	ldr	r4, [pc, #328]	; (8001a84 <HAL_RCC_ClockConfig+0x178>)
 800193c:	f012 0f04 	tst.w	r2, #4
 8001940:	f040 8097 	bne.w	8001a72 <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001944:	0713      	lsls	r3, r2, #28
 8001946:	d506      	bpl.n	8001956 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001948:	6863      	ldr	r3, [r4, #4]
 800194a:	6932      	ldr	r2, [r6, #16]
 800194c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001950:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001954:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001956:	f7ff ffad 	bl	80018b4 <HAL_RCC_GetSysClockFreq>
 800195a:	6863      	ldr	r3, [r4, #4]
 800195c:	22f0      	movs	r2, #240	; 0xf0
 800195e:	fa92 f2a2 	rbit	r2, r2
 8001962:	fab2 f282 	clz	r2, r2
 8001966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800196a:	40d3      	lsrs	r3, r2
 800196c:	4a46      	ldr	r2, [pc, #280]	; (8001a88 <HAL_RCC_ClockConfig+0x17c>)
 800196e:	5cd3      	ldrb	r3, [r2, r3]
 8001970:	40d8      	lsrs	r0, r3
 8001972:	4b46      	ldr	r3, [pc, #280]	; (8001a8c <HAL_RCC_ClockConfig+0x180>)
 8001974:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001976:	2000      	movs	r0, #0
 8001978:	f7fe fe3a 	bl	80005f0 <HAL_InitTick>
  return HAL_OK;
 800197c:	2000      	movs	r0, #0
}
 800197e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	6813      	ldr	r3, [r2, #0]
 8001984:	f023 0307 	bic.w	r3, r3, #7
 8001988:	430b      	orrs	r3, r1
 800198a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800198c:	6813      	ldr	r3, [r2, #0]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	4299      	cmp	r1, r3
 8001994:	d0c4      	beq.n	8001920 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001996:	2001      	movs	r0, #1
 8001998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800199c:	4939      	ldr	r1, [pc, #228]	; (8001a84 <HAL_RCC_ClockConfig+0x178>)
 800199e:	68b0      	ldr	r0, [r6, #8]
 80019a0:	684b      	ldr	r3, [r1, #4]
 80019a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019a6:	4303      	orrs	r3, r0
 80019a8:	604b      	str	r3, [r1, #4]
 80019aa:	e7bc      	b.n	8001926 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ac:	6872      	ldr	r2, [r6, #4]
 80019ae:	4c35      	ldr	r4, [pc, #212]	; (8001a84 <HAL_RCC_ClockConfig+0x178>)
 80019b0:	2a01      	cmp	r2, #1
 80019b2:	d128      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xfa>
 80019b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019b8:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019bc:	6821      	ldr	r1, [r4, #0]
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	fab3 f383 	clz	r3, r3
 80019c6:	f003 031f 	and.w	r3, r3, #31
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d0:	d0e1      	beq.n	8001996 <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d2:	6863      	ldr	r3, [r4, #4]
 80019d4:	f023 0303 	bic.w	r3, r3, #3
 80019d8:	431a      	orrs	r2, r3
 80019da:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 80019dc:	f7fe fe36 	bl	800064c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e0:	6873      	ldr	r3, [r6, #4]
 80019e2:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80019e4:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e6:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ea:	d11f      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019ec:	6863      	ldr	r3, [r4, #4]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d099      	beq.n	800192a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f6:	f7fe fe29 	bl	800064c <HAL_GetTick>
 80019fa:	1bc0      	subs	r0, r0, r7
 80019fc:	4540      	cmp	r0, r8
 80019fe:	d9f5      	bls.n	80019ec <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8001a00:	2003      	movs	r0, #3
 8001a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a06:	2a02      	cmp	r2, #2
 8001a08:	bf0c      	ite	eq
 8001a0a:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001a0e:	2302      	movne	r3, #2
 8001a10:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a14:	6820      	ldr	r0, [r4, #0]
 8001a16:	fa93 f3a3 	rbit	r3, r3
 8001a1a:	fab3 f383 	clz	r3, r3
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	2101      	movs	r1, #1
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	4203      	tst	r3, r0
 8001a2a:	e7d1      	b.n	80019d0 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d110      	bne.n	8001a52 <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a30:	6863      	ldr	r3, [r4, #4]
 8001a32:	f003 030c 	and.w	r3, r3, #12
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	f43f af77 	beq.w	800192a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3c:	f7fe fe06 	bl	800064c <HAL_GetTick>
 8001a40:	1bc0      	subs	r0, r0, r7
 8001a42:	4540      	cmp	r0, r8
 8001a44:	d9f4      	bls.n	8001a30 <HAL_RCC_ClockConfig+0x124>
 8001a46:	e7db      	b.n	8001a00 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a48:	f7fe fe00 	bl	800064c <HAL_GetTick>
 8001a4c:	1bc0      	subs	r0, r0, r7
 8001a4e:	4540      	cmp	r0, r8
 8001a50:	d8d6      	bhi.n	8001a00 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a52:	6863      	ldr	r3, [r4, #4]
 8001a54:	f013 0f0c 	tst.w	r3, #12
 8001a58:	d1f6      	bne.n	8001a48 <HAL_RCC_ClockConfig+0x13c>
 8001a5a:	e766      	b.n	800192a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5c:	6813      	ldr	r3, [r2, #0]
 8001a5e:	f023 0307 	bic.w	r3, r3, #7
 8001a62:	432b      	orrs	r3, r5
 8001a64:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a66:	6813      	ldr	r3, [r2, #0]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	429d      	cmp	r5, r3
 8001a6e:	d192      	bne.n	8001996 <HAL_RCC_ClockConfig+0x8a>
 8001a70:	e762      	b.n	8001938 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a72:	6863      	ldr	r3, [r4, #4]
 8001a74:	68f1      	ldr	r1, [r6, #12]
 8001a76:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a7a:	430b      	orrs	r3, r1
 8001a7c:	6063      	str	r3, [r4, #4]
 8001a7e:	e761      	b.n	8001944 <HAL_RCC_ClockConfig+0x38>
 8001a80:	40022000 	.word	0x40022000
 8001a84:	40021000 	.word	0x40021000
 8001a88:	080080c6 	.word	0x080080c6
 8001a8c:	20000070 	.word	0x20000070

08001a90 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001a90:	4b01      	ldr	r3, [pc, #4]	; (8001a98 <HAL_RCC_GetHCLKFreq+0x8>)
 8001a92:	6818      	ldr	r0, [r3, #0]
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20000070 	.word	0x20000070

08001a9c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a9e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	fa92 f2a2 	rbit	r2, r2
 8001aa8:	fab2 f282 	clz	r2, r2
 8001aac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ab0:	40d3      	lsrs	r3, r2
 8001ab2:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ab4:	5cd3      	ldrb	r3, [r2, r3]
 8001ab6:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001ab8:	6810      	ldr	r0, [r2, #0]
}    
 8001aba:	40d8      	lsrs	r0, r3
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	080080d6 	.word	0x080080d6
 8001ac8:	20000070 	.word	0x20000070

08001acc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ace:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	fa92 f2a2 	rbit	r2, r2
 8001ad8:	fab2 f282 	clz	r2, r2
 8001adc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001ae0:	40d3      	lsrs	r3, r2
 8001ae2:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ae4:	5cd3      	ldrb	r3, [r2, r3]
 8001ae6:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001ae8:	6810      	ldr	r0, [r2, #0]
} 
 8001aea:	40d8      	lsrs	r0, r3
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000
 8001af4:	080080d6 	.word	0x080080d6
 8001af8:	20000070 	.word	0x20000070

08001afc <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001afc:	6803      	ldr	r3, [r0, #0]
{
 8001afe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b02:	03df      	lsls	r7, r3, #15
{
 8001b04:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b06:	d523      	bpl.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b08:	4d9b      	ldr	r5, [pc, #620]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001b0a:	69eb      	ldr	r3, [r5, #28]
 8001b0c:	00de      	lsls	r6, r3, #3
 8001b0e:	f100 80d7 	bmi.w	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	69eb      	ldr	r3, [r5, #28]
 8001b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b18:	61eb      	str	r3, [r5, #28]
 8001b1a:	69eb      	ldr	r3, [r5, #28]
 8001b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b20:	9301      	str	r3, [sp, #4]
 8001b22:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b24:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b26:	4f95      	ldr	r7, [pc, #596]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	05d8      	lsls	r0, r3, #23
 8001b2c:	f140 80ca 	bpl.w	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b30:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b32:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001b36:	f040 80da 	bne.w	8001cee <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001b3a:	6a2b      	ldr	r3, [r5, #32]
 8001b3c:	6862      	ldr	r2, [r4, #4]
 8001b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b42:	4313      	orrs	r3, r2
 8001b44:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b46:	b11e      	cbz	r6, 8001b50 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b48:	69eb      	ldr	r3, [r5, #28]
 8001b4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b50:	6820      	ldr	r0, [r4, #0]
 8001b52:	07c3      	lsls	r3, r0, #31
 8001b54:	d506      	bpl.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b56:	4a88      	ldr	r2, [pc, #544]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001b58:	68a1      	ldr	r1, [r4, #8]
 8001b5a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b5c:	f023 0303 	bic.w	r3, r3, #3
 8001b60:	430b      	orrs	r3, r1
 8001b62:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b64:	0787      	lsls	r7, r0, #30
 8001b66:	d506      	bpl.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b68:	4a83      	ldr	r2, [pc, #524]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001b6a:	68e1      	ldr	r1, [r4, #12]
 8001b6c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b6e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001b72:	430b      	orrs	r3, r1
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001b76:	0746      	lsls	r6, r0, #29
 8001b78:	d506      	bpl.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001b7a:	4a7f      	ldr	r2, [pc, #508]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001b7c:	6921      	ldr	r1, [r4, #16]
 8001b7e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b80:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001b84:	430b      	orrs	r3, r1
 8001b86:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b88:	0685      	lsls	r5, r0, #26
 8001b8a:	d506      	bpl.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b8c:	4a7a      	ldr	r2, [pc, #488]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001b8e:	69e1      	ldr	r1, [r4, #28]
 8001b90:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b92:	f023 0310 	bic.w	r3, r3, #16
 8001b96:	430b      	orrs	r3, r1
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b9a:	0381      	lsls	r1, r0, #14
 8001b9c:	d506      	bpl.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001b9e:	4a76      	ldr	r2, [pc, #472]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001ba0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001ba2:	6853      	ldr	r3, [r2, #4]
 8001ba4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001bac:	0642      	lsls	r2, r0, #25
 8001bae:	d506      	bpl.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001bb0:	4a71      	ldr	r2, [pc, #452]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001bb2:	6a21      	ldr	r1, [r4, #32]
 8001bb4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001bb6:	f023 0320 	bic.w	r3, r3, #32
 8001bba:	430b      	orrs	r3, r1
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001bbe:	0343      	lsls	r3, r0, #13
 8001bc0:	d506      	bpl.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001bc2:	4a6d      	ldr	r2, [pc, #436]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001bc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001bc6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bcc:	430b      	orrs	r3, r1
 8001bce:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001bd0:	0707      	lsls	r7, r0, #28
 8001bd2:	d506      	bpl.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001bd4:	4a68      	ldr	r2, [pc, #416]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001bd6:	6961      	ldr	r1, [r4, #20]
 8001bd8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001bda:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001bde:	430b      	orrs	r3, r1
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001be2:	06c6      	lsls	r6, r0, #27
 8001be4:	d506      	bpl.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001be6:	4a64      	ldr	r2, [pc, #400]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001be8:	69a1      	ldr	r1, [r4, #24]
 8001bea:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001bec:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001bf4:	0585      	lsls	r5, r0, #22
 8001bf6:	d506      	bpl.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001bf8:	4a5f      	ldr	r2, [pc, #380]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001bfa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001bfc:	6853      	ldr	r3, [r2, #4]
 8001bfe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c02:	430b      	orrs	r3, r1
 8001c04:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001c06:	0601      	lsls	r1, r0, #24
 8001c08:	d506      	bpl.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001c0a:	4a5b      	ldr	r2, [pc, #364]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c0c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001c0e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c10:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001c14:	430b      	orrs	r3, r1
 8001c16:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001c18:	05c2      	lsls	r2, r0, #23
 8001c1a:	d506      	bpl.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001c1c:	4a56      	ldr	r2, [pc, #344]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c1e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001c20:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c22:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8001c26:	430b      	orrs	r3, r1
 8001c28:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001c2a:	04c3      	lsls	r3, r0, #19
 8001c2c:	d506      	bpl.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001c2e:	4a52      	ldr	r2, [pc, #328]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c32:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001c3c:	0487      	lsls	r7, r0, #18
 8001c3e:	d506      	bpl.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001c40:	4a4d      	ldr	r2, [pc, #308]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c42:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001c44:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c46:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c4a:	430b      	orrs	r3, r1
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8001c4e:	02c6      	lsls	r6, r0, #11
 8001c50:	d506      	bpl.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8001c52:	4a49      	ldr	r2, [pc, #292]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c54:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001c56:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c5c:	430b      	orrs	r3, r1
 8001c5e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8001c60:	0285      	lsls	r5, r0, #10
 8001c62:	d506      	bpl.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8001c64:	4a44      	ldr	r2, [pc, #272]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c66:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001c68:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c6a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	430b      	orrs	r3, r1
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001c72:	0241      	lsls	r1, r0, #9
 8001c74:	d506      	bpl.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001c76:	4a40      	ldr	r2, [pc, #256]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c78:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001c7a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c80:	430b      	orrs	r3, r1
 8001c82:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8001c84:	0202      	lsls	r2, r0, #8
 8001c86:	d506      	bpl.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8001c88:	4a3b      	ldr	r2, [pc, #236]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c8a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001c8c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c92:	430b      	orrs	r3, r1
 8001c94:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8001c96:	01c3      	lsls	r3, r0, #7
 8001c98:	d506      	bpl.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8001c9a:	4a37      	ldr	r2, [pc, #220]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c9c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001c9e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001ca0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ca4:	430b      	orrs	r3, r1
 8001ca6:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8001ca8:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8001cac:	d01c      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8001cae:	4a32      	ldr	r2, [pc, #200]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001cb0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001cb2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001cb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001cb8:	430b      	orrs	r3, r1
 8001cba:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	e013      	b.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 8001cc0:	2600      	movs	r6, #0
 8001cc2:	e730      	b.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cca:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001ccc:	f7fe fcbe 	bl	800064c <HAL_GetTick>
 8001cd0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	05d9      	lsls	r1, r3, #23
 8001cd6:	f53f af2b 	bmi.w	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cda:	f7fe fcb7 	bl	800064c <HAL_GetTick>
 8001cde:	eba0 0008 	sub.w	r0, r0, r8
 8001ce2:	2864      	cmp	r0, #100	; 0x64
 8001ce4:	d9f5      	bls.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 8001ce6:	2003      	movs	r0, #3
}
 8001ce8:	b002      	add	sp, #8
 8001cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cee:	6862      	ldr	r2, [r4, #4]
 8001cf0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	f43f af20 	beq.w	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cfa:	6a29      	ldr	r1, [r5, #32]
 8001cfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d00:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8001d04:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d08:	f8df e074 	ldr.w	lr, [pc, #116]	; 8001d80 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8001d0c:	fab2 f282 	clz	r2, r2
 8001d10:	4472      	add	r2, lr
 8001d12:	0092      	lsls	r2, r2, #2
 8001d14:	2701      	movs	r7, #1
 8001d16:	6017      	str	r7, [r2, #0]
 8001d18:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d1c:	fab3 f383 	clz	r3, r3
 8001d20:	4473      	add	r3, lr
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d28:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8001d2a:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d2c:	f57f af05 	bpl.w	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8001d30:	f7fe fc8c 	bl	800064c <HAL_GetTick>
 8001d34:	f04f 0802 	mov.w	r8, #2
 8001d38:	4682      	mov	sl, r0
 8001d3a:	46c1      	mov	r9, r8
 8001d3c:	fa98 f3a8 	rbit	r3, r8
 8001d40:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d44:	b19b      	cbz	r3, 8001d6e <HAL_RCCEx_PeriphCLKConfig+0x272>
 8001d46:	6a2a      	ldr	r2, [r5, #32]
 8001d48:	fa99 f3a9 	rbit	r3, r9
 8001d4c:	fab3 f383 	clz	r3, r3
 8001d50:	f003 031f 	and.w	r3, r3, #31
 8001d54:	fa07 f303 	lsl.w	r3, r7, r3
 8001d58:	4213      	tst	r3, r2
 8001d5a:	f47f aeee 	bne.w	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5e:	f7fe fc75 	bl	800064c <HAL_GetTick>
 8001d62:	eba0 000a 	sub.w	r0, r0, sl
 8001d66:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001d6a:	d9e7      	bls.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8001d6c:	e7bb      	b.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8001d6e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d72:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001d74:	e7e8      	b.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40007000 	.word	0x40007000
 8001d80:	10908100 	.word	0x10908100

08001d84 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001d84:	6802      	ldr	r2, [r0, #0]
{
 8001d86:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001d88:	68d3      	ldr	r3, [r2, #12]
 8001d8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001d8e:	60d3      	str	r3, [r2, #12]
{
 8001d90:	4604      	mov	r4, r0
  
  tickstart = HAL_GetTick();
 8001d92:	f7fe fc5b 	bl	800064c <HAL_GetTick>
 8001d96:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001d98:	6823      	ldr	r3, [r4, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	069b      	lsls	r3, r3, #26
 8001d9e:	d501      	bpl.n	8001da4 <HAL_RTC_WaitForSynchro+0x20>
    {       
      return HAL_TIMEOUT;
    } 
  }

  return HAL_OK;
 8001da0:	2000      	movs	r0, #0
 8001da2:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8001da4:	f7fe fc52 	bl	800064c <HAL_GetTick>
 8001da8:	1b40      	subs	r0, r0, r5
 8001daa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001dae:	d9f3      	bls.n	8001d98 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8001db0:	2003      	movs	r0, #3
}
 8001db2:	bd38      	pop	{r3, r4, r5, pc}

08001db4 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout 
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001db4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001db6:	6803      	ldr	r3, [r0, #0]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	0652      	lsls	r2, r2, #25
{
 8001dbc:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001dbe:	d501      	bpl.n	8001dc4 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc8:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001dca:	f7fe fc3f 	bl	800064c <HAL_GetTick>
 8001dce:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001dd0:	6823      	ldr	r3, [r4, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	065b      	lsls	r3, r3, #25
 8001dd6:	d4f3      	bmi.n	8001dc0 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8001dd8:	f7fe fc38 	bl	800064c <HAL_GetTick>
 8001ddc:	1b40      	subs	r0, r0, r5
 8001dde:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001de2:	d9f5      	bls.n	8001dd0 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8001de4:	2003      	movs	r0, #3
}
 8001de6:	bd38      	pop	{r3, r4, r5, pc}

08001de8 <HAL_RTC_Init>:
{
 8001de8:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8001dea:	4604      	mov	r4, r0
 8001dec:	b1b8      	cbz	r0, 8001e1e <HAL_RTC_Init+0x36>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001dee:	7f43      	ldrb	r3, [r0, #29]
 8001df0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001df4:	b913      	cbnz	r3, 8001dfc <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8001df6:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8001df8:	f004 fc98 	bl	800672c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e00:	6823      	ldr	r3, [r4, #0]
 8001e02:	22ca      	movs	r2, #202	; 0xca
 8001e04:	625a      	str	r2, [r3, #36]	; 0x24
 8001e06:	2253      	movs	r2, #83	; 0x53
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	f7ff ffd2 	bl	8001db4 <RTC_EnterInitMode>
 8001e10:	6823      	ldr	r3, [r4, #0]
 8001e12:	4605      	mov	r5, r0
 8001e14:	b128      	cbz	r0, 8001e22 <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e16:	22ff      	movs	r2, #255	; 0xff
 8001e18:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8001e1e:	2501      	movs	r5, #1
 8001e20:	e02e      	b.n	8001e80 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e22:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e24:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e26:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8001e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e2e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e30:	6862      	ldr	r2, [r4, #4]
 8001e32:	6899      	ldr	r1, [r3, #8]
 8001e34:	4302      	orrs	r2, r0
 8001e36:	6960      	ldr	r0, [r4, #20]
 8001e38:	4302      	orrs	r2, r0
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001e3e:	68e2      	ldr	r2, [r4, #12]
 8001e40:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	68a1      	ldr	r1, [r4, #8]
 8001e46:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001e4a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e52:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	069b      	lsls	r3, r3, #26
 8001e58:	d405      	bmi.n	8001e66 <HAL_RTC_Init+0x7e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	f7ff ff92 	bl	8001d84 <HAL_RTC_WaitForSynchro>
 8001e60:	b108      	cbz	r0, 8001e66 <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e62:	6823      	ldr	r3, [r4, #0]
 8001e64:	e7d7      	b.n	8001e16 <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001e66:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001e68:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001e6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e70:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e74:	430a      	orrs	r2, r1
 8001e76:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001e78:	22ff      	movs	r2, #255	; 0xff
 8001e7a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	7763      	strb	r3, [r4, #29]
}
 8001e80:	4628      	mov	r0, r5
 8001e82:	bd38      	pop	{r3, r4, r5, pc}

08001e84 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8001e84:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8001e86:	2809      	cmp	r0, #9
 8001e88:	d803      	bhi.n	8001e92 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8001e8a:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8001e8e:	b2c0      	uxtb	r0, r0
 8001e90:	4770      	bx	lr
    Value -= 10U;
 8001e92:	380a      	subs	r0, #10
    bcdhigh++;
 8001e94:	3301      	adds	r3, #1
    Value -= 10U;
 8001e96:	b2c0      	uxtb	r0, r0
 8001e98:	e7f5      	b.n	8001e86 <RTC_ByteToBcd2+0x2>

08001e9a <HAL_RTC_SetTime>:
{
 8001e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001e9c:	7f03      	ldrb	r3, [r0, #28]
 8001e9e:	2b01      	cmp	r3, #1
{
 8001ea0:	4606      	mov	r6, r0
 8001ea2:	460f      	mov	r7, r1
 8001ea4:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hrtc);
 8001ea8:	d02f      	beq.n	8001f0a <HAL_RTC_SetTime+0x70>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	7703      	strb	r3, [r0, #28]
 8001eae:	6803      	ldr	r3, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001eb0:	7745      	strb	r5, [r0, #29]
 8001eb2:	7808      	ldrb	r0, [r1, #0]
 8001eb4:	784d      	ldrb	r5, [r1, #1]
 8001eb6:	788c      	ldrb	r4, [r1, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001eb8:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8001eba:	bb42      	cbnz	r2, 8001f0e <HAL_RTC_SetTime+0x74>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001ebc:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 8001ec0:	bf08      	it	eq
 8001ec2:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001ec4:	f7ff ffde 	bl	8001e84 <RTC_ByteToBcd2>
 8001ec8:	4601      	mov	r1, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001eca:	4628      	mov	r0, r5
 8001ecc:	f7ff ffda 	bl	8001e84 <RTC_ByteToBcd2>
 8001ed0:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	f7ff ffd6 	bl	8001e84 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001eda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001ede:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001ee2:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ee6:	6833      	ldr	r3, [r6, #0]
 8001ee8:	22ca      	movs	r2, #202	; 0xca
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24
 8001eec:	2253      	movs	r2, #83	; 0x53
 8001eee:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001ef0:	4630      	mov	r0, r6
 8001ef2:	f7ff ff5f 	bl	8001db4 <RTC_EnterInitMode>
 8001ef6:	6833      	ldr	r3, [r6, #0]
 8001ef8:	4605      	mov	r5, r0
 8001efa:	b1a8      	cbz	r0, 8001f28 <HAL_RTC_SetTime+0x8e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001efc:	22ff      	movs	r2, #255	; 0xff
 8001efe:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001f00:	2304      	movs	r3, #4
 8001f02:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8001f04:	2300      	movs	r3, #0
 8001f06:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 8001f08:	2501      	movs	r5, #1
}
 8001f0a:	4628      	mov	r0, r5
 8001f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001f0e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001f12:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00U;
 8001f16:	bf08      	it	eq
 8001f18:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001f1a:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001f1e:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 8001f20:	78cc      	ldrb	r4, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001f22:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001f26:	e7de      	b.n	8001ee6 <HAL_RTC_SetTime+0x4c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001f28:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 8001f2c:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8001f30:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8001f32:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001f34:	6938      	ldr	r0, [r7, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8001f36:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f3a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	6899      	ldr	r1, [r3, #8]
 8001f40:	4302      	orrs	r2, r0
 8001f42:	430a      	orrs	r2, r1
 8001f44:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f4c:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	069b      	lsls	r3, r3, #26
 8001f52:	d40a      	bmi.n	8001f6a <HAL_RTC_SetTime+0xd0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001f54:	4630      	mov	r0, r6
 8001f56:	f7ff ff15 	bl	8001d84 <HAL_RTC_WaitForSynchro>
 8001f5a:	b130      	cbz	r0, 8001f6a <HAL_RTC_SetTime+0xd0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8001f5c:	6833      	ldr	r3, [r6, #0]
 8001f5e:	22ff      	movs	r2, #255	; 0xff
 8001f60:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f62:	2304      	movs	r3, #4
 8001f64:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 8001f66:	7735      	strb	r5, [r6, #28]
 8001f68:	e7ce      	b.n	8001f08 <HAL_RTC_SetTime+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f6a:	6833      	ldr	r3, [r6, #0]
 8001f6c:	22ff      	movs	r2, #255	; 0xff
 8001f6e:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8001f70:	2301      	movs	r3, #1
 8001f72:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc); 
 8001f74:	2300      	movs	r3, #0
 8001f76:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 8001f78:	e7c7      	b.n	8001f0a <HAL_RTC_SetTime+0x70>

08001f7a <HAL_RTC_SetDate>:
{
 8001f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8001f7c:	7f03      	ldrb	r3, [r0, #28]
 8001f7e:	2b01      	cmp	r3, #1
{
 8001f80:	4605      	mov	r5, r0
 8001f82:	f04f 0602 	mov.w	r6, #2
 __HAL_LOCK(hrtc);
 8001f86:	d030      	beq.n	8001fea <HAL_RTC_SetDate+0x70>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8001f8c:	7746      	strb	r6, [r0, #29]
 8001f8e:	784b      	ldrb	r3, [r1, #1]
 8001f90:	78c8      	ldrb	r0, [r1, #3]
 8001f92:	788e      	ldrb	r6, [r1, #2]
 8001f94:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001f96:	2a00      	cmp	r2, #0
 8001f98:	d148      	bne.n	800202c <HAL_RTC_SetDate+0xb2>
 8001f9a:	06da      	lsls	r2, r3, #27
 8001f9c:	d503      	bpl.n	8001fa6 <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001f9e:	f023 0310 	bic.w	r3, r3, #16
 8001fa2:	330a      	adds	r3, #10
 8001fa4:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001fa6:	f7ff ff6d 	bl	8001e84 <RTC_ByteToBcd2>
 8001faa:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001fac:	7848      	ldrb	r0, [r1, #1]
 8001fae:	f7ff ff69 	bl	8001e84 <RTC_ByteToBcd2>
 8001fb2:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001fb4:	4630      	mov	r0, r6
 8001fb6:	f7ff ff65 	bl	8001e84 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001fba:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 8001fbe:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001fc2:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001fc6:	682b      	ldr	r3, [r5, #0]
 8001fc8:	22ca      	movs	r2, #202	; 0xca
 8001fca:	625a      	str	r2, [r3, #36]	; 0x24
 8001fcc:	2253      	movs	r2, #83	; 0x53
 8001fce:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001fd0:	4628      	mov	r0, r5
 8001fd2:	f7ff feef 	bl	8001db4 <RTC_EnterInitMode>
 8001fd6:	682b      	ldr	r3, [r5, #0]
 8001fd8:	4606      	mov	r6, r0
 8001fda:	b140      	cbz	r0, 8001fee <HAL_RTC_SetDate+0x74>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001fdc:	22ff      	movs	r2, #255	; 0xff
 8001fde:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001fe0:	2304      	movs	r3, #4
 8001fe2:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 8001fe8:	2601      	movs	r6, #1
}
 8001fea:	4630      	mov	r0, r6
 8001fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001fee:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8001ff2:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8001ff6:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ffe:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	069b      	lsls	r3, r3, #26
 8002004:	d40a      	bmi.n	800201c <HAL_RTC_SetDate+0xa2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002006:	4628      	mov	r0, r5
 8002008:	f7ff febc 	bl	8001d84 <HAL_RTC_WaitForSynchro>
 800200c:	b130      	cbz	r0, 800201c <HAL_RTC_SetDate+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800200e:	682b      	ldr	r3, [r5, #0]
 8002010:	22ff      	movs	r2, #255	; 0xff
 8002012:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002014:	2304      	movs	r3, #4
 8002016:	776b      	strb	r3, [r5, #29]
        __HAL_UNLOCK(hrtc);
 8002018:	772e      	strb	r6, [r5, #28]
 800201a:	e7e5      	b.n	8001fe8 <HAL_RTC_SetDate+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800201c:	682b      	ldr	r3, [r5, #0]
 800201e:	22ff      	movs	r2, #255	; 0xff
 8002020:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002022:	2301      	movs	r3, #1
 8002024:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8002026:	2300      	movs	r3, #0
 8002028:	772b      	strb	r3, [r5, #28]
    return HAL_OK;    
 800202a:	e7de      	b.n	8001fea <HAL_RTC_SetDate+0x70>
                  (((uint32_t)sDate->Month) << 8U) | \
 800202c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800202e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002032:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002034:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 8002038:	e7c5      	b.n	8001fc6 <HAL_RTC_SetDate+0x4c>

0800203a <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800203a:	6803      	ldr	r3, [r0, #0]
 800203c:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800203e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002042:	4770      	bx	lr

08002044 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002044:	6803      	ldr	r3, [r0, #0]
 8002046:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002048:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 800204c:	4770      	bx	lr

0800204e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800204e:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002050:	4604      	mov	r4, r0
 8002052:	2800      	cmp	r0, #0
 8002054:	d04e      	beq.n	80020f4 <HAL_SPI_Init+0xa6>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002056:	2300      	movs	r3, #0
 8002058:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800205a:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800205e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002062:	b91b      	cbnz	r3, 800206c <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002064:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002068:	f004 fb74 	bl	8006754 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800206c:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800206e:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002070:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002074:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002076:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8002078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800207c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8002080:	600b      	str	r3, [r1, #0]
 8002082:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002086:	d932      	bls.n	80020ee <HAL_SPI_Init+0xa0>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002088:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800208a:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800208e:	bf18      	it	ne
 8002090:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002092:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002094:	b92b      	cbnz	r3, 80020a2 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002096:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800209a:	bf8c      	ite	hi
 800209c:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800209e:	2301      	movls	r3, #1
 80020a0:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80020a2:	68a6      	ldr	r6, [r4, #8]
 80020a4:	6863      	ldr	r3, [r4, #4]
 80020a6:	69a5      	ldr	r5, [r4, #24]
 80020a8:	4333      	orrs	r3, r6
 80020aa:	6926      	ldr	r6, [r4, #16]
 80020ac:	4333      	orrs	r3, r6
 80020ae:	6966      	ldr	r6, [r4, #20]
 80020b0:	4333      	orrs	r3, r6
 80020b2:	69e6      	ldr	r6, [r4, #28]
 80020b4:	4333      	orrs	r3, r6
 80020b6:	6a26      	ldr	r6, [r4, #32]
 80020b8:	4333      	orrs	r3, r6
 80020ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80020bc:	4333      	orrs	r3, r6
 80020be:	f405 7600 	and.w	r6, r5, #512	; 0x200
 80020c2:	4333      	orrs	r3, r6
 80020c4:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80020c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020c8:	431a      	orrs	r2, r3
 80020ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80020cc:	0c2d      	lsrs	r5, r5, #16
 80020ce:	431a      	orrs	r2, r3
 80020d0:	f005 0504 	and.w	r5, r5, #4
 80020d4:	432a      	orrs	r2, r5
 80020d6:	4302      	orrs	r2, r0
 80020d8:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020da:	69cb      	ldr	r3, [r1, #28]
 80020dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020e0:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020e2:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80020e4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020e6:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80020e8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 80020ec:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80020ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80020f2:	e7cc      	b.n	800208e <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 80020f4:	2001      	movs	r0, #1
}
 80020f6:	bd70      	pop	{r4, r5, r6, pc}

080020f8 <HAL_TIM_Base_Start>:
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80020f8:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80020fa:	2302      	movs	r3, #2
 80020fc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 8002100:	6813      	ldr	r3, [r2, #0]
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6013      	str	r3, [r2, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002108:	2301      	movs	r3, #1
 800210a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
}
 800210e:	2000      	movs	r0, #0
 8002110:	4770      	bx	lr

08002112 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002112:	6803      	ldr	r3, [r0, #0]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	f042 0201 	orr.w	r2, r2, #1
 800211a:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	f042 0201 	orr.w	r2, r2, #1
 8002122:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8002124:	2000      	movs	r0, #0
 8002126:	4770      	bx	lr

08002128 <HAL_TIM_OC_MspInit>:
 8002128:	4770      	bx	lr

0800212a <HAL_TIM_OnePulse_MspInit>:
 800212a:	4770      	bx	lr

0800212c <HAL_TIM_OnePulse_Start_IT>:
    
    No need to enable the counter, it's enabled automatically by hardware 
    (the counter starts in response to a stimulus and generate a pulse */
 
  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800212c:	6803      	ldr	r3, [r0, #0]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	f042 0202 	orr.w	r2, r2, #2
 8002134:	60da      	str	r2, [r3, #12]
  
  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	f042 0204 	orr.w	r2, r2, #4
 800213c:	60da      	str	r2, [r3, #12]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800213e:	6a1a      	ldr	r2, [r3, #32]
 8002140:	f022 0201 	bic.w	r2, r2, #1
 8002144:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002146:	6a1a      	ldr	r2, [r3, #32]
 8002148:	f042 0201 	orr.w	r2, r2, #1
 800214c:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 800214e:	6a1a      	ldr	r2, [r3, #32]
 8002150:	f022 0210 	bic.w	r2, r2, #16
 8002154:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002156:	6a1a      	ldr	r2, [r3, #32]
 8002158:	f042 0210 	orr.w	r2, r2, #16
 800215c:	621a      	str	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 800215e:	4a0e      	ldr	r2, [pc, #56]	; (8002198 <HAL_TIM_OnePulse_Start_IT+0x6c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d013      	beq.n	800218c <HAL_TIM_OnePulse_Start_IT+0x60>
 8002164:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002168:	4293      	cmp	r3, r2
 800216a:	d00f      	beq.n	800218c <HAL_TIM_OnePulse_Start_IT+0x60>
 800216c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8002170:	4293      	cmp	r3, r2
 8002172:	d00b      	beq.n	800218c <HAL_TIM_OnePulse_Start_IT+0x60>
 8002174:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002178:	4293      	cmp	r3, r2
 800217a:	d007      	beq.n	800218c <HAL_TIM_OnePulse_Start_IT+0x60>
 800217c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002180:	4293      	cmp	r3, r2
 8002182:	d003      	beq.n	800218c <HAL_TIM_OnePulse_Start_IT+0x60>
 8002184:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002188:	4293      	cmp	r3, r2
 800218a:	d103      	bne.n	8002194 <HAL_TIM_OnePulse_Start_IT+0x68>
    __HAL_TIM_MOE_ENABLE(htim);
 800218c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800218e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002192:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002194:	2000      	movs	r0, #0
 8002196:	4770      	bx	lr
 8002198:	40012c00 	.word	0x40012c00

0800219c <HAL_TIM_PeriodElapsedCallback>:
 800219c:	4770      	bx	lr

0800219e <HAL_TIM_IC_CaptureCallback>:
 800219e:	4770      	bx	lr

080021a0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80021a0:	4770      	bx	lr

080021a2 <HAL_TIM_TriggerCallback>:
 80021a2:	4770      	bx	lr

080021a4 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021a4:	6803      	ldr	r3, [r0, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	0791      	lsls	r1, r2, #30
{
 80021aa:	b510      	push	{r4, lr}
 80021ac:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021ae:	d50f      	bpl.n	80021d0 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	0792      	lsls	r2, r2, #30
 80021b4:	d50c      	bpl.n	80021d0 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021b6:	f06f 0202 	mvn.w	r2, #2
 80021ba:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021bc:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021be:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021c0:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021c2:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021c4:	f000 8085 	beq.w	80022d2 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80021c8:	f7ff ffe9 	bl	800219e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021cc:	2300      	movs	r3, #0
 80021ce:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021d0:	6823      	ldr	r3, [r4, #0]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	0752      	lsls	r2, r2, #29
 80021d6:	d510      	bpl.n	80021fa <HAL_TIM_IRQHandler+0x56>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	0750      	lsls	r0, r2, #29
 80021dc:	d50d      	bpl.n	80021fa <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021de:	f06f 0204 	mvn.w	r2, #4
 80021e2:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021e4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021e6:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021e8:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021ec:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80021ee:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021f0:	d075      	beq.n	80022de <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80021f2:	f7ff ffd4 	bl	800219e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f6:	2300      	movs	r3, #0
 80021f8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021fa:	6823      	ldr	r3, [r4, #0]
 80021fc:	691a      	ldr	r2, [r3, #16]
 80021fe:	0711      	lsls	r1, r2, #28
 8002200:	d50f      	bpl.n	8002222 <HAL_TIM_IRQHandler+0x7e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	0712      	lsls	r2, r2, #28
 8002206:	d50c      	bpl.n	8002222 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002208:	f06f 0208 	mvn.w	r2, #8
 800220c:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800220e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002210:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002212:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002214:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002216:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002218:	d067      	beq.n	80022ea <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800221a:	f7ff ffc0 	bl	800219e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221e:	2300      	movs	r3, #0
 8002220:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002222:	6823      	ldr	r3, [r4, #0]
 8002224:	691a      	ldr	r2, [r3, #16]
 8002226:	06d0      	lsls	r0, r2, #27
 8002228:	d510      	bpl.n	800224c <HAL_TIM_IRQHandler+0xa8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	06d1      	lsls	r1, r2, #27
 800222e:	d50d      	bpl.n	800224c <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002230:	f06f 0210 	mvn.w	r2, #16
 8002234:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002236:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002238:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800223a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800223e:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002240:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002242:	d058      	beq.n	80022f6 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8002244:	f7ff ffab 	bl	800219e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002248:	2300      	movs	r3, #0
 800224a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800224c:	6823      	ldr	r3, [r4, #0]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	07d2      	lsls	r2, r2, #31
 8002252:	d508      	bpl.n	8002266 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	07d0      	lsls	r0, r2, #31
 8002258:	d505      	bpl.n	8002266 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800225a:	f06f 0201 	mvn.w	r2, #1
 800225e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002260:	4620      	mov	r0, r4
 8002262:	f7ff ff9b 	bl	800219c <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002266:	6823      	ldr	r3, [r4, #0]
 8002268:	691a      	ldr	r2, [r3, #16]
 800226a:	0611      	lsls	r1, r2, #24
 800226c:	d508      	bpl.n	8002280 <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	0612      	lsls	r2, r2, #24
 8002272:	d505      	bpl.n	8002280 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002274:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002278:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800227a:	4620      	mov	r0, r4
 800227c:	f000 fc03 	bl	8002a86 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002280:	6823      	ldr	r3, [r4, #0]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	05d0      	lsls	r0, r2, #23
 8002286:	d508      	bpl.n	800229a <HAL_TIM_IRQHandler+0xf6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	0611      	lsls	r1, r2, #24
 800228c:	d505      	bpl.n	800229a <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800228e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002292:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002294:	4620      	mov	r0, r4
 8002296:	f000 fbf7 	bl	8002a88 <HAL_TIMEx_Break2Callback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	691a      	ldr	r2, [r3, #16]
 800229e:	0652      	lsls	r2, r2, #25
 80022a0:	d508      	bpl.n	80022b4 <HAL_TIM_IRQHandler+0x110>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	0650      	lsls	r0, r2, #25
 80022a6:	d505      	bpl.n	80022b4 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022ac:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80022ae:	4620      	mov	r0, r4
 80022b0:	f7ff ff77 	bl	80021a2 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022b4:	6823      	ldr	r3, [r4, #0]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	0691      	lsls	r1, r2, #26
 80022ba:	d522      	bpl.n	8002302 <HAL_TIM_IRQHandler+0x15e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	0692      	lsls	r2, r2, #26
 80022c0:	d51f      	bpl.n	8002302 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022c2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80022c6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022c8:	611a      	str	r2, [r3, #16]
}
 80022ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80022ce:	f000 bbd9 	b.w	8002a84 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d2:	f003 fe9b 	bl	800600c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d6:	4620      	mov	r0, r4
 80022d8:	f7ff ff62 	bl	80021a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80022dc:	e776      	b.n	80021cc <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022de:	f003 fe95 	bl	800600c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e2:	4620      	mov	r0, r4
 80022e4:	f7ff ff5c 	bl	80021a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80022e8:	e785      	b.n	80021f6 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ea:	f003 fe8f 	bl	800600c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80022ee:	4620      	mov	r0, r4
 80022f0:	f7ff ff56 	bl	80021a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80022f4:	e793      	b.n	800221e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f6:	f003 fe89 	bl	800600c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022fa:	4620      	mov	r0, r4
 80022fc:	f7ff ff50 	bl	80021a0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002300:	e7a2      	b.n	8002248 <HAL_TIM_IRQHandler+0xa4>
 8002302:	bd10      	pop	{r4, pc}

08002304 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002304:	4a32      	ldr	r2, [pc, #200]	; (80023d0 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 8002306:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002308:	4290      	cmp	r0, r2
 800230a:	d012      	beq.n	8002332 <TIM_Base_SetConfig+0x2e>
 800230c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002310:	d00f      	beq.n	8002332 <TIM_Base_SetConfig+0x2e>
 8002312:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002316:	4290      	cmp	r0, r2
 8002318:	d00b      	beq.n	8002332 <TIM_Base_SetConfig+0x2e>
 800231a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800231e:	4290      	cmp	r0, r2
 8002320:	d007      	beq.n	8002332 <TIM_Base_SetConfig+0x2e>
 8002322:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8002326:	4290      	cmp	r0, r2
 8002328:	d003      	beq.n	8002332 <TIM_Base_SetConfig+0x2e>
 800232a:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800232e:	4290      	cmp	r0, r2
 8002330:	d115      	bne.n	800235e <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= Structure->CounterMode;
 8002332:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002338:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800233a:	4a25      	ldr	r2, [pc, #148]	; (80023d0 <TIM_Base_SetConfig+0xcc>)
 800233c:	4290      	cmp	r0, r2
 800233e:	d01d      	beq.n	800237c <TIM_Base_SetConfig+0x78>
 8002340:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002344:	d01a      	beq.n	800237c <TIM_Base_SetConfig+0x78>
 8002346:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800234a:	4290      	cmp	r0, r2
 800234c:	d016      	beq.n	800237c <TIM_Base_SetConfig+0x78>
 800234e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002352:	4290      	cmp	r0, r2
 8002354:	d012      	beq.n	800237c <TIM_Base_SetConfig+0x78>
 8002356:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800235a:	4290      	cmp	r0, r2
 800235c:	d00e      	beq.n	800237c <TIM_Base_SetConfig+0x78>
 800235e:	4a1d      	ldr	r2, [pc, #116]	; (80023d4 <TIM_Base_SetConfig+0xd0>)
 8002360:	4290      	cmp	r0, r2
 8002362:	d00b      	beq.n	800237c <TIM_Base_SetConfig+0x78>
 8002364:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002368:	4290      	cmp	r0, r2
 800236a:	d007      	beq.n	800237c <TIM_Base_SetConfig+0x78>
 800236c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002370:	4290      	cmp	r0, r2
 8002372:	d003      	beq.n	800237c <TIM_Base_SetConfig+0x78>
 8002374:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002378:	4290      	cmp	r0, r2
 800237a:	d103      	bne.n	8002384 <TIM_Base_SetConfig+0x80>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800237c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800237e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002382:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002384:	694a      	ldr	r2, [r1, #20]
 8002386:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800238a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800238c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800238e:	688b      	ldr	r3, [r1, #8]
 8002390:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002392:	680b      	ldr	r3, [r1, #0]
 8002394:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002396:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <TIM_Base_SetConfig+0xcc>)
 8002398:	4298      	cmp	r0, r3
 800239a:	d013      	beq.n	80023c4 <TIM_Base_SetConfig+0xc0>
 800239c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023a0:	4298      	cmp	r0, r3
 80023a2:	d00f      	beq.n	80023c4 <TIM_Base_SetConfig+0xc0>
 80023a4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80023a8:	4298      	cmp	r0, r3
 80023aa:	d00b      	beq.n	80023c4 <TIM_Base_SetConfig+0xc0>
 80023ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023b0:	4298      	cmp	r0, r3
 80023b2:	d007      	beq.n	80023c4 <TIM_Base_SetConfig+0xc0>
 80023b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023b8:	4298      	cmp	r0, r3
 80023ba:	d003      	beq.n	80023c4 <TIM_Base_SetConfig+0xc0>
 80023bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023c0:	4298      	cmp	r0, r3
 80023c2:	d101      	bne.n	80023c8 <TIM_Base_SetConfig+0xc4>
    TIMx->RCR = Structure->RepetitionCounter;
 80023c4:	690b      	ldr	r3, [r1, #16]
 80023c6:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80023c8:	2301      	movs	r3, #1
 80023ca:	6143      	str	r3, [r0, #20]
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40012c00 	.word	0x40012c00
 80023d4:	40014000 	.word	0x40014000

080023d8 <HAL_TIM_Base_Init>:
{ 
 80023d8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80023da:	4604      	mov	r4, r0
 80023dc:	b1a0      	cbz	r0, 8002408 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80023de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80023e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023e6:	b91b      	cbnz	r3, 80023f0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80023e8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80023ec:	f004 f9d6 	bl	800679c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80023f0:	2302      	movs	r3, #2
 80023f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80023f6:	6820      	ldr	r0, [r4, #0]
 80023f8:	1d21      	adds	r1, r4, #4
 80023fa:	f7ff ff83 	bl	8002304 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80023fe:	2301      	movs	r3, #1
 8002400:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002404:	2000      	movs	r0, #0
 8002406:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002408:	2001      	movs	r0, #1
}
 800240a:	bd10      	pop	{r4, pc}

0800240c <HAL_TIM_OC_Init>:
{
 800240c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800240e:	4604      	mov	r4, r0
 8002410:	b1a0      	cbz	r0, 800243c <HAL_TIM_OC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002412:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002416:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800241a:	b91b      	cbnz	r3, 8002424 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800241c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8002420:	f7ff fe82 	bl	8002128 <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002424:	2302      	movs	r3, #2
 8002426:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 800242a:	6820      	ldr	r0, [r4, #0]
 800242c:	1d21      	adds	r1, r4, #4
 800242e:	f7ff ff69 	bl	8002304 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002432:	2301      	movs	r3, #1
 8002434:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002438:	2000      	movs	r0, #0
 800243a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800243c:	2001      	movs	r0, #1
}
 800243e:	bd10      	pop	{r4, pc}

08002440 <HAL_TIM_OnePulse_Init>:
{
 8002440:	b538      	push	{r3, r4, r5, lr}
 8002442:	460d      	mov	r5, r1
  if(htim == NULL)
 8002444:	4604      	mov	r4, r0
 8002446:	b1e0      	cbz	r0, 8002482 <HAL_TIM_OnePulse_Init+0x42>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002448:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800244c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002450:	b91b      	cbnz	r3, 800245a <HAL_TIM_OnePulse_Init+0x1a>
    htim->Lock = HAL_UNLOCKED;
 8002452:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 8002456:	f7ff fe68 	bl	800212a <HAL_TIM_OnePulse_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800245a:	2302      	movs	r3, #2
 800245c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002460:	1d21      	adds	r1, r4, #4
 8002462:	6820      	ldr	r0, [r4, #0]
 8002464:	f7ff ff4e 	bl	8002304 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002468:	6823      	ldr	r3, [r4, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	f022 0208 	bic.w	r2, r2, #8
 8002470:	601a      	str	r2, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 8002472:	6819      	ldr	r1, [r3, #0]
 8002474:	4329      	orrs	r1, r5
 8002476:	6019      	str	r1, [r3, #0]
  htim->State= HAL_TIM_STATE_READY;
 8002478:	2301      	movs	r3, #1
 800247a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800247e:	2000      	movs	r0, #0
 8002480:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002482:	2001      	movs	r0, #1
}
 8002484:	bd38      	pop	{r3, r4, r5, pc}
	...

08002488 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002488:	6a03      	ldr	r3, [r0, #32]
 800248a:	f023 0301 	bic.w	r3, r3, #1
 800248e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002490:	6a03      	ldr	r3, [r0, #32]
{
 8002492:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2; 
 8002494:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002496:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= OC_Config->OCMode;
 8002498:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800249a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800249e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80024a2:	432a      	orrs	r2, r5
  tmpccer |= OC_Config->OCPolarity;
 80024a4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80024a6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80024aa:	432b      	orrs	r3, r5
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024ac:	4d1f      	ldr	r5, [pc, #124]	; (800252c <TIM_OC1_SetConfig+0xa4>)
 80024ae:	42a8      	cmp	r0, r5
 80024b0:	d013      	beq.n	80024da <TIM_OC1_SetConfig+0x52>
 80024b2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80024b6:	42a8      	cmp	r0, r5
 80024b8:	d00f      	beq.n	80024da <TIM_OC1_SetConfig+0x52>
 80024ba:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80024be:	42a8      	cmp	r0, r5
 80024c0:	d00b      	beq.n	80024da <TIM_OC1_SetConfig+0x52>
 80024c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80024c6:	42a8      	cmp	r0, r5
 80024c8:	d007      	beq.n	80024da <TIM_OC1_SetConfig+0x52>
 80024ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80024ce:	42a8      	cmp	r0, r5
 80024d0:	d003      	beq.n	80024da <TIM_OC1_SetConfig+0x52>
 80024d2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80024d6:	42a8      	cmp	r0, r5
 80024d8:	d122      	bne.n	8002520 <TIM_OC1_SetConfig+0x98>
    tmpccer |= OC_Config->OCNPolarity;
 80024da:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80024dc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80024e0:	432b      	orrs	r3, r5
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80024e2:	4d12      	ldr	r5, [pc, #72]	; (800252c <TIM_OC1_SetConfig+0xa4>)
 80024e4:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80024e6:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80024ea:	d013      	beq.n	8002514 <TIM_OC1_SetConfig+0x8c>
 80024ec:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80024f0:	42a8      	cmp	r0, r5
 80024f2:	d00f      	beq.n	8002514 <TIM_OC1_SetConfig+0x8c>
 80024f4:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80024f8:	42a8      	cmp	r0, r5
 80024fa:	d00b      	beq.n	8002514 <TIM_OC1_SetConfig+0x8c>
 80024fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002500:	42a8      	cmp	r0, r5
 8002502:	d007      	beq.n	8002514 <TIM_OC1_SetConfig+0x8c>
 8002504:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002508:	42a8      	cmp	r0, r5
 800250a:	d003      	beq.n	8002514 <TIM_OC1_SetConfig+0x8c>
 800250c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002510:	42a8      	cmp	r0, r5
 8002512:	d105      	bne.n	8002520 <TIM_OC1_SetConfig+0x98>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002514:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002518:	698e      	ldr	r6, [r1, #24]
 800251a:	694c      	ldr	r4, [r1, #20]
 800251c:	4334      	orrs	r4, r6
 800251e:	432c      	orrs	r4, r5
  TIMx->CR2 = tmpcr2;
 8002520:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002522:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002524:	684a      	ldr	r2, [r1, #4]
 8002526:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 8002528:	6203      	str	r3, [r0, #32]
 800252a:	bd70      	pop	{r4, r5, r6, pc}
 800252c:	40012c00 	.word	0x40012c00

08002530 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002530:	6a03      	ldr	r3, [r0, #32]
 8002532:	f023 0310 	bic.w	r3, r3, #16
 8002536:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002538:	6a03      	ldr	r3, [r0, #32]
{
 800253a:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2; 
 800253c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800253e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002540:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002542:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002546:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800254a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800254e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002550:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002554:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002558:	4d1a      	ldr	r5, [pc, #104]	; (80025c4 <TIM_OC2_SetConfig+0x94>)
 800255a:	42a8      	cmp	r0, r5
 800255c:	d007      	beq.n	800256e <TIM_OC2_SetConfig+0x3e>
 800255e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002562:	42a8      	cmp	r0, r5
 8002564:	d003      	beq.n	800256e <TIM_OC2_SetConfig+0x3e>
 8002566:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800256a:	42a8      	cmp	r0, r5
 800256c:	d10d      	bne.n	800258a <TIM_OC2_SetConfig+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800256e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002570:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002574:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002578:	4d12      	ldr	r5, [pc, #72]	; (80025c4 <TIM_OC2_SetConfig+0x94>)
 800257a:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800257c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002580:	d012      	beq.n	80025a8 <TIM_OC2_SetConfig+0x78>
 8002582:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002586:	42a8      	cmp	r0, r5
 8002588:	d00e      	beq.n	80025a8 <TIM_OC2_SetConfig+0x78>
 800258a:	4d0f      	ldr	r5, [pc, #60]	; (80025c8 <TIM_OC2_SetConfig+0x98>)
 800258c:	42a8      	cmp	r0, r5
 800258e:	d00b      	beq.n	80025a8 <TIM_OC2_SetConfig+0x78>
 8002590:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002594:	42a8      	cmp	r0, r5
 8002596:	d007      	beq.n	80025a8 <TIM_OC2_SetConfig+0x78>
 8002598:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800259c:	42a8      	cmp	r0, r5
 800259e:	d003      	beq.n	80025a8 <TIM_OC2_SetConfig+0x78>
 80025a0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80025a4:	42a8      	cmp	r0, r5
 80025a6:	d106      	bne.n	80025b6 <TIM_OC2_SetConfig+0x86>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025a8:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025ac:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025ae:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025b0:	4334      	orrs	r4, r6
 80025b2:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 80025b6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80025b8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80025ba:	684a      	ldr	r2, [r1, #4]
 80025bc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;  
 80025be:	6203      	str	r3, [r0, #32]
 80025c0:	bd70      	pop	{r4, r5, r6, pc}
 80025c2:	bf00      	nop
 80025c4:	40012c00 	.word	0x40012c00
 80025c8:	40014000 	.word	0x40014000

080025cc <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025cc:	6a03      	ldr	r3, [r0, #32]
 80025ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025d2:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80025d4:	6a03      	ldr	r3, [r0, #32]
{
 80025d6:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2; 
 80025d8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80025da:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx |= OC_Config->OCMode;
 80025dc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80025de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80025e2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80025e6:	432a      	orrs	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025e8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80025ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025ee:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025f2:	4d1a      	ldr	r5, [pc, #104]	; (800265c <TIM_OC3_SetConfig+0x90>)
 80025f4:	42a8      	cmp	r0, r5
 80025f6:	d007      	beq.n	8002608 <TIM_OC3_SetConfig+0x3c>
 80025f8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80025fc:	42a8      	cmp	r0, r5
 80025fe:	d003      	beq.n	8002608 <TIM_OC3_SetConfig+0x3c>
 8002600:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8002604:	42a8      	cmp	r0, r5
 8002606:	d10d      	bne.n	8002624 <TIM_OC3_SetConfig+0x58>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002608:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800260a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800260e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002612:	4d12      	ldr	r5, [pc, #72]	; (800265c <TIM_OC3_SetConfig+0x90>)
 8002614:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8002616:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800261a:	d012      	beq.n	8002642 <TIM_OC3_SetConfig+0x76>
 800261c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002620:	42a8      	cmp	r0, r5
 8002622:	d00e      	beq.n	8002642 <TIM_OC3_SetConfig+0x76>
 8002624:	4d0e      	ldr	r5, [pc, #56]	; (8002660 <TIM_OC3_SetConfig+0x94>)
 8002626:	42a8      	cmp	r0, r5
 8002628:	d00b      	beq.n	8002642 <TIM_OC3_SetConfig+0x76>
 800262a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800262e:	42a8      	cmp	r0, r5
 8002630:	d007      	beq.n	8002642 <TIM_OC3_SetConfig+0x76>
 8002632:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002636:	42a8      	cmp	r0, r5
 8002638:	d003      	beq.n	8002642 <TIM_OC3_SetConfig+0x76>
 800263a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800263e:	42a8      	cmp	r0, r5
 8002640:	d106      	bne.n	8002650 <TIM_OC3_SetConfig+0x84>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002642:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002646:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002648:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800264a:	4334      	orrs	r4, r6
 800264c:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  TIMx->CR2 = tmpcr2;
 8002650:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002652:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002654:	684a      	ldr	r2, [r1, #4]
 8002656:	63c2      	str	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;  
 8002658:	6203      	str	r3, [r0, #32]
 800265a:	bd70      	pop	{r4, r5, r6, pc}
 800265c:	40012c00 	.word	0x40012c00
 8002660:	40014000 	.word	0x40014000

08002664 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002664:	6a03      	ldr	r3, [r0, #32]
 8002666:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800266a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800266c:	6a03      	ldr	r3, [r0, #32]
{
 800266e:	b530      	push	{r4, r5, lr}
  tmpcr2 =  TIMx->CR2; 
 8002670:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002672:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002674:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002676:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800267a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800267e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002682:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002684:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002688:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800268c:	4d10      	ldr	r5, [pc, #64]	; (80026d0 <TIM_OC4_SetConfig+0x6c>)
 800268e:	42a8      	cmp	r0, r5
 8002690:	d013      	beq.n	80026ba <TIM_OC4_SetConfig+0x56>
 8002692:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002696:	42a8      	cmp	r0, r5
 8002698:	d00f      	beq.n	80026ba <TIM_OC4_SetConfig+0x56>
 800269a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800269e:	42a8      	cmp	r0, r5
 80026a0:	d00b      	beq.n	80026ba <TIM_OC4_SetConfig+0x56>
 80026a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80026a6:	42a8      	cmp	r0, r5
 80026a8:	d007      	beq.n	80026ba <TIM_OC4_SetConfig+0x56>
 80026aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80026ae:	42a8      	cmp	r0, r5
 80026b0:	d003      	beq.n	80026ba <TIM_OC4_SetConfig+0x56>
 80026b2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80026b6:	42a8      	cmp	r0, r5
 80026b8:	d104      	bne.n	80026c4 <TIM_OC4_SetConfig+0x60>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80026ba:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026bc:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80026c0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  TIMx->CR2 = tmpcr2;
 80026c4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80026c6:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80026c8:	684a      	ldr	r2, [r1, #4]
 80026ca:	6402      	str	r2, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;  
 80026cc:	6203      	str	r3, [r0, #32]
 80026ce:	bd30      	pop	{r4, r5, pc}
 80026d0:	40012c00 	.word	0x40012c00

080026d4 <TIM_ETR_SetConfig>:
{
 80026d4:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 80026d6:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026d8:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026da:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026de:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80026e2:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 80026e4:	6083      	str	r3, [r0, #8]
 80026e6:	bd10      	pop	{r4, pc}

080026e8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80026e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80026ec:	2b01      	cmp	r3, #1
{
 80026ee:	b570      	push	{r4, r5, r6, lr}
 80026f0:	4604      	mov	r4, r0
 80026f2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80026f6:	d01a      	beq.n	800272e <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 80026f8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80026fc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80026fe:	2301      	movs	r3, #1
 8002700:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002704:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002706:	4b52      	ldr	r3, [pc, #328]	; (8002850 <HAL_TIM_ConfigClockSource+0x168>)
 8002708:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800270a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800270c:	680b      	ldr	r3, [r1, #0]
 800270e:	2b40      	cmp	r3, #64	; 0x40
 8002710:	d075      	beq.n	80027fe <HAL_TIM_ConfigClockSource+0x116>
 8002712:	d818      	bhi.n	8002746 <HAL_TIM_ConfigClockSource+0x5e>
 8002714:	2b10      	cmp	r3, #16
 8002716:	f000 808f 	beq.w	8002838 <HAL_TIM_ConfigClockSource+0x150>
 800271a:	d809      	bhi.n	8002730 <HAL_TIM_ConfigClockSource+0x48>
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 8085 	beq.w	800282c <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 8002722:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002724:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002726:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800272a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800272e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002730:	2b20      	cmp	r3, #32
 8002732:	f000 8087 	beq.w	8002844 <HAL_TIM_ConfigClockSource+0x15c>
 8002736:	2b30      	cmp	r3, #48	; 0x30
 8002738:	d1f3      	bne.n	8002722 <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 800273a:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800273c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002740:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8002744:	e033      	b.n	80027ae <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8002746:	2b70      	cmp	r3, #112	; 0x70
 8002748:	d033      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0xca>
 800274a:	d81b      	bhi.n	8002784 <HAL_TIM_ConfigClockSource+0x9c>
 800274c:	2b50      	cmp	r3, #80	; 0x50
 800274e:	d03f      	beq.n	80027d0 <HAL_TIM_ConfigClockSource+0xe8>
 8002750:	2b60      	cmp	r3, #96	; 0x60
 8002752:	d1e6      	bne.n	8002722 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002754:	684d      	ldr	r5, [r1, #4]
 8002756:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002758:	6a01      	ldr	r1, [r0, #32]
 800275a:	f021 0110 	bic.w	r1, r1, #16
 800275e:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002760:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002762:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002764:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002768:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800276c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002770:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002774:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002776:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8002778:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800277a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800277e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002782:	e014      	b.n	80027ae <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8002784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002788:	d00c      	beq.n	80027a4 <HAL_TIM_ConfigClockSource+0xbc>
 800278a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800278e:	d1c8      	bne.n	8002722 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8002790:	68cb      	ldr	r3, [r1, #12]
 8002792:	684a      	ldr	r2, [r1, #4]
 8002794:	6889      	ldr	r1, [r1, #8]
 8002796:	f7ff ff9d 	bl	80026d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800279a:	6822      	ldr	r2, [r4, #0]
 800279c:	6893      	ldr	r3, [r2, #8]
 800279e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a2:	e013      	b.n	80027cc <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80027a4:	6883      	ldr	r3, [r0, #8]
 80027a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027aa:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 80027ae:	6083      	str	r3, [r0, #8]
 80027b0:	e7b7      	b.n	8002722 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 80027b2:	68cb      	ldr	r3, [r1, #12]
 80027b4:	684a      	ldr	r2, [r1, #4]
 80027b6:	6889      	ldr	r1, [r1, #8]
 80027b8:	f7ff ff8c 	bl	80026d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027bc:	6822      	ldr	r2, [r4, #0]
 80027be:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027cc:	6093      	str	r3, [r2, #8]
    break;
 80027ce:	e7a8      	b.n	8002722 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80027d0:	684a      	ldr	r2, [r1, #4]
 80027d2:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80027d4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027d6:	6a05      	ldr	r5, [r0, #32]
 80027d8:	f025 0501 	bic.w	r5, r5, #1
 80027dc:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80027de:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027e0:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027e8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80027ec:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80027ee:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80027f0:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 80027f2:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80027f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80027f8:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 80027fc:	e7d7      	b.n	80027ae <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80027fe:	684a      	ldr	r2, [r1, #4]
 8002800:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002802:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002804:	6a05      	ldr	r5, [r0, #32]
 8002806:	f025 0501 	bic.w	r5, r5, #1
 800280a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800280c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800280e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002816:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800281a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800281c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800281e:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8002820:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002826:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800282a:	e7c0      	b.n	80027ae <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 800282c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800282e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002832:	f043 0307 	orr.w	r3, r3, #7
 8002836:	e7ba      	b.n	80027ae <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8002838:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800283a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800283e:	f043 0317 	orr.w	r3, r3, #23
 8002842:	e7b4      	b.n	80027ae <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8002844:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800284a:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 800284e:	e7ae      	b.n	80027ae <HAL_TIM_ConfigClockSource+0xc6>
 8002850:	fffe0088 	.word	0xfffe0088

08002854 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002854:	6a03      	ldr	r3, [r0, #32]
 8002856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800285c:	6a03      	ldr	r3, [r0, #32]
{
 800285e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002860:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002862:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002864:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002866:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800286a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800286e:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002870:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8002872:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002876:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800287a:	4d11      	ldr	r5, [pc, #68]	; (80028c0 <TIM_OC5_SetConfig+0x6c>)
 800287c:	42a8      	cmp	r0, r5
 800287e:	d013      	beq.n	80028a8 <TIM_OC5_SetConfig+0x54>
 8002880:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002884:	42a8      	cmp	r0, r5
 8002886:	d00f      	beq.n	80028a8 <TIM_OC5_SetConfig+0x54>
 8002888:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800288c:	42a8      	cmp	r0, r5
 800288e:	d00b      	beq.n	80028a8 <TIM_OC5_SetConfig+0x54>
 8002890:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002894:	42a8      	cmp	r0, r5
 8002896:	d007      	beq.n	80028a8 <TIM_OC5_SetConfig+0x54>
 8002898:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800289c:	42a8      	cmp	r0, r5
 800289e:	d003      	beq.n	80028a8 <TIM_OC5_SetConfig+0x54>
 80028a0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80028a4:	42a8      	cmp	r0, r5
 80028a6:	d104      	bne.n	80028b2 <TIM_OC5_SetConfig+0x5e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80028a8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80028aa:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80028ae:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028b2:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80028b4:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80028b6:	684a      	ldr	r2, [r1, #4]
 80028b8:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80028ba:	6203      	str	r3, [r0, #32]
 80028bc:	bd30      	pop	{r4, r5, pc}
 80028be:	bf00      	nop
 80028c0:	40012c00 	.word	0x40012c00

080028c4 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80028c4:	6a03      	ldr	r3, [r0, #32]
 80028c6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80028ca:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028cc:	6a03      	ldr	r3, [r0, #32]
{
 80028ce:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80028d0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80028d2:	6d42      	ldr	r2, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028d4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80028d6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80028da:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028de:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80028e2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80028e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80028e8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80028ec:	4d10      	ldr	r5, [pc, #64]	; (8002930 <TIM_OC6_SetConfig+0x6c>)
 80028ee:	42a8      	cmp	r0, r5
 80028f0:	d013      	beq.n	800291a <TIM_OC6_SetConfig+0x56>
 80028f2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80028f6:	42a8      	cmp	r0, r5
 80028f8:	d00f      	beq.n	800291a <TIM_OC6_SetConfig+0x56>
 80028fa:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80028fe:	42a8      	cmp	r0, r5
 8002900:	d00b      	beq.n	800291a <TIM_OC6_SetConfig+0x56>
 8002902:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002906:	42a8      	cmp	r0, r5
 8002908:	d007      	beq.n	800291a <TIM_OC6_SetConfig+0x56>
 800290a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800290e:	42a8      	cmp	r0, r5
 8002910:	d003      	beq.n	800291a <TIM_OC6_SetConfig+0x56>
 8002912:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002916:	42a8      	cmp	r0, r5
 8002918:	d104      	bne.n	8002924 <TIM_OC6_SetConfig+0x60>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800291a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 800291c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002920:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002924:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002926:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002928:	684a      	ldr	r2, [r1, #4]
 800292a:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800292c:	6203      	str	r3, [r0, #32]
 800292e:	bd30      	pop	{r4, r5, pc}
 8002930:	40012c00 	.word	0x40012c00

08002934 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim); 
 8002934:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002938:	2b01      	cmp	r3, #1
{  
 800293a:	b510      	push	{r4, lr}
 800293c:	4604      	mov	r4, r0
 800293e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim); 
 8002942:	d010      	beq.n	8002966 <HAL_TIM_OC_ConfigChannel+0x32>
 8002944:	2301      	movs	r3, #1
  switch (Channel)
 8002946:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim); 
 8002948:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800294c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8002950:	d01c      	beq.n	800298c <HAL_TIM_OC_ConfigChannel+0x58>
 8002952:	d809      	bhi.n	8002968 <HAL_TIM_OC_ConfigChannel+0x34>
 8002954:	b192      	cbz	r2, 800297c <HAL_TIM_OC_ConfigChannel+0x48>
 8002956:	2a04      	cmp	r2, #4
 8002958:	d014      	beq.n	8002984 <HAL_TIM_OC_ConfigChannel+0x50>
  htim->State = HAL_TIM_STATE_READY;
 800295a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim); 
 800295c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800295e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim); 
 8002962:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002966:	bd10      	pop	{r4, pc}
  switch (Channel)
 8002968:	2a10      	cmp	r2, #16
 800296a:	d013      	beq.n	8002994 <HAL_TIM_OC_ConfigChannel+0x60>
 800296c:	2a14      	cmp	r2, #20
 800296e:	d015      	beq.n	800299c <HAL_TIM_OC_ConfigChannel+0x68>
 8002970:	2a0c      	cmp	r2, #12
 8002972:	d1f2      	bne.n	800295a <HAL_TIM_OC_ConfigChannel+0x26>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002974:	6820      	ldr	r0, [r4, #0]
 8002976:	f7ff fe75 	bl	8002664 <TIM_OC4_SetConfig>
    break;
 800297a:	e7ee      	b.n	800295a <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800297c:	6820      	ldr	r0, [r4, #0]
 800297e:	f7ff fd83 	bl	8002488 <TIM_OC1_SetConfig>
    break;
 8002982:	e7ea      	b.n	800295a <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002984:	6820      	ldr	r0, [r4, #0]
 8002986:	f7ff fdd3 	bl	8002530 <TIM_OC2_SetConfig>
    break;
 800298a:	e7e6      	b.n	800295a <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800298c:	6820      	ldr	r0, [r4, #0]
 800298e:	f7ff fe1d 	bl	80025cc <TIM_OC3_SetConfig>
    break;
 8002992:	e7e2      	b.n	800295a <HAL_TIM_OC_ConfigChannel+0x26>
       TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002994:	6820      	ldr	r0, [r4, #0]
 8002996:	f7ff ff5d 	bl	8002854 <TIM_OC5_SetConfig>
    break;
 800299a:	e7de      	b.n	800295a <HAL_TIM_OC_ConfigChannel+0x26>
       TIM_OC6_SetConfig(htim->Instance, sConfig);
 800299c:	6820      	ldr	r0, [r4, #0]
 800299e:	f7ff ff91 	bl	80028c4 <TIM_OC6_SetConfig>
    break;
 80029a2:	e7da      	b.n	800295a <HAL_TIM_OC_ConfigChannel+0x26>

080029a4 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 80029a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80029a8:	2b01      	cmp	r3, #1
{
 80029aa:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80029ac:	d020      	beq.n	80029f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  tmpcr2 = htim->Instance->CR2;
 80029ae:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80029b0:	4d10      	ldr	r5, [pc, #64]	; (80029f4 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
  tmpcr2 = htim->Instance->CR2;
 80029b2:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80029b4:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80029b6:	42aa      	cmp	r2, r5
 80029b8:	d007      	beq.n	80029ca <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80029ba:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80029be:	42aa      	cmp	r2, r5
 80029c0:	d003      	beq.n	80029ca <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80029c2:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80029c6:	42aa      	cmp	r2, r5
 80029c8:	d103      	bne.n	80029d2 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80029ca:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80029cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80029d0:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029d2:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029d4:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80029d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029da:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 80029dc:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  htim->Instance->CR2 = tmpcr2;
 80029e0:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029e2:	4321      	orrs	r1, r4
  __HAL_UNLOCK(htim);
 80029e4:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 80029e6:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80029e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80029ec:	4618      	mov	r0, r3
 80029ee:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80029f0:	2002      	movs	r0, #2
} 
 80029f2:	bd30      	pop	{r4, r5, pc}
 80029f4:	40012c00 	.word	0x40012c00

080029f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 80029f8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80029fc:	2b01      	cmp	r3, #1
{
 80029fe:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002a00:	d03c      	beq.n	8002a7c <HAL_TIMEx_ConfigBreakDeadTime+0x84>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002a02:	68cb      	ldr	r3, [r1, #12]
 8002a04:	688a      	ldr	r2, [r1, #8]
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002a06:	4c1e      	ldr	r4, [pc, #120]	; (8002a80 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a0c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002a0e:	684a      	ldr	r2, [r1, #4]
 8002a10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a14:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002a16:	680a      	ldr	r2, [r1, #0]
 8002a18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a1c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002a1e:	690a      	ldr	r2, [r1, #16]
 8002a20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a24:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002a26:	694a      	ldr	r2, [r1, #20]
 8002a28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a2c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002a2e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002a30:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a34:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8002a36:	698a      	ldr	r2, [r1, #24]
 8002a38:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002a3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002a40:	6802      	ldr	r2, [r0, #0]
 8002a42:	42a2      	cmp	r2, r4
 8002a44:	d007      	beq.n	8002a56 <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 8002a46:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8002a4a:	42a2      	cmp	r2, r4
 8002a4c:	d003      	beq.n	8002a56 <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 8002a4e:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8002a52:	42a2      	cmp	r2, r4
 8002a54:	d10c      	bne.n	8002a70 <HAL_TIMEx_ConfigBreakDeadTime+0x78>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8002a56:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002a58:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002a5c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002a60:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002a62:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002a64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a68:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002a6a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002a6e:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8002a70:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8002a72:	2300      	movs	r3, #0
 8002a74:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002a78:	4618      	mov	r0, r3
 8002a7a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8002a7c:	2002      	movs	r0, #2
}
 8002a7e:	bd10      	pop	{r4, pc}
 8002a80:	40012c00 	.word	0x40012c00

08002a84 <HAL_TIMEx_CommutationCallback>:
 8002a84:	4770      	bx	lr

08002a86 <HAL_TIMEx_BreakCallback>:
 8002a86:	4770      	bx	lr

08002a88 <HAL_TIMEx_Break2Callback>:
{
 8002a88:	4770      	bx	lr
	...

08002a8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a8c:	b538      	push	{r3, r4, r5, lr}
 8002a8e:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002a90:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a92:	6921      	ldr	r1, [r4, #16]
 8002a94:	68a2      	ldr	r2, [r4, #8]
 8002a96:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002a98:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	6961      	ldr	r1, [r4, #20]
 8002a9e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002aa0:	4977      	ldr	r1, [pc, #476]	; (8002c80 <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002aa2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002aa4:	4001      	ands	r1, r0
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aaa:	686a      	ldr	r2, [r5, #4]
 8002aac:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002aae:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ab0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002ab8:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002aba:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002abc:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002ac0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ac6:	4a6f      	ldr	r2, [pc, #444]	; (8002c84 <UART_SetConfig+0x1f8>)
 8002ac8:	4295      	cmp	r5, r2
 8002aca:	d112      	bne.n	8002af2 <UART_SetConfig+0x66>
 8002acc:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8002ad0:	496d      	ldr	r1, [pc, #436]	; (8002c88 <UART_SetConfig+0x1fc>)
 8002ad2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ad4:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002adc:	5c8a      	ldrb	r2, [r1, r2]
 8002ade:	d066      	beq.n	8002bae <UART_SetConfig+0x122>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8002ae0:	2a08      	cmp	r2, #8
 8002ae2:	d819      	bhi.n	8002b18 <UART_SetConfig+0x8c>
 8002ae4:	e8df f002 	tbb	[pc, r2]
 8002ae8:	189e92c2 	.word	0x189e92c2
 8002aec:	181818a9 	.word	0x181818a9
 8002af0:	ac          	.byte	0xac
 8002af1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002af2:	4a66      	ldr	r2, [pc, #408]	; (8002c8c <UART_SetConfig+0x200>)
 8002af4:	4295      	cmp	r5, r2
 8002af6:	d124      	bne.n	8002b42 <UART_SetConfig+0xb6>
 8002af8:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8002afc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002afe:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002b02:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002b06:	f000 80a0 	beq.w	8002c4a <UART_SetConfig+0x1be>
 8002b0a:	d807      	bhi.n	8002b1c <UART_SetConfig+0x90>
 8002b0c:	2a00      	cmp	r2, #0
 8002b0e:	f000 80aa 	beq.w	8002c66 <UART_SetConfig+0x1da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b16:	d076      	beq.n	8002c06 <UART_SetConfig+0x17a>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002b18:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8002b1a:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b1c:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8002b20:	f000 8099 	beq.w	8002c56 <UART_SetConfig+0x1ca>
 8002b24:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8002b28:	d1f3      	bne.n	8002b12 <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b2e:	d179      	bne.n	8002c24 <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002b30:	6860      	ldr	r0, [r4, #4]
 8002b32:	0843      	lsrs	r3, r0, #1
 8002b34:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002b38:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002b3c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002b40:	e054      	b.n	8002bec <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b42:	4a53      	ldr	r2, [pc, #332]	; (8002c90 <UART_SetConfig+0x204>)
 8002b44:	4295      	cmp	r5, r2
 8002b46:	d10e      	bne.n	8002b66 <UART_SetConfig+0xda>
 8002b48:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8002b4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b4e:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8002b52:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8002b56:	d078      	beq.n	8002c4a <UART_SetConfig+0x1be>
 8002b58:	d9d8      	bls.n	8002b0c <UART_SetConfig+0x80>
 8002b5a:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8002b5e:	d07a      	beq.n	8002c56 <UART_SetConfig+0x1ca>
 8002b60:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8002b64:	e7e0      	b.n	8002b28 <UART_SetConfig+0x9c>
 8002b66:	4a4b      	ldr	r2, [pc, #300]	; (8002c94 <UART_SetConfig+0x208>)
 8002b68:	4295      	cmp	r5, r2
 8002b6a:	d10e      	bne.n	8002b8a <UART_SetConfig+0xfe>
 8002b6c:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8002b70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b72:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8002b76:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002b7a:	d066      	beq.n	8002c4a <UART_SetConfig+0x1be>
 8002b7c:	d9c6      	bls.n	8002b0c <UART_SetConfig+0x80>
 8002b7e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002b82:	d068      	beq.n	8002c56 <UART_SetConfig+0x1ca>
 8002b84:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8002b88:	e7ce      	b.n	8002b28 <UART_SetConfig+0x9c>
 8002b8a:	4a43      	ldr	r2, [pc, #268]	; (8002c98 <UART_SetConfig+0x20c>)
 8002b8c:	4295      	cmp	r5, r2
 8002b8e:	d1c0      	bne.n	8002b12 <UART_SetConfig+0x86>
 8002b90:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8002b94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b96:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8002b9a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002b9e:	d054      	beq.n	8002c4a <UART_SetConfig+0x1be>
 8002ba0:	d9b4      	bls.n	8002b0c <UART_SetConfig+0x80>
 8002ba2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8002ba6:	d056      	beq.n	8002c56 <UART_SetConfig+0x1ca>
 8002ba8:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8002bac:	e7bc      	b.n	8002b28 <UART_SetConfig+0x9c>
    switch (clocksource)
 8002bae:	2a08      	cmp	r2, #8
 8002bb0:	d829      	bhi.n	8002c06 <UART_SetConfig+0x17a>
 8002bb2:	a301      	add	r3, pc, #4	; (adr r3, 8002bb8 <UART_SetConfig+0x12c>)
 8002bb4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8002bb8:	08002bdd 	.word	0x08002bdd
 8002bbc:	08002c01 	.word	0x08002c01
 8002bc0:	08002b31 	.word	0x08002b31
 8002bc4:	08002c07 	.word	0x08002c07
 8002bc8:	08002c51 	.word	0x08002c51
 8002bcc:	08002c07 	.word	0x08002c07
 8002bd0:	08002c07 	.word	0x08002c07
 8002bd4:	08002c07 	.word	0x08002c07
 8002bd8:	08002c5d 	.word	0x08002c5d
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002bdc:	f7fe ff5e 	bl	8001a9c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002be0:	6861      	ldr	r1, [r4, #4]
 8002be2:	084a      	lsrs	r2, r1, #1
 8002be4:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002be8:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bec:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bee:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8002bf0:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8002bf4:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bf6:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60cb      	str	r3, [r1, #12]
 8002bfe:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002c00:	f7fe ff64 	bl	8001acc <HAL_RCC_GetPCLK2Freq>
 8002c04:	e7ec      	b.n	8002be0 <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 8002c06:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e7f1      	b.n	8002bf0 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002c0c:	f7fe ff5e 	bl	8001acc <HAL_RCC_GetPCLK2Freq>
 8002c10:	6863      	ldr	r3, [r4, #4]
 8002c12:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002c16:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c1a:	4b1a      	ldr	r3, [pc, #104]	; (8002c84 <UART_SetConfig+0x1f8>)
 8002c1c:	b280      	uxth	r0, r0
 8002c1e:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c20:	2000      	movs	r0, #0
        break;
 8002c22:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002c24:	6862      	ldr	r2, [r4, #4]
 8002c26:	0853      	lsrs	r3, r2, #1
 8002c28:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002c2c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002c30:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	60eb      	str	r3, [r5, #12]
 8002c38:	e7f2      	b.n	8002c20 <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002c3a:	f7fe fe3b 	bl	80018b4 <HAL_RCC_GetSysClockFreq>
 8002c3e:	e017      	b.n	8002c70 <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002c40:	6862      	ldr	r2, [r4, #4]
 8002c42:	0853      	lsrs	r3, r2, #1
 8002c44:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002c48:	e7f2      	b.n	8002c30 <UART_SetConfig+0x1a4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c4e:	d1f4      	bne.n	8002c3a <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002c50:	f7fe fe30 	bl	80018b4 <HAL_RCC_GetSysClockFreq>
 8002c54:	e7c4      	b.n	8002be0 <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c5a:	d1f1      	bne.n	8002c40 <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002c5c:	6860      	ldr	r0, [r4, #4]
 8002c5e:	0843      	lsrs	r3, r0, #1
 8002c60:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002c64:	e76a      	b.n	8002b3c <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c6a:	d0b7      	beq.n	8002bdc <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002c6c:	f7fe ff16 	bl	8001a9c <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002c70:	6863      	ldr	r3, [r4, #4]
 8002c72:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002c76:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c7a:	b280      	uxth	r0, r0
 8002c7c:	60e8      	str	r0, [r5, #12]
 8002c7e:	e7cf      	b.n	8002c20 <UART_SetConfig+0x194>
 8002c80:	efff69f3 	.word	0xefff69f3
 8002c84:	40013800 	.word	0x40013800
 8002c88:	08007de4 	.word	0x08007de4
 8002c8c:	40004400 	.word	0x40004400
 8002c90:	40004800 	.word	0x40004800
 8002c94:	40004c00 	.word	0x40004c00
 8002c98:	40005000 	.word	0x40005000

08002c9c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c9e:	07da      	lsls	r2, r3, #31
{
 8002ca0:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ca2:	d506      	bpl.n	8002cb2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ca4:	6801      	ldr	r1, [r0, #0]
 8002ca6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002ca8:	684a      	ldr	r2, [r1, #4]
 8002caa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002cae:	4322      	orrs	r2, r4
 8002cb0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cb2:	079c      	lsls	r4, r3, #30
 8002cb4:	d506      	bpl.n	8002cc4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cb6:	6801      	ldr	r1, [r0, #0]
 8002cb8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002cba:	684a      	ldr	r2, [r1, #4]
 8002cbc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002cc0:	4322      	orrs	r2, r4
 8002cc2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cc4:	0759      	lsls	r1, r3, #29
 8002cc6:	d506      	bpl.n	8002cd6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cc8:	6801      	ldr	r1, [r0, #0]
 8002cca:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002ccc:	684a      	ldr	r2, [r1, #4]
 8002cce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cd2:	4322      	orrs	r2, r4
 8002cd4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cd6:	071a      	lsls	r2, r3, #28
 8002cd8:	d506      	bpl.n	8002ce8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cda:	6801      	ldr	r1, [r0, #0]
 8002cdc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002cde:	684a      	ldr	r2, [r1, #4]
 8002ce0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ce4:	4322      	orrs	r2, r4
 8002ce6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ce8:	06dc      	lsls	r4, r3, #27
 8002cea:	d506      	bpl.n	8002cfa <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cec:	6801      	ldr	r1, [r0, #0]
 8002cee:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002cf0:	688a      	ldr	r2, [r1, #8]
 8002cf2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cf6:	4322      	orrs	r2, r4
 8002cf8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cfa:	0699      	lsls	r1, r3, #26
 8002cfc:	d506      	bpl.n	8002d0c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cfe:	6801      	ldr	r1, [r0, #0]
 8002d00:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002d02:	688a      	ldr	r2, [r1, #8]
 8002d04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d08:	4322      	orrs	r2, r4
 8002d0a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d0c:	065a      	lsls	r2, r3, #25
 8002d0e:	d50f      	bpl.n	8002d30 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d10:	6801      	ldr	r1, [r0, #0]
 8002d12:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002d14:	684a      	ldr	r2, [r1, #4]
 8002d16:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002d1a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d1c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d20:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d22:	d105      	bne.n	8002d30 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d24:	684a      	ldr	r2, [r1, #4]
 8002d26:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002d28:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002d2c:	4322      	orrs	r2, r4
 8002d2e:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d30:	061b      	lsls	r3, r3, #24
 8002d32:	d506      	bpl.n	8002d42 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d34:	6802      	ldr	r2, [r0, #0]
 8002d36:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002d38:	6853      	ldr	r3, [r2, #4]
 8002d3a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	6053      	str	r3, [r2, #4]
 8002d42:	bd10      	pop	{r4, pc}

08002d44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d48:	9d06      	ldr	r5, [sp, #24]
 8002d4a:	4604      	mov	r4, r0
 8002d4c:	460f      	mov	r7, r1
 8002d4e:	4616      	mov	r6, r2
 8002d50:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d52:	6821      	ldr	r1, [r4, #0]
 8002d54:	69ca      	ldr	r2, [r1, #28]
 8002d56:	ea37 0302 	bics.w	r3, r7, r2
 8002d5a:	bf0c      	ite	eq
 8002d5c:	2201      	moveq	r2, #1
 8002d5e:	2200      	movne	r2, #0
 8002d60:	42b2      	cmp	r2, r6
 8002d62:	d002      	beq.n	8002d6a <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002d64:	2000      	movs	r0, #0
}
 8002d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002d6a:	1c6b      	adds	r3, r5, #1
 8002d6c:	d0f2      	beq.n	8002d54 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002d6e:	b99d      	cbnz	r5, 8002d98 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d78:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	f022 0201 	bic.w	r2, r2, #1
 8002d80:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002d82:	2320      	movs	r3, #32
 8002d84:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002d88:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002d92:	2003      	movs	r0, #3
 8002d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002d98:	f7fd fc58 	bl	800064c <HAL_GetTick>
 8002d9c:	eba0 0008 	sub.w	r0, r0, r8
 8002da0:	4285      	cmp	r5, r0
 8002da2:	d2d6      	bcs.n	8002d52 <UART_WaitOnFlagUntilTimeout+0xe>
 8002da4:	e7e4      	b.n	8002d70 <UART_WaitOnFlagUntilTimeout+0x2c>

08002da6 <HAL_UART_Transmit>:
{
 8002da6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002daa:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8002dac:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002db0:	2b20      	cmp	r3, #32
{
 8002db2:	4604      	mov	r4, r0
 8002db4:	460d      	mov	r5, r1
 8002db6:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002db8:	d14c      	bne.n	8002e54 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8002dba:	2900      	cmp	r1, #0
 8002dbc:	d048      	beq.n	8002e50 <HAL_UART_Transmit+0xaa>
 8002dbe:	2a00      	cmp	r2, #0
 8002dc0:	d046      	beq.n	8002e50 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8002dc2:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d044      	beq.n	8002e54 <HAL_UART_Transmit+0xae>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dd4:	2321      	movs	r3, #33	; 0x21
 8002dd6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8002dda:	f7fd fc37 	bl	800064c <HAL_GetTick>
    huart->TxXferSize = Size;
 8002dde:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8002de2:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002de4:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002de8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002dec:	b292      	uxth	r2, r2
 8002dee:	b962      	cbnz	r2, 8002e0a <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002df0:	9700      	str	r7, [sp, #0]
 8002df2:	4633      	mov	r3, r6
 8002df4:	2140      	movs	r1, #64	; 0x40
 8002df6:	4620      	mov	r0, r4
 8002df8:	f7ff ffa4 	bl	8002d44 <UART_WaitOnFlagUntilTimeout>
 8002dfc:	b998      	cbnz	r0, 8002e26 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8002dfe:	2320      	movs	r3, #32
 8002e00:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8002e04:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8002e08:	e00e      	b.n	8002e28 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8002e0a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e0e:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	4633      	mov	r3, r6
 8002e1c:	2180      	movs	r1, #128	; 0x80
 8002e1e:	4620      	mov	r0, r4
 8002e20:	f7ff ff90 	bl	8002d44 <UART_WaitOnFlagUntilTimeout>
 8002e24:	b118      	cbz	r0, 8002e2e <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8002e26:	2003      	movs	r0, #3
}
 8002e28:	b002      	add	sp, #8
 8002e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e2e:	68a3      	ldr	r3, [r4, #8]
 8002e30:	6822      	ldr	r2, [r4, #0]
 8002e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e36:	d107      	bne.n	8002e48 <HAL_UART_Transmit+0xa2>
 8002e38:	6923      	ldr	r3, [r4, #16]
 8002e3a:	b92b      	cbnz	r3, 8002e48 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002e3c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e44:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8002e46:	e7cf      	b.n	8002de8 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002e48:	782b      	ldrb	r3, [r5, #0]
 8002e4a:	8513      	strh	r3, [r2, #40]	; 0x28
 8002e4c:	3501      	adds	r5, #1
 8002e4e:	e7cb      	b.n	8002de8 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002e50:	2001      	movs	r0, #1
 8002e52:	e7e9      	b.n	8002e28 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8002e54:	2002      	movs	r0, #2
 8002e56:	e7e7      	b.n	8002e28 <HAL_UART_Transmit+0x82>

08002e58 <HAL_UART_Receive>:
{
 8002e58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002e5c:	4698      	mov	r8, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8002e5e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002e62:	2b20      	cmp	r3, #32
{
 8002e64:	4604      	mov	r4, r0
 8002e66:	460d      	mov	r5, r1
 8002e68:	4616      	mov	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8002e6a:	d160      	bne.n	8002f2e <HAL_UART_Receive+0xd6>
    if((pData == NULL ) || (Size == 0U))
 8002e6c:	2900      	cmp	r1, #0
 8002e6e:	d05c      	beq.n	8002f2a <HAL_UART_Receive+0xd2>
 8002e70:	2a00      	cmp	r2, #0
 8002e72:	d05a      	beq.n	8002f2a <HAL_UART_Receive+0xd2>
    __HAL_LOCK(huart);
 8002e74:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d058      	beq.n	8002f2e <HAL_UART_Receive+0xd6>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e86:	2322      	movs	r3, #34	; 0x22
 8002e88:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    tickstart = HAL_GetTick();
 8002e8c:	f7fd fbde 	bl	800064c <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8002e90:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 8002e92:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8002e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002e9a:	4607      	mov	r7, r0
    huart->RxXferCount = Size;
 8002e9c:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8002ea0:	d115      	bne.n	8002ece <HAL_UART_Receive+0x76>
 8002ea2:	6923      	ldr	r3, [r4, #16]
 8002ea4:	b98b      	cbnz	r3, 8002eca <HAL_UART_Receive+0x72>
 8002ea6:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002eaa:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8002eae:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 8002eb2:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8002eb6:	b280      	uxth	r0, r0
 8002eb8:	b9b8      	cbnz	r0, 8002eea <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 8002eba:	2320      	movs	r3, #32
 8002ebc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 8002ec0:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 8002ec4:	b002      	add	sp, #8
 8002ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8002eca:	23ff      	movs	r3, #255	; 0xff
 8002ecc:	e7ed      	b.n	8002eaa <HAL_UART_Receive+0x52>
 8002ece:	b923      	cbnz	r3, 8002eda <HAL_UART_Receive+0x82>
 8002ed0:	6923      	ldr	r3, [r4, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f9      	beq.n	8002eca <HAL_UART_Receive+0x72>
 8002ed6:	237f      	movs	r3, #127	; 0x7f
 8002ed8:	e7e7      	b.n	8002eaa <HAL_UART_Receive+0x52>
 8002eda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ede:	d1e6      	bne.n	8002eae <HAL_UART_Receive+0x56>
 8002ee0:	6923      	ldr	r3, [r4, #16]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f7      	beq.n	8002ed6 <HAL_UART_Receive+0x7e>
 8002ee6:	233f      	movs	r3, #63	; 0x3f
 8002ee8:	e7df      	b.n	8002eaa <HAL_UART_Receive+0x52>
      huart->RxXferCount--;
 8002eea:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002eee:	f8cd 8000 	str.w	r8, [sp]
      huart->RxXferCount--;
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002efa:	2200      	movs	r2, #0
 8002efc:	463b      	mov	r3, r7
 8002efe:	2120      	movs	r1, #32
 8002f00:	4620      	mov	r0, r4
 8002f02:	f7ff ff1f 	bl	8002d44 <UART_WaitOnFlagUntilTimeout>
 8002f06:	b9a0      	cbnz	r0, 8002f32 <HAL_UART_Receive+0xda>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f08:	68a3      	ldr	r3, [r4, #8]
 8002f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0e:	6823      	ldr	r3, [r4, #0]
 8002f10:	d106      	bne.n	8002f20 <HAL_UART_Receive+0xc8>
 8002f12:	6922      	ldr	r2, [r4, #16]
 8002f14:	b922      	cbnz	r2, 8002f20 <HAL_UART_Receive+0xc8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002f16:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002f18:	4033      	ands	r3, r6
 8002f1a:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8002f1e:	e7c8      	b.n	8002eb2 <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002f20:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002f22:	4033      	ands	r3, r6
 8002f24:	702b      	strb	r3, [r5, #0]
 8002f26:	3501      	adds	r5, #1
 8002f28:	e7c3      	b.n	8002eb2 <HAL_UART_Receive+0x5a>
      return  HAL_ERROR;
 8002f2a:	2001      	movs	r0, #1
 8002f2c:	e7ca      	b.n	8002ec4 <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 8002f2e:	2002      	movs	r0, #2
 8002f30:	e7c8      	b.n	8002ec4 <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 8002f32:	2003      	movs	r0, #3
 8002f34:	e7c6      	b.n	8002ec4 <HAL_UART_Receive+0x6c>

08002f36 <UART_CheckIdleState>:
{
 8002f36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f38:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3a:	2600      	movs	r6, #0
 8002f3c:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002f3e:	f7fd fb85 	bl	800064c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f42:	6823      	ldr	r3, [r4, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002f48:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f4a:	d417      	bmi.n	8002f7c <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	075b      	lsls	r3, r3, #29
 8002f52:	d50a      	bpl.n	8002f6a <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	462b      	mov	r3, r5
 8002f5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f62:	4620      	mov	r0, r4
 8002f64:	f7ff feee 	bl	8002d44 <UART_WaitOnFlagUntilTimeout>
 8002f68:	b9a0      	cbnz	r0, 8002f94 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8002f6a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002f6c:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8002f6e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002f72:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8002f76:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8002f7a:	e00c      	b.n	8002f96 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	4632      	mov	r2, r6
 8002f84:	4603      	mov	r3, r0
 8002f86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	f7ff feda 	bl	8002d44 <UART_WaitOnFlagUntilTimeout>
 8002f90:	2800      	cmp	r0, #0
 8002f92:	d0db      	beq.n	8002f4c <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002f94:	2003      	movs	r0, #3
}
 8002f96:	b002      	add	sp, #8
 8002f98:	bd70      	pop	{r4, r5, r6, pc}

08002f9a <HAL_UART_Init>:
{
 8002f9a:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002f9c:	4604      	mov	r4, r0
 8002f9e:	b360      	cbz	r0, 8002ffa <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002fa0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002fa4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002fa8:	b91b      	cbnz	r3, 8002fb2 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002faa:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002fae:	f003 fc29 	bl	8006804 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002fb2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002fb4:	2324      	movs	r3, #36	; 0x24
 8002fb6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002fba:	6813      	ldr	r3, [r2, #0]
 8002fbc:	f023 0301 	bic.w	r3, r3, #1
 8002fc0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	f7ff fd62 	bl	8002a8c <UART_SetConfig>
 8002fc8:	2801      	cmp	r0, #1
 8002fca:	d016      	beq.n	8002ffa <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fce:	b113      	cbz	r3, 8002fd6 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	f7ff fe63 	bl	8002c9c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fd6:	6823      	ldr	r3, [r4, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fe6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002fee:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002ff0:	601a      	str	r2, [r3, #0]
}
 8002ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002ff6:	f7ff bf9e 	b.w	8002f36 <UART_CheckIdleState>
}
 8002ffa:	2001      	movs	r0, #1
 8002ffc:	bd10      	pop	{r4, pc}

08002ffe <MPU9250_GetHandle>:
static void tap_cb(unsigned char direction, unsigned char count);


void MPU9250_GetHandle(MPU9250_t* mpu9250, I2C_HandleTypeDef* hi2cx)
{
	mpu9250->hi2c = hi2cx;
 8002ffe:	6001      	str	r1, [r0, #0]
 8003000:	4770      	bx	lr

08003002 <MPU9250_SetAddress>:
}

void MPU9250_SetAddress(MPU9250_t* mpu9250, MPU9250_Address_t Address)
{

	mpu9250->address = Address;
 8003002:	7101      	strb	r1, [r0, #4]
 8003004:	4770      	bx	lr

08003006 <MPU9250_setLPF>:
	return 0;
}

inv_error_t MPU9250_setLPF(MPU9250_t * mpu9250, unsigned short lpf)
{
	return mpu_set_lpf(lpf);
 8003006:	4608      	mov	r0, r1
 8003008:	f000 bad8 	b.w	80035bc <mpu_set_lpf>

0800300c <MPU9250_setSampleRate>:
	return 0;
}

inv_error_t MPU9250_setSampleRate(MPU9250_t * mpu9250, unsigned short rate)
{
    return mpu_set_sample_rate(rate);
 800300c:	4608      	mov	r0, r1
 800300e:	f000 bc97 	b.w	8003940 <mpu_set_sample_rate>

08003012 <MPU9250_setCompassSampleRate>:
	return 0;
}

inv_error_t MPU9250_setCompassSampleRate(MPU9250_t * mpu9250, unsigned short rate)
{
	return mpu_set_compass_sample_rate(rate);
 8003012:	4608      	mov	r0, r1
 8003014:	f000 bb08 	b.w	8003628 <mpu_set_compass_sample_rate>

08003018 <MPU9250_getGyroSens>:

	return 0;
}

float MPU9250_getGyroSens(MPU9250_t * mpu9250)
{
 8003018:	b507      	push	{r0, r1, r2, lr}
	float sens;
	if (mpu_get_gyro_sens(&sens) == INV_SUCCESS)
 800301a:	a801      	add	r0, sp, #4
 800301c:	f000 fb2a 	bl	8003674 <mpu_get_gyro_sens>
 8003020:	b920      	cbnz	r0, 800302c <MPU9250_getGyroSens+0x14>
	{
		return sens;
 8003022:	ed9d 0a01 	vldr	s0, [sp, #4]
	}
	return 0;
}
 8003026:	b003      	add	sp, #12
 8003028:	f85d fb04 	ldr.w	pc, [sp], #4
	return 0;
 800302c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003034 <MPU9250_getGyroSens+0x1c>
 8003030:	e7f9      	b.n	8003026 <MPU9250_getGyroSens+0xe>
 8003032:	bf00      	nop
 8003034:	00000000 	.word	0x00000000

08003038 <MPU9250_setGyroFSR>:
{
 8003038:	b538      	push	{r3, r4, r5, lr}
 800303a:	4605      	mov	r5, r0
	err = mpu_set_gyro_fsr(fsr);
 800303c:	4608      	mov	r0, r1
 800303e:	f000 fa51 	bl	80034e4 <mpu_set_gyro_fsr>
	if (err == INV_SUCCESS)
 8003042:	4604      	mov	r4, r0
 8003044:	b920      	cbnz	r0, 8003050 <MPU9250_setGyroFSR+0x18>
		mpu9250->_gSense = MPU9250_getGyroSens(mpu9250);
 8003046:	4628      	mov	r0, r5
 8003048:	f7ff ffe6 	bl	8003018 <MPU9250_getGyroSens>
 800304c:	ed85 0a17 	vstr	s0, [r5, #92]	; 0x5c
}
 8003050:	4620      	mov	r0, r4
 8003052:	bd38      	pop	{r3, r4, r5, pc}

08003054 <MPU9250_getAccelSens>:

unsigned short MPU9250_getAccelSens(MPU9250_t * mpu9250)
{
 8003054:	b507      	push	{r0, r1, r2, lr}
	unsigned short sens;
	if (mpu_get_accel_sens(&sens) == INV_SUCCESS)
 8003056:	f10d 0006 	add.w	r0, sp, #6
 800305a:	f000 fb2b 	bl	80036b4 <mpu_get_accel_sens>
 800305e:	b920      	cbnz	r0, 800306a <MPU9250_getAccelSens+0x16>
	{
		return sens;
 8003060:	f8bd 0006 	ldrh.w	r0, [sp, #6]
	}
	return 0;
}
 8003064:	b003      	add	sp, #12
 8003066:	f85d fb04 	ldr.w	pc, [sp], #4
	return 0;
 800306a:	2000      	movs	r0, #0
 800306c:	e7fa      	b.n	8003064 <MPU9250_getAccelSens+0x10>

0800306e <MPU9250_setAccelFSR>:
{
 800306e:	b538      	push	{r3, r4, r5, lr}
 8003070:	4605      	mov	r5, r0
	err = mpu_set_accel_fsr(fsr);
 8003072:	4608      	mov	r0, r1
 8003074:	f000 fa6e 	bl	8003554 <mpu_set_accel_fsr>
	if (err == INV_SUCCESS)
 8003078:	4604      	mov	r4, r0
 800307a:	b920      	cbnz	r0, 8003086 <MPU9250_setAccelFSR+0x18>
		mpu9250->_aSense = MPU9250_getAccelSens(mpu9250);
 800307c:	4628      	mov	r0, r5
 800307e:	f7ff ffe9 	bl	8003054 <MPU9250_getAccelSens>
 8003082:	f8a5 0058 	strh.w	r0, [r5, #88]	; 0x58
}
 8003086:	4620      	mov	r0, r4
 8003088:	bd38      	pop	{r3, r4, r5, pc}
	...

0800308c <MPU9250_begin>:
{
 800308c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	result = mpu_init(&int_param, mpu9250->hi2c, mpu9250->address);
 800308e:	7902      	ldrb	r2, [r0, #4]
 8003090:	6801      	ldr	r1, [r0, #0]
{
 8003092:	4604      	mov	r4, r0
	result = mpu_init(&int_param, mpu9250->hi2c, mpu9250->address);
 8003094:	a801      	add	r0, sp, #4
 8003096:	f000 fd37 	bl	8003b08 <mpu_init>
	if (result)
 800309a:	4605      	mov	r5, r0
 800309c:	b988      	cbnz	r0, 80030c2 <MPU9250_begin+0x36>
	mpu_set_bypass(1); // Place all slaves (including compass) on primary bus
 800309e:	2001      	movs	r0, #1
 80030a0:	f000 fb50 	bl	8003744 <mpu_set_bypass>
	return INV_SUCCESS;
}

inv_error_t MPU9250_setSensors(MPU9250_t * mpu9250, unsigned char sensors)
{
	return mpu_set_sensors(sensors);
 80030a4:	2079      	movs	r0, #121	; 0x79
 80030a6:	f000 fc93 	bl	80039d0 <mpu_set_sensors>
	mpu9250->_mSense = 6.665f;
 80030aa:	4b07      	ldr	r3, [pc, #28]	; (80030c8 <MPU9250_begin+0x3c>)
 80030ac:	6563      	str	r3, [r4, #84]	; 0x54
	mpu9250->_gSense = MPU9250_getGyroSens(mpu9250);
 80030ae:	4620      	mov	r0, r4
 80030b0:	f7ff ffb2 	bl	8003018 <MPU9250_getGyroSens>
	mpu9250->_aSense = MPU9250_getAccelSens(mpu9250);
 80030b4:	4620      	mov	r0, r4
	mpu9250->_gSense = MPU9250_getGyroSens(mpu9250);
 80030b6:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
	mpu9250->_aSense = MPU9250_getAccelSens(mpu9250);
 80030ba:	f7ff ffcb 	bl	8003054 <MPU9250_getAccelSens>
 80030be:	f8a4 0058 	strh.w	r0, [r4, #88]	; 0x58
}
 80030c2:	4628      	mov	r0, r5
 80030c4:	b003      	add	sp, #12
 80030c6:	bd30      	pop	{r4, r5, pc}
 80030c8:	40d547ae 	.word	0x40d547ae

080030cc <MPU9250_setSensors>:
	return mpu_set_sensors(sensors);
 80030cc:	4608      	mov	r0, r1
 80030ce:	f000 bc7f 	b.w	80039d0 <mpu_set_sensors>

080030d2 <MPU9250_updateAccel>:

	return aErr | gErr | mErr | tErr;
}

int MPU9250_updateAccel(MPU9250_t * mpu9250)
{
 80030d2:	b513      	push	{r0, r1, r4, lr}
 80030d4:	4604      	mov	r4, r0
	short data[3];

	if (mpu_get_accel_reg(data, (unsigned long *)mpu9250->time))
 80030d6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80030d8:	4668      	mov	r0, sp
 80030da:	f000 f8dd 	bl	8003298 <mpu_get_accel_reg>
 80030de:	b950      	cbnz	r0, 80030f6 <MPU9250_updateAccel+0x24>
	{
		return INV_ERROR;
	}
	mpu9250->ax = data[X_AXIS];
 80030e0:	f9bd 3000 	ldrsh.w	r3, [sp]
 80030e4:	60a3      	str	r3, [r4, #8]
	mpu9250->ay = data[Y_AXIS];
 80030e6:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80030ea:	60e3      	str	r3, [r4, #12]
	mpu9250->az = data[Z_AXIS];
 80030ec:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80030f0:	6123      	str	r3, [r4, #16]
	return INV_SUCCESS;
}
 80030f2:	b002      	add	sp, #8
 80030f4:	bd10      	pop	{r4, pc}
		return INV_ERROR;
 80030f6:	2020      	movs	r0, #32
 80030f8:	e7fb      	b.n	80030f2 <MPU9250_updateAccel+0x20>

080030fa <MPU9250_updateGyro>:

int MPU9250_updateGyro(MPU9250_t * mpu9250)
{
 80030fa:	b513      	push	{r0, r1, r4, lr}
 80030fc:	4604      	mov	r4, r0
	short data[3];

	if (mpu_get_gyro_reg(data, (unsigned long *)mpu9250->time))
 80030fe:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003100:	4668      	mov	r0, sp
 8003102:	f000 f893 	bl	800322c <mpu_get_gyro_reg>
 8003106:	b950      	cbnz	r0, 800311e <MPU9250_updateGyro+0x24>
	{
		return INV_ERROR;
	}
	mpu9250->gx = data[X_AXIS];
 8003108:	f9bd 3000 	ldrsh.w	r3, [sp]
 800310c:	6163      	str	r3, [r4, #20]
	mpu9250->gy = data[Y_AXIS];
 800310e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8003112:	61a3      	str	r3, [r4, #24]
	mpu9250->gz = data[Z_AXIS];
 8003114:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8003118:	61e3      	str	r3, [r4, #28]
	return INV_SUCCESS;
}
 800311a:	b002      	add	sp, #8
 800311c:	bd10      	pop	{r4, pc}
		return INV_ERROR;
 800311e:	2020      	movs	r0, #32
 8003120:	e7fb      	b.n	800311a <MPU9250_updateGyro+0x20>

08003122 <MPU9250_updateCompass>:

int MPU9250_updateCompass(MPU9250_t * mpu9250)
{
 8003122:	b513      	push	{r0, r1, r4, lr}
 8003124:	4604      	mov	r4, r0
	short data[3];

	if (mpu_get_compass_reg(data, (unsigned long *)mpu9250->time))
 8003126:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003128:	4668      	mov	r0, sp
 800312a:	f000 fe43 	bl	8003db4 <mpu_get_compass_reg>
 800312e:	b950      	cbnz	r0, 8003146 <MPU9250_updateCompass+0x24>
	{
		return INV_ERROR;
	}
	mpu9250->mx = data[X_AXIS];
 8003130:	f9bd 3000 	ldrsh.w	r3, [sp]
 8003134:	6223      	str	r3, [r4, #32]
	mpu9250->my = data[Y_AXIS];
 8003136:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 800313a:	6263      	str	r3, [r4, #36]	; 0x24
	mpu9250->mz = data[Z_AXIS];
 800313c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8003140:	62a3      	str	r3, [r4, #40]	; 0x28
	return INV_SUCCESS;
}
 8003142:	b002      	add	sp, #8
 8003144:	bd10      	pop	{r4, pc}
		return INV_ERROR;
 8003146:	2020      	movs	r0, #32
 8003148:	e7fb      	b.n	8003142 <MPU9250_updateCompass+0x20>

0800314a <MPU9250_updateTemperature>:

inv_error_t MPU9250_updateTemperature(MPU9250_t * mpu9250)
{
	return mpu_get_temperature((long *)mpu9250->temperature, (unsigned long *)mpu9250->time);
 800314a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800314c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800314e:	f000 b8d7 	b.w	8003300 <mpu_get_temperature>

08003152 <MPU9250_update>:
{
 8003152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (sensors & UPDATE_ACCEL)
 8003156:	f011 0502 	ands.w	r5, r1, #2
{
 800315a:	4680      	mov	r8, r0
 800315c:	460c      	mov	r4, r1
	if (sensors & UPDATE_ACCEL)
 800315e:	d002      	beq.n	8003166 <MPU9250_update+0x14>
		aErr = MPU9250_updateAccel(mpu9250);
 8003160:	f7ff ffb7 	bl	80030d2 <MPU9250_updateAccel>
 8003164:	4605      	mov	r5, r0
	if (sensors & UPDATE_GYRO)
 8003166:	f014 0704 	ands.w	r7, r4, #4
 800316a:	d003      	beq.n	8003174 <MPU9250_update+0x22>
		gErr = MPU9250_updateGyro(mpu9250);
 800316c:	4640      	mov	r0, r8
 800316e:	f7ff ffc4 	bl	80030fa <MPU9250_updateGyro>
 8003172:	4607      	mov	r7, r0
	if (sensors & UPDATE_COMPASS)
 8003174:	f014 0608 	ands.w	r6, r4, #8
 8003178:	d003      	beq.n	8003182 <MPU9250_update+0x30>
		mErr = MPU9250_updateCompass(mpu9250);
 800317a:	4640      	mov	r0, r8
 800317c:	f7ff ffd1 	bl	8003122 <MPU9250_updateCompass>
 8003180:	4606      	mov	r6, r0
	if (sensors & UPDATE_TEMP)
 8003182:	f014 0010 	ands.w	r0, r4, #16
 8003186:	d002      	beq.n	800318e <MPU9250_update+0x3c>
		tErr = MPU9250_updateTemperature(mpu9250);
 8003188:	4640      	mov	r0, r8
 800318a:	f7ff ffde 	bl	800314a <MPU9250_updateTemperature>
	return aErr | gErr | mErr | tErr;
 800318e:	433d      	orrs	r5, r7
 8003190:	4335      	orrs	r5, r6
}
 8003192:	4328      	orrs	r0, r5
 8003194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003198 <MPU9250_calcAccel>:
	return dmp_set_pedometer_walk_time(time);
}

float MPU9250_calcAccel(MPU9250_t * mpu9250, int axis)
{
	return (float) axis / (float) mpu9250->_aSense;
 8003198:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 800319c:	ee07 1a90 	vmov	s15, r1
 80031a0:	ee00 3a10 	vmov	s0, r3
 80031a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031a8:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 80031ac:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80031b0:	4770      	bx	lr

080031b2 <MPU9250_calcGyro>:

float MPU9250_calcGyro(MPU9250_t * mpu9250, int axis)
{
	return (float) axis / (float) mpu9250->_gSense;
 80031b2:	ee07 1a90 	vmov	s15, r1
 80031b6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80031ba:	edd0 7a17 	vldr	s15, [r0, #92]	; 0x5c
}
 80031be:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80031c2:	4770      	bx	lr

080031c4 <MPU9250_calcMag>:

float MPU9250_calcMag(MPU9250_t * mpu9250, int axis)
{
	return (float) axis / (float) mpu9250->_mSense;
 80031c4:	ee07 1a90 	vmov	s15, r1
 80031c8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80031cc:	edd0 7a15 	vldr	s15, [r0, #84]	; 0x54
}
 80031d0:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80031d4:	4770      	bx	lr
	...

080031d8 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
int set_int_enable(unsigned char enable)
{
 80031d8:	b513      	push	{r0, r1, r4, lr}
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 80031da:	4c13      	ldr	r4, [pc, #76]	; (8003228 <set_int_enable+0x50>)
 80031dc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80031e0:	b193      	cbz	r3, 8003208 <set_int_enable+0x30>
        if (enable)
 80031e2:	b1c0      	cbz	r0, 8003216 <set_int_enable+0x3e>
            tmp = BIT_DMP_INT_EN;
 80031e4:	2302      	movs	r3, #2
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
 80031e6:	f88d 3007 	strb.w	r3, [sp, #7]
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 80031ea:	6821      	ldr	r1, [r4, #0]
 80031ec:	6860      	ldr	r0, [r4, #4]
 80031ee:	7c49      	ldrb	r1, [r1, #17]
 80031f0:	7800      	ldrb	r0, [r0, #0]
 80031f2:	f10d 0307 	add.w	r3, sp, #7
 80031f6:	2201      	movs	r2, #1
 80031f8:	f000 fe4e 	bl	8003e98 <stm32_i2c_write>
 80031fc:	b970      	cbnz	r0, 800321c <set_int_enable+0x44>
            return -1;
        st.chip_cfg.int_enable = tmp;
 80031fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003202:	7463      	strb	r3, [r4, #17]
    }
    return 0;
}
 8003204:	b002      	add	sp, #8
 8003206:	bd10      	pop	{r4, pc}
        if (!st.chip_cfg.sensors)
 8003208:	7aa2      	ldrb	r2, [r4, #10]
 800320a:	b13a      	cbz	r2, 800321c <set_int_enable+0x44>
        if (enable && st.chip_cfg.int_enable)
 800320c:	b118      	cbz	r0, 8003216 <set_int_enable+0x3e>
 800320e:	7c62      	ldrb	r2, [r4, #17]
 8003210:	b93a      	cbnz	r2, 8003222 <set_int_enable+0x4a>
            tmp = BIT_DATA_RDY_EN;
 8003212:	2301      	movs	r3, #1
 8003214:	e7e7      	b.n	80031e6 <set_int_enable+0xe>
            tmp = 0x00;
 8003216:	f88d 0007 	strb.w	r0, [sp, #7]
 800321a:	e7e6      	b.n	80031ea <set_int_enable+0x12>
            return -1;
 800321c:	f04f 30ff 	mov.w	r0, #4294967295
 8003220:	e7f0      	b.n	8003204 <set_int_enable+0x2c>
            return 0;
 8003222:	4618      	mov	r0, r3
 8003224:	e7ee      	b.n	8003204 <set_int_enable+0x2c>
 8003226:	bf00      	nop
 8003228:	20000010 	.word	0x20000010

0800322c <mpu_get_gyro_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_gyro_reg(short *data, unsigned long *timestamp)
{
 800322c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    unsigned char tmp[6];

    if (!(st.chip_cfg.sensors & INV_XYZ_GYRO))
 800322e:	4b19      	ldr	r3, [pc, #100]	; (8003294 <mpu_get_gyro_reg+0x68>)
 8003230:	7a9a      	ldrb	r2, [r3, #10]
 8003232:	f012 0f70 	tst.w	r2, #112	; 0x70
{
 8003236:	4605      	mov	r5, r0
 8003238:	460e      	mov	r6, r1
    if (!(st.chip_cfg.sensors & INV_XYZ_GYRO))
 800323a:	d104      	bne.n	8003246 <mpu_get_gyro_reg+0x1a>
        return -1;
 800323c:	f04f 34ff 	mov.w	r4, #4294967295
    data[1] = (tmp[2] << 8) | tmp[3];
    data[2] = (tmp[4] << 8) | tmp[5];
    if (timestamp)
        get_ms(timestamp);
    return 0;
}
 8003240:	4620      	mov	r0, r4
 8003242:	b002      	add	sp, #8
 8003244:	bd70      	pop	{r4, r5, r6, pc}
    if (i2c_read(st.hw->addr, st.reg->raw_gyro, 6, tmp))
 8003246:	6819      	ldr	r1, [r3, #0]
 8003248:	6858      	ldr	r0, [r3, #4]
 800324a:	7b89      	ldrb	r1, [r1, #14]
 800324c:	7800      	ldrb	r0, [r0, #0]
 800324e:	466b      	mov	r3, sp
 8003250:	2206      	movs	r2, #6
 8003252:	f000 fe33 	bl	8003ebc <stm32_i2c_read>
 8003256:	4604      	mov	r4, r0
 8003258:	2800      	cmp	r0, #0
 800325a:	d1ef      	bne.n	800323c <mpu_get_gyro_reg+0x10>
    data[0] = (tmp[0] << 8) | tmp[1];
 800325c:	f89d 2000 	ldrb.w	r2, [sp]
 8003260:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8003264:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003268:	802b      	strh	r3, [r5, #0]
    data[1] = (tmp[2] << 8) | tmp[3];
 800326a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800326e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003272:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003276:	806b      	strh	r3, [r5, #2]
    data[2] = (tmp[4] << 8) | tmp[5];
 8003278:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800327c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003280:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003284:	80ab      	strh	r3, [r5, #4]
    if (timestamp)
 8003286:	2e00      	cmp	r6, #0
 8003288:	d0da      	beq.n	8003240 <mpu_get_gyro_reg+0x14>
        get_ms(timestamp);
 800328a:	4630      	mov	r0, r6
 800328c:	f000 fdf2 	bl	8003e74 <stm32_get_clock_ms>
 8003290:	e7d6      	b.n	8003240 <mpu_get_gyro_reg+0x14>
 8003292:	bf00      	nop
 8003294:	20000010 	.word	0x20000010

08003298 <mpu_get_accel_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_accel_reg(short *data, unsigned long *timestamp)
{
 8003298:	b573      	push	{r0, r1, r4, r5, r6, lr}
    unsigned char tmp[6];

    if (!(st.chip_cfg.sensors & INV_XYZ_ACCEL))
 800329a:	4b18      	ldr	r3, [pc, #96]	; (80032fc <mpu_get_accel_reg+0x64>)
 800329c:	7a9a      	ldrb	r2, [r3, #10]
 800329e:	0712      	lsls	r2, r2, #28
{
 80032a0:	4605      	mov	r5, r0
 80032a2:	460e      	mov	r6, r1
    if (!(st.chip_cfg.sensors & INV_XYZ_ACCEL))
 80032a4:	d404      	bmi.n	80032b0 <mpu_get_accel_reg+0x18>
        return -1;
 80032a6:	f04f 34ff 	mov.w	r4, #4294967295
    data[1] = (tmp[2] << 8) | tmp[3];
    data[2] = (tmp[4] << 8) | tmp[5];
    if (timestamp)
        get_ms(timestamp);
    return 0;
}
 80032aa:	4620      	mov	r0, r4
 80032ac:	b002      	add	sp, #8
 80032ae:	bd70      	pop	{r4, r5, r6, pc}
    if (i2c_read(st.hw->addr, st.reg->raw_accel, 6, tmp))
 80032b0:	6819      	ldr	r1, [r3, #0]
 80032b2:	6858      	ldr	r0, [r3, #4]
 80032b4:	7bc9      	ldrb	r1, [r1, #15]
 80032b6:	7800      	ldrb	r0, [r0, #0]
 80032b8:	466b      	mov	r3, sp
 80032ba:	2206      	movs	r2, #6
 80032bc:	f000 fdfe 	bl	8003ebc <stm32_i2c_read>
 80032c0:	4604      	mov	r4, r0
 80032c2:	2800      	cmp	r0, #0
 80032c4:	d1ef      	bne.n	80032a6 <mpu_get_accel_reg+0xe>
    data[0] = (tmp[0] << 8) | tmp[1];
 80032c6:	f89d 2000 	ldrb.w	r2, [sp]
 80032ca:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80032ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80032d2:	802b      	strh	r3, [r5, #0]
    data[1] = (tmp[2] << 8) | tmp[3];
 80032d4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80032d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80032dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80032e0:	806b      	strh	r3, [r5, #2]
    data[2] = (tmp[4] << 8) | tmp[5];
 80032e2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80032e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80032ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80032ee:	80ab      	strh	r3, [r5, #4]
    if (timestamp)
 80032f0:	2e00      	cmp	r6, #0
 80032f2:	d0da      	beq.n	80032aa <mpu_get_accel_reg+0x12>
        get_ms(timestamp);
 80032f4:	4630      	mov	r0, r6
 80032f6:	f000 fdbd 	bl	8003e74 <stm32_get_clock_ms>
 80032fa:	e7d6      	b.n	80032aa <mpu_get_accel_reg+0x12>
 80032fc:	20000010 	.word	0x20000010

08003300 <mpu_get_temperature>:
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
 8003300:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
 8003304:	4d1f      	ldr	r5, [pc, #124]	; (8003384 <mpu_get_temperature+0x84>)
 8003306:	7aab      	ldrb	r3, [r5, #10]
{
 8003308:	4606      	mov	r6, r0
 800330a:	4688      	mov	r8, r1
    if (!(st.chip_cfg.sensors))
 800330c:	b92b      	cbnz	r3, 800331a <mpu_get_temperature+0x1a>
        return -1;
 800330e:	f04f 37ff 	mov.w	r7, #4294967295
    if (timestamp)
        get_ms(timestamp);

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
    return 0;
}
 8003312:	4638      	mov	r0, r7
 8003314:	b002      	add	sp, #8
 8003316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
 800331a:	6829      	ldr	r1, [r5, #0]
 800331c:	6868      	ldr	r0, [r5, #4]
 800331e:	7c09      	ldrb	r1, [r1, #16]
 8003320:	7800      	ldrb	r0, [r0, #0]
 8003322:	ab01      	add	r3, sp, #4
 8003324:	2202      	movs	r2, #2
 8003326:	f000 fdc9 	bl	8003ebc <stm32_i2c_read>
 800332a:	4607      	mov	r7, r0
 800332c:	2800      	cmp	r0, #0
 800332e:	d1ee      	bne.n	800330e <mpu_get_temperature+0xe>
    raw = (tmp[0] << 8) | tmp[1];
 8003330:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003334:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003338:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800333c:	b21c      	sxth	r4, r3
    if (timestamp)
 800333e:	f1b8 0f00 	cmp.w	r8, #0
 8003342:	d002      	beq.n	800334a <mpu_get_temperature+0x4a>
        get_ms(timestamp);
 8003344:	4640      	mov	r0, r8
 8003346:	f000 fd95 	bl	8003e74 <stm32_get_clock_ms>
    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
 800334a:	686b      	ldr	r3, [r5, #4]
 800334c:	ee07 4a90 	vmov	s15, r4
 8003350:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8003354:	88db      	ldrh	r3, [r3, #6]
 8003356:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800335a:	ee07 2a90 	vmov	s15, r2
 800335e:	ee06 3a90 	vmov	s13, r3
 8003362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003366:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800336a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800336e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003372:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003388 <mpu_get_temperature+0x88>
 8003376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800337a:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800337e:	edc6 7a00 	vstr	s15, [r6]
    return 0;
 8003382:	e7c6      	b.n	8003312 <mpu_get_temperature+0x12>
 8003384:	20000010 	.word	0x20000010
 8003388:	420c0000 	.word	0x420c0000

0800338c <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 800338c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800338e:	4c53      	ldr	r4, [pc, #332]	; (80034dc <mpu_reset_fifo+0x150>)
 8003390:	7aa3      	ldrb	r3, [r4, #10]
 8003392:	b91b      	cbnz	r3, 800339c <mpu_reset_fifo+0x10>
        return -1;
 8003394:	f04f 30ff 	mov.w	r0, #4294967295
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
 8003398:	b003      	add	sp, #12
 800339a:	bd30      	pop	{r4, r5, pc}
    data = 0;
 800339c:	ad02      	add	r5, sp, #8
 800339e:	2300      	movs	r3, #0
 80033a0:	f805 3d01 	strb.w	r3, [r5, #-1]!
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80033a4:	6821      	ldr	r1, [r4, #0]
 80033a6:	6860      	ldr	r0, [r4, #4]
 80033a8:	7c49      	ldrb	r1, [r1, #17]
 80033aa:	7800      	ldrb	r0, [r0, #0]
 80033ac:	462b      	mov	r3, r5
 80033ae:	2201      	movs	r2, #1
 80033b0:	f000 fd72 	bl	8003e98 <stm32_i2c_write>
 80033b4:	2800      	cmp	r0, #0
 80033b6:	d1ed      	bne.n	8003394 <mpu_reset_fifo+0x8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 80033b8:	6821      	ldr	r1, [r4, #0]
 80033ba:	6860      	ldr	r0, [r4, #4]
 80033bc:	7949      	ldrb	r1, [r1, #5]
 80033be:	7800      	ldrb	r0, [r0, #0]
 80033c0:	462b      	mov	r3, r5
 80033c2:	2201      	movs	r2, #1
 80033c4:	f000 fd68 	bl	8003e98 <stm32_i2c_write>
 80033c8:	2800      	cmp	r0, #0
 80033ca:	d1e3      	bne.n	8003394 <mpu_reset_fifo+0x8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80033cc:	6821      	ldr	r1, [r4, #0]
 80033ce:	6860      	ldr	r0, [r4, #4]
 80033d0:	7909      	ldrb	r1, [r1, #4]
 80033d2:	7800      	ldrb	r0, [r0, #0]
 80033d4:	462b      	mov	r3, r5
 80033d6:	2201      	movs	r2, #1
 80033d8:	f000 fd5e 	bl	8003e98 <stm32_i2c_write>
 80033dc:	2800      	cmp	r0, #0
 80033de:	d1d9      	bne.n	8003394 <mpu_reset_fifo+0x8>
    if (st.chip_cfg.dmp_on) {
 80033e0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d040      	beq.n	800346a <mpu_reset_fifo+0xde>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 80033e8:	230c      	movs	r3, #12
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80033ea:	6821      	ldr	r1, [r4, #0]
 80033ec:	6860      	ldr	r0, [r4, #4]
        data = BIT_FIFO_RST | BIT_DMP_RST;
 80033ee:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80033f2:	2201      	movs	r2, #1
 80033f4:	462b      	mov	r3, r5
 80033f6:	7909      	ldrb	r1, [r1, #4]
 80033f8:	7800      	ldrb	r0, [r0, #0]
 80033fa:	f000 fd4d 	bl	8003e98 <stm32_i2c_write>
 80033fe:	2800      	cmp	r0, #0
 8003400:	d1c8      	bne.n	8003394 <mpu_reset_fifo+0x8>
        delay_ms(50);
 8003402:	2032      	movs	r0, #50	; 0x32
 8003404:	f7fd f928 	bl	8000658 <HAL_Delay>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8003408:	23c0      	movs	r3, #192	; 0xc0
 800340a:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800340e:	7aa3      	ldrb	r3, [r4, #10]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8003410:	6821      	ldr	r1, [r4, #0]
 8003412:	6860      	ldr	r0, [r4, #4]
 8003414:	7909      	ldrb	r1, [r1, #4]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8003416:	07da      	lsls	r2, r3, #31
            data |= BIT_AUX_IF_EN;
 8003418:	bf44      	itt	mi
 800341a:	23e0      	movmi	r3, #224	; 0xe0
 800341c:	f88d 3007 	strbmi.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8003420:	2201      	movs	r2, #1
 8003422:	462b      	mov	r3, r5
 8003424:	7800      	ldrb	r0, [r0, #0]
 8003426:	f000 fd37 	bl	8003e98 <stm32_i2c_write>
 800342a:	2800      	cmp	r0, #0
 800342c:	d1b2      	bne.n	8003394 <mpu_reset_fifo+0x8>
        if (st.chip_cfg.int_enable)
 800342e:	7c63      	ldrb	r3, [r4, #17]
 8003430:	b103      	cbz	r3, 8003434 <mpu_reset_fifo+0xa8>
            data = BIT_DMP_INT_EN;
 8003432:	2302      	movs	r3, #2
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8003434:	6821      	ldr	r1, [r4, #0]
 8003436:	6860      	ldr	r0, [r4, #4]
            data = 0;
 8003438:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800343c:	2201      	movs	r2, #1
 800343e:	462b      	mov	r3, r5
 8003440:	7c49      	ldrb	r1, [r1, #17]
 8003442:	7800      	ldrb	r0, [r0, #0]
 8003444:	f000 fd28 	bl	8003e98 <stm32_i2c_write>
 8003448:	2800      	cmp	r0, #0
 800344a:	d1a3      	bne.n	8003394 <mpu_reset_fifo+0x8>
        data = 0;
 800344c:	f88d 0007 	strb.w	r0, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8003450:	6821      	ldr	r1, [r4, #0]
 8003452:	6860      	ldr	r0, [r4, #4]
 8003454:	462b      	mov	r3, r5
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8003456:	2201      	movs	r2, #1
 8003458:	7949      	ldrb	r1, [r1, #5]
 800345a:	7800      	ldrb	r0, [r0, #0]
 800345c:	f000 fd1c 	bl	8003e98 <stm32_i2c_write>
 8003460:	3000      	adds	r0, #0
 8003462:	bf18      	it	ne
 8003464:	2001      	movne	r0, #1
 8003466:	4240      	negs	r0, r0
 8003468:	e796      	b.n	8003398 <mpu_reset_fifo+0xc>
        data = BIT_FIFO_RST;
 800346a:	2304      	movs	r3, #4
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800346c:	6821      	ldr	r1, [r4, #0]
 800346e:	6860      	ldr	r0, [r4, #4]
        data = BIT_FIFO_RST;
 8003470:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8003474:	2201      	movs	r2, #1
 8003476:	462b      	mov	r3, r5
 8003478:	7909      	ldrb	r1, [r1, #4]
 800347a:	7800      	ldrb	r0, [r0, #0]
 800347c:	f000 fd0c 	bl	8003e98 <stm32_i2c_write>
 8003480:	2800      	cmp	r0, #0
 8003482:	d187      	bne.n	8003394 <mpu_reset_fifo+0x8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8003484:	7ca3      	ldrb	r3, [r4, #18]
 8003486:	b913      	cbnz	r3, 800348e <mpu_reset_fifo+0x102>
 8003488:	7aa3      	ldrb	r3, [r4, #10]
 800348a:	07db      	lsls	r3, r3, #31
 800348c:	d424      	bmi.n	80034d8 <mpu_reset_fifo+0x14c>
            data = BIT_FIFO_EN;
 800348e:	2340      	movs	r3, #64	; 0x40
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8003490:	6821      	ldr	r1, [r4, #0]
 8003492:	6860      	ldr	r0, [r4, #4]
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8003494:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8003498:	2201      	movs	r2, #1
 800349a:	462b      	mov	r3, r5
 800349c:	7909      	ldrb	r1, [r1, #4]
 800349e:	7800      	ldrb	r0, [r0, #0]
 80034a0:	f000 fcfa 	bl	8003e98 <stm32_i2c_write>
 80034a4:	2800      	cmp	r0, #0
 80034a6:	f47f af75 	bne.w	8003394 <mpu_reset_fifo+0x8>
        delay_ms(50);
 80034aa:	2032      	movs	r0, #50	; 0x32
 80034ac:	f7fd f8d4 	bl	8000658 <HAL_Delay>
        if (st.chip_cfg.int_enable)
 80034b0:	7c63      	ldrb	r3, [r4, #17]
 80034b2:	b103      	cbz	r3, 80034b6 <mpu_reset_fifo+0x12a>
            data = BIT_DATA_RDY_EN;
 80034b4:	2301      	movs	r3, #1
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80034b6:	6821      	ldr	r1, [r4, #0]
 80034b8:	6860      	ldr	r0, [r4, #4]
            data = 0;
 80034ba:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80034be:	2201      	movs	r2, #1
 80034c0:	462b      	mov	r3, r5
 80034c2:	7c49      	ldrb	r1, [r1, #17]
 80034c4:	7800      	ldrb	r0, [r0, #0]
 80034c6:	f000 fce7 	bl	8003e98 <stm32_i2c_write>
 80034ca:	2800      	cmp	r0, #0
 80034cc:	f47f af62 	bne.w	8003394 <mpu_reset_fifo+0x8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 80034d0:	6821      	ldr	r1, [r4, #0]
 80034d2:	6860      	ldr	r0, [r4, #4]
 80034d4:	4b02      	ldr	r3, [pc, #8]	; (80034e0 <mpu_reset_fifo+0x154>)
 80034d6:	e7be      	b.n	8003456 <mpu_reset_fifo+0xca>
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 80034d8:	2360      	movs	r3, #96	; 0x60
 80034da:	e7d9      	b.n	8003490 <mpu_reset_fifo+0x104>
 80034dc:	20000010 	.word	0x20000010
 80034e0:	20000020 	.word	0x20000020

080034e4 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 80034e4:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80034e6:	4c1a      	ldr	r4, [pc, #104]	; (8003550 <mpu_set_gyro_fsr+0x6c>)
 80034e8:	7aa3      	ldrb	r3, [r4, #10]
 80034ea:	b913      	cbnz	r3, 80034f2 <mpu_set_gyro_fsr+0xe>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
 80034ec:	f04f 30ff 	mov.w	r0, #4294967295
 80034f0:	e01d      	b.n	800352e <mpu_set_gyro_fsr+0x4a>
    switch (fsr) {
 80034f2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80034f6:	d024      	beq.n	8003542 <mpu_set_gyro_fsr+0x5e>
 80034f8:	d81b      	bhi.n	8003532 <mpu_set_gyro_fsr+0x4e>
 80034fa:	28fa      	cmp	r0, #250	; 0xfa
 80034fc:	d1f6      	bne.n	80034ec <mpu_set_gyro_fsr+0x8>
        data = INV_FSR_250DPS << 3;
 80034fe:	2300      	movs	r3, #0
        data = INV_FSR_2000DPS << 3;
 8003500:	f88d 3007 	strb.w	r3, [sp, #7]
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8003504:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003508:	7a23      	ldrb	r3, [r4, #8]
 800350a:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 800350e:	d01c      	beq.n	800354a <mpu_set_gyro_fsr+0x66>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8003510:	6821      	ldr	r1, [r4, #0]
 8003512:	6860      	ldr	r0, [r4, #4]
 8003514:	7989      	ldrb	r1, [r1, #6]
 8003516:	7800      	ldrb	r0, [r0, #0]
 8003518:	f10d 0307 	add.w	r3, sp, #7
 800351c:	2201      	movs	r2, #1
 800351e:	f000 fcbb 	bl	8003e98 <stm32_i2c_write>
 8003522:	2800      	cmp	r0, #0
 8003524:	d1e2      	bne.n	80034ec <mpu_set_gyro_fsr+0x8>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
 8003526:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800352a:	08db      	lsrs	r3, r3, #3
 800352c:	7223      	strb	r3, [r4, #8]
    return 0;
}
 800352e:	b002      	add	sp, #8
 8003530:	bd10      	pop	{r4, pc}
    switch (fsr) {
 8003532:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003536:	d006      	beq.n	8003546 <mpu_set_gyro_fsr+0x62>
 8003538:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 800353c:	d1d6      	bne.n	80034ec <mpu_set_gyro_fsr+0x8>
        data = INV_FSR_2000DPS << 3;
 800353e:	2318      	movs	r3, #24
 8003540:	e7de      	b.n	8003500 <mpu_set_gyro_fsr+0x1c>
        data = INV_FSR_500DPS << 3;
 8003542:	2308      	movs	r3, #8
 8003544:	e7dc      	b.n	8003500 <mpu_set_gyro_fsr+0x1c>
        data = INV_FSR_1000DPS << 3;
 8003546:	2310      	movs	r3, #16
 8003548:	e7da      	b.n	8003500 <mpu_set_gyro_fsr+0x1c>
        return 0;
 800354a:	2000      	movs	r0, #0
 800354c:	e7ef      	b.n	800352e <mpu_set_gyro_fsr+0x4a>
 800354e:	bf00      	nop
 8003550:	20000010 	.word	0x20000010

08003554 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8003554:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8003556:	4c18      	ldr	r4, [pc, #96]	; (80035b8 <mpu_set_accel_fsr+0x64>)
 8003558:	7aa3      	ldrb	r3, [r4, #10]
 800355a:	b913      	cbnz	r3, 8003562 <mpu_set_accel_fsr+0xe>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
 800355c:	f04f 30ff 	mov.w	r0, #4294967295
 8003560:	e01c      	b.n	800359c <mpu_set_accel_fsr+0x48>
    switch (fsr) {
 8003562:	2804      	cmp	r0, #4
 8003564:	d022      	beq.n	80035ac <mpu_set_accel_fsr+0x58>
 8003566:	d81b      	bhi.n	80035a0 <mpu_set_accel_fsr+0x4c>
 8003568:	2802      	cmp	r0, #2
 800356a:	d1f7      	bne.n	800355c <mpu_set_accel_fsr+0x8>
        data = INV_FSR_2G << 3;
 800356c:	2300      	movs	r3, #0
        data = INV_FSR_16G << 3;
 800356e:	f88d 3007 	strb.w	r3, [sp, #7]
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 8003572:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003576:	7a63      	ldrb	r3, [r4, #9]
 8003578:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 800357c:	d01a      	beq.n	80035b4 <mpu_set_accel_fsr+0x60>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 800357e:	6821      	ldr	r1, [r4, #0]
 8003580:	6860      	ldr	r0, [r4, #4]
 8003582:	79c9      	ldrb	r1, [r1, #7]
 8003584:	7800      	ldrb	r0, [r0, #0]
 8003586:	f10d 0307 	add.w	r3, sp, #7
 800358a:	2201      	movs	r2, #1
 800358c:	f000 fc84 	bl	8003e98 <stm32_i2c_write>
 8003590:	2800      	cmp	r0, #0
 8003592:	d1e3      	bne.n	800355c <mpu_set_accel_fsr+0x8>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
 8003594:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003598:	08db      	lsrs	r3, r3, #3
 800359a:	7263      	strb	r3, [r4, #9]
    return 0;
}
 800359c:	b002      	add	sp, #8
 800359e:	bd10      	pop	{r4, pc}
    switch (fsr) {
 80035a0:	2808      	cmp	r0, #8
 80035a2:	d005      	beq.n	80035b0 <mpu_set_accel_fsr+0x5c>
 80035a4:	2810      	cmp	r0, #16
 80035a6:	d1d9      	bne.n	800355c <mpu_set_accel_fsr+0x8>
        data = INV_FSR_16G << 3;
 80035a8:	2318      	movs	r3, #24
 80035aa:	e7e0      	b.n	800356e <mpu_set_accel_fsr+0x1a>
        data = INV_FSR_4G << 3;
 80035ac:	2308      	movs	r3, #8
 80035ae:	e7de      	b.n	800356e <mpu_set_accel_fsr+0x1a>
        data = INV_FSR_8G << 3;
 80035b0:	2310      	movs	r3, #16
 80035b2:	e7dc      	b.n	800356e <mpu_set_accel_fsr+0x1a>
        return 0;
 80035b4:	2000      	movs	r0, #0
 80035b6:	e7f1      	b.n	800359c <mpu_set_accel_fsr+0x48>
 80035b8:	20000010 	.word	0x20000010

080035bc <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 80035bc:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80035be:	4c19      	ldr	r4, [pc, #100]	; (8003624 <mpu_set_lpf+0x68>)
 80035c0:	7aa3      	ldrb	r3, [r4, #10]
 80035c2:	b91b      	cbnz	r3, 80035cc <mpu_set_lpf+0x10>
        return -1;
 80035c4:	f04f 30ff 	mov.w	r0, #4294967295
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
        return -1;
    st.chip_cfg.lpf = data;
    return 0;
}
 80035c8:	b002      	add	sp, #8
 80035ca:	bd10      	pop	{r4, pc}
    if (lpf >= 188)
 80035cc:	28bb      	cmp	r0, #187	; 0xbb
 80035ce:	d916      	bls.n	80035fe <mpu_set_lpf+0x42>
        data = INV_FILTER_188HZ;
 80035d0:	2301      	movs	r3, #1
        data = INV_FILTER_5HZ;
 80035d2:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.lpf == data)
 80035d6:	7ae2      	ldrb	r2, [r4, #11]
 80035d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d01f      	beq.n	8003620 <mpu_set_lpf+0x64>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 80035e0:	6821      	ldr	r1, [r4, #0]
 80035e2:	6860      	ldr	r0, [r4, #4]
 80035e4:	7889      	ldrb	r1, [r1, #2]
 80035e6:	7800      	ldrb	r0, [r0, #0]
 80035e8:	f10d 0307 	add.w	r3, sp, #7
 80035ec:	2201      	movs	r2, #1
 80035ee:	f000 fc53 	bl	8003e98 <stm32_i2c_write>
 80035f2:	2800      	cmp	r0, #0
 80035f4:	d1e6      	bne.n	80035c4 <mpu_set_lpf+0x8>
    st.chip_cfg.lpf = data;
 80035f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80035fa:	72e3      	strb	r3, [r4, #11]
    return 0;
 80035fc:	e7e4      	b.n	80035c8 <mpu_set_lpf+0xc>
    else if (lpf >= 98)
 80035fe:	2861      	cmp	r0, #97	; 0x61
 8003600:	d901      	bls.n	8003606 <mpu_set_lpf+0x4a>
        data = INV_FILTER_98HZ;
 8003602:	2302      	movs	r3, #2
 8003604:	e7e5      	b.n	80035d2 <mpu_set_lpf+0x16>
    else if (lpf >= 42)
 8003606:	2829      	cmp	r0, #41	; 0x29
 8003608:	d901      	bls.n	800360e <mpu_set_lpf+0x52>
        data = INV_FILTER_42HZ;
 800360a:	2303      	movs	r3, #3
 800360c:	e7e1      	b.n	80035d2 <mpu_set_lpf+0x16>
    else if (lpf >= 20)
 800360e:	2813      	cmp	r0, #19
 8003610:	d901      	bls.n	8003616 <mpu_set_lpf+0x5a>
        data = INV_FILTER_20HZ;
 8003612:	2304      	movs	r3, #4
 8003614:	e7dd      	b.n	80035d2 <mpu_set_lpf+0x16>
    else if (lpf >= 10)
 8003616:	2809      	cmp	r0, #9
        data = INV_FILTER_10HZ;
 8003618:	bf8c      	ite	hi
 800361a:	2305      	movhi	r3, #5
        data = INV_FILTER_5HZ;
 800361c:	2306      	movls	r3, #6
 800361e:	e7d8      	b.n	80035d2 <mpu_set_lpf+0x16>
        return 0;
 8003620:	2000      	movs	r0, #0
 8003622:	e7d1      	b.n	80035c8 <mpu_set_lpf+0xc>
 8003624:	20000010 	.word	0x20000010

08003628 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
 8003628:	b513      	push	{r0, r1, r4, lr}
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 800362a:	b918      	cbnz	r0, 8003634 <mpu_set_compass_sample_rate+0xc>
        return -1;
 800362c:	f04f 30ff 	mov.w	r0, #4294967295
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
#else
    return -1;
#endif
}
 8003630:	b002      	add	sp, #8
 8003632:	bd10      	pop	{r4, pc}
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8003634:	4c0e      	ldr	r4, [pc, #56]	; (8003670 <mpu_set_compass_sample_rate+0x48>)
 8003636:	89e3      	ldrh	r3, [r4, #14]
 8003638:	4298      	cmp	r0, r3
 800363a:	d8f7      	bhi.n	800362c <mpu_set_compass_sample_rate+0x4>
 800363c:	2864      	cmp	r0, #100	; 0x64
 800363e:	d8f5      	bhi.n	800362c <mpu_set_compass_sample_rate+0x4>
    div = st.chip_cfg.sample_rate / rate - 1;
 8003640:	fbb3 f0f0 	udiv	r0, r3, r0
 8003644:	ab02      	add	r3, sp, #8
 8003646:	3801      	subs	r0, #1
 8003648:	f803 0d01 	strb.w	r0, [r3, #-1]!
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 800364c:	6821      	ldr	r1, [r4, #0]
 800364e:	6860      	ldr	r0, [r4, #4]
 8003650:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
 8003654:	7800      	ldrb	r0, [r0, #0]
 8003656:	2201      	movs	r2, #1
 8003658:	f000 fc1e 	bl	8003e98 <stm32_i2c_write>
 800365c:	2800      	cmp	r0, #0
 800365e:	d1e5      	bne.n	800362c <mpu_set_compass_sample_rate+0x4>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 8003660:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003664:	89e3      	ldrh	r3, [r4, #14]
 8003666:	3201      	adds	r2, #1
 8003668:	fb93 f3f2 	sdiv	r3, r3, r2
 800366c:	8523      	strh	r3, [r4, #40]	; 0x28
    return 0;
 800366e:	e7df      	b.n	8003630 <mpu_set_compass_sample_rate+0x8>
 8003670:	20000010 	.word	0x20000010

08003674 <mpu_get_gyro_sens>:
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
    switch (st.chip_cfg.gyro_fsr) {
 8003674:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <mpu_get_gyro_sens+0x2c>)
 8003676:	7a1b      	ldrb	r3, [r3, #8]
 8003678:	2b03      	cmp	r3, #3
 800367a:	d80d      	bhi.n	8003698 <mpu_get_gyro_sens+0x24>
 800367c:	e8df f003 	tbb	[pc, r3]
 8003680:	0a080602 	.word	0x0a080602
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 8003684:	4b07      	ldr	r3, [pc, #28]	; (80036a4 <mpu_get_gyro_sens+0x30>)
        break;
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
        break;
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 8003686:	6003      	str	r3, [r0, #0]
        break;
    default:
        return -1;
    }
    return 0;
 8003688:	2000      	movs	r0, #0
        break;
 800368a:	4770      	bx	lr
        sens[0] = 65.5f;
 800368c:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <mpu_get_gyro_sens+0x34>)
 800368e:	e7fa      	b.n	8003686 <mpu_get_gyro_sens+0x12>
        sens[0] = 32.8f;
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <mpu_get_gyro_sens+0x38>)
 8003692:	e7f8      	b.n	8003686 <mpu_get_gyro_sens+0x12>
        sens[0] = 16.4f;
 8003694:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <mpu_get_gyro_sens+0x3c>)
 8003696:	e7f6      	b.n	8003686 <mpu_get_gyro_sens+0x12>
        return -1;
 8003698:	f04f 30ff 	mov.w	r0, #4294967295
}
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	20000010 	.word	0x20000010
 80036a4:	43030000 	.word	0x43030000
 80036a8:	42830000 	.word	0x42830000
 80036ac:	42033333 	.word	0x42033333
 80036b0:	41833333 	.word	0x41833333

080036b4 <mpu_get_accel_sens>:
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
    switch (st.chip_cfg.accel_fsr) {
 80036b4:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <mpu_get_accel_sens+0x3c>)
 80036b6:	7a5a      	ldrb	r2, [r3, #9]
 80036b8:	2a03      	cmp	r2, #3
 80036ba:	d816      	bhi.n	80036ea <mpu_get_accel_sens+0x36>
 80036bc:	e8df f002 	tbb	[pc, r2]
 80036c0:	120f0c02 	.word	0x120f0c02
    case INV_FSR_2G:
        sens[0] = 16384;
 80036c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
        break;
    case INV_FSR_8G:
        sens[0] = 4096;
        break;
    case INV_FSR_16G:
        sens[0] = 2048;
 80036c8:	8002      	strh	r2, [r0, #0]
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
 80036ca:	7cdb      	ldrb	r3, [r3, #19]
 80036cc:	b113      	cbz	r3, 80036d4 <mpu_get_accel_sens+0x20>
        sens[0] >>= 1;
 80036ce:	8803      	ldrh	r3, [r0, #0]
 80036d0:	085b      	lsrs	r3, r3, #1
 80036d2:	8003      	strh	r3, [r0, #0]
    return 0;
 80036d4:	2000      	movs	r0, #0
 80036d6:	4770      	bx	lr
        sens[0] = 8192;
 80036d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036dc:	e7f4      	b.n	80036c8 <mpu_get_accel_sens+0x14>
        sens[0] = 4096;
 80036de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036e2:	e7f1      	b.n	80036c8 <mpu_get_accel_sens+0x14>
        sens[0] = 2048;
 80036e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036e8:	e7ee      	b.n	80036c8 <mpu_get_accel_sens+0x14>
        return -1;
 80036ea:	f04f 30ff 	mov.w	r0, #4294967295
 80036ee:	4770      	bx	lr
 80036f0:	20000010 	.word	0x20000010

080036f4 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 80036f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
 80036f6:	4b12      	ldr	r3, [pc, #72]	; (8003740 <mpu_configure_fifo+0x4c>)
 80036f8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80036fc:	461e      	mov	r6, r3
 80036fe:	b9e2      	cbnz	r2, 800373a <mpu_configure_fifo+0x46>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
 8003700:	7a9c      	ldrb	r4, [r3, #10]
 8003702:	b19c      	cbz	r4, 800372c <mpu_configure_fifo+0x38>
    sensors &= ~INV_XYZ_COMPASS;
 8003704:	f000 05fe 	and.w	r5, r0, #254	; 0xfe
            return -1;
        prev = st.chip_cfg.fifo_enable;
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8003708:	402c      	ands	r4, r5
        prev = st.chip_cfg.fifo_enable;
 800370a:	7c1f      	ldrb	r7, [r3, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 800370c:	741c      	strb	r4, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 800370e:	1b2c      	subs	r4, r5, r4
 8003710:	bf18      	it	ne
 8003712:	f04f 34ff 	movne.w	r4, #4294967295
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
 8003716:	b90d      	cbnz	r5, 800371c <mpu_configure_fifo+0x28>
 8003718:	7d18      	ldrb	r0, [r3, #20]
 800371a:	b150      	cbz	r0, 8003732 <mpu_configure_fifo+0x3e>
            set_int_enable(1);
 800371c:	2001      	movs	r0, #1
 800371e:	f7ff fd5b 	bl	80031d8 <set_int_enable>
        else
            set_int_enable(0);
        if (sensors) {
 8003722:	b145      	cbz	r5, 8003736 <mpu_configure_fifo+0x42>
            if (mpu_reset_fifo()) {
 8003724:	f7ff fe32 	bl	800338c <mpu_reset_fifo>
 8003728:	b128      	cbz	r0, 8003736 <mpu_configure_fifo+0x42>
                st.chip_cfg.fifo_enable = prev;
 800372a:	7437      	strb	r7, [r6, #16]
            return -1;
 800372c:	f04f 34ff 	mov.w	r4, #4294967295
 8003730:	e001      	b.n	8003736 <mpu_configure_fifo+0x42>
            set_int_enable(0);
 8003732:	f7ff fd51 	bl	80031d8 <set_int_enable>
            }
        }
    }

    return result;
}
 8003736:	4620      	mov	r0, r4
 8003738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800373a:	2400      	movs	r4, #0
 800373c:	e7fb      	b.n	8003736 <mpu_configure_fifo+0x42>
 800373e:	bf00      	nop
 8003740:	20000010 	.word	0x20000010

08003744 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 8003744:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 8003746:	4c36      	ldr	r4, [pc, #216]	; (8003820 <mpu_set_bypass+0xdc>)
 8003748:	7ca3      	ldrb	r3, [r4, #18]
 800374a:	4283      	cmp	r3, r0
{
 800374c:	4605      	mov	r5, r0
    if (st.chip_cfg.bypass_mode == bypass_on)
 800374e:	d041      	beq.n	80037d4 <mpu_set_bypass+0x90>
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8003750:	6821      	ldr	r1, [r4, #0]
 8003752:	6860      	ldr	r0, [r4, #4]
 8003754:	7909      	ldrb	r1, [r1, #4]
 8003756:	7800      	ldrb	r0, [r0, #0]
 8003758:	f10d 0307 	add.w	r3, sp, #7
 800375c:	2201      	movs	r2, #1
    if (bypass_on) {
 800375e:	2d00      	cmp	r5, #0
 8003760:	d03a      	beq.n	80037d8 <mpu_set_bypass+0x94>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8003762:	f000 fbab 	bl	8003ebc <stm32_i2c_read>
 8003766:	b118      	cbz	r0, 8003770 <mpu_set_bypass+0x2c>
            return -1;
 8003768:	f04f 30ff 	mov.w	r0, #4294967295
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
 800376c:	b003      	add	sp, #12
 800376e:	bd30      	pop	{r4, r5, pc}
        tmp &= ~BIT_AUX_IF_EN;
 8003770:	f89d 3007 	ldrb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8003774:	6821      	ldr	r1, [r4, #0]
 8003776:	6860      	ldr	r0, [r4, #4]
 8003778:	7909      	ldrb	r1, [r1, #4]
        tmp &= ~BIT_AUX_IF_EN;
 800377a:	f023 0320 	bic.w	r3, r3, #32
 800377e:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8003782:	2201      	movs	r2, #1
 8003784:	f10d 0307 	add.w	r3, sp, #7
 8003788:	7800      	ldrb	r0, [r0, #0]
 800378a:	f000 fb85 	bl	8003e98 <stm32_i2c_write>
 800378e:	2800      	cmp	r0, #0
 8003790:	d1ea      	bne.n	8003768 <mpu_set_bypass+0x24>
        delay_ms(3);
 8003792:	2003      	movs	r0, #3
 8003794:	f7fc ff60 	bl	8000658 <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 8003798:	2302      	movs	r3, #2
 800379a:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.active_low_int)
 800379e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80037a2:	b113      	cbz	r3, 80037aa <mpu_set_bypass+0x66>
            tmp |= BIT_ACTL;
 80037a4:	2382      	movs	r3, #130	; 0x82
            tmp = 0;
 80037a6:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.latched_int)
 80037aa:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80037ae:	b12b      	cbz	r3, 80037bc <mpu_set_bypass+0x78>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80037b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80037b4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80037b8:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80037bc:	6821      	ldr	r1, [r4, #0]
 80037be:	6860      	ldr	r0, [r4, #4]
 80037c0:	7dc9      	ldrb	r1, [r1, #23]
 80037c2:	7800      	ldrb	r0, [r0, #0]
 80037c4:	f10d 0307 	add.w	r3, sp, #7
 80037c8:	2201      	movs	r2, #1
 80037ca:	f000 fb65 	bl	8003e98 <stm32_i2c_write>
 80037ce:	2800      	cmp	r0, #0
 80037d0:	d1ca      	bne.n	8003768 <mpu_set_bypass+0x24>
    st.chip_cfg.bypass_mode = bypass_on;
 80037d2:	74a5      	strb	r5, [r4, #18]
        return 0;
 80037d4:	2000      	movs	r0, #0
 80037d6:	e7c9      	b.n	800376c <mpu_set_bypass+0x28>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80037d8:	f000 fb70 	bl	8003ebc <stm32_i2c_read>
 80037dc:	2800      	cmp	r0, #0
 80037de:	d1c3      	bne.n	8003768 <mpu_set_bypass+0x24>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80037e0:	7aa3      	ldrb	r3, [r4, #10]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80037e2:	6821      	ldr	r1, [r4, #0]
 80037e4:	6860      	ldr	r0, [r4, #4]
 80037e6:	7909      	ldrb	r1, [r1, #4]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80037e8:	f013 0f01 	tst.w	r3, #1
 80037ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
            tmp |= BIT_AUX_IF_EN;
 80037f0:	bf14      	ite	ne
 80037f2:	f043 0320 	orrne.w	r3, r3, #32
            tmp &= ~BIT_AUX_IF_EN;
 80037f6:	f023 0320 	biceq.w	r3, r3, #32
 80037fa:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80037fe:	2201      	movs	r2, #1
 8003800:	f10d 0307 	add.w	r3, sp, #7
 8003804:	7800      	ldrb	r0, [r0, #0]
 8003806:	f000 fb47 	bl	8003e98 <stm32_i2c_write>
 800380a:	2800      	cmp	r0, #0
 800380c:	d1ac      	bne.n	8003768 <mpu_set_bypass+0x24>
        delay_ms(3);
 800380e:	2003      	movs	r0, #3
 8003810:	f7fc ff22 	bl	8000658 <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 8003814:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0c4      	beq.n	80037a6 <mpu_set_bypass+0x62>
            tmp = BIT_ACTL;
 800381c:	2380      	movs	r3, #128	; 0x80
 800381e:	e7c2      	b.n	80037a6 <mpu_set_bypass+0x62>
 8003820:	20000010 	.word	0x20000010

08003824 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 8003824:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 8003826:	4c18      	ldr	r4, [pc, #96]	; (8003888 <mpu_set_int_latched+0x64>)
 8003828:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800382c:	4283      	cmp	r3, r0
{
 800382e:	4605      	mov	r5, r0
    if (st.chip_cfg.latched_int == enable)
 8003830:	d025      	beq.n	800387e <mpu_set_int_latched+0x5a>
        return 0;

    if (enable)
 8003832:	b308      	cbz	r0, 8003878 <mpu_set_int_latched+0x54>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8003834:	2330      	movs	r3, #48	; 0x30
 8003836:	f88d 3007 	strb.w	r3, [sp, #7]
    else
        tmp = 0;
    if (st.chip_cfg.bypass_mode)
 800383a:	7ca3      	ldrb	r3, [r4, #18]
 800383c:	b12b      	cbz	r3, 800384a <mpu_set_int_latched+0x26>
        tmp |= BIT_BYPASS_EN;
 800383e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003842:	f043 0302 	orr.w	r3, r3, #2
 8003846:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.active_low_int)
 800384a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800384e:	b12b      	cbz	r3, 800385c <mpu_set_int_latched+0x38>
        tmp |= BIT_ACTL;
 8003850:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003854:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003858:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800385c:	6821      	ldr	r1, [r4, #0]
 800385e:	6860      	ldr	r0, [r4, #4]
 8003860:	7dc9      	ldrb	r1, [r1, #23]
 8003862:	7800      	ldrb	r0, [r0, #0]
 8003864:	f10d 0307 	add.w	r3, sp, #7
 8003868:	2201      	movs	r2, #1
 800386a:	f000 fb15 	bl	8003e98 <stm32_i2c_write>
 800386e:	b940      	cbnz	r0, 8003882 <mpu_set_int_latched+0x5e>
        return -1;
    st.chip_cfg.latched_int = enable;
 8003870:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
    return 0;
}
 8003874:	b003      	add	sp, #12
 8003876:	bd30      	pop	{r4, r5, pc}
        tmp = 0;
 8003878:	f88d 0007 	strb.w	r0, [sp, #7]
 800387c:	e7dd      	b.n	800383a <mpu_set_int_latched+0x16>
        return 0;
 800387e:	2000      	movs	r0, #0
 8003880:	e7f8      	b.n	8003874 <mpu_set_int_latched+0x50>
        return -1;
 8003882:	f04f 30ff 	mov.w	r0, #4294967295
 8003886:	e7f5      	b.n	8003874 <mpu_set_int_latched+0x50>
 8003888:	20000010 	.word	0x20000010

0800388c <mpu_lp_accel_mode>:
    if (rate > 40)
 800388c:	2828      	cmp	r0, #40	; 0x28
{
 800388e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003890:	4605      	mov	r5, r0
    if (rate > 40)
 8003892:	d902      	bls.n	800389a <mpu_lp_accel_mode+0xe>
        return -1;
 8003894:	f04f 35ff 	mov.w	r5, #4294967295
 8003898:	e014      	b.n	80038c4 <mpu_lp_accel_mode+0x38>
 800389a:	4c28      	ldr	r4, [pc, #160]	; (800393c <mpu_lp_accel_mode+0xb0>)
    if (!rate) {
 800389c:	b9a8      	cbnz	r0, 80038ca <mpu_lp_accel_mode+0x3e>
        mpu_set_int_latched(0);
 800389e:	f7ff ffc1 	bl	8003824 <mpu_set_int_latched>
        tmp[1] = BIT_STBY_XYZG;
 80038a2:	2307      	movs	r3, #7
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80038a4:	6821      	ldr	r1, [r4, #0]
 80038a6:	6860      	ldr	r0, [r4, #4]
        tmp[0] = 0;
 80038a8:	f88d 5004 	strb.w	r5, [sp, #4]
        tmp[1] = BIT_STBY_XYZG;
 80038ac:	f88d 3005 	strb.w	r3, [sp, #5]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80038b0:	2202      	movs	r2, #2
 80038b2:	ab01      	add	r3, sp, #4
 80038b4:	7d49      	ldrb	r1, [r1, #21]
 80038b6:	7800      	ldrb	r0, [r0, #0]
 80038b8:	f000 faee 	bl	8003e98 <stm32_i2c_write>
 80038bc:	4605      	mov	r5, r0
 80038be:	2800      	cmp	r0, #0
 80038c0:	d1e8      	bne.n	8003894 <mpu_lp_accel_mode+0x8>
        st.chip_cfg.lp_accel_mode = 0;
 80038c2:	7520      	strb	r0, [r4, #20]
}
 80038c4:	4628      	mov	r0, r5
 80038c6:	b003      	add	sp, #12
 80038c8:	bd30      	pop	{r4, r5, pc}
    mpu_set_int_latched(1);
 80038ca:	2001      	movs	r0, #1
 80038cc:	f7ff ffaa 	bl	8003824 <mpu_set_int_latched>
    if (rate == 1)
 80038d0:	2d01      	cmp	r5, #1
 80038d2:	d122      	bne.n	800391a <mpu_lp_accel_mode+0x8e>
        tmp[0] = INV_LPA_1_25HZ;
 80038d4:	2302      	movs	r3, #2
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 80038d6:	6821      	ldr	r1, [r4, #0]
 80038d8:	6860      	ldr	r0, [r4, #4]
        tmp[0] = INV_LPA_40HZ;
 80038da:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 80038de:	2201      	movs	r2, #1
 80038e0:	ab01      	add	r3, sp, #4
 80038e2:	7a49      	ldrb	r1, [r1, #9]
 80038e4:	7800      	ldrb	r0, [r0, #0]
 80038e6:	f000 fad7 	bl	8003e98 <stm32_i2c_write>
 80038ea:	2800      	cmp	r0, #0
 80038ec:	d1d2      	bne.n	8003894 <mpu_lp_accel_mode+0x8>
    tmp[0] = BIT_LPA_CYCLE;
 80038ee:	2320      	movs	r3, #32
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 80038f0:	6821      	ldr	r1, [r4, #0]
 80038f2:	6860      	ldr	r0, [r4, #4]
    tmp[0] = BIT_LPA_CYCLE;
 80038f4:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 80038f8:	2201      	movs	r2, #1
 80038fa:	ab01      	add	r3, sp, #4
 80038fc:	7d49      	ldrb	r1, [r1, #21]
 80038fe:	7800      	ldrb	r0, [r0, #0]
 8003900:	f000 faca 	bl	8003e98 <stm32_i2c_write>
 8003904:	4605      	mov	r5, r0
 8003906:	2800      	cmp	r0, #0
 8003908:	d1c4      	bne.n	8003894 <mpu_lp_accel_mode+0x8>
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 800390a:	2308      	movs	r3, #8
 800390c:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.lp_accel_mode = 1;
 800390e:	2301      	movs	r3, #1
    st.chip_cfg.clk_src = 0;
 8003910:	7320      	strb	r0, [r4, #12]
    st.chip_cfg.lp_accel_mode = 1;
 8003912:	7523      	strb	r3, [r4, #20]
    mpu_configure_fifo(0);
 8003914:	f7ff feee 	bl	80036f4 <mpu_configure_fifo>
 8003918:	e7d4      	b.n	80038c4 <mpu_lp_accel_mode+0x38>
    else if (rate == 2)
 800391a:	2d02      	cmp	r5, #2
 800391c:	d101      	bne.n	8003922 <mpu_lp_accel_mode+0x96>
        tmp[0] = INV_LPA_2_5HZ;
 800391e:	2303      	movs	r3, #3
 8003920:	e7d9      	b.n	80038d6 <mpu_lp_accel_mode+0x4a>
    else if (rate <= 5)
 8003922:	2d05      	cmp	r5, #5
 8003924:	d801      	bhi.n	800392a <mpu_lp_accel_mode+0x9e>
        tmp[0] = INV_LPA_5HZ;
 8003926:	2304      	movs	r3, #4
 8003928:	e7d5      	b.n	80038d6 <mpu_lp_accel_mode+0x4a>
    else if (rate <= 10)
 800392a:	2d0a      	cmp	r5, #10
 800392c:	d801      	bhi.n	8003932 <mpu_lp_accel_mode+0xa6>
        tmp[0] = INV_LPA_10HZ;
 800392e:	2305      	movs	r3, #5
 8003930:	e7d1      	b.n	80038d6 <mpu_lp_accel_mode+0x4a>
    else if (rate <= 20)
 8003932:	2d14      	cmp	r5, #20
        tmp[0] = INV_LPA_20HZ;
 8003934:	bf94      	ite	ls
 8003936:	2306      	movls	r3, #6
        tmp[0] = INV_LPA_40HZ;
 8003938:	2307      	movhi	r3, #7
 800393a:	e7cc      	b.n	80038d6 <mpu_lp_accel_mode+0x4a>
 800393c:	20000010 	.word	0x20000010

08003940 <mpu_set_sample_rate>:
{
 8003940:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!(st.chip_cfg.sensors))
 8003942:	4b22      	ldr	r3, [pc, #136]	; (80039cc <mpu_set_sample_rate+0x8c>)
 8003944:	7a9a      	ldrb	r2, [r3, #10]
{
 8003946:	4604      	mov	r4, r0
 8003948:	461e      	mov	r6, r3
    if (!(st.chip_cfg.sensors))
 800394a:	b922      	cbnz	r2, 8003956 <mpu_set_sample_rate+0x16>
        return -1;
 800394c:	f04f 34ff 	mov.w	r4, #4294967295
}
 8003950:	4620      	mov	r0, r4
 8003952:	b002      	add	sp, #8
 8003954:	bd70      	pop	{r4, r5, r6, pc}
    if (st.chip_cfg.dmp_on)
 8003956:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
 800395a:	2d00      	cmp	r5, #0
 800395c:	d1f6      	bne.n	800394c <mpu_set_sample_rate+0xc>
        if (st.chip_cfg.lp_accel_mode) {
 800395e:	7d1b      	ldrb	r3, [r3, #20]
 8003960:	b14b      	cbz	r3, 8003976 <mpu_set_sample_rate+0x36>
            if (rate && (rate <= 40)) {
 8003962:	1e43      	subs	r3, r0, #1
 8003964:	2b27      	cmp	r3, #39	; 0x27
 8003966:	d803      	bhi.n	8003970 <mpu_set_sample_rate+0x30>
                mpu_lp_accel_mode(rate);
 8003968:	f7ff ff90 	bl	800388c <mpu_lp_accel_mode>
                return 0;
 800396c:	462c      	mov	r4, r5
 800396e:	e7ef      	b.n	8003950 <mpu_set_sample_rate+0x10>
            mpu_lp_accel_mode(0);
 8003970:	4628      	mov	r0, r5
 8003972:	f7ff ff8b 	bl	800388c <mpu_lp_accel_mode>
 8003976:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 800397a:	bf28      	it	cs
 800397c:	f44f 747a 	movcs.w	r4, #1000	; 0x3e8
        data = 1000 / rate - 1;
 8003980:	2c04      	cmp	r4, #4
 8003982:	ab02      	add	r3, sp, #8
 8003984:	bf38      	it	cc
 8003986:	2404      	movcc	r4, #4
 8003988:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800398c:	fb95 f4f4 	sdiv	r4, r5, r4
 8003990:	3c01      	subs	r4, #1
 8003992:	f803 4d01 	strb.w	r4, [r3, #-1]!
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 8003996:	6831      	ldr	r1, [r6, #0]
 8003998:	6870      	ldr	r0, [r6, #4]
 800399a:	7849      	ldrb	r1, [r1, #1]
 800399c:	7800      	ldrb	r0, [r0, #0]
 800399e:	2201      	movs	r2, #1
 80039a0:	f000 fa7a 	bl	8003e98 <stm32_i2c_write>
 80039a4:	4604      	mov	r4, r0
 80039a6:	2800      	cmp	r0, #0
 80039a8:	d1d0      	bne.n	800394c <mpu_set_sample_rate+0xc>
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 80039aa:	8d30      	ldrh	r0, [r6, #40]	; 0x28
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 80039ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 80039b0:	2864      	cmp	r0, #100	; 0x64
 80039b2:	bf28      	it	cs
 80039b4:	2064      	movcs	r0, #100	; 0x64
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 80039b6:	3301      	adds	r3, #1
 80039b8:	fb95 f5f3 	sdiv	r5, r5, r3
 80039bc:	81f5      	strh	r5, [r6, #14]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 80039be:	f7ff fe33 	bl	8003628 <mpu_set_compass_sample_rate>
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 80039c2:	89f0      	ldrh	r0, [r6, #14]
 80039c4:	0840      	lsrs	r0, r0, #1
 80039c6:	f7ff fdf9 	bl	80035bc <mpu_set_lpf>
        return 0;
 80039ca:	e7c1      	b.n	8003950 <mpu_set_sample_rate+0x10>
 80039cc:	20000010 	.word	0x20000010

080039d0 <mpu_set_sensors>:
    if (sensors & INV_XYZ_GYRO)
 80039d0:	f010 0370 	ands.w	r3, r0, #112	; 0x70
{
 80039d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039d6:	4605      	mov	r5, r0
    if (sensors & INV_XYZ_GYRO)
 80039d8:	d014      	beq.n	8003a04 <mpu_set_sensors+0x34>
        data = INV_CLK_PLL;
 80039da:	2301      	movs	r3, #1
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 80039dc:	4c49      	ldr	r4, [pc, #292]	; (8003b04 <mpu_set_sensors+0x134>)
        data = BIT_SLEEP;
 80039de:	f88d 3006 	strb.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 80039e2:	6821      	ldr	r1, [r4, #0]
 80039e4:	6860      	ldr	r0, [r4, #4]
 80039e6:	7d49      	ldrb	r1, [r1, #21]
 80039e8:	7800      	ldrb	r0, [r0, #0]
 80039ea:	f10d 0306 	add.w	r3, sp, #6
 80039ee:	2201      	movs	r2, #1
 80039f0:	f000 fa52 	bl	8003e98 <stm32_i2c_write>
 80039f4:	b150      	cbz	r0, 8003a0c <mpu_set_sensors+0x3c>
        st.chip_cfg.sensors = 0;
 80039f6:	2300      	movs	r3, #0
 80039f8:	72a3      	strb	r3, [r4, #10]
        return -1;
 80039fa:	f04f 36ff 	mov.w	r6, #4294967295
}
 80039fe:	4630      	mov	r0, r6
 8003a00:	b002      	add	sp, #8
 8003a02:	bd70      	pop	{r4, r5, r6, pc}
    else if (sensors)
 8003a04:	2800      	cmp	r0, #0
 8003a06:	d1e9      	bne.n	80039dc <mpu_set_sensors+0xc>
        data = BIT_SLEEP;
 8003a08:	2340      	movs	r3, #64	; 0x40
 8003a0a:	e7e7      	b.n	80039dc <mpu_set_sensors+0xc>
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8003a0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (!(sensors & INV_X_GYRO))
 8003a10:	066e      	lsls	r6, r5, #25
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8003a12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a16:	7323      	strb	r3, [r4, #12]
        data |= BIT_STBY_XG;
 8003a18:	bf5a      	itte	pl
 8003a1a:	2304      	movpl	r3, #4
 8003a1c:	f88d 3006 	strbpl.w	r3, [sp, #6]
    data = 0;
 8003a20:	f88d 0006 	strbmi.w	r0, [sp, #6]
    if (!(sensors & INV_Y_GYRO))
 8003a24:	06a9      	lsls	r1, r5, #26
        data |= BIT_STBY_YG;
 8003a26:	bf58      	it	pl
 8003a28:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8003a2c:	6821      	ldr	r1, [r4, #0]
 8003a2e:	6860      	ldr	r0, [r4, #4]
 8003a30:	7d89      	ldrb	r1, [r1, #22]
        data |= BIT_STBY_YG;
 8003a32:	bf5c      	itt	pl
 8003a34:	f043 0302 	orrpl.w	r3, r3, #2
 8003a38:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (!(sensors & INV_Z_GYRO))
 8003a3c:	06ea      	lsls	r2, r5, #27
        data |= BIT_STBY_ZG;
 8003a3e:	bf5e      	ittt	pl
 8003a40:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
 8003a44:	f043 0301 	orrpl.w	r3, r3, #1
 8003a48:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (!(sensors & INV_XYZ_ACCEL))
 8003a4c:	072b      	lsls	r3, r5, #28
        data |= BIT_STBY_XYZA;
 8003a4e:	bf5e      	ittt	pl
 8003a50:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
 8003a54:	f043 0338 	orrpl.w	r3, r3, #56	; 0x38
 8003a58:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f10d 0306 	add.w	r3, sp, #6
 8003a62:	7800      	ldrb	r0, [r0, #0]
 8003a64:	f000 fa18 	bl	8003e98 <stm32_i2c_write>
 8003a68:	2800      	cmp	r0, #0
 8003a6a:	d1c4      	bne.n	80039f6 <mpu_set_sensors+0x26>
    if (sensors && (sensors != INV_XYZ_ACCEL))
 8003a6c:	f015 0ff7 	tst.w	r5, #247	; 0xf7
 8003a70:	d001      	beq.n	8003a76 <mpu_set_sensors+0xa6>
        mpu_set_int_latched(0);
 8003a72:	f7ff fed7 	bl	8003824 <mpu_set_int_latched>
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 8003a76:	6821      	ldr	r1, [r4, #0]
 8003a78:	6860      	ldr	r0, [r4, #4]
 8003a7a:	7909      	ldrb	r1, [r1, #4]
 8003a7c:	7800      	ldrb	r0, [r0, #0]
 8003a7e:	f10d 0307 	add.w	r3, sp, #7
 8003a82:	2201      	movs	r2, #1
 8003a84:	f000 fa1a 	bl	8003ebc <stm32_i2c_read>
 8003a88:	2800      	cmp	r0, #0
 8003a8a:	d1b6      	bne.n	80039fa <mpu_set_sensors+0x2a>
    if (sensors & INV_XYZ_COMPASS) {
 8003a8c:	f015 0f01 	tst.w	r5, #1
 8003a90:	f89d 3007 	ldrb.w	r3, [sp, #7]
        data = AKM_SINGLE_MEASUREMENT;
 8003a94:	bf15      	itete	ne
 8003a96:	2211      	movne	r2, #17
        data = AKM_POWER_DOWN;
 8003a98:	2210      	moveq	r2, #16
        user_ctrl |= BIT_AUX_IF_EN;
 8003a9a:	f043 0320 	orrne.w	r3, r3, #32
        user_ctrl &= ~BIT_AUX_IF_EN;
 8003a9e:	f023 0320 	biceq.w	r3, r3, #32
        data = AKM_SINGLE_MEASUREMENT;
 8003aa2:	bf14      	ite	ne
 8003aa4:	f88d 2006 	strbne.w	r2, [sp, #6]
        data = AKM_POWER_DOWN;
 8003aa8:	f88d 2006 	strbeq.w	r2, [sp, #6]
    if (st.chip_cfg.dmp_on)
 8003aac:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
        user_ctrl &= ~BIT_AUX_IF_EN;
 8003ab0:	f88d 3007 	strb.w	r3, [sp, #7]
 8003ab4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (st.chip_cfg.dmp_on)
 8003ab8:	b30a      	cbz	r2, 8003afe <mpu_set_sensors+0x12e>
        user_ctrl |= BIT_DMP_EN;
 8003aba:	f063 037f 	orn	r3, r3, #127	; 0x7f
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 8003abe:	6821      	ldr	r1, [r4, #0]
 8003ac0:	6860      	ldr	r0, [r4, #4]
        user_ctrl &= ~BIT_DMP_EN;
 8003ac2:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f10d 0306 	add.w	r3, sp, #6
 8003acc:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 8003ad0:	7800      	ldrb	r0, [r0, #0]
 8003ad2:	f000 f9e1 	bl	8003e98 <stm32_i2c_write>
 8003ad6:	2800      	cmp	r0, #0
 8003ad8:	d18f      	bne.n	80039fa <mpu_set_sensors+0x2a>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 8003ada:	6821      	ldr	r1, [r4, #0]
 8003adc:	6860      	ldr	r0, [r4, #4]
 8003ade:	7909      	ldrb	r1, [r1, #4]
 8003ae0:	7800      	ldrb	r0, [r0, #0]
 8003ae2:	f10d 0307 	add.w	r3, sp, #7
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f000 f9d6 	bl	8003e98 <stm32_i2c_write>
 8003aec:	4606      	mov	r6, r0
 8003aee:	2800      	cmp	r0, #0
 8003af0:	d183      	bne.n	80039fa <mpu_set_sensors+0x2a>
    st.chip_cfg.lp_accel_mode = 0;
 8003af2:	7520      	strb	r0, [r4, #20]
    delay_ms(50);
 8003af4:	2032      	movs	r0, #50	; 0x32
    st.chip_cfg.sensors = sensors;
 8003af6:	72a5      	strb	r5, [r4, #10]
    delay_ms(50);
 8003af8:	f7fc fdae 	bl	8000658 <HAL_Delay>
    return 0;
 8003afc:	e77f      	b.n	80039fe <mpu_set_sensors+0x2e>
        user_ctrl &= ~BIT_DMP_EN;
 8003afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b02:	e7dc      	b.n	8003abe <mpu_set_sensors+0xee>
 8003b04:	20000010 	.word	0x20000010

08003b08 <mpu_init>:
{
 8003b08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    st.hw->addr = address;
 8003b0a:	4ca9      	ldr	r4, [pc, #676]	; (8003db0 <mpu_init+0x2a8>)
    stm32_i2c_init(hi2c);
 8003b0c:	4608      	mov	r0, r1
{
 8003b0e:	4616      	mov	r6, r2
    stm32_i2c_init(hi2c);
 8003b10:	f000 f9b8 	bl	8003e84 <stm32_i2c_init>
    st.hw->addr = address;
 8003b14:	6863      	ldr	r3, [r4, #4]
    data[0] = BIT_RESET;
 8003b16:	ad04      	add	r5, sp, #16
    st.hw->addr = address;
 8003b18:	701e      	strb	r6, [r3, #0]
    data[0] = BIT_RESET;
 8003b1a:	2380      	movs	r3, #128	; 0x80
 8003b1c:	f805 3d08 	strb.w	r3, [r5, #-8]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8003b20:	6821      	ldr	r1, [r4, #0]
 8003b22:	4630      	mov	r0, r6
 8003b24:	462b      	mov	r3, r5
 8003b26:	2201      	movs	r2, #1
 8003b28:	7d49      	ldrb	r1, [r1, #21]
 8003b2a:	f000 f9b5 	bl	8003e98 <stm32_i2c_write>
 8003b2e:	4606      	mov	r6, r0
 8003b30:	b120      	cbz	r0, 8003b3c <mpu_init+0x34>
        return -1;
 8003b32:	f04f 34ff 	mov.w	r4, #4294967295
}
 8003b36:	4620      	mov	r0, r4
 8003b38:	b004      	add	sp, #16
 8003b3a:	bd70      	pop	{r4, r5, r6, pc}
    delay_ms(100);
 8003b3c:	2064      	movs	r0, #100	; 0x64
 8003b3e:	f7fc fd8b 	bl	8000658 <HAL_Delay>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8003b42:	6821      	ldr	r1, [r4, #0]
 8003b44:	6860      	ldr	r0, [r4, #4]
    data[0] = 0x00;
 8003b46:	f88d 6008 	strb.w	r6, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8003b4a:	462b      	mov	r3, r5
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	7d49      	ldrb	r1, [r1, #21]
 8003b50:	7800      	ldrb	r0, [r0, #0]
 8003b52:	f000 f9a1 	bl	8003e98 <stm32_i2c_write>
 8003b56:	2800      	cmp	r0, #0
 8003b58:	d1eb      	bne.n	8003b32 <mpu_init+0x2a>
   st.chip_cfg.accel_half = 0;
 8003b5a:	74e0      	strb	r0, [r4, #19]
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 8003b5c:	2348      	movs	r3, #72	; 0x48
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 8003b5e:	6821      	ldr	r1, [r4, #0]
 8003b60:	6860      	ldr	r0, [r4, #4]
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 8003b62:	f88d 3008 	strb.w	r3, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 8003b66:	2201      	movs	r2, #1
 8003b68:	462b      	mov	r3, r5
 8003b6a:	7a09      	ldrb	r1, [r1, #8]
 8003b6c:	7800      	ldrb	r0, [r0, #0]
 8003b6e:	f000 f993 	bl	8003e98 <stm32_i2c_write>
 8003b72:	2800      	cmp	r0, #0
 8003b74:	d1dd      	bne.n	8003b32 <mpu_init+0x2a>
    st.chip_cfg.sensors = 0xFF;
 8003b76:	23ff      	movs	r3, #255	; 0xff
    st.chip_cfg.sample_rate = 0xFFFF;
 8003b78:	f64f 72ff 	movw	r2, #65535	; 0xffff
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8003b7c:	2501      	movs	r5, #1
    st.chip_cfg.latched_int = 0;
 8003b7e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 8003b82:	7560      	strb	r0, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
 8003b84:	7520      	strb	r0, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8003b86:	f8c4 0016 	str.w	r0, [r4, #22]
 8003b8a:	f8c4 001a 	str.w	r0, [r4, #26]
 8003b8e:	f8c4 001e 	str.w	r0, [r4, #30]
    st.chip_cfg.dmp_on = 0;
 8003b92:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 8003b96:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 8003b9a:	84e0      	strh	r0, [r4, #38]	; 0x26
    if (mpu_set_gyro_fsr(2000))
 8003b9c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    st.chip_cfg.sensors = 0xFF;
 8003ba0:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 8003ba2:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8003ba4:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
 8003ba6:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8003ba8:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 8003baa:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 8003bac:	74a3      	strb	r3, [r4, #18]
    st.chip_cfg.compass_sample_rate = 0xFFFF;
 8003bae:	8522      	strh	r2, [r4, #40]	; 0x28
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8003bb0:	7325      	strb	r5, [r4, #12]
    st.chip_cfg.active_low_int = 1;
 8003bb2:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
    if (mpu_set_gyro_fsr(2000))
 8003bb6:	f7ff fc95 	bl	80034e4 <mpu_set_gyro_fsr>
 8003bba:	2800      	cmp	r0, #0
 8003bbc:	d1b9      	bne.n	8003b32 <mpu_init+0x2a>
    if (mpu_set_accel_fsr(2))
 8003bbe:	2002      	movs	r0, #2
 8003bc0:	f7ff fcc8 	bl	8003554 <mpu_set_accel_fsr>
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	d1b4      	bne.n	8003b32 <mpu_init+0x2a>
    if (mpu_set_lpf(42))
 8003bc8:	202a      	movs	r0, #42	; 0x2a
 8003bca:	f7ff fcf7 	bl	80035bc <mpu_set_lpf>
 8003bce:	2800      	cmp	r0, #0
 8003bd0:	d1af      	bne.n	8003b32 <mpu_init+0x2a>
    if (mpu_set_sample_rate(50))
 8003bd2:	2032      	movs	r0, #50	; 0x32
 8003bd4:	f7ff feb4 	bl	8003940 <mpu_set_sample_rate>
 8003bd8:	2800      	cmp	r0, #0
 8003bda:	d1aa      	bne.n	8003b32 <mpu_init+0x2a>
    if (mpu_configure_fifo(0))
 8003bdc:	f7ff fd8a 	bl	80036f4 <mpu_configure_fifo>
 8003be0:	2800      	cmp	r0, #0
 8003be2:	d1a6      	bne.n	8003b32 <mpu_init+0x2a>
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
 8003be4:	4628      	mov	r0, r5
 8003be6:	f7ff fdad 	bl	8003744 <mpu_set_bypass>

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8003bea:	250c      	movs	r5, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
 8003bec:	ab01      	add	r3, sp, #4
 8003bee:	2201      	movs	r2, #1
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	4628      	mov	r0, r5
 8003bf4:	f000 f962 	bl	8003ebc <stm32_i2c_read>
        if (!result && (data[0] == AKM_WHOAMI))
 8003bf8:	b918      	cbnz	r0, 8003c02 <mpu_init+0xfa>
 8003bfa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003bfe:	2b48      	cmp	r3, #72	; 0x48
 8003c00:	d00c      	beq.n	8003c1c <mpu_init+0x114>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8003c02:	3501      	adds	r5, #1
 8003c04:	b2ed      	uxtb	r5, r5
 8003c06:	2d10      	cmp	r5, #16
 8003c08:	d1f0      	bne.n	8003bec <mpu_init+0xe4>
    if (mpu_set_compass_sample_rate(10))
 8003c0a:	200a      	movs	r0, #10
 8003c0c:	f7ff fd0c 	bl	8003628 <mpu_set_compass_sample_rate>
 8003c10:	4604      	mov	r4, r0
 8003c12:	2800      	cmp	r0, #0
 8003c14:	d18d      	bne.n	8003b32 <mpu_init+0x2a>
    mpu_set_sensors(0);
 8003c16:	f7ff fedb 	bl	80039d0 <mpu_set_sensors>
    return 0;
 8003c1a:	e78c      	b.n	8003b36 <mpu_init+0x2e>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;

    data[0] = AKM_POWER_DOWN;
 8003c1c:	2610      	movs	r6, #16
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8003c1e:	ab01      	add	r3, sp, #4
 8003c20:	2201      	movs	r2, #1
 8003c22:	210a      	movs	r1, #10
 8003c24:	4628      	mov	r0, r5
    st.chip_cfg.compass_addr = akm_addr;
 8003c26:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
    data[0] = AKM_POWER_DOWN;
 8003c2a:	f88d 6004 	strb.w	r6, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8003c2e:	f000 f933 	bl	8003e98 <stm32_i2c_write>
 8003c32:	2800      	cmp	r0, #0
 8003c34:	d1e9      	bne.n	8003c0a <mpu_init+0x102>
        return -1;
    delay_ms(1);
 8003c36:	2001      	movs	r0, #1
 8003c38:	f7fc fd0e 	bl	8000658 <HAL_Delay>

    data[0] = AKM_FUSE_ROM_ACCESS;
 8003c3c:	231f      	movs	r3, #31
 8003c3e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8003c42:	2201      	movs	r2, #1
 8003c44:	ab01      	add	r3, sp, #4
 8003c46:	210a      	movs	r1, #10
 8003c48:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8003c4c:	f000 f924 	bl	8003e98 <stm32_i2c_write>
 8003c50:	2800      	cmp	r0, #0
 8003c52:	d1da      	bne.n	8003c0a <mpu_init+0x102>
        return -1;
    delay_ms(1);
 8003c54:	2001      	movs	r0, #1
 8003c56:	f7fc fcff 	bl	8000658 <HAL_Delay>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
 8003c5a:	ab01      	add	r3, sp, #4
 8003c5c:	2203      	movs	r2, #3
 8003c5e:	4631      	mov	r1, r6
 8003c60:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8003c64:	f000 f92a 	bl	8003ebc <stm32_i2c_read>
 8003c68:	2800      	cmp	r0, #0
 8003c6a:	d1ce      	bne.n	8003c0a <mpu_init+0x102>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8003c6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;

    data[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8003c70:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    data[0] = AKM_POWER_DOWN;
 8003c74:	f88d 6004 	strb.w	r6, [sp, #4]
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8003c78:	3380      	adds	r3, #128	; 0x80
 8003c7a:	85a3      	strh	r3, [r4, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 8003c7c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003c80:	3380      	adds	r3, #128	; 0x80
 8003c82:	85e3      	strh	r3, [r4, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 8003c84:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003c88:	3380      	adds	r3, #128	; 0x80
 8003c8a:	8623      	strh	r3, [r4, #48]	; 0x30
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	ab01      	add	r3, sp, #4
 8003c90:	210a      	movs	r1, #10
 8003c92:	f000 f901 	bl	8003e98 <stm32_i2c_write>
 8003c96:	4605      	mov	r5, r0
 8003c98:	2800      	cmp	r0, #0
 8003c9a:	d1b6      	bne.n	8003c0a <mpu_init+0x102>
        return -1;
    delay_ms(1);
 8003c9c:	2001      	movs	r0, #1
 8003c9e:	f7fc fcdb 	bl	8000658 <HAL_Delay>

    mpu_set_bypass(0);
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	f7ff fd4e 	bl	8003744 <mpu_set_bypass>

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
 8003ca8:	2340      	movs	r3, #64	; 0x40
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8003caa:	6821      	ldr	r1, [r4, #0]
 8003cac:	6860      	ldr	r0, [r4, #4]
    data[0] = 0x40;
 8003cae:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	ab01      	add	r3, sp, #4
 8003cb6:	7e89      	ldrb	r1, [r1, #26]
 8003cb8:	7800      	ldrb	r0, [r0, #0]
 8003cba:	f000 f8ed 	bl	8003e98 <stm32_i2c_write>
 8003cbe:	2800      	cmp	r0, #0
 8003cc0:	d1a3      	bne.n	8003c0a <mpu_init+0x102>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 8003cc2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 8003cc6:	6821      	ldr	r1, [r4, #0]
 8003cc8:	6860      	ldr	r0, [r4, #4]
 8003cca:	7f89      	ldrb	r1, [r1, #30]
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 8003ccc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003cd0:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	ab01      	add	r3, sp, #4
 8003cd8:	7800      	ldrb	r0, [r0, #0]
 8003cda:	f000 f8dd 	bl	8003e98 <stm32_i2c_write>
 8003cde:	2800      	cmp	r0, #0
 8003ce0:	d193      	bne.n	8003c0a <mpu_init+0x102>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
 8003ce2:	2302      	movs	r3, #2
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 8003ce4:	6821      	ldr	r1, [r4, #0]
 8003ce6:	6860      	ldr	r0, [r4, #4]
    data[0] = AKM_REG_ST1;
 8003ce8:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 8003cec:	2201      	movs	r2, #1
 8003cee:	ab01      	add	r3, sp, #4
 8003cf0:	7fc9      	ldrb	r1, [r1, #31]
 8003cf2:	7800      	ldrb	r0, [r0, #0]
 8003cf4:	f000 f8d0 	bl	8003e98 <stm32_i2c_write>
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	d186      	bne.n	8003c0a <mpu_init+0x102>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
 8003cfc:	2388      	movs	r3, #136	; 0x88
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 8003cfe:	6821      	ldr	r1, [r4, #0]
 8003d00:	6860      	ldr	r0, [r4, #4]
    data[0] = BIT_SLAVE_EN | 8;
 8003d02:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 8003d06:	2201      	movs	r2, #1
 8003d08:	ab01      	add	r3, sp, #4
 8003d0a:	f891 1020 	ldrb.w	r1, [r1, #32]
 8003d0e:	7800      	ldrb	r0, [r0, #0]
 8003d10:	f000 f8c2 	bl	8003e98 <stm32_i2c_write>
 8003d14:	2800      	cmp	r0, #0
 8003d16:	f47f af78 	bne.w	8003c0a <mpu_init+0x102>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
 8003d1a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8003d1e:	6821      	ldr	r1, [r4, #0]
 8003d20:	6860      	ldr	r0, [r4, #4]
    data[0] = st.chip_cfg.compass_addr;
 8003d22:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8003d26:	2201      	movs	r2, #1
 8003d28:	ab01      	add	r3, sp, #4
 8003d2a:	f891 1021 	ldrb.w	r1, [r1, #33]	; 0x21
 8003d2e:	7800      	ldrb	r0, [r0, #0]
 8003d30:	f000 f8b2 	bl	8003e98 <stm32_i2c_write>
 8003d34:	2800      	cmp	r0, #0
 8003d36:	f47f af68 	bne.w	8003c0a <mpu_init+0x102>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
 8003d3a:	230a      	movs	r3, #10
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 8003d3c:	6821      	ldr	r1, [r4, #0]
 8003d3e:	6860      	ldr	r0, [r4, #4]
    data[0] = AKM_REG_CNTL;
 8003d40:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 8003d44:	2201      	movs	r2, #1
 8003d46:	ab01      	add	r3, sp, #4
 8003d48:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8003d4c:	7800      	ldrb	r0, [r0, #0]
 8003d4e:	f000 f8a3 	bl	8003e98 <stm32_i2c_write>
 8003d52:	2800      	cmp	r0, #0
 8003d54:	f47f af59 	bne.w	8003c0a <mpu_init+0x102>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
 8003d58:	2381      	movs	r3, #129	; 0x81
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8003d5a:	6821      	ldr	r1, [r4, #0]
 8003d5c:	6860      	ldr	r0, [r4, #4]
    data[0] = BIT_SLAVE_EN | 1;
 8003d5e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8003d62:	2201      	movs	r2, #1
 8003d64:	ab01      	add	r3, sp, #4
 8003d66:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
 8003d6a:	7800      	ldrb	r0, [r0, #0]
 8003d6c:	f000 f894 	bl	8003e98 <stm32_i2c_write>
 8003d70:	2800      	cmp	r0, #0
 8003d72:	f47f af4a 	bne.w	8003c0a <mpu_init+0x102>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
 8003d76:	2311      	movs	r3, #17
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 8003d78:	6821      	ldr	r1, [r4, #0]
 8003d7a:	6860      	ldr	r0, [r4, #4]
    data[0] = AKM_SINGLE_MEASUREMENT;
 8003d7c:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 8003d80:	2201      	movs	r2, #1
 8003d82:	ab01      	add	r3, sp, #4
 8003d84:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 8003d88:	7800      	ldrb	r0, [r0, #0]
 8003d8a:	f000 f885 	bl	8003e98 <stm32_i2c_write>
 8003d8e:	2800      	cmp	r0, #0
 8003d90:	f47f af3b 	bne.w	8003c0a <mpu_init+0x102>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
 8003d94:	2303      	movs	r3, #3
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 8003d96:	6821      	ldr	r1, [r4, #0]
 8003d98:	6860      	ldr	r0, [r4, #4]
    data[0] = 0x03;
 8003d9a:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 8003d9e:	2201      	movs	r2, #1
 8003da0:	ab01      	add	r3, sp, #4
 8003da2:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 8003da6:	7800      	ldrb	r0, [r0, #0]
 8003da8:	f000 f876 	bl	8003e98 <stm32_i2c_write>
 8003dac:	e72d      	b.n	8003c0a <mpu_init+0x102>
 8003dae:	bf00      	nop
 8003db0:	20000010 	.word	0x20000010

08003db4 <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
 8003db4:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8003db6:	4d2a      	ldr	r5, [pc, #168]	; (8003e60 <mpu_get_compass_reg+0xac>)
 8003db8:	7aab      	ldrb	r3, [r5, #10]
 8003dba:	07db      	lsls	r3, r3, #31
{
 8003dbc:	b085      	sub	sp, #20
 8003dbe:	4604      	mov	r4, r0
 8003dc0:	460e      	mov	r6, r1
    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8003dc2:	d404      	bmi.n	8003dce <mpu_get_compass_reg+0x1a>
        return -1;
 8003dc4:	f04f 37ff 	mov.w	r7, #4294967295
        get_ms(timestamp);
    return 0;
#else
    return -1;
#endif
}
 8003dc8:	4638      	mov	r0, r7
 8003dca:	b005      	add	sp, #20
 8003dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
 8003dce:	6829      	ldr	r1, [r5, #0]
 8003dd0:	6868      	ldr	r0, [r5, #4]
 8003dd2:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8003dd6:	7800      	ldrb	r0, [r0, #0]
 8003dd8:	ab01      	add	r3, sp, #4
 8003dda:	2208      	movs	r2, #8
 8003ddc:	f000 f86e 	bl	8003ebc <stm32_i2c_read>
 8003de0:	4607      	mov	r7, r0
 8003de2:	2800      	cmp	r0, #0
 8003de4:	d1ee      	bne.n	8003dc4 <mpu_get_compass_reg+0x10>
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
 8003de6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d130      	bne.n	8003e54 <mpu_get_compass_reg+0xa0>
    if (tmp[7] & AKM_OVERFLOW)
 8003df2:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	db2f      	blt.n	8003e5a <mpu_get_compass_reg+0xa6>
    data[0] = (tmp[2] << 8) | tmp[1];
 8003dfa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003dfe:	f89d 1005 	ldrb.w	r1, [sp, #5]
    data[1] = (tmp[4] << 8) | tmp[3];
 8003e02:	f89d 2007 	ldrb.w	r2, [sp, #7]
    data[2] = (tmp[6] << 8) | tmp[5];
 8003e06:	f89d 000a 	ldrb.w	r0, [sp, #10]
    data[0] = (tmp[2] << 8) | tmp[1];
 8003e0a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
    data[1] = (tmp[4] << 8) | tmp[3];
 8003e0e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003e12:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    data[2] = (tmp[6] << 8) | tmp[5];
 8003e16:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8003e1a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    data[0] = (tmp[2] << 8) | tmp[1];
 8003e1e:	b209      	sxth	r1, r1
    data[1] = (tmp[4] << 8) | tmp[3];
 8003e20:	b212      	sxth	r2, r2
    data[2] = (tmp[6] << 8) | tmp[5];
 8003e22:	b21b      	sxth	r3, r3
    data[0] = (tmp[2] << 8) | tmp[1];
 8003e24:	8021      	strh	r1, [r4, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
 8003e26:	8062      	strh	r2, [r4, #2]
    data[2] = (tmp[6] << 8) | tmp[5];
 8003e28:	80a3      	strh	r3, [r4, #4]
    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
 8003e2a:	8da8      	ldrh	r0, [r5, #44]	; 0x2c
 8003e2c:	fb10 f101 	smulbb	r1, r0, r1
 8003e30:	1209      	asrs	r1, r1, #8
 8003e32:	8021      	strh	r1, [r4, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
 8003e34:	8de9      	ldrh	r1, [r5, #46]	; 0x2e
 8003e36:	fb11 f202 	smulbb	r2, r1, r2
 8003e3a:	1212      	asrs	r2, r2, #8
 8003e3c:	8062      	strh	r2, [r4, #2]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
 8003e3e:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 8003e40:	fb12 f303 	smulbb	r3, r2, r3
 8003e44:	121b      	asrs	r3, r3, #8
 8003e46:	80a3      	strh	r3, [r4, #4]
    if (timestamp)
 8003e48:	2e00      	cmp	r6, #0
 8003e4a:	d0bd      	beq.n	8003dc8 <mpu_get_compass_reg+0x14>
        get_ms(timestamp);
 8003e4c:	4630      	mov	r0, r6
 8003e4e:	f000 f811 	bl	8003e74 <stm32_get_clock_ms>
 8003e52:	e7b9      	b.n	8003dc8 <mpu_get_compass_reg+0x14>
        return -2;
 8003e54:	f06f 0701 	mvn.w	r7, #1
 8003e58:	e7b6      	b.n	8003dc8 <mpu_get_compass_reg+0x14>
        return -3;
 8003e5a:	f06f 0702 	mvn.w	r7, #2
 8003e5e:	e7b3      	b.n	8003dc8 <mpu_get_compass_reg+0x14>
 8003e60:	20000010 	.word	0x20000010

08003e64 <HAL_SYSTICK_Callback>:

volatile uint32_t counter = 0;

void HAL_SYSTICK_Callback()
{
	counter++;
 8003e64:	4a02      	ldr	r2, [pc, #8]	; (8003e70 <HAL_SYSTICK_Callback+0xc>)
 8003e66:	6813      	ldr	r3, [r2, #0]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	20000278 	.word	0x20000278

08003e74 <stm32_get_clock_ms>:
}

int stm32_get_clock_ms(unsigned long *count)
{
	*count = counter;
 8003e74:	4b02      	ldr	r3, [pc, #8]	; (8003e80 <stm32_get_clock_ms+0xc>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6003      	str	r3, [r0, #0]
	return 0;
}
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	20000278 	.word	0x20000278

08003e84 <stm32_i2c_init>:
#include "stm32_mpu9250_i2c.h"

I2C_HandleTypeDef hi2c;

void stm32_i2c_init(I2C_HandleTypeDef *hi2cx)
{
 8003e84:	b508      	push	{r3, lr}
	hi2c = *hi2cx;
 8003e86:	4601      	mov	r1, r0
 8003e88:	224c      	movs	r2, #76	; 0x4c
 8003e8a:	4802      	ldr	r0, [pc, #8]	; (8003e94 <stm32_i2c_init+0x10>)
 8003e8c:	f002 feba 	bl	8006c04 <memcpy>
 8003e90:	bd08      	pop	{r3, pc}
 8003e92:	bf00      	nop
 8003e94:	200002bc 	.word	0x200002bc

08003e98 <stm32_i2c_write>:

}
int stm32_i2c_write(unsigned char slave_addr, unsigned char reg_addr,
                       unsigned char length, unsigned char * data)
{
 8003e98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Write(&hi2c, slave_addr << 1, reg_addr, 1, data, length, 0xFFFF);
 8003e9a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	9201      	str	r2, [sp, #4]
 8003ea4:	9402      	str	r4, [sp, #8]
 8003ea6:	460a      	mov	r2, r1
 8003ea8:	fa00 f103 	lsl.w	r1, r0, r3
 8003eac:	4802      	ldr	r0, [pc, #8]	; (8003eb8 <stm32_i2c_write+0x20>)
 8003eae:	f7fd f83a 	bl	8000f26 <HAL_I2C_Mem_Write>

	return 0;
}
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	b004      	add	sp, #16
 8003eb6:	bd10      	pop	{r4, pc}
 8003eb8:	200002bc 	.word	0x200002bc

08003ebc <stm32_i2c_read>:
int stm32_i2c_read(unsigned char slave_addr, unsigned char reg_addr,
                       unsigned char length, unsigned char * data)
{
 8003ebc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Read(&hi2c, slave_addr << 1, reg_addr, 1, data, length, 0xFFFF);
 8003ebe:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	9201      	str	r2, [sp, #4]
 8003ec8:	9402      	str	r4, [sp, #8]
 8003eca:	460a      	mov	r2, r1
 8003ecc:	fa00 f103 	lsl.w	r1, r0, r3
 8003ed0:	4802      	ldr	r0, [pc, #8]	; (8003edc <stm32_i2c_read+0x20>)
 8003ed2:	f7fd f8e0 	bl	8001096 <HAL_I2C_Mem_Read>

	return 0;
}
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	b004      	add	sp, #16
 8003eda:	bd10      	pop	{r4, pc}
 8003edc:	200002bc 	.word	0x200002bc

08003ee0 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003ee0:	4b03      	ldr	r3, [pc, #12]	; (8003ef0 <disk_status+0x10>)
 8003ee2:	181a      	adds	r2, r3, r0
 8003ee4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003ee8:	7a10      	ldrb	r0, [r2, #8]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	4718      	bx	r3
 8003ef0:	2000029c 	.word	0x2000029c

08003ef4 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8003ef4:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <disk_initialize+0x1c>)
 8003ef6:	5c1a      	ldrb	r2, [r3, r0]
 8003ef8:	b942      	cbnz	r2, 8003f0c <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 8003efa:	2201      	movs	r2, #1
 8003efc:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003efe:	181a      	adds	r2, r3, r0
 8003f00:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003f04:	7a10      	ldrb	r0, [r2, #8]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4718      	bx	r3
  }
  return stat;
}
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	4770      	bx	lr
 8003f10:	2000029c 	.word	0x2000029c

08003f14 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003f14:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003f16:	4c05      	ldr	r4, [pc, #20]	; (8003f2c <disk_read+0x18>)
 8003f18:	1825      	adds	r5, r4, r0
 8003f1a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8003f1e:	6860      	ldr	r0, [r4, #4]
 8003f20:	6884      	ldr	r4, [r0, #8]
 8003f22:	7a28      	ldrb	r0, [r5, #8]
 8003f24:	46a4      	mov	ip, r4
  return res;
}
 8003f26:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003f28:	4760      	bx	ip
 8003f2a:	bf00      	nop
 8003f2c:	2000029c 	.word	0x2000029c

08003f30 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003f30:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003f32:	4c05      	ldr	r4, [pc, #20]	; (8003f48 <disk_write+0x18>)
 8003f34:	1825      	adds	r5, r4, r0
 8003f36:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8003f3a:	6860      	ldr	r0, [r4, #4]
 8003f3c:	68c4      	ldr	r4, [r0, #12]
 8003f3e:	7a28      	ldrb	r0, [r5, #8]
 8003f40:	46a4      	mov	ip, r4
  return res;
}
 8003f42:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003f44:	4760      	bx	ip
 8003f46:	bf00      	nop
 8003f48:	2000029c 	.word	0x2000029c

08003f4c <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003f4c:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <disk_ioctl+0x18>)
{
 8003f4e:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003f50:	181c      	adds	r4, r3, r0
 8003f52:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003f56:	7a20      	ldrb	r0, [r4, #8]
 8003f58:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8003f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	4718      	bx	r3
 8003f62:	bf00      	nop
 8003f64:	2000029c 	.word	0x2000029c

08003f68 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003f68:	3801      	subs	r0, #1
 8003f6a:	440a      	add	r2, r1
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003f6c:	4291      	cmp	r1, r2
 8003f6e:	d100      	bne.n	8003f72 <mem_cpy+0xa>
		*d++ = *s++;
}
 8003f70:	4770      	bx	lr
		*d++ = *s++;
 8003f72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f76:	f800 3f01 	strb.w	r3, [r0, #1]!
 8003f7a:	e7f7      	b.n	8003f6c <mem_cpy+0x4>

08003f7c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003f7c:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8003f7e:	4290      	cmp	r0, r2
 8003f80:	d100      	bne.n	8003f84 <mem_set+0x8>
		*d++ = (BYTE)val;
}
 8003f82:	4770      	bx	lr
		*d++ = (BYTE)val;
 8003f84:	f800 1b01 	strb.w	r1, [r0], #1
 8003f88:	e7f9      	b.n	8003f7e <mem_set+0x2>
	...

08003f8c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003f8c:	4a17      	ldr	r2, [pc, #92]	; (8003fec <chk_lock+0x60>)
 8003f8e:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003f90:	2400      	movs	r4, #0
 8003f92:	4623      	mov	r3, r4
 8003f94:	4616      	mov	r6, r2
		if (Files[i].fs) {	/* Existing entry */
 8003f96:	6815      	ldr	r5, [r2, #0]
 8003f98:	b1c5      	cbz	r5, 8003fcc <chk_lock+0x40>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003f9a:	f8d0 7200 	ldr.w	r7, [r0, #512]	; 0x200
 8003f9e:	42bd      	cmp	r5, r7
 8003fa0:	d115      	bne.n	8003fce <chk_lock+0x42>
 8003fa2:	6857      	ldr	r7, [r2, #4]
 8003fa4:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8003fa8:	42af      	cmp	r7, r5
 8003faa:	d110      	bne.n	8003fce <chk_lock+0x42>
				Files[i].clu == dp->sclust &&
 8003fac:	8917      	ldrh	r7, [r2, #8]
 8003fae:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8003fb2:	42af      	cmp	r7, r5
 8003fb4:	d10b      	bne.n	8003fce <chk_lock+0x42>
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003fb6:	b9b9      	cbnz	r1, 8003fe8 <chk_lock+0x5c>
 8003fb8:	220c      	movs	r2, #12
 8003fba:	fb02 6303 	mla	r3, r2, r3, r6
 8003fbe:	895b      	ldrh	r3, [r3, #10]
 8003fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fc4:	bf14      	ite	ne
 8003fc6:	2000      	movne	r0, #0
 8003fc8:	2010      	moveq	r0, #16
 8003fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8003fcc:	2401      	movs	r4, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003fce:	3301      	adds	r3, #1
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	f102 020c 	add.w	r2, r2, #12
 8003fd6:	d1de      	bne.n	8003f96 <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003fd8:	b10c      	cbz	r4, 8003fde <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003fda:	2000      	movs	r0, #0
 8003fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003fde:	2902      	cmp	r1, #2
 8003fe0:	bf0c      	ite	eq
 8003fe2:	2000      	moveq	r0, #0
 8003fe4:	2012      	movne	r0, #18
 8003fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003fe8:	2010      	movs	r0, #16
 8003fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fec:	20000280 	.word	0x20000280

08003ff0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ff2:	4c20      	ldr	r4, [pc, #128]	; (8004074 <inc_lock+0x84>)
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 8003ff4:	f8d0 6200 	ldr.w	r6, [r0, #512]	; 0x200
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	4622      	mov	r2, r4
		if (Files[i].fs == dp->fs &&
 8003ffc:	6825      	ldr	r5, [r4, #0]
 8003ffe:	42b5      	cmp	r5, r6
 8004000:	d109      	bne.n	8004016 <inc_lock+0x26>
 8004002:	6867      	ldr	r7, [r4, #4]
 8004004:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8004008:	42af      	cmp	r7, r5
 800400a:	d104      	bne.n	8004016 <inc_lock+0x26>
			Files[i].clu == dp->sclust &&
 800400c:	8927      	ldrh	r7, [r4, #8]
 800400e:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8004012:	42af      	cmp	r7, r5
 8004014:	d022      	beq.n	800405c <inc_lock+0x6c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004016:	3301      	adds	r3, #1
 8004018:	2b02      	cmp	r3, #2
 800401a:	f104 040c 	add.w	r4, r4, #12
 800401e:	d1ed      	bne.n	8003ffc <inc_lock+0xc>
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004020:	6813      	ldr	r3, [r2, #0]
 8004022:	b113      	cbz	r3, 800402a <inc_lock+0x3a>
 8004024:	68d3      	ldr	r3, [r2, #12]
 8004026:	bb1b      	cbnz	r3, 8004070 <inc_lock+0x80>
 8004028:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->fs;
 800402a:	240c      	movs	r4, #12
 800402c:	435c      	muls	r4, r3
 800402e:	1915      	adds	r5, r2, r4
 8004030:	5116      	str	r6, [r2, r4]
		Files[i].clu = dp->sclust;
 8004032:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
		Files[i].idx = dp->index;
 8004036:	f8b0 0206 	ldrh.w	r0, [r0, #518]	; 0x206
 800403a:	8128      	strh	r0, [r5, #8]
		Files[i].ctr = 0;
 800403c:	2000      	movs	r0, #0
		Files[i].clu = dp->sclust;
 800403e:	606c      	str	r4, [r5, #4]
		Files[i].ctr = 0;
 8004040:	8168      	strh	r0, [r5, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004042:	b991      	cbnz	r1, 800406a <inc_lock+0x7a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004044:	210c      	movs	r1, #12
 8004046:	fb01 2103 	mla	r1, r1, r3, r2
 800404a:	8949      	ldrh	r1, [r1, #10]
 800404c:	3101      	adds	r1, #1
 800404e:	b289      	uxth	r1, r1
 8004050:	200c      	movs	r0, #12
 8004052:	fb00 2203 	mla	r2, r0, r3, r2

	return i + 1;
 8004056:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004058:	8151      	strh	r1, [r2, #10]
	return i + 1;
 800405a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800405c:	2900      	cmp	r1, #0
 800405e:	d0f1      	beq.n	8004044 <inc_lock+0x54>
 8004060:	210c      	movs	r1, #12
 8004062:	fb01 2103 	mla	r1, r1, r3, r2
 8004066:	8949      	ldrh	r1, [r1, #10]
 8004068:	b911      	cbnz	r1, 8004070 <inc_lock+0x80>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800406a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800406e:	e7ef      	b.n	8004050 <inc_lock+0x60>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004070:	2000      	movs	r0, #0
 8004072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004074:	20000280 	.word	0x20000280

08004078 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004078:	b530      	push	{r4, r5, lr}
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800407a:	1e45      	subs	r5, r0, #1
 800407c:	2d01      	cmp	r5, #1
 800407e:	d811      	bhi.n	80040a4 <dec_lock+0x2c>
		n = Files[i].ctr;
 8004080:	490a      	ldr	r1, [pc, #40]	; (80040ac <dec_lock+0x34>)
 8004082:	220c      	movs	r2, #12
 8004084:	fb02 1305 	mla	r3, r2, r5, r1
 8004088:	895c      	ldrh	r4, [r3, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n) n--;					/* Decrement read mode open count */
 800408a:	f424 7380 	bic.w	r3, r4, #256	; 0x100
 800408e:	b298      	uxth	r0, r3
 8004090:	b108      	cbz	r0, 8004096 <dec_lock+0x1e>
 8004092:	3c01      	subs	r4, #1
 8004094:	b2a0      	uxth	r0, r4
		Files[i].ctr = n;
 8004096:	fb02 f305 	mul.w	r3, r2, r5
 800409a:	18ca      	adds	r2, r1, r3
 800409c:	8150      	strh	r0, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800409e:	b918      	cbnz	r0, 80040a8 <dec_lock+0x30>
 80040a0:	50c8      	str	r0, [r1, r3]
 80040a2:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80040a4:	2002      	movs	r0, #2
 80040a6:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
 80040a8:	2000      	movs	r0, #0
	}
	return res;
}
 80040aa:	bd30      	pop	{r4, r5, pc}
 80040ac:	20000280 	.word	0x20000280

080040b0 <clmt_clust>:
)
{
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80040b0:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80040b4:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80040b8:	3304      	adds	r3, #4
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80040ba:	0a49      	lsrs	r1, r1, #9
 80040bc:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80040c0:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80040c4:	6818      	ldr	r0, [r3, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 80040c6:	b130      	cbz	r0, 80040d6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80040c8:	4281      	cmp	r1, r0
 80040ca:	d302      	bcc.n	80040d2 <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 80040cc:	1a09      	subs	r1, r1, r0
 80040ce:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80040d0:	e7f8      	b.n	80040c4 <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 80040d2:	6858      	ldr	r0, [r3, #4]
 80040d4:	4408      	add	r0, r1
}
 80040d6:	4770      	bx	lr

080040d8 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80040d8:	6802      	ldr	r2, [r0, #0]
{
 80040da:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 80040dc:	b152      	cbz	r2, 80040f4 <get_ldnumber+0x1c>
 80040de:	4611      	mov	r1, r2
 80040e0:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80040e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040e6:	2c20      	cmp	r4, #32
 80040e8:	d90c      	bls.n	8004104 <get_ldnumber+0x2c>
 80040ea:	2c3a      	cmp	r4, #58	; 0x3a
 80040ec:	d1f8      	bne.n	80040e0 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 80040ee:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80040f0:	428b      	cmp	r3, r1
 80040f2:	d002      	beq.n	80040fa <get_ldnumber+0x22>
	int vol = -1;
 80040f4:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 80040f8:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80040fa:	7812      	ldrb	r2, [r2, #0]
 80040fc:	2a30      	cmp	r2, #48	; 0x30
 80040fe:	d1f9      	bne.n	80040f4 <get_ldnumber+0x1c>
					*path = ++tt;
 8004100:	3301      	adds	r3, #1
 8004102:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8004104:	2000      	movs	r0, #0
 8004106:	bd10      	pop	{r4, pc}

08004108 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8004108:	b508      	push	{r3, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800410a:	b190      	cbz	r0, 8004132 <validate+0x2a>
 800410c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8004110:	b17b      	cbz	r3, 8004132 <validate+0x2a>
 8004112:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 8004116:	b162      	cbz	r2, 8004132 <validate+0x2a>
 8004118:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 800411c:	f8b0 2204 	ldrh.w	r2, [r0, #516]	; 0x204
 8004120:	4291      	cmp	r1, r2
 8004122:	d106      	bne.n	8004132 <validate+0x2a>
 8004124:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004128:	f7ff feda 	bl	8003ee0 <disk_status>
 800412c:	f010 0001 	ands.w	r0, r0, #1
 8004130:	d000      	beq.n	8004134 <validate+0x2c>
		return FR_INVALID_OBJECT;
 8004132:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 8004134:	bd08      	pop	{r3, pc}

08004136 <ld_clust.isra.0>:
	cl = LD_WORD(dir + DIR_FstClusLO);
 8004136:	7eca      	ldrb	r2, [r1, #27]
 8004138:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32)
 800413a:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 800413c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8004140:	bf01      	itttt	eq
 8004142:	7d48      	ldrbeq	r0, [r1, #21]
 8004144:	7d0a      	ldrbeq	r2, [r1, #20]
 8004146:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 800414a:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 800414e:	4618      	mov	r0, r3
 8004150:	4770      	bx	lr

08004152 <sync_window.part.2>:
FRESULT sync_window (
 8004152:	b570      	push	{r4, r5, r6, lr}
		wsect = fs->winsect;	/* Current sector number */
 8004154:	f8d0 522c 	ldr.w	r5, [r0, #556]	; 0x22c
FRESULT sync_window (
 8004158:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800415a:	4601      	mov	r1, r0
 800415c:	2301      	movs	r3, #1
 800415e:	462a      	mov	r2, r5
 8004160:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8004164:	f7ff fee4 	bl	8003f30 <disk_write>
 8004168:	b9d0      	cbnz	r0, 80041a0 <sync_window.part.2+0x4e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800416a:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 800416e:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
			fs->wflag = 0;
 8004172:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004176:	1aeb      	subs	r3, r5, r3
 8004178:	4293      	cmp	r3, r2
 800417a:	d301      	bcc.n	8004180 <sync_window.part.2+0x2e>
	FRESULT res = FR_OK;
 800417c:	2000      	movs	r0, #0
 800417e:	bd70      	pop	{r4, r5, r6, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004180:	f894 6203 	ldrb.w	r6, [r4, #515]	; 0x203
 8004184:	2e01      	cmp	r6, #1
 8004186:	d9f9      	bls.n	800417c <sync_window.part.2+0x2a>
					wsect += fs->fsize;
 8004188:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800418c:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
					wsect += fs->fsize;
 8004190:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004192:	462a      	mov	r2, r5
 8004194:	2301      	movs	r3, #1
 8004196:	4621      	mov	r1, r4
 8004198:	f7ff feca 	bl	8003f30 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800419c:	3e01      	subs	r6, #1
 800419e:	e7f1      	b.n	8004184 <sync_window.part.2+0x32>
			res = FR_DISK_ERR;
 80041a0:	2001      	movs	r0, #1
}
 80041a2:	bd70      	pop	{r4, r5, r6, pc}

080041a4 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80041a4:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 80041a8:	b10b      	cbz	r3, 80041ae <sync_window+0xa>
 80041aa:	f7ff bfd2 	b.w	8004152 <sync_window.part.2>
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	4770      	bx	lr

080041b2 <sync_fs>:
{
 80041b2:	b538      	push	{r3, r4, r5, lr}
 80041b4:	4604      	mov	r4, r0
	res = sync_window(fs);
 80041b6:	f7ff fff5 	bl	80041a4 <sync_window>
 80041ba:	4605      	mov	r5, r0
	if (res == FR_OK) {
 80041bc:	2800      	cmp	r0, #0
 80041be:	d154      	bne.n	800426a <sync_fs+0xb8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80041c0:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d147      	bne.n	8004258 <sync_fs+0xa6>
 80041c8:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d143      	bne.n	8004258 <sync_fs+0xa6>
			mem_set(fs->win.d8, 0, SS(fs));
 80041d0:	4601      	mov	r1, r0
 80041d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041d6:	4620      	mov	r0, r4
 80041d8:	f7ff fed0 	bl	8003f7c <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80041dc:	2255      	movs	r2, #85	; 0x55
 80041de:	f884 21fe 	strb.w	r2, [r4, #510]	; 0x1fe
 80041e2:	22aa      	movs	r2, #170	; 0xaa
 80041e4:	f884 21ff 	strb.w	r2, [r4, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80041e8:	2252      	movs	r2, #82	; 0x52
 80041ea:	7022      	strb	r2, [r4, #0]
 80041ec:	7062      	strb	r2, [r4, #1]
 80041ee:	2261      	movs	r2, #97	; 0x61
 80041f0:	70a2      	strb	r2, [r4, #2]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80041f2:	f884 21e7 	strb.w	r2, [r4, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80041f6:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 80041fa:	f884 21e8 	strb.w	r2, [r4, #488]	; 0x1e8
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80041fe:	2141      	movs	r1, #65	; 0x41
 8004200:	70e1      	strb	r1, [r4, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8004202:	f884 11e6 	strb.w	r1, [r4, #486]	; 0x1e6
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8004206:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800420a:	f884 11e9 	strb.w	r1, [r4, #489]	; 0x1e9
 800420e:	0c11      	lsrs	r1, r2, #16
 8004210:	0e12      	lsrs	r2, r2, #24
 8004212:	f884 21eb 	strb.w	r2, [r4, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8004216:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800421a:	f884 11ea 	strb.w	r1, [r4, #490]	; 0x1ea
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800421e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004222:	f884 21ec 	strb.w	r2, [r4, #492]	; 0x1ec
 8004226:	f884 11ed 	strb.w	r1, [r4, #493]	; 0x1ed
 800422a:	0c11      	lsrs	r1, r2, #16
 800422c:	0e12      	lsrs	r2, r2, #24
 800422e:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
			fs->winsect = fs->volbase + 1;
 8004232:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8004236:	f884 11ee 	strb.w	r1, [r4, #494]	; 0x1ee
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800423a:	2072      	movs	r0, #114	; 0x72
			fs->winsect = fs->volbase + 1;
 800423c:	3201      	adds	r2, #1
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800423e:	f884 01e4 	strb.w	r0, [r4, #484]	; 0x1e4
 8004242:	f884 01e5 	strb.w	r0, [r4, #485]	; 0x1e5
			fs->winsect = fs->volbase + 1;
 8004246:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800424a:	4621      	mov	r1, r4
 800424c:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8004250:	f7ff fe6e 	bl	8003f30 <disk_write>
			fs->fsi_flag = 0;
 8004254:	f884 5205 	strb.w	r5, [r4, #517]	; 0x205
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8004258:	2200      	movs	r2, #0
 800425a:	4611      	mov	r1, r2
 800425c:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8004260:	f7ff fe74 	bl	8003f4c <disk_ioctl>
 8004264:	3000      	adds	r0, #0
 8004266:	bf18      	it	ne
 8004268:	2001      	movne	r0, #1
}
 800426a:	bd38      	pop	{r3, r4, r5, pc}

0800426c <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 800426c:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 8004270:	428b      	cmp	r3, r1
{
 8004272:	b570      	push	{r4, r5, r6, lr}
 8004274:	4606      	mov	r6, r0
 8004276:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004278:	d013      	beq.n	80042a2 <move_window+0x36>
		res = sync_window(fs);		/* Write-back changes */
 800427a:	f7ff ff93 	bl	80041a4 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800427e:	4604      	mov	r4, r0
 8004280:	b968      	cbnz	r0, 800429e <move_window+0x32>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8004282:	462a      	mov	r2, r5
 8004284:	2301      	movs	r3, #1
 8004286:	4631      	mov	r1, r6
 8004288:	f896 0201 	ldrb.w	r0, [r6, #513]	; 0x201
 800428c:	f7ff fe42 	bl	8003f14 <disk_read>
 8004290:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8004292:	bf1c      	itt	ne
 8004294:	f04f 35ff 	movne.w	r5, #4294967295
 8004298:	2401      	movne	r4, #1
			fs->winsect = sector;
 800429a:	f8c6 522c 	str.w	r5, [r6, #556]	; 0x22c
}
 800429e:	4620      	mov	r0, r4
 80042a0:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 80042a2:	2400      	movs	r4, #0
 80042a4:	e7fb      	b.n	800429e <move_window+0x32>
	...

080042a8 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80042a8:	2300      	movs	r3, #0
{
 80042aa:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80042ac:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 80042b0:	f04f 33ff 	mov.w	r3, #4294967295
 80042b4:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
{
 80042b8:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80042ba:	f7ff ffd7 	bl	800426c <move_window>
 80042be:	b9c0      	cbnz	r0, 80042f2 <check_fs+0x4a>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80042c0:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 80042c4:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 80042c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80042cc:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d110      	bne.n	80042f6 <check_fs+0x4e>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80042d4:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 80042d8:	4a08      	ldr	r2, [pc, #32]	; (80042fc <check_fs+0x54>)
 80042da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80042de:	4293      	cmp	r3, r2
 80042e0:	d00a      	beq.n	80042f8 <check_fs+0x50>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80042e2:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 80042e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 80042ea:	1a80      	subs	r0, r0, r2
 80042ec:	bf18      	it	ne
 80042ee:	2001      	movne	r0, #1
 80042f0:	bd10      	pop	{r4, pc}
 80042f2:	2003      	movs	r0, #3
 80042f4:	bd10      	pop	{r4, pc}
		return 2;
 80042f6:	2002      	movs	r0, #2
}
 80042f8:	bd10      	pop	{r4, pc}
 80042fa:	bf00      	nop
 80042fc:	00544146 	.word	0x00544146

08004300 <find_volume>:
{
 8004300:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 8004302:	2300      	movs	r3, #0
 8004304:	6003      	str	r3, [r0, #0]
{
 8004306:	b085      	sub	sp, #20
 8004308:	4607      	mov	r7, r0
	vol = get_ldnumber(path);
 800430a:	4608      	mov	r0, r1
{
 800430c:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 800430e:	f7ff fee3 	bl	80040d8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004312:	1e06      	subs	r6, r0, #0
 8004314:	f2c0 8123 	blt.w	800455e <find_volume+0x25e>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004318:	4b95      	ldr	r3, [pc, #596]	; (8004570 <find_volume+0x270>)
 800431a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800431e:	2c00      	cmp	r4, #0
 8004320:	f000 811f 	beq.w	8004562 <find_volume+0x262>
	*rfs = fs;							/* Return pointer to the file system object */
 8004324:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004326:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800432a:	b173      	cbz	r3, 800434a <find_volume+0x4a>
		stat = disk_status(fs->drv);
 800432c:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8004330:	f7ff fdd6 	bl	8003ee0 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004334:	07c7      	lsls	r7, r0, #31
 8004336:	d408      	bmi.n	800434a <find_volume+0x4a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8004338:	2d00      	cmp	r5, #0
 800433a:	f000 8114 	beq.w	8004566 <find_volume+0x266>
 800433e:	f010 0004 	ands.w	r0, r0, #4
 8004342:	d000      	beq.n	8004346 <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 8004344:	200a      	movs	r0, #10
}
 8004346:	b005      	add	sp, #20
 8004348:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800434a:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800434c:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 800434e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004352:	f884 0201 	strb.w	r0, [r4, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004356:	f7ff fdcd 	bl	8003ef4 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800435a:	07c1      	lsls	r1, r0, #31
 800435c:	f100 8105 	bmi.w	800456a <find_volume+0x26a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8004360:	b10d      	cbz	r5, 8004366 <find_volume+0x66>
 8004362:	0742      	lsls	r2, r0, #29
 8004364:	d4ee      	bmi.n	8004344 <find_volume+0x44>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8004366:	2100      	movs	r1, #0
 8004368:	4620      	mov	r0, r4
 800436a:	f7ff ff9d 	bl	80042a8 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800436e:	2801      	cmp	r0, #1
 8004370:	f040 80dc 	bne.w	800452c <find_volume+0x22c>
 8004374:	f504 71e3 	add.w	r1, r4, #454	; 0x1c6
 8004378:	2200      	movs	r2, #0
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800437a:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 800437e:	b103      	cbz	r3, 8004382 <find_volume+0x82>
 8004380:	680b      	ldr	r3, [r1, #0]
 8004382:	f84d 3022 	str.w	r3, [sp, r2, lsl #2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004386:	3201      	adds	r2, #1
 8004388:	2a04      	cmp	r2, #4
 800438a:	f101 0110 	add.w	r1, r1, #16
 800438e:	d1f4      	bne.n	800437a <find_volume+0x7a>
 8004390:	2600      	movs	r6, #0
			bsect = br[i];
 8004392:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8004396:	2d00      	cmp	r5, #0
 8004398:	f000 80bf 	beq.w	800451a <find_volume+0x21a>
 800439c:	4629      	mov	r1, r5
 800439e:	4620      	mov	r0, r4
 80043a0:	f7ff ff82 	bl	80042a8 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80043a4:	2800      	cmp	r0, #0
 80043a6:	f040 80b9 	bne.w	800451c <find_volume+0x21c>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80043aa:	7b22      	ldrb	r2, [r4, #12]
 80043ac:	7ae3      	ldrb	r3, [r4, #11]
 80043ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80043b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b6:	f040 80bc 	bne.w	8004532 <find_volume+0x232>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80043ba:	7de3      	ldrb	r3, [r4, #23]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80043bc:	7c20      	ldrb	r0, [r4, #16]
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80043be:	7da1      	ldrb	r1, [r4, #22]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80043c0:	f884 0203 	strb.w	r0, [r4, #515]	; 0x203
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80043c4:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80043c8:	f100 33ff 	add.w	r3, r0, #4294967295
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80043cc:	bf08      	it	eq
 80043ce:	6a61      	ldreq	r1, [r4, #36]	; 0x24
	fs->fsize = fasize;
 80043d0:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	f200 80ac 	bhi.w	8004532 <find_volume+0x232>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80043da:	7b66      	ldrb	r6, [r4, #13]
 80043dc:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80043e0:	2e00      	cmp	r6, #0
 80043e2:	f000 80a6 	beq.w	8004532 <find_volume+0x232>
 80043e6:	1e73      	subs	r3, r6, #1
 80043e8:	4233      	tst	r3, r6
 80043ea:	f040 80a2 	bne.w	8004532 <find_volume+0x232>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80043ee:	7ca3      	ldrb	r3, [r4, #18]
 80043f0:	7c67      	ldrb	r7, [r4, #17]
 80043f2:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80043f6:	073b      	lsls	r3, r7, #28
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80043f8:	f8a4 7208 	strh.w	r7, [r4, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80043fc:	f040 8099 	bne.w	8004532 <find_volume+0x232>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8004400:	7d22      	ldrb	r2, [r4, #20]
 8004402:	7ce3      	ldrb	r3, [r4, #19]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8004404:	f894 e00f 	ldrb.w	lr, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8004408:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800440c:	7ba2      	ldrb	r2, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800440e:	bf08      	it	eq
 8004410:	6a23      	ldreq	r3, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8004412:	ea52 220e 	orrs.w	r2, r2, lr, lsl #8
 8004416:	f000 808c 	beq.w	8004532 <find_volume+0x232>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800441a:	fb01 fe00 	mul.w	lr, r1, r0
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800441e:	eb02 1017 	add.w	r0, r2, r7, lsr #4
 8004422:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004424:	4283      	cmp	r3, r0
 8004426:	f0c0 8084 	bcc.w	8004532 <find_volume+0x232>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800442a:	1a1b      	subs	r3, r3, r0
 800442c:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8004430:	2b00      	cmp	r3, #0
 8004432:	d07e      	beq.n	8004532 <find_volume+0x232>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8004434:	f640 76f5 	movw	r6, #4085	; 0xff5
 8004438:	42b3      	cmp	r3, r6
 800443a:	d97e      	bls.n	800453a <find_volume+0x23a>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800443c:	f64f 76f5 	movw	r6, #65525	; 0xfff5
 8004440:	42b3      	cmp	r3, r6
 8004442:	bf94      	ite	ls
 8004444:	2602      	movls	r6, #2
 8004446:	2603      	movhi	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8004448:	3302      	adds	r3, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800444a:	442a      	add	r2, r5
	fs->database = bsect + sysect;						/* Data start sector */
 800444c:	4428      	add	r0, r5
	if (fmt == FS_FAT32) {
 800444e:	2e03      	cmp	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8004450:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8004454:	f8c4 521c 	str.w	r5, [r4, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004458:	f8c4 2220 	str.w	r2, [r4, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800445c:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8004460:	d16d      	bne.n	800453e <find_volume+0x23e>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8004462:	2f00      	cmp	r7, #0
 8004464:	d165      	bne.n	8004532 <find_volume+0x232>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8004466:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004468:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800446c:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800446e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004472:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 8004476:	d35c      	bcc.n	8004532 <find_volume+0x232>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8004478:	f04f 33ff 	mov.w	r3, #4294967295
 800447c:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 8004480:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8004484:	2e03      	cmp	r6, #3
	fs->fsi_flag = 0x80;
 8004486:	f04f 0380 	mov.w	r3, #128	; 0x80
 800448a:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800448e:	d12d      	bne.n	80044ec <find_volume+0x1ec>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8004490:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8004494:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8004498:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800449c:	2b01      	cmp	r3, #1
 800449e:	d125      	bne.n	80044ec <find_volume+0x1ec>
		&& move_window(fs, bsect + 1) == FR_OK)
 80044a0:	1c69      	adds	r1, r5, #1
 80044a2:	4620      	mov	r0, r4
 80044a4:	f7ff fee2 	bl	800426c <move_window>
 80044a8:	bb00      	cbnz	r0, 80044ec <find_volume+0x1ec>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80044aa:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 80044ae:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
		fs->fsi_flag = 0;
 80044b2:	f884 0205 	strb.w	r0, [r4, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80044b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80044ba:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80044be:	4293      	cmp	r3, r2
 80044c0:	d114      	bne.n	80044ec <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80044c2:	6822      	ldr	r2, [r4, #0]
 80044c4:	4b2b      	ldr	r3, [pc, #172]	; (8004574 <find_volume+0x274>)
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d110      	bne.n	80044ec <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80044ca:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 80044ce:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 80044d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80044d6:	3320      	adds	r3, #32
 80044d8:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80044da:	bf01      	itttt	eq
 80044dc:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	; 0x1e8
 80044e0:	f8c4 3210 	streq.w	r3, [r4, #528]	; 0x210
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80044e4:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	; 0x1ec
 80044e8:	f8c4 320c 	streq.w	r3, [r4, #524]	; 0x20c
	fs->id = ++Fsid;	/* File system mount ID */
 80044ec:	4a22      	ldr	r2, [pc, #136]	; (8004578 <find_volume+0x278>)
	fs->fs_type = fmt;	/* FAT sub-type */
 80044ee:	f884 6200 	strb.w	r6, [r4, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80044f2:	8813      	ldrh	r3, [r2, #0]
 80044f4:	3301      	adds	r3, #1
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	8013      	strh	r3, [r2, #0]
 80044fa:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
		if (Files[i].fs == fs) Files[i].fs = 0;
 80044fe:	4b1f      	ldr	r3, [pc, #124]	; (800457c <find_volume+0x27c>)
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	4294      	cmp	r4, r2
 8004504:	bf04      	itt	eq
 8004506:	2200      	moveq	r2, #0
 8004508:	601a      	streq	r2, [r3, #0]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	4294      	cmp	r4, r2
 800450e:	f04f 0000 	mov.w	r0, #0
 8004512:	f47f af18 	bne.w	8004346 <find_volume+0x46>
 8004516:	60d8      	str	r0, [r3, #12]
 8004518:	e715      	b.n	8004346 <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800451a:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800451c:	3601      	adds	r6, #1
 800451e:	2e04      	cmp	r6, #4
 8004520:	f47f af37 	bne.w	8004392 <find_volume+0x92>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004524:	2803      	cmp	r0, #3
 8004526:	d104      	bne.n	8004532 <find_volume+0x232>
 8004528:	2001      	movs	r0, #1
 800452a:	e70c      	b.n	8004346 <find_volume+0x46>
 800452c:	2803      	cmp	r0, #3
 800452e:	d0fb      	beq.n	8004528 <find_volume+0x228>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8004530:	b108      	cbz	r0, 8004536 <find_volume+0x236>
 8004532:	200d      	movs	r0, #13
 8004534:	e707      	b.n	8004346 <find_volume+0x46>
	bsect = 0;
 8004536:	4605      	mov	r5, r0
 8004538:	e737      	b.n	80043aa <find_volume+0xaa>
	fmt = FS_FAT12;
 800453a:	2601      	movs	r6, #1
 800453c:	e784      	b.n	8004448 <find_volume+0x148>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800453e:	2f00      	cmp	r7, #0
 8004540:	d0f7      	beq.n	8004532 <find_volume+0x232>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8004542:	4472      	add	r2, lr
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004544:	2e02      	cmp	r6, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8004546:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
 800454a:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800454e:	bf1b      	ittet	ne
 8004550:	18d2      	addne	r2, r2, r3
 8004552:	f003 0301 	andne.w	r3, r3, #1
 8004556:	4613      	moveq	r3, r2
 8004558:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 800455c:	e787      	b.n	800446e <find_volume+0x16e>
	if (vol < 0) return FR_INVALID_DRIVE;
 800455e:	200b      	movs	r0, #11
 8004560:	e6f1      	b.n	8004346 <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004562:	200c      	movs	r0, #12
 8004564:	e6ef      	b.n	8004346 <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 8004566:	4628      	mov	r0, r5
 8004568:	e6ed      	b.n	8004346 <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800456a:	2003      	movs	r0, #3
 800456c:	e6eb      	b.n	8004346 <find_volume+0x46>
 800456e:	bf00      	nop
 8004570:	2000027c 	.word	0x2000027c
 8004574:	41615252 	.word	0x41615252
 8004578:	20000298 	.word	0x20000298
 800457c:	20000280 	.word	0x20000280

08004580 <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004580:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
	clst -= 2;
 8004584:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004586:	3b02      	subs	r3, #2
 8004588:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 800458a:	bf3d      	ittte	cc
 800458c:	f890 3202 	ldrbcc.w	r3, [r0, #514]	; 0x202
 8004590:	f8d0 0228 	ldrcc.w	r0, [r0, #552]	; 0x228
 8004594:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004598:	2000      	movcs	r0, #0
}
 800459a:	4770      	bx	lr

0800459c <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800459c:	2901      	cmp	r1, #1
{
 800459e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a0:	4606      	mov	r6, r0
 80045a2:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80045a4:	d959      	bls.n	800465a <get_fat+0xbe>
 80045a6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80045aa:	4299      	cmp	r1, r3
 80045ac:	d255      	bcs.n	800465a <get_fat+0xbe>
		switch (fs->fs_type) {
 80045ae:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d027      	beq.n	8004606 <get_fat+0x6a>
 80045b6:	2b03      	cmp	r3, #3
 80045b8:	d036      	beq.n	8004628 <get_fat+0x8c>
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d14d      	bne.n	800465a <get_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;
 80045be:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80045c2:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 80045c6:	eb01 2154 	add.w	r1, r1, r4, lsr #9
 80045ca:	f7ff fe4f 	bl	800426c <move_window>
 80045ce:	b110      	cbz	r0, 80045d6 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80045d0:	f04f 30ff 	mov.w	r0, #4294967295
 80045d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80045d6:	f8d6 1220 	ldr.w	r1, [r6, #544]	; 0x220
			wc = fs->win.d8[bc++ % SS(fs)];
 80045da:	1c67      	adds	r7, r4, #1
 80045dc:	f3c4 0408 	ubfx	r4, r4, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80045e0:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80045e4:	4630      	mov	r0, r6
			wc = fs->win.d8[bc++ % SS(fs)];
 80045e6:	5d34      	ldrb	r4, [r6, r4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80045e8:	f7ff fe40 	bl	800426c <move_window>
 80045ec:	2800      	cmp	r0, #0
 80045ee:	d1ef      	bne.n	80045d0 <get_fat+0x34>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80045f0:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80045f4:	07eb      	lsls	r3, r5, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80045f6:	5df0      	ldrb	r0, [r6, r7]
 80045f8:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80045fc:	bf4c      	ite	mi
 80045fe:	0900      	lsrmi	r0, r0, #4
 8004600:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8004604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004606:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800460a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 800460e:	f7ff fe2d 	bl	800426c <move_window>
 8004612:	2800      	cmp	r0, #0
 8004614:	d1dc      	bne.n	80045d0 <get_fat+0x34>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004616:	006d      	lsls	r5, r5, #1
 8004618:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			val = LD_WORD(p);
 800461c:	1973      	adds	r3, r6, r5
 800461e:	5d70      	ldrb	r0, [r6, r5]
 8004620:	785b      	ldrb	r3, [r3, #1]
 8004622:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8004626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004628:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800462c:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 8004630:	f7ff fe1c 	bl	800426c <move_window>
 8004634:	2800      	cmp	r0, #0
 8004636:	d1cb      	bne.n	80045d0 <get_fat+0x34>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004638:	00ad      	lsls	r5, r5, #2
 800463a:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 800463e:	1973      	adds	r3, r6, r5
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8004640:	7898      	ldrb	r0, [r3, #2]
 8004642:	78da      	ldrb	r2, [r3, #3]
 8004644:	785b      	ldrb	r3, [r3, #1]
 8004646:	0400      	lsls	r0, r0, #16
 8004648:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800464c:	5d72      	ldrb	r2, [r6, r5]
 800464e:	4310      	orrs	r0, r2
 8004650:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8004654:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8004658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 800465a:	2001      	movs	r0, #1
}
 800465c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800465e <dir_sdi>:
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800465e:	f8d0 2208 	ldr.w	r2, [r0, #520]	; 0x208
{
 8004662:	b570      	push	{r4, r5, r6, lr}
 8004664:	4604      	mov	r4, r0
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004666:	2a01      	cmp	r2, #1
{
 8004668:	460d      	mov	r5, r1
	dp->index = (WORD)idx;	/* Current index */
 800466a:	f8a4 1206 	strh.w	r1, [r4, #518]	; 0x206
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800466e:	d101      	bne.n	8004674 <dir_sdi+0x16>
		return FR_INT_ERR;
 8004670:	2002      	movs	r0, #2
 8004672:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004674:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8004678:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 800467c:	428a      	cmp	r2, r1
 800467e:	d2f7      	bcs.n	8004670 <dir_sdi+0x12>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004680:	b9f2      	cbnz	r2, 80046c0 <dir_sdi+0x62>
 8004682:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 8004686:	2903      	cmp	r1, #3
 8004688:	d102      	bne.n	8004690 <dir_sdi+0x32>
		clst = dp->fs->dirbase;
 800468a:	f8d3 1224 	ldr.w	r1, [r3, #548]	; 0x224
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800468e:	b9c1      	cbnz	r1, 80046c2 <dir_sdi+0x64>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004690:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 8004694:	428d      	cmp	r5, r1
 8004696:	d2eb      	bcs.n	8004670 <dir_sdi+0x12>
		sect = dp->fs->dirbase;
 8004698:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
	dp->clust = clst;	/* Current cluster# */
 800469c:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 80046a0:	2800      	cmp	r0, #0
 80046a2:	d0e5      	beq.n	8004670 <dir_sdi+0x12>
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80046a4:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80046a8:	eb00 1015 	add.w	r0, r0, r5, lsr #4
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80046ac:	f005 050f 	and.w	r5, r5, #15
 80046b0:	eb03 1545 	add.w	r5, r3, r5, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80046b4:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80046b8:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
	return FR_OK;
 80046bc:	2000      	movs	r0, #0
 80046be:	bd70      	pop	{r4, r5, r6, pc}
 80046c0:	4611      	mov	r1, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80046c2:	f893 6202 	ldrb.w	r6, [r3, #514]	; 0x202
		while (idx >= ic) {	/* Follow cluster chain */
 80046c6:	460a      	mov	r2, r1
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80046c8:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 80046ca:	42b5      	cmp	r5, r6
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80046cc:	4611      	mov	r1, r2
 80046ce:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
		while (idx >= ic) {	/* Follow cluster chain */
 80046d2:	d202      	bcs.n	80046da <dir_sdi+0x7c>
		sect = clust2sect(dp->fs, clst);
 80046d4:	f7ff ff54 	bl	8004580 <clust2sect>
 80046d8:	e7e0      	b.n	800469c <dir_sdi+0x3e>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80046da:	f7ff ff5f 	bl	800459c <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80046de:	1c43      	adds	r3, r0, #1
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80046e0:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80046e2:	d009      	beq.n	80046f8 <dir_sdi+0x9a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80046e4:	2801      	cmp	r0, #1
 80046e6:	d9c3      	bls.n	8004670 <dir_sdi+0x12>
 80046e8:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 80046ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80046f0:	4298      	cmp	r0, r3
 80046f2:	d2bd      	bcs.n	8004670 <dir_sdi+0x12>
			idx -= ic;
 80046f4:	1bad      	subs	r5, r5, r6
 80046f6:	e7e8      	b.n	80046ca <dir_sdi+0x6c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80046f8:	2001      	movs	r0, #1
}
 80046fa:	bd70      	pop	{r4, r5, r6, pc}

080046fc <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80046fc:	2901      	cmp	r1, #1
{
 80046fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004702:	4605      	mov	r5, r0
 8004704:	460c      	mov	r4, r1
 8004706:	4616      	mov	r6, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004708:	d96f      	bls.n	80047ea <put_fat+0xee>
 800470a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800470e:	4299      	cmp	r1, r3
 8004710:	d26b      	bcs.n	80047ea <put_fat+0xee>
		switch (fs->fs_type) {
 8004712:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 8004716:	2b02      	cmp	r3, #2
 8004718:	d03d      	beq.n	8004796 <put_fat+0x9a>
 800471a:	2b03      	cmp	r3, #3
 800471c:	d04b      	beq.n	80047b6 <put_fat+0xba>
 800471e:	2b01      	cmp	r3, #1
 8004720:	d163      	bne.n	80047ea <put_fat+0xee>
			bc = (UINT)clst; bc += bc / 2;
 8004722:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004726:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800472a:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800472e:	f7ff fd9d 	bl	800426c <move_window>
			if (res != FR_OK) break;
 8004732:	2800      	cmp	r0, #0
 8004734:	d15a      	bne.n	80047ec <put_fat+0xf0>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004736:	f107 0801 	add.w	r8, r7, #1
 800473a:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800473e:	f014 0401 	ands.w	r4, r4, #1
 8004742:	bf1f      	itttt	ne
 8004744:	5deb      	ldrbne	r3, [r5, r7]
 8004746:	f003 020f 	andne.w	r2, r3, #15
 800474a:	0133      	lslne	r3, r6, #4
 800474c:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8004750:	bf14      	ite	ne
 8004752:	4313      	orrne	r3, r2
 8004754:	b2f3      	uxtbeq	r3, r6
 8004756:	55eb      	strb	r3, [r5, r7]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004758:	f8d5 1220 	ldr.w	r1, [r5, #544]	; 0x220
			fs->wflag = 1;
 800475c:	2301      	movs	r3, #1
 800475e:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004762:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8004766:	4628      	mov	r0, r5
 8004768:	f7ff fd80 	bl	800426c <move_window>
			if (res != FR_OK) break;
 800476c:	bbf0      	cbnz	r0, 80047ec <put_fat+0xf0>
			p = &fs->win.d8[bc % SS(fs)];
 800476e:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004772:	b144      	cbz	r4, 8004786 <put_fat+0x8a>
 8004774:	f3c6 1207 	ubfx	r2, r6, #4, #8
 8004778:	f805 2008 	strb.w	r2, [r5, r8]
			fs->wflag = 1;
 800477c:	2301      	movs	r3, #1
 800477e:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
 8004782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004786:	f815 2008 	ldrb.w	r2, [r5, r8]
 800478a:	f3c6 2603 	ubfx	r6, r6, #8, #4
 800478e:	f022 020f 	bic.w	r2, r2, #15
 8004792:	4332      	orrs	r2, r6
 8004794:	e7f0      	b.n	8004778 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004796:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800479a:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800479e:	f7ff fd65 	bl	800426c <move_window>
			if (res != FR_OK) break;
 80047a2:	bb18      	cbnz	r0, 80047ec <put_fat+0xf0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80047a4:	0064      	lsls	r4, r4, #1
 80047a6:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 80047aa:	f3c6 2207 	ubfx	r2, r6, #8, #8
 80047ae:	552e      	strb	r6, [r5, r4]
 80047b0:	442c      	add	r4, r5
 80047b2:	7062      	strb	r2, [r4, #1]
 80047b4:	e7e2      	b.n	800477c <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80047b6:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 80047ba:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80047be:	f7ff fd55 	bl	800426c <move_window>
			if (res != FR_OK) break;
 80047c2:	b998      	cbnz	r0, 80047ec <put_fat+0xf0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80047c4:	00a4      	lsls	r4, r4, #2
 80047c6:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80047ca:	1929      	adds	r1, r5, r4
			val |= LD_DWORD(p) & 0xF0000000;
 80047cc:	78cb      	ldrb	r3, [r1, #3]
 80047ce:	061b      	lsls	r3, r3, #24
 80047d0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80047d4:	ea43 0206 	orr.w	r2, r3, r6
			ST_DWORD(p, val);
 80047d8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80047dc:	552a      	strb	r2, [r5, r4]
 80047de:	704b      	strb	r3, [r1, #1]
 80047e0:	0c13      	lsrs	r3, r2, #16
 80047e2:	0e12      	lsrs	r2, r2, #24
 80047e4:	708b      	strb	r3, [r1, #2]
 80047e6:	70ca      	strb	r2, [r1, #3]
 80047e8:	e7c8      	b.n	800477c <put_fat+0x80>
			res = FR_INT_ERR;
 80047ea:	2002      	movs	r0, #2
}
 80047ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080047f0 <create_chain>:
{
 80047f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f2:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 80047f4:	460f      	mov	r7, r1
 80047f6:	b989      	cbnz	r1, 800481c <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 80047f8:	f8d0 620c 	ldr.w	r6, [r0, #524]	; 0x20c
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80047fc:	b1fe      	cbz	r6, 800483e <create_chain+0x4e>
 80047fe:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004802:	429e      	cmp	r6, r3
 8004804:	bf28      	it	cs
 8004806:	2601      	movcs	r6, #1
 8004808:	4634      	mov	r4, r6
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800480a:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
		ncl++;							/* Next cluster */
 800480e:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8004810:	429c      	cmp	r4, r3
 8004812:	d317      	bcc.n	8004844 <create_chain+0x54>
			if (ncl > scl) return 0;	/* No free cluster */
 8004814:	2e01      	cmp	r6, #1
 8004816:	d814      	bhi.n	8004842 <create_chain+0x52>
 8004818:	2400      	movs	r4, #0
 800481a:	e008      	b.n	800482e <create_chain+0x3e>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800481c:	f7ff febe 	bl	800459c <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 8004820:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004822:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 8004824:	d93b      	bls.n	800489e <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004826:	3001      	adds	r0, #1
 8004828:	d103      	bne.n	8004832 <create_chain+0x42>
			ncl = 2;
 800482a:	f04f 34ff 	mov.w	r4, #4294967295
}
 800482e:	4620      	mov	r0, r4
 8004830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004832:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8004836:	429c      	cmp	r4, r3
 8004838:	d3f9      	bcc.n	800482e <create_chain+0x3e>
 800483a:	463e      	mov	r6, r7
 800483c:	e7e4      	b.n	8004808 <create_chain+0x18>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800483e:	2601      	movs	r6, #1
 8004840:	e7e2      	b.n	8004808 <create_chain+0x18>
			ncl = 2;
 8004842:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004844:	4621      	mov	r1, r4
 8004846:	4628      	mov	r0, r5
 8004848:	f7ff fea8 	bl	800459c <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 800484c:	b130      	cbz	r0, 800485c <create_chain+0x6c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800484e:	1c41      	adds	r1, r0, #1
 8004850:	d0eb      	beq.n	800482a <create_chain+0x3a>
 8004852:	2801      	cmp	r0, #1
 8004854:	d023      	beq.n	800489e <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
 8004856:	42b4      	cmp	r4, r6
 8004858:	d1d7      	bne.n	800480a <create_chain+0x1a>
 800485a:	e7dd      	b.n	8004818 <create_chain+0x28>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800485c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004860:	4621      	mov	r1, r4
 8004862:	4628      	mov	r0, r5
 8004864:	f7ff ff4a 	bl	80046fc <put_fat>
	if (res == FR_OK && clst != 0) {
 8004868:	b9b8      	cbnz	r0, 800489a <create_chain+0xaa>
 800486a:	b97f      	cbnz	r7, 800488c <create_chain+0x9c>
		if (fs->free_clust != 0xFFFFFFFF) {
 800486c:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
		fs->last_clust = ncl;			/* Update FSINFO */
 8004870:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	d0da      	beq.n	800482e <create_chain+0x3e>
			fs->free_clust--;
 8004878:	3b01      	subs	r3, #1
 800487a:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			fs->fsi_flag |= 1;
 800487e:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 8004882:	f043 0301 	orr.w	r3, r3, #1
 8004886:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
 800488a:	e7d0      	b.n	800482e <create_chain+0x3e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800488c:	4622      	mov	r2, r4
 800488e:	4639      	mov	r1, r7
 8004890:	4628      	mov	r0, r5
 8004892:	f7ff ff33 	bl	80046fc <put_fat>
	if (res == FR_OK) {
 8004896:	2800      	cmp	r0, #0
 8004898:	d0e8      	beq.n	800486c <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800489a:	2801      	cmp	r0, #1
 800489c:	d0c5      	beq.n	800482a <create_chain+0x3a>
 800489e:	2401      	movs	r4, #1
 80048a0:	e7c5      	b.n	800482e <create_chain+0x3e>

080048a2 <dir_next>:
{
 80048a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	i = dp->index + 1;
 80048a6:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
 80048aa:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80048ac:	b2b3      	uxth	r3, r6
{
 80048ae:	4604      	mov	r4, r0
 80048b0:	4689      	mov	r9, r1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80048b2:	b913      	cbnz	r3, 80048ba <dir_next+0x18>
		return FR_NO_FILE;
 80048b4:	2004      	movs	r0, #4
 80048b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80048ba:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f8      	beq.n	80048b4 <dir_next+0x12>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80048c2:	f016 080f 	ands.w	r8, r6, #15
 80048c6:	d10b      	bne.n	80048e0 <dir_next+0x3e>
		if (!dp->clust) {		/* Static table */
 80048c8:	f8d0 120c 	ldr.w	r1, [r0, #524]	; 0x20c
		dp->sect++;					/* Next sector */
 80048cc:	3301      	adds	r3, #1
 80048ce:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
 80048d2:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
		if (!dp->clust) {		/* Static table */
 80048d6:	b971      	cbnz	r1, 80048f6 <dir_next+0x54>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80048d8:	f8b0 3208 	ldrh.w	r3, [r0, #520]	; 0x208
 80048dc:	429e      	cmp	r6, r3
 80048de:	d2e9      	bcs.n	80048b4 <dir_next+0x12>
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80048e0:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->index = (WORD)i;	/* Current index */
 80048e4:	f8a4 6206 	strh.w	r6, [r4, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80048e8:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80048ec:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	return FR_OK;
 80048f0:	2000      	movs	r0, #0
 80048f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80048f6:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 80048fa:	3f01      	subs	r7, #1
 80048fc:	ea17 1716 	ands.w	r7, r7, r6, lsr #4
 8004900:	d1ee      	bne.n	80048e0 <dir_next+0x3e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8004902:	f7ff fe4b 	bl	800459c <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 8004906:	2801      	cmp	r0, #1
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8004908:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 800490a:	d802      	bhi.n	8004912 <dir_next+0x70>
 800490c:	2002      	movs	r0, #2
 800490e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004912:	1c42      	adds	r2, r0, #1
 8004914:	d102      	bne.n	800491c <dir_next+0x7a>
 8004916:	2001      	movs	r0, #1
 8004918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800491c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8004920:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004924:	429d      	cmp	r5, r3
 8004926:	d32f      	bcc.n	8004988 <dir_next+0xe6>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8004928:	f1b9 0f00 	cmp.w	r9, #0
 800492c:	d0c2      	beq.n	80048b4 <dir_next+0x12>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800492e:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 8004932:	f7ff ff5d 	bl	80047f0 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004936:	4605      	mov	r5, r0
 8004938:	2800      	cmp	r0, #0
 800493a:	d03e      	beq.n	80049ba <dir_next+0x118>
					if (clst == 1) return FR_INT_ERR;
 800493c:	2801      	cmp	r0, #1
 800493e:	d0e5      	beq.n	800490c <dir_next+0x6a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004940:	1c43      	adds	r3, r0, #1
 8004942:	d0e8      	beq.n	8004916 <dir_next+0x74>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8004944:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8004948:	f7ff fc2c 	bl	80041a4 <sync_window>
 800494c:	4601      	mov	r1, r0
 800494e:	2800      	cmp	r0, #0
 8004950:	d1e1      	bne.n	8004916 <dir_next+0x74>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8004952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004956:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800495a:	f7ff fb0f 	bl	8003f7c <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800495e:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 8004962:	4629      	mov	r1, r5
 8004964:	4610      	mov	r0, r2
 8004966:	f7ff fe0b 	bl	8004580 <clust2sect>
						dp->fs->wflag = 1;
 800496a:	f04f 0901 	mov.w	r9, #1
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800496e:	f8c2 022c 	str.w	r0, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004972:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8004976:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 800497a:	429f      	cmp	r7, r3
 800497c:	d30e      	bcc.n	800499c <dir_next+0xfa>
					dp->fs->winsect -= c;						/* Rewind window offset */
 800497e:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 8004982:	1bdf      	subs	r7, r3, r7
 8004984:	f8c0 722c 	str.w	r7, [r0, #556]	; 0x22c
				dp->clust = clst;				/* Initialize data for new cluster */
 8004988:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800498c:	4629      	mov	r1, r5
 800498e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8004992:	f7ff fdf5 	bl	8004580 <clust2sect>
 8004996:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
 800499a:	e7a1      	b.n	80048e0 <dir_next+0x3e>
						dp->fs->wflag = 1;
 800499c:	f880 9204 	strb.w	r9, [r0, #516]	; 0x204
 80049a0:	f7ff fbd7 	bl	8004152 <sync_window.part.2>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80049a4:	2800      	cmp	r0, #0
 80049a6:	d1b6      	bne.n	8004916 <dir_next+0x74>
						dp->fs->winsect++;
 80049a8:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 80049ac:	f8d2 322c 	ldr.w	r3, [r2, #556]	; 0x22c
 80049b0:	3301      	adds	r3, #1
 80049b2:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80049b6:	3701      	adds	r7, #1
 80049b8:	e7db      	b.n	8004972 <dir_next+0xd0>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80049ba:	2007      	movs	r0, #7
}
 80049bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080049c0 <follow_path>:
{
 80049c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80049c4:	780b      	ldrb	r3, [r1, #0]
 80049c6:	2b2f      	cmp	r3, #47	; 0x2f
{
 80049c8:	4604      	mov	r4, r0
 80049ca:	460d      	mov	r5, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80049cc:	d001      	beq.n	80049d2 <follow_path+0x12>
 80049ce:	2b5c      	cmp	r3, #92	; 0x5c
 80049d0:	d100      	bne.n	80049d4 <follow_path+0x14>
		path++;
 80049d2:	3501      	adds	r5, #1
	dp->sclust = 0;							/* Always start from the root directory */
 80049d4:	2600      	movs	r6, #0
 80049d6:	f8c4 6208 	str.w	r6, [r4, #520]	; 0x208
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80049da:	782b      	ldrb	r3, [r5, #0]
 80049dc:	2b1f      	cmp	r3, #31
 80049de:	d936      	bls.n	8004a4e <follow_path+0x8e>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80049e0:	4e5f      	ldr	r6, [pc, #380]	; (8004b60 <follow_path+0x1a0>)
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80049e2:	782b      	ldrb	r3, [r5, #0]
 80049e4:	2b2f      	cmp	r3, #47	; 0x2f
 80049e6:	46a8      	mov	r8, r5
 80049e8:	f105 0501 	add.w	r5, r5, #1
 80049ec:	d0f9      	beq.n	80049e2 <follow_path+0x22>
 80049ee:	2b5c      	cmp	r3, #92	; 0x5c
 80049f0:	d0f7      	beq.n	80049e2 <follow_path+0x22>
	sfn = dp->fn;
 80049f2:	f8d4 7218 	ldr.w	r7, [r4, #536]	; 0x218
	mem_set(sfn, ' ', 11);
 80049f6:	220b      	movs	r2, #11
 80049f8:	2120      	movs	r1, #32
 80049fa:	4638      	mov	r0, r7
 80049fc:	f7ff fabe 	bl	8003f7c <mem_set>
	si = i = b = 0; ni = 8;
 8004a00:	f04f 0e00 	mov.w	lr, #0
 8004a04:	f108 39ff 	add.w	r9, r8, #4294967295
 8004a08:	46f4      	mov	ip, lr
 8004a0a:	2108      	movs	r1, #8
 8004a0c:	4672      	mov	r2, lr
		c = (BYTE)p[si++];
 8004a0e:	f819 3f01 	ldrb.w	r3, [r9, #1]!
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8004a12:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 8004a14:	f10c 0c01 	add.w	ip, ip, #1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8004a18:	d928      	bls.n	8004a6c <follow_path+0xac>
 8004a1a:	2b2f      	cmp	r3, #47	; 0x2f
 8004a1c:	d026      	beq.n	8004a6c <follow_path+0xac>
 8004a1e:	2b5c      	cmp	r3, #92	; 0x5c
 8004a20:	d024      	beq.n	8004a6c <follow_path+0xac>
		if (c == '.' || i >= ni) {
 8004a22:	2b2e      	cmp	r3, #46	; 0x2e
 8004a24:	f000 8085 	beq.w	8004b32 <follow_path+0x172>
 8004a28:	4571      	cmp	r1, lr
 8004a2a:	d90d      	bls.n	8004a48 <follow_path+0x88>
		if (c >= 0x80) {				/* Extended character? */
 8004a2c:	0618      	lsls	r0, r3, #24
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004a2e:	bf48      	it	mi
 8004a30:	3b80      	submi	r3, #128	; 0x80
 8004a32:	4d4c      	ldr	r5, [pc, #304]	; (8004b64 <follow_path+0x1a4>)
 8004a34:	bf44      	itt	mi
 8004a36:	5cf3      	ldrbmi	r3, [r6, r3]
			b |= 3;						/* Eliminate NT flag */
 8004a38:	f042 0203 	orrmi.w	r2, r2, #3
	while (*str && *str != chr) str++;
 8004a3c:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8004a40:	2800      	cmp	r0, #0
 8004a42:	d07d      	beq.n	8004b40 <follow_path+0x180>
 8004a44:	4283      	cmp	r3, r0
 8004a46:	d1f9      	bne.n	8004a3c <follow_path+0x7c>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8004a48:	2006      	movs	r0, #6
	return res;
 8004a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		res = dir_sdi(dp, 0);
 8004a4e:	4631      	mov	r1, r6
 8004a50:	4620      	mov	r0, r4
 8004a52:	f7ff fe04 	bl	800465e <dir_sdi>
		dp->dir = 0;
 8004a56:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
 8004a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				b |= 2;
 8004a5e:	f042 0202 	orr.w	r2, r2, #2
			sfn[i++] = c;
 8004a62:	f807 300e 	strb.w	r3, [r7, lr]
 8004a66:	f10e 0e01 	add.w	lr, lr, #1
 8004a6a:	e7d0      	b.n	8004a0e <follow_path+0x4e>
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8004a6c:	2b21      	cmp	r3, #33	; 0x21
	*path = &p[si];						/* Return pointer to the next segment */
 8004a6e:	eb08 050c 	add.w	r5, r8, ip
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8004a72:	bf34      	ite	cc
 8004a74:	2304      	movcc	r3, #4
 8004a76:	2300      	movcs	r3, #0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8004a78:	f1be 0f00 	cmp.w	lr, #0
 8004a7c:	d0e4      	beq.n	8004a48 <follow_path+0x88>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8004a7e:	7838      	ldrb	r0, [r7, #0]
 8004a80:	28e5      	cmp	r0, #229	; 0xe5
 8004a82:	bf04      	itt	eq
 8004a84:	2005      	moveq	r0, #5
 8004a86:	7038      	strbeq	r0, [r7, #0]
	if (ni == 8) b <<= 2;
 8004a88:	2908      	cmp	r1, #8
 8004a8a:	bf04      	itt	eq
 8004a8c:	0092      	lsleq	r2, r2, #2
 8004a8e:	b2d2      	uxtbeq	r2, r2
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8004a90:	f002 0103 	and.w	r1, r2, #3
 8004a94:	2901      	cmp	r1, #1
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8004a96:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8004a9a:	bf08      	it	eq
 8004a9c:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8004aa0:	2a04      	cmp	r2, #4
 8004aa2:	bf08      	it	eq
 8004aa4:	f043 0308 	orreq.w	r3, r3, #8
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8004aa8:	72fb      	strb	r3, [r7, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004aaa:	2100      	movs	r1, #0
 8004aac:	4620      	mov	r0, r4
 8004aae:	f7ff fdd6 	bl	800465e <dir_sdi>
	if (res != FR_OK) return res;
 8004ab2:	b9f8      	cbnz	r0, 8004af4 <follow_path+0x134>
		res = move_window(dp->fs, dp->sect);
 8004ab4:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8004ab8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8004abc:	f7ff fbd6 	bl	800426c <move_window>
		if (res != FR_OK) break;
 8004ac0:	b9c0      	cbnz	r0, 8004af4 <follow_path+0x134>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8004ac2:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004ac6:	7813      	ldrb	r3, [r2, #0]
 8004ac8:	b19b      	cbz	r3, 8004af2 <follow_path+0x132>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8004aca:	7ad3      	ldrb	r3, [r2, #11]
 8004acc:	0719      	lsls	r1, r3, #28
 8004ace:	d40b      	bmi.n	8004ae8 <follow_path+0x128>
 8004ad0:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8004ad4:	f103 0e0b 	add.w	lr, r3, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004ad8:	4573      	cmp	r3, lr
 8004ada:	d00b      	beq.n	8004af4 <follow_path+0x134>
 8004adc:	f812 7b01 	ldrb.w	r7, [r2], #1
 8004ae0:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004ae4:	428f      	cmp	r7, r1
 8004ae6:	d0f7      	beq.n	8004ad8 <follow_path+0x118>
		res = dir_next(dp, 0);		/* Next entry */
 8004ae8:	2100      	movs	r1, #0
 8004aea:	4620      	mov	r0, r4
 8004aec:	f7ff fed9 	bl	80048a2 <dir_next>
 8004af0:	e7df      	b.n	8004ab2 <follow_path+0xf2>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004af2:	2004      	movs	r0, #4
			ns = dp->fn[NSFLAG];
 8004af4:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8004af8:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004afa:	b138      	cbz	r0, 8004b0c <follow_path+0x14c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004afc:	2804      	cmp	r0, #4
 8004afe:	d12c      	bne.n	8004b5a <follow_path+0x19a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004b00:	f013 0f04 	tst.w	r3, #4
 8004b04:	bf08      	it	eq
 8004b06:	2005      	moveq	r0, #5
 8004b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004b0c:	075a      	lsls	r2, r3, #29
 8004b0e:	d424      	bmi.n	8004b5a <follow_path+0x19a>
			dir = dp->dir;						/* Follow the sub-directory */
 8004b10:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8004b14:	7acb      	ldrb	r3, [r1, #11]
 8004b16:	06db      	lsls	r3, r3, #27
 8004b18:	d508      	bpl.n	8004b2c <follow_path+0x16c>
			dp->sclust = ld_clust(dp->fs, dir);
 8004b1a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8004b1e:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8004b22:	f7ff fb08 	bl	8004136 <ld_clust.isra.0>
 8004b26:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004b2a:	e75a      	b.n	80049e2 <follow_path+0x22>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004b2c:	2005      	movs	r0, #5
 8004b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8004b32:	2908      	cmp	r1, #8
 8004b34:	d188      	bne.n	8004a48 <follow_path+0x88>
			b <<= 2; continue;
 8004b36:	0092      	lsls	r2, r2, #2
			i = 8; ni = 11;
 8004b38:	468e      	mov	lr, r1
			b <<= 2; continue;
 8004b3a:	b2d2      	uxtb	r2, r2
			i = 8; ni = 11;
 8004b3c:	210b      	movs	r1, #11
 8004b3e:	e766      	b.n	8004a0e <follow_path+0x4e>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8004b40:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 8004b44:	2819      	cmp	r0, #25
 8004b46:	d98a      	bls.n	8004a5e <follow_path+0x9e>
				if (IsLower(c)) {		/* ASCII small capital? */
 8004b48:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
 8004b4c:	2819      	cmp	r0, #25
					b |= 1; c -= 0x20;
 8004b4e:	bf9e      	ittt	ls
 8004b50:	3b20      	subls	r3, #32
 8004b52:	f042 0201 	orrls.w	r2, r2, #1
 8004b56:	b2db      	uxtbls	r3, r3
 8004b58:	e783      	b.n	8004a62 <follow_path+0xa2>
}
 8004b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b5e:	bf00      	nop
 8004b60:	08007e44 	.word	0x08007e44
 8004b64:	08007ec3 	.word	0x08007ec3

08004b68 <dir_register>:
{
 8004b68:	b538      	push	{r3, r4, r5, lr}
	res = dir_sdi(dp, 0);
 8004b6a:	2100      	movs	r1, #0
{
 8004b6c:	4605      	mov	r5, r0
	res = dir_sdi(dp, 0);
 8004b6e:	f7ff fd76 	bl	800465e <dir_sdi>
	if (res == FR_OK) {
 8004b72:	4604      	mov	r4, r0
 8004b74:	bb78      	cbnz	r0, 8004bd6 <dir_register+0x6e>
			res = move_window(dp->fs, dp->sect);
 8004b76:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 8004b7a:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 8004b7e:	f7ff fb75 	bl	800426c <move_window>
			if (res != FR_OK) break;
 8004b82:	4604      	mov	r4, r0
 8004b84:	bb38      	cbnz	r0, 8004bd6 <dir_register+0x6e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004b86:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2be5      	cmp	r3, #229	; 0xe5
 8004b8e:	d11b      	bne.n	8004bc8 <dir_register+0x60>
		res = move_window(dp->fs, dp->sect);
 8004b90:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 8004b94:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 8004b98:	f7ff fb68 	bl	800426c <move_window>
		if (res == FR_OK) {
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	b988      	cbnz	r0, 8004bc4 <dir_register+0x5c>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8004ba0:	4601      	mov	r1, r0
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 8004ba8:	f7ff f9e8 	bl	8003f7c <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8004bac:	220b      	movs	r2, #11
 8004bae:	f8d5 1218 	ldr.w	r1, [r5, #536]	; 0x218
 8004bb2:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 8004bb6:	f7ff f9d7 	bl	8003f68 <mem_cpy>
			dp->fs->wflag = 1;
 8004bba:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	bd38      	pop	{r3, r4, r5, pc}
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0e1      	beq.n	8004b90 <dir_register+0x28>
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8004bcc:	2101      	movs	r1, #1
 8004bce:	4628      	mov	r0, r5
 8004bd0:	f7ff fe67 	bl	80048a2 <dir_next>
 8004bd4:	e7cd      	b.n	8004b72 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004bd6:	2c04      	cmp	r4, #4
 8004bd8:	bf08      	it	eq
 8004bda:	2407      	moveq	r4, #7
 8004bdc:	e7f2      	b.n	8004bc4 <dir_register+0x5c>

08004bde <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004bde:	2901      	cmp	r1, #1
{
 8004be0:	b570      	push	{r4, r5, r6, lr}
 8004be2:	4604      	mov	r4, r0
 8004be4:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004be6:	d801      	bhi.n	8004bec <remove_chain+0xe>
		res = FR_INT_ERR;
 8004be8:	2002      	movs	r0, #2
 8004bea:	bd70      	pop	{r4, r5, r6, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004bec:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004bf0:	4299      	cmp	r1, r3
 8004bf2:	d2f9      	bcs.n	8004be8 <remove_chain+0xa>
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004bf4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004bf8:	429d      	cmp	r5, r3
 8004bfa:	d205      	bcs.n	8004c08 <remove_chain+0x2a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004bfc:	4629      	mov	r1, r5
 8004bfe:	4620      	mov	r0, r4
 8004c00:	f7ff fccc 	bl	800459c <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 8004c04:	4606      	mov	r6, r0
 8004c06:	b908      	cbnz	r0, 8004c0c <remove_chain+0x2e>
		res = FR_INT_ERR;
 8004c08:	2000      	movs	r0, #0
 8004c0a:	bd70      	pop	{r4, r5, r6, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004c0c:	2801      	cmp	r0, #1
 8004c0e:	d0eb      	beq.n	8004be8 <remove_chain+0xa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004c10:	1c41      	adds	r1, r0, #1
 8004c12:	d014      	beq.n	8004c3e <remove_chain+0x60>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004c14:	2200      	movs	r2, #0
 8004c16:	4629      	mov	r1, r5
 8004c18:	4620      	mov	r0, r4
 8004c1a:	f7ff fd6f 	bl	80046fc <put_fat>
			if (res != FR_OK) break;
 8004c1e:	b978      	cbnz	r0, 8004c40 <remove_chain+0x62>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004c20:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	d008      	beq.n	8004c3a <remove_chain+0x5c>
				fs->free_clust++;
 8004c28:	3301      	adds	r3, #1
 8004c2a:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
				fs->fsi_flag |= 1;
 8004c2e:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 8004c32:	f043 0301 	orr.w	r3, r3, #1
 8004c36:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
{
 8004c3a:	4635      	mov	r5, r6
 8004c3c:	e7da      	b.n	8004bf4 <remove_chain+0x16>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004c3e:	2001      	movs	r0, #1
}
 8004c40:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c44 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004c44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004c46:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004c48:	a804      	add	r0, sp, #16
{
 8004c4a:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8004c4c:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8004c50:	4616      	mov	r6, r2


	vol = get_ldnumber(&rp);
 8004c52:	f7ff fa41 	bl	80040d8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004c56:	1e05      	subs	r5, r0, #0
 8004c58:	db21      	blt.n	8004c9e <f_mount+0x5a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004c5a:	4913      	ldr	r1, [pc, #76]	; (8004ca8 <f_mount+0x64>)
 8004c5c:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 8004c60:	b164      	cbz	r4, 8004c7c <f_mount+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004c62:	4b12      	ldr	r3, [pc, #72]	; (8004cac <f_mount+0x68>)
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	4294      	cmp	r4, r2
 8004c68:	bf04      	itt	eq
 8004c6a:	2200      	moveq	r2, #0
 8004c6c:	601a      	streq	r2, [r3, #0]
 8004c6e:	68da      	ldr	r2, [r3, #12]
 8004c70:	2000      	movs	r0, #0
 8004c72:	4294      	cmp	r4, r2
 8004c74:	bf08      	it	eq
 8004c76:	60d8      	streq	r0, [r3, #12]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004c78:	f884 0200 	strb.w	r0, [r4, #512]	; 0x200
	}

	if (fs) {
 8004c7c:	9801      	ldr	r0, [sp, #4]
 8004c7e:	b110      	cbz	r0, 8004c86 <f_mount+0x42>
		fs->fs_type = 0;				/* Clear new fs object */
 8004c80:	2300      	movs	r3, #0
 8004c82:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004c86:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004c8a:	b130      	cbz	r0, 8004c9a <f_mount+0x56>
 8004c8c:	2e01      	cmp	r6, #1
 8004c8e:	d108      	bne.n	8004ca2 <f_mount+0x5e>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8004c90:	2200      	movs	r2, #0
 8004c92:	4669      	mov	r1, sp
 8004c94:	a801      	add	r0, sp, #4
 8004c96:	f7ff fb33 	bl	8004300 <find_volume>
	LEAVE_FF(fs, res);
}
 8004c9a:	b004      	add	sp, #16
 8004c9c:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8004c9e:	200b      	movs	r0, #11
 8004ca0:	e7fb      	b.n	8004c9a <f_mount+0x56>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	e7f9      	b.n	8004c9a <f_mount+0x56>
 8004ca6:	bf00      	nop
 8004ca8:	2000027c 	.word	0x2000027c
 8004cac:	20000280 	.word	0x20000280

08004cb0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cb4:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8004cb8:	4690      	mov	r8, r2
 8004cba:	9101      	str	r1, [sp, #4]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8004cbc:	4605      	mov	r5, r0
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	f000 80a6 	beq.w	8004e10 <f_open+0x160>
	fp->fs = 0;			/* Clear file object */
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8004cca:	f002 021e 	and.w	r2, r2, #30
 8004cce:	a901      	add	r1, sp, #4
 8004cd0:	a886      	add	r0, sp, #536	; 0x218
 8004cd2:	f7ff fb15 	bl	8004300 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8004cd6:	4606      	mov	r6, r0
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	f040 8094 	bne.w	8004e06 <f_open+0x156>
		INIT_BUF(dj);
 8004cde:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 8004ce0:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 8004ce2:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 8004ce4:	a806      	add	r0, sp, #24
 8004ce6:	f7ff fe6b 	bl	80049c0 <follow_path>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8004cea:	f008 071f 	and.w	r7, r8, #31
		dir = dj.dir;
 8004cee:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004cf0:	b948      	cbnz	r0, 8004d06 <f_open+0x56>
			if (!dir)	/* Default directory itself */
 8004cf2:	2c00      	cmp	r4, #0
 8004cf4:	d05b      	beq.n	8004dae <f_open+0xfe>
				res = FR_INVALID_NAME;
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004cf6:	f017 0f1e 	tst.w	r7, #30
 8004cfa:	bf14      	ite	ne
 8004cfc:	2101      	movne	r1, #1
 8004cfe:	2100      	moveq	r1, #0
 8004d00:	a806      	add	r0, sp, #24
 8004d02:	f7ff f943 	bl	8003f8c <chk_lock>
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004d06:	f018 0f1c 	tst.w	r8, #28
 8004d0a:	d05b      	beq.n	8004dc4 <f_open+0x114>
			if (res != FR_OK) {					/* No file, create new */
 8004d0c:	2800      	cmp	r0, #0
 8004d0e:	d050      	beq.n	8004db2 <f_open+0x102>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8004d10:	2804      	cmp	r0, #4
 8004d12:	d14a      	bne.n	8004daa <f_open+0xfa>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004d14:	4b51      	ldr	r3, [pc, #324]	; (8004e5c <f_open+0x1ac>)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	b11a      	cbz	r2, 8004d22 <f_open+0x72>
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f040 809b 	bne.w	8004e58 <f_open+0x1a8>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004d22:	a806      	add	r0, sp, #24
 8004d24:	f7ff ff20 	bl	8004b68 <dir_register>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	d13e      	bne.n	8004daa <f_open+0xfa>
				dir = dj.dir;					/* New entry */
 8004d2c:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004d2e:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004d32:	073b      	lsls	r3, r7, #28
 8004d34:	d550      	bpl.n	8004dd8 <f_open+0x128>
				dw = GET_FATTIME();				/* Created time */
 8004d36:	f000 ff95 	bl	8005c64 <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
 8004d3a:	f3c0 2307 	ubfx	r3, r0, #8, #8
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8004d3e:	f04f 0800 	mov.w	r8, #0
				ST_DWORD(dir + DIR_CrtTime, dw);
 8004d42:	73a0      	strb	r0, [r4, #14]
 8004d44:	73e3      	strb	r3, [r4, #15]
 8004d46:	0c03      	lsrs	r3, r0, #16
 8004d48:	0e00      	lsrs	r0, r0, #24
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8004d4a:	f884 800b 	strb.w	r8, [r4, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8004d4e:	f884 801c 	strb.w	r8, [r4, #28]
 8004d52:	f884 801d 	strb.w	r8, [r4, #29]
 8004d56:	f884 801e 	strb.w	r8, [r4, #30]
 8004d5a:	f884 801f 	strb.w	r8, [r4, #31]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8004d5e:	7423      	strb	r3, [r4, #16]
 8004d60:	7460      	strb	r0, [r4, #17]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8004d62:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8004d64:	4621      	mov	r1, r4
 8004d66:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8004d6a:	f7ff f9e4 	bl	8004136 <ld_clust.isra.0>
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004d6e:	f884 801a 	strb.w	r8, [r4, #26]
 8004d72:	f884 801b 	strb.w	r8, [r4, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8004d76:	f884 8014 	strb.w	r8, [r4, #20]
 8004d7a:	f884 8015 	strb.w	r8, [r4, #21]
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
 8004d7e:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8004d86:	4680      	mov	r8, r0
 8004d88:	b330      	cbz	r0, 8004dd8 <f_open+0x128>
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
 8004d8a:	4601      	mov	r1, r0
 8004d8c:	4618      	mov	r0, r3
					dw = dj.fs->winsect;
 8004d8e:	f8d3 922c 	ldr.w	r9, [r3, #556]	; 0x22c
					res = remove_chain(dj.fs, cl);
 8004d92:	f7ff ff24 	bl	8004bde <remove_chain>
					if (res == FR_OK) {
 8004d96:	b940      	cbnz	r0, 8004daa <f_open+0xfa>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8004d98:	9886      	ldr	r0, [sp, #536]	; 0x218
 8004d9a:	f108 33ff 	add.w	r3, r8, #4294967295
 8004d9e:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8004da2:	4649      	mov	r1, r9
 8004da4:	f7ff fa62 	bl	800426c <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
 8004da8:	b1b0      	cbz	r0, 8004dd8 <f_open+0x128>
					res = FR_DENIED;
 8004daa:	4606      	mov	r6, r0
 8004dac:	e02b      	b.n	8004e06 <f_open+0x156>
				res = FR_INVALID_NAME;
 8004dae:	2006      	movs	r0, #6
 8004db0:	e7a9      	b.n	8004d06 <f_open+0x56>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004db2:	7ae3      	ldrb	r3, [r4, #11]
 8004db4:	f013 0f11 	tst.w	r3, #17
 8004db8:	d12e      	bne.n	8004e18 <f_open+0x168>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8004dba:	f018 0f04 	tst.w	r8, #4
 8004dbe:	d0b8      	beq.n	8004d32 <f_open+0x82>
						res = FR_EXIST;
 8004dc0:	2608      	movs	r6, #8
 8004dc2:	e020      	b.n	8004e06 <f_open+0x156>
			if (res == FR_OK) {					/* Follow succeeded */
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	d1f0      	bne.n	8004daa <f_open+0xfa>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8004dc8:	7ae3      	ldrb	r3, [r4, #11]
 8004dca:	06d8      	lsls	r0, r3, #27
 8004dcc:	d422      	bmi.n	8004e14 <f_open+0x164>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8004dce:	f018 0f02 	tst.w	r8, #2
 8004dd2:	d001      	beq.n	8004dd8 <f_open+0x128>
 8004dd4:	07da      	lsls	r2, r3, #31
 8004dd6:	d41f      	bmi.n	8004e18 <f_open+0x168>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004dd8:	073b      	lsls	r3, r7, #28
				mode |= FA__WRITTEN;
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8004dda:	9b86      	ldr	r3, [sp, #536]	; 0x218
				mode |= FA__WRITTEN;
 8004ddc:	bf48      	it	mi
 8004dde:	f047 0720 	orrmi.w	r7, r7, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8004de2:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8004de6:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
			fp->dir_ptr = dir;
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004dea:	f017 0ffe 	tst.w	r7, #254	; 0xfe
			fp->dir_ptr = dir;
 8004dee:	f8c5 4220 	str.w	r4, [r5, #544]	; 0x220
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004df2:	bf14      	ite	ne
 8004df4:	2101      	movne	r1, #1
 8004df6:	2100      	moveq	r1, #0
 8004df8:	a806      	add	r0, sp, #24
 8004dfa:	f7ff f8f9 	bl	8003ff0 <inc_lock>
 8004dfe:	f8c5 0228 	str.w	r0, [r5, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8004e02:	b958      	cbnz	r0, 8004e1c <f_open+0x16c>
 8004e04:	2602      	movs	r6, #2
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 8004e06:	4630      	mov	r0, r6
 8004e08:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8004e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!fp) return FR_INVALID_OBJECT;
 8004e10:	2609      	movs	r6, #9
 8004e12:	e7f8      	b.n	8004e06 <f_open+0x156>
					res = FR_NO_FILE;
 8004e14:	2604      	movs	r6, #4
 8004e16:	e7f6      	b.n	8004e06 <f_open+0x156>
					res = FR_DENIED;
 8004e18:	2607      	movs	r6, #7
 8004e1a:	e7f4      	b.n	8004e06 <f_open+0x156>
			fp->flag = mode;					/* File access mode */
 8004e1c:	f885 7206 	strb.w	r7, [r5, #518]	; 0x206
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8004e20:	f8dd 8218 	ldr.w	r8, [sp, #536]	; 0x218
			fp->err = 0;						/* Clear error flag */
 8004e24:	2700      	movs	r7, #0
 8004e26:	f885 7207 	strb.w	r7, [r5, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8004e2a:	f898 0200 	ldrb.w	r0, [r8, #512]	; 0x200
 8004e2e:	4621      	mov	r1, r4
 8004e30:	f7ff f981 	bl	8004136 <ld_clust.isra.0>
 8004e34:	f8c5 0210 	str.w	r0, [r5, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8004e38:	69e3      	ldr	r3, [r4, #28]
 8004e3a:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
			fp->id = fp->fs->id;
 8004e3e:	f8b8 3206 	ldrh.w	r3, [r8, #518]	; 0x206
			fp->fptr = 0;						/* File pointer */
 8004e42:	f8c5 7208 	str.w	r7, [r5, #520]	; 0x208
			fp->dsect = 0;
 8004e46:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
			fp->cltbl = 0;						/* Normal seek mode */
 8004e4a:	f8c5 7224 	str.w	r7, [r5, #548]	; 0x224
			fp->fs = dj.fs;	 					/* Validate file object */
 8004e4e:	f8c5 8200 	str.w	r8, [r5, #512]	; 0x200
			fp->id = fp->fs->id;
 8004e52:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
 8004e56:	e7d6      	b.n	8004e06 <f_open+0x156>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004e58:	2012      	movs	r0, #18
 8004e5a:	e7a6      	b.n	8004daa <f_open+0xfa>
 8004e5c:	20000280 	.word	0x20000280

08004e60 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8004e60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e64:	469b      	mov	fp, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8004e66:	2300      	movs	r3, #0
 8004e68:	f8cb 3000 	str.w	r3, [fp]
{
 8004e6c:	4604      	mov	r4, r0
 8004e6e:	4689      	mov	r9, r1
 8004e70:	4615      	mov	r5, r2

	res = validate(fp);							/* Check validity */
 8004e72:	f7ff f949 	bl	8004108 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8004e76:	4606      	mov	r6, r0
 8004e78:	bb60      	cbnz	r0, 8004ed4 <f_read+0x74>
	if (fp->err)								/* Check error */
 8004e7a:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f040 80ae 	bne.w	8004fe0 <f_read+0x180>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8004e84:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8004e88:	07d8      	lsls	r0, r3, #31
 8004e8a:	f140 80ab 	bpl.w	8004fe4 <f_read+0x184>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 8004e8e:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8004e92:	f8d4 7208 	ldr.w	r7, [r4, #520]	; 0x208
 8004e96:	1bdf      	subs	r7, r3, r7
 8004e98:	42af      	cmp	r7, r5
 8004e9a:	bf28      	it	cs
 8004e9c:	462f      	movcs	r7, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 8004e9e:	b1cf      	cbz	r7, 8004ed4 <f_read+0x74>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8004ea0:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 8004ea4:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f040 808a 	bne.w	8004fc2 <f_read+0x162>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8004eae:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8004eb2:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	ea03 2351 	and.w	r3, r3, r1, lsr #9
			if (!csect) {						/* On the cluster boundary? */
 8004ebc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8004ec0:	9301      	str	r3, [sp, #4]
 8004ec2:	d11d      	bne.n	8004f00 <f_read+0xa0>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8004ec4:	b951      	cbnz	r1, 8004edc <f_read+0x7c>
					clst = fp->sclust;			/* Follow from the origin */
 8004ec6:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8004eca:	2801      	cmp	r0, #1
 8004ecc:	d812      	bhi.n	8004ef4 <f_read+0x94>
 8004ece:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004ed0:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
 8004ed4:	4630      	mov	r0, r6
 8004ed6:	b003      	add	sp, #12
 8004ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl)
 8004edc:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 8004ee0:	b11b      	cbz	r3, 8004eea <f_read+0x8a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	f7ff f8e4 	bl	80040b0 <clmt_clust>
 8004ee8:	e7ef      	b.n	8004eca <f_read+0x6a>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8004eea:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8004eee:	f7ff fb55 	bl	800459c <get_fat>
 8004ef2:	e7ea      	b.n	8004eca <f_read+0x6a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004ef4:	1c41      	adds	r1, r0, #1
 8004ef6:	d101      	bne.n	8004efc <f_read+0x9c>
 8004ef8:	2601      	movs	r6, #1
 8004efa:	e7e9      	b.n	8004ed0 <f_read+0x70>
				fp->clust = clst;				/* Update current cluster */
 8004efc:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8004f00:	f8d4 a200 	ldr.w	sl, [r4, #512]	; 0x200
 8004f04:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8004f08:	4650      	mov	r0, sl
 8004f0a:	f7ff fb39 	bl	8004580 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	d0dd      	beq.n	8004ece <f_read+0x6e>
			sect += csect;
 8004f12:	9b01      	ldr	r3, [sp, #4]
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004f14:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 8004f16:	eb00 0803 	add.w	r8, r0, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004f1a:	d02f      	beq.n	8004f7c <f_read+0x11c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8004f1c:	9a01      	ldr	r2, [sp, #4]
 8004f1e:	f89a 3202 	ldrb.w	r3, [sl, #514]	; 0x202
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8004f22:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8004f26:	442a      	add	r2, r5
 8004f28:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 8004f2a:	bf84      	itt	hi
 8004f2c:	9a01      	ldrhi	r2, [sp, #4]
 8004f2e:	1a9d      	subhi	r5, r3, r2
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8004f30:	462b      	mov	r3, r5
 8004f32:	4642      	mov	r2, r8
 8004f34:	4649      	mov	r1, r9
 8004f36:	f7fe ffed 	bl	8003f14 <disk_read>
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	d1dc      	bne.n	8004ef8 <f_read+0x98>
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8004f3e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8004f42:	065a      	lsls	r2, r3, #25
 8004f44:	d50c      	bpl.n	8004f60 <f_read+0x100>
 8004f46:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8004f4a:	eba0 0008 	sub.w	r0, r0, r8
 8004f4e:	4285      	cmp	r5, r0
 8004f50:	d906      	bls.n	8004f60 <f_read+0x100>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8004f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f56:	4621      	mov	r1, r4
 8004f58:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 8004f5c:	f7ff f804 	bl	8003f68 <mem_cpy>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8004f60:	026d      	lsls	r5, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8004f62:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8004f66:	442b      	add	r3, r5
 8004f68:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 8004f6c:	f8db 3000 	ldr.w	r3, [fp]
 8004f70:	442b      	add	r3, r5
 8004f72:	44a9      	add	r9, r5
 8004f74:	f8cb 3000 	str.w	r3, [fp]
 8004f78:	1b7f      	subs	r7, r7, r5
 8004f7a:	e790      	b.n	8004e9e <f_read+0x3e>
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8004f7c:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8004f80:	4590      	cmp	r8, r2
 8004f82:	d01c      	beq.n	8004fbe <f_read+0x15e>
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8004f84:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8004f88:	065b      	lsls	r3, r3, #25
 8004f8a:	d50d      	bpl.n	8004fa8 <f_read+0x148>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	4621      	mov	r1, r4
 8004f90:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 8004f94:	f7fe ffcc 	bl	8003f30 <disk_write>
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	d1ad      	bne.n	8004ef8 <f_read+0x98>
					fp->flag &= ~FA__DIRTY;
 8004f9c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8004fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fa4:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8004fa8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8004fac:	2301      	movs	r3, #1
 8004fae:	4642      	mov	r2, r8
 8004fb0:	4621      	mov	r1, r4
 8004fb2:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8004fb6:	f7fe ffad 	bl	8003f14 <disk_read>
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	d19c      	bne.n	8004ef8 <f_read+0x98>
			fp->dsect = sect;
 8004fbe:	f8c4 8218 	str.w	r8, [r4, #536]	; 0x218
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8004fc2:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 8004fc6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004fca:	f5c1 7500 	rsb	r5, r1, #512	; 0x200
 8004fce:	42bd      	cmp	r5, r7
 8004fd0:	bf28      	it	cs
 8004fd2:	463d      	movcs	r5, r7
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8004fd4:	462a      	mov	r2, r5
 8004fd6:	4421      	add	r1, r4
 8004fd8:	4648      	mov	r0, r9
 8004fda:	f7fe ffc5 	bl	8003f68 <mem_cpy>
 8004fde:	e7c0      	b.n	8004f62 <f_read+0x102>
 8004fe0:	461e      	mov	r6, r3
 8004fe2:	e777      	b.n	8004ed4 <f_read+0x74>
		LEAVE_FF(fp->fs, FR_DENIED);
 8004fe4:	2607      	movs	r6, #7
 8004fe6:	e775      	b.n	8004ed4 <f_read+0x74>

08004fe8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8004fe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fec:	469b      	mov	fp, r3
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f8cb 3000 	str.w	r3, [fp]
{
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	4689      	mov	r9, r1
 8004ff8:	4617      	mov	r7, r2

	res = validate(fp);						/* Check validity */
 8004ffa:	f7ff f885 	bl	8004108 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8004ffe:	4606      	mov	r6, r0
 8005000:	bb50      	cbnz	r0, 8005058 <f_write+0x70>
	if (fp->err)							/* Check error */
 8005002:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 8005006:	2b00      	cmp	r3, #0
 8005008:	f040 80d9 	bne.w	80051be <f_write+0x1d6>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800500c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8005010:	0799      	lsls	r1, r3, #30
 8005012:	f140 80d6 	bpl.w	80051c2 <f_write+0x1da>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8005016:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800501a:	42df      	cmn	r7, r3
 800501c:	f0c0 8083 	bcc.w	8005126 <f_write+0x13e>
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8005020:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8005024:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8005028:	4293      	cmp	r3, r2
 800502a:	f200 80c5 	bhi.w	80051b8 <f_write+0x1d0>
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800502e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8005032:	f043 0320 	orr.w	r3, r3, #32
 8005036:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 800503a:	e00d      	b.n	8005058 <f_write+0x70>
					if (fp->cltbl)
 800503c:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 8005040:	b173      	cbz	r3, 8005060 <f_write+0x78>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005042:	4620      	mov	r0, r4
 8005044:	f7ff f834 	bl	80040b0 <clmt_clust>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005048:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800504a:	2800      	cmp	r0, #0
 800504c:	d0e8      	beq.n	8005020 <f_write+0x38>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800504e:	2901      	cmp	r1, #1
 8005050:	d109      	bne.n	8005066 <f_write+0x7e>
 8005052:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005054:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207

	LEAVE_FF(fp->fs, FR_OK);
}
 8005058:	4630      	mov	r0, r6
 800505a:	b003      	add	sp, #12
 800505c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005060:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8005064:	e07a      	b.n	800515c <f_write+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005066:	1c4a      	adds	r2, r1, #1
 8005068:	d101      	bne.n	800506e <f_write+0x86>
 800506a:	2601      	movs	r6, #1
 800506c:	e7f2      	b.n	8005054 <f_write+0x6c>
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800506e:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
				fp->clust = clst;			/* Update current cluster */
 8005072:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8005076:	b90b      	cbnz	r3, 800507c <f_write+0x94>
 8005078:	f8c4 1210 	str.w	r1, [r4, #528]	; 0x210
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800507c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8005080:	065b      	lsls	r3, r3, #25
 8005082:	d511      	bpl.n	80050a8 <f_write+0xc0>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005084:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005088:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 800508c:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8005090:	2301      	movs	r3, #1
 8005092:	4621      	mov	r1, r4
 8005094:	f7fe ff4c 	bl	8003f30 <disk_write>
 8005098:	2800      	cmp	r0, #0
 800509a:	d1e6      	bne.n	800506a <f_write+0x82>
				fp->flag &= ~FA__DIRTY;
 800509c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80050a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050a4:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80050a8:	f8d4 a200 	ldr.w	sl, [r4, #512]	; 0x200
 80050ac:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 80050b0:	4650      	mov	r0, sl
 80050b2:	f7ff fa65 	bl	8004580 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80050b6:	2800      	cmp	r0, #0
 80050b8:	d0cb      	beq.n	8005052 <f_write+0x6a>
			sect += csect;
 80050ba:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80050bc:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 80050be:	eb00 0803 	add.w	r8, r0, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
 80050c2:	d04e      	beq.n	8005162 <f_write+0x17a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80050c4:	9a01      	ldr	r2, [sp, #4]
 80050c6:	f89a 3202 	ldrb.w	r3, [sl, #514]	; 0x202
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80050ca:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80050ce:	442a      	add	r2, r5
 80050d0:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 80050d2:	bf84      	itt	hi
 80050d4:	9a01      	ldrhi	r2, [sp, #4]
 80050d6:	1a9d      	subhi	r5, r3, r2
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80050d8:	462b      	mov	r3, r5
 80050da:	4642      	mov	r2, r8
 80050dc:	4649      	mov	r1, r9
 80050de:	f7fe ff27 	bl	8003f30 <disk_write>
 80050e2:	2800      	cmp	r0, #0
 80050e4:	d1c1      	bne.n	800506a <f_write+0x82>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80050e6:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 80050ea:	eba1 0108 	sub.w	r1, r1, r8
 80050ee:	428d      	cmp	r5, r1
 80050f0:	d90c      	bls.n	800510c <f_write+0x124>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80050f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050f6:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 80050fa:	4620      	mov	r0, r4
 80050fc:	f7fe ff34 	bl	8003f68 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8005100:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8005104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005108:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800510c:	026d      	lsls	r5, r5, #9
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800510e:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8005112:	442b      	add	r3, r5
 8005114:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 8005118:	f8db 3000 	ldr.w	r3, [fp]
 800511c:	442b      	add	r3, r5
 800511e:	44a9      	add	r9, r5
 8005120:	f8cb 3000 	str.w	r3, [fp]
 8005124:	1b7f      	subs	r7, r7, r5
	for ( ;  btw;							/* Repeat until all data written */
 8005126:	2f00      	cmp	r7, #0
 8005128:	f43f af7a 	beq.w	8005020 <f_write+0x38>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800512c:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 8005130:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8005134:	bb5b      	cbnz	r3, 800518e <f_write+0x1a6>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005136:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800513a:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 800513e:	3b01      	subs	r3, #1
 8005140:	ea03 2351 	and.w	r3, r3, r1, lsr #9
			if (!csect) {					/* On the cluster boundary? */
 8005144:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8005148:	9301      	str	r3, [sp, #4]
 800514a:	d197      	bne.n	800507c <f_write+0x94>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800514c:	2900      	cmp	r1, #0
 800514e:	f47f af75 	bne.w	800503c <f_write+0x54>
					clst = fp->sclust;		/* Follow from the origin */
 8005152:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
					if (clst == 0)			/* When no cluster is allocated, */
 8005156:	2900      	cmp	r1, #0
 8005158:	f47f af79 	bne.w	800504e <f_write+0x66>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800515c:	f7ff fb48 	bl	80047f0 <create_chain>
 8005160:	e772      	b.n	8005048 <f_write+0x60>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8005162:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8005166:	4598      	cmp	r8, r3
 8005168:	d00f      	beq.n	800518a <f_write+0x1a2>
				if (fp->fptr < fp->fsize &&
 800516a:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
 800516e:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8005172:	429a      	cmp	r2, r3
 8005174:	d209      	bcs.n	800518a <f_write+0x1a2>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8005176:	2301      	movs	r3, #1
 8005178:	4642      	mov	r2, r8
 800517a:	4621      	mov	r1, r4
 800517c:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 8005180:	f7fe fec8 	bl	8003f14 <disk_read>
				if (fp->fptr < fp->fsize &&
 8005184:	2800      	cmp	r0, #0
 8005186:	f47f af70 	bne.w	800506a <f_write+0x82>
			fp->dsect = sect;
 800518a:	f8c4 8218 	str.w	r8, [r4, #536]	; 0x218
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800518e:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
 8005192:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8005196:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 800519a:	42bd      	cmp	r5, r7
 800519c:	bf28      	it	cs
 800519e:	463d      	movcs	r5, r7
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80051a0:	462a      	mov	r2, r5
 80051a2:	4649      	mov	r1, r9
 80051a4:	4420      	add	r0, r4
 80051a6:	f7fe fedf 	bl	8003f68 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80051aa:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80051ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051b2:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 80051b6:	e7aa      	b.n	800510e <f_write+0x126>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80051b8:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 80051bc:	e737      	b.n	800502e <f_write+0x46>
 80051be:	461e      	mov	r6, r3
 80051c0:	e74a      	b.n	8005058 <f_write+0x70>
		LEAVE_FF(fp->fs, FR_DENIED);
 80051c2:	2607      	movs	r6, #7
 80051c4:	e748      	b.n	8005058 <f_write+0x70>

080051c6 <putc_bfd>:
{
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 80051c6:	290a      	cmp	r1, #10
{
 80051c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051ca:	4604      	mov	r4, r0
 80051cc:	460e      	mov	r6, r1
	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 80051ce:	d102      	bne.n	80051d6 <putc_bfd+0x10>
		putc_bfd(pb, '\r');
 80051d0:	210d      	movs	r1, #13
 80051d2:	f7ff fff8 	bl	80051c6 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 80051d6:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 80051d8:	2b00      	cmp	r3, #0
 80051da:	db14      	blt.n	8005206 <putc_bfd+0x40>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80051dc:	1c5d      	adds	r5, r3, #1
 80051de:	4423      	add	r3, r4
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80051e0:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 80051e2:	731e      	strb	r6, [r3, #12]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80051e4:	dd0b      	ble.n	80051fe <putc_bfd+0x38>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80051e6:	ab01      	add	r3, sp, #4
 80051e8:	462a      	mov	r2, r5
 80051ea:	f104 010c 	add.w	r1, r4, #12
 80051ee:	6820      	ldr	r0, [r4, #0]
 80051f0:	f7ff fefa 	bl	8004fe8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80051f4:	9b01      	ldr	r3, [sp, #4]
 80051f6:	1b5d      	subs	r5, r3, r5
 80051f8:	bf18      	it	ne
 80051fa:	f04f 35ff 	movne.w	r5, #4294967295
	}
	pb->idx = i;
	pb->nchr++;
 80051fe:	68a3      	ldr	r3, [r4, #8]
	pb->idx = i;
 8005200:	6065      	str	r5, [r4, #4]
	pb->nchr++;
 8005202:	3301      	adds	r3, #1
 8005204:	60a3      	str	r3, [r4, #8]
}
 8005206:	b002      	add	sp, #8
 8005208:	bd70      	pop	{r4, r5, r6, pc}

0800520a <f_sync>:
{
 800520a:	b570      	push	{r4, r5, r6, lr}
 800520c:	4604      	mov	r4, r0
	res = validate(fp);					/* Check validity of the object */
 800520e:	f7fe ff7b 	bl	8004108 <validate>
	if (res == FR_OK) {
 8005212:	2800      	cmp	r0, #0
 8005214:	d158      	bne.n	80052c8 <f_sync+0xbe>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8005216:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800521a:	069a      	lsls	r2, r3, #26
 800521c:	d554      	bpl.n	80052c8 <f_sync+0xbe>
			if (fp->flag & FA__DIRTY) {
 800521e:	065b      	lsls	r3, r3, #25
 8005220:	d511      	bpl.n	8005246 <f_sync+0x3c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005222:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005226:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 800522a:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800522e:	2301      	movs	r3, #1
 8005230:	4621      	mov	r1, r4
 8005232:	f7fe fe7d 	bl	8003f30 <disk_write>
 8005236:	2800      	cmp	r0, #0
 8005238:	d145      	bne.n	80052c6 <f_sync+0xbc>
				fp->flag &= ~FA__DIRTY;
 800523a:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800523e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005242:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			res = move_window(fp->fs, fp->dir_sect);
 8005246:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 800524a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800524e:	f7ff f80d 	bl	800426c <move_window>
 8005252:	4606      	mov	r6, r0
			if (res == FR_OK) {
 8005254:	bbc0      	cbnz	r0, 80052c8 <f_sync+0xbe>
				dir = fp->dir_ptr;
 8005256:	f8d4 5220 	ldr.w	r5, [r4, #544]	; 0x220
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800525a:	7aeb      	ldrb	r3, [r5, #11]
 800525c:	f043 0320 	orr.w	r3, r3, #32
 8005260:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8005262:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8005266:	772b      	strb	r3, [r5, #28]
 8005268:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 800526c:	0a1b      	lsrs	r3, r3, #8
 800526e:	776b      	strb	r3, [r5, #29]
 8005270:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8005274:	77ab      	strb	r3, [r5, #30]
 8005276:	f894 320f 	ldrb.w	r3, [r4, #527]	; 0x20f
 800527a:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800527c:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005280:	76ab      	strb	r3, [r5, #26]
 8005282:	f3c3 2207 	ubfx	r2, r3, #8, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005286:	0c1b      	lsrs	r3, r3, #16
 8005288:	752b      	strb	r3, [r5, #20]
 800528a:	0a1b      	lsrs	r3, r3, #8
 800528c:	756b      	strb	r3, [r5, #21]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800528e:	76ea      	strb	r2, [r5, #27]
				tm = GET_FATTIME();							/* Update updated time */
 8005290:	f000 fce8 	bl	8005c64 <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 8005294:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8005298:	75a8      	strb	r0, [r5, #22]
 800529a:	75eb      	strb	r3, [r5, #23]
 800529c:	0c03      	lsrs	r3, r0, #16
 800529e:	0e00      	lsrs	r0, r0, #24
 80052a0:	762b      	strb	r3, [r5, #24]
 80052a2:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80052a4:	74ae      	strb	r6, [r5, #18]
 80052a6:	74ee      	strb	r6, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 80052a8:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 80052ac:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
				fp->flag &= ~FA__WRITTEN;
 80052b0:	f023 0320 	bic.w	r3, r3, #32
 80052b4:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 80052b8:	2301      	movs	r3, #1
 80052ba:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
}
 80052be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				res = sync_fs(fp->fs);
 80052c2:	f7fe bf76 	b.w	80041b2 <sync_fs>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80052c6:	2001      	movs	r0, #1
}
 80052c8:	bd70      	pop	{r4, r5, r6, pc}

080052ca <f_close>:
{
 80052ca:	b510      	push	{r4, lr}
 80052cc:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 80052ce:	f7ff ff9c 	bl	800520a <f_sync>
	if (res == FR_OK)
 80052d2:	b950      	cbnz	r0, 80052ea <f_close+0x20>
		res = validate(fp);				/* Lock volume */
 80052d4:	4620      	mov	r0, r4
 80052d6:	f7fe ff17 	bl	8004108 <validate>
		if (res == FR_OK) {
 80052da:	b930      	cbnz	r0, 80052ea <f_close+0x20>
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80052dc:	f8d4 0228 	ldr.w	r0, [r4, #552]	; 0x228
 80052e0:	f7fe feca 	bl	8004078 <dec_lock>
			if (res == FR_OK)
 80052e4:	b908      	cbnz	r0, 80052ea <f_close+0x20>
				fp->fs = 0;				/* Invalidate file object */
 80052e6:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
}
 80052ea:	bd10      	pop	{r4, pc}

080052ec <f_lseek>:
{
 80052ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f0:	4604      	mov	r4, r0
 80052f2:	460d      	mov	r5, r1
	res = validate(fp);					/* Check validity of the object */
 80052f4:	f7fe ff08 	bl	8004108 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80052f8:	4606      	mov	r6, r0
 80052fa:	bb10      	cbnz	r0, 8005342 <f_lseek+0x56>
	if (fp->err)						/* Check error */
 80052fc:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 8005300:	2b00      	cmp	r3, #0
 8005302:	f040 813e 	bne.w	8005582 <f_lseek+0x296>
	if (fp->cltbl) {	/* Fast seek */
 8005306:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 8087 	beq.w	800541e <f_lseek+0x132>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8005310:	1c6a      	adds	r2, r5, #1
 8005312:	d13d      	bne.n	8005390 <f_lseek+0xa4>
			cl = fp->sclust;			/* Top of the chain */
 8005314:	f8d4 7210 	ldr.w	r7, [r4, #528]	; 0x210
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8005318:	f8d3 b000 	ldr.w	fp, [r3]
 800531c:	f103 0a04 	add.w	sl, r3, #4
 8005320:	2502      	movs	r5, #2
			if (cl) {
 8005322:	b35f      	cbz	r7, 800537c <f_lseek+0x90>
 8005324:	46b8      	mov	r8, r7
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8005326:	f04f 0900 	mov.w	r9, #0
						cl = get_fat(fp->fs, cl);
 800532a:	4641      	mov	r1, r8
 800532c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005330:	f7ff f934 	bl	800459c <get_fat>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8005334:	2801      	cmp	r0, #1
						pcl = cl; ncl++;
 8005336:	f109 0901 	add.w	r9, r9, #1
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800533a:	d807      	bhi.n	800534c <f_lseek+0x60>
 800533c:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800533e:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207
}
 8005342:	4630      	mov	r0, r6
 8005344:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005348:	4607      	mov	r7, r0
 800534a:	e7eb      	b.n	8005324 <f_lseek+0x38>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800534c:	1c43      	adds	r3, r0, #1
 800534e:	d101      	bne.n	8005354 <f_lseek+0x68>
 8005350:	2601      	movs	r6, #1
 8005352:	e7f4      	b.n	800533e <f_lseek+0x52>
					} while (cl == pcl + 1);
 8005354:	f108 0301 	add.w	r3, r8, #1
 8005358:	4298      	cmp	r0, r3
 800535a:	4680      	mov	r8, r0
 800535c:	d0e5      	beq.n	800532a <f_lseek+0x3e>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800535e:	3502      	adds	r5, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8005360:	45ab      	cmp	fp, r5
						*tbl++ = ncl; *tbl++ = tcl;
 8005362:	bf21      	itttt	cs
 8005364:	4653      	movcs	r3, sl
 8005366:	f843 9b08 	strcs.w	r9, [r3], #8
 800536a:	f8ca 7004 	strcs.w	r7, [sl, #4]
 800536e:	469a      	movcs	sl, r3
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8005370:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8005374:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005378:	4298      	cmp	r0, r3
 800537a:	d3e5      	bcc.n	8005348 <f_lseek+0x5c>
			*fp->cltbl = ulen;	/* Number of items used */
 800537c:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
			if (ulen <= tlen)
 8005380:	455d      	cmp	r5, fp
			*fp->cltbl = ulen;	/* Number of items used */
 8005382:	601d      	str	r5, [r3, #0]
			if (ulen <= tlen)
 8005384:	f200 80ff 	bhi.w	8005586 <f_lseek+0x29a>
				*tbl = 0;		/* Terminate table */
 8005388:	2300      	movs	r3, #0
 800538a:	f8ca 3000 	str.w	r3, [sl]
 800538e:	e7d8      	b.n	8005342 <f_lseek+0x56>
 8005390:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
 8005394:	4285      	cmp	r5, r0
 8005396:	bf28      	it	cs
 8005398:	4605      	movcs	r5, r0
			fp->fptr = ofs;				/* Set file pointer */
 800539a:	f8c4 5208 	str.w	r5, [r4, #520]	; 0x208
			if (ofs) {
 800539e:	2d00      	cmp	r5, #0
 80053a0:	d0cf      	beq.n	8005342 <f_lseek+0x56>
				fp->clust = clmt_clust(fp, ofs - 1);
 80053a2:	f105 38ff 	add.w	r8, r5, #4294967295
 80053a6:	4641      	mov	r1, r8
 80053a8:	4620      	mov	r0, r4
 80053aa:	f7fe fe81 	bl	80040b0 <clmt_clust>
				dsc = clust2sect(fp->fs, fp->clust);
 80053ae:	f8d4 7200 	ldr.w	r7, [r4, #512]	; 0x200
				fp->clust = clmt_clust(fp, ofs - 1);
 80053b2:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
 80053b6:	4601      	mov	r1, r0
				dsc = clust2sect(fp->fs, fp->clust);
 80053b8:	4638      	mov	r0, r7
 80053ba:	f7ff f8e1 	bl	8004580 <clust2sect>
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 80053be:	2800      	cmp	r0, #0
 80053c0:	d0bc      	beq.n	800533c <f_lseek+0x50>
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80053c2:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80053c6:	2d00      	cmp	r5, #0
 80053c8:	d0bb      	beq.n	8005342 <f_lseek+0x56>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80053ca:	f897 5202 	ldrb.w	r5, [r7, #514]	; 0x202
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80053ce:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80053d2:	3d01      	subs	r5, #1
 80053d4:	ea05 2558 	and.w	r5, r5, r8, lsr #9
 80053d8:	4405      	add	r5, r0
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80053da:	4295      	cmp	r5, r2
 80053dc:	d0b1      	beq.n	8005342 <f_lseek+0x56>
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80053de:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80053e2:	0659      	lsls	r1, r3, #25
 80053e4:	d50d      	bpl.n	8005402 <f_lseek+0x116>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80053e6:	2301      	movs	r3, #1
 80053e8:	4621      	mov	r1, r4
 80053ea:	f897 0201 	ldrb.w	r0, [r7, #513]	; 0x201
 80053ee:	f7fe fd9f 	bl	8003f30 <disk_write>
 80053f2:	2800      	cmp	r0, #0
 80053f4:	d1ac      	bne.n	8005350 <f_lseek+0x64>
						fp->flag &= ~FA__DIRTY;
 80053f6:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80053fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053fe:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8005402:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005406:	2301      	movs	r3, #1
 8005408:	462a      	mov	r2, r5
 800540a:	4621      	mov	r1, r4
 800540c:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8005410:	f7fe fd80 	bl	8003f14 <disk_read>
 8005414:	2800      	cmp	r0, #0
 8005416:	d19b      	bne.n	8005350 <f_lseek+0x64>
					fp->dsect = dsc;
 8005418:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 800541c:	e791      	b.n	8005342 <f_lseek+0x56>
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800541e:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8005422:	429d      	cmp	r5, r3
 8005424:	d905      	bls.n	8005432 <f_lseek+0x146>
			 && !(fp->flag & FA_WRITE)
 8005426:	f894 2206 	ldrb.w	r2, [r4, #518]	; 0x206
 800542a:	f012 0f02 	tst.w	r2, #2
 800542e:	bf08      	it	eq
 8005430:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 8005432:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 8005434:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
		fp->fptr = nsect = 0;
 8005438:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
		if (ofs) {
 800543c:	2d00      	cmp	r5, #0
 800543e:	d13e      	bne.n	80054be <f_lseek+0x1d2>
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8005440:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8005444:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8005448:	4293      	cmp	r3, r2
 800544a:	f67f af7a 	bls.w	8005342 <f_lseek+0x56>
			fp->fsize = fp->fptr;
 800544e:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 8005452:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8005456:	f043 0320 	orr.w	r3, r3, #32
 800545a:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 800545e:	e770      	b.n	8005342 <f_lseek+0x56>
		fp->fptr = nsect = 0;
 8005460:	2500      	movs	r5, #0
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8005462:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8005466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0e8      	beq.n	8005440 <f_lseek+0x154>
 800546e:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8005472:	4295      	cmp	r5, r2
 8005474:	d0e4      	beq.n	8005440 <f_lseek+0x154>
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8005476:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800547a:	065b      	lsls	r3, r3, #25
 800547c:	d510      	bpl.n	80054a0 <f_lseek+0x1b4>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800547e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005482:	2301      	movs	r3, #1
 8005484:	4621      	mov	r1, r4
 8005486:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800548a:	f7fe fd51 	bl	8003f30 <disk_write>
 800548e:	2800      	cmp	r0, #0
 8005490:	f47f af5e 	bne.w	8005350 <f_lseek+0x64>
				fp->flag &= ~FA__DIRTY;
 8005494:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8005498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800549c:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 80054a0:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80054a4:	2301      	movs	r3, #1
 80054a6:	462a      	mov	r2, r5
 80054a8:	4621      	mov	r1, r4
 80054aa:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 80054ae:	f7fe fd31 	bl	8003f14 <disk_read>
 80054b2:	2800      	cmp	r0, #0
 80054b4:	f47f af4c 	bne.w	8005350 <f_lseek+0x64>
			fp->dsect = nsect;
 80054b8:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 80054bc:	e7c0      	b.n	8005440 <f_lseek+0x154>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 80054be:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80054c2:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 80054c6:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 80054c8:	b32b      	cbz	r3, 8005516 <f_lseek+0x22a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80054ca:	3b01      	subs	r3, #1
 80054cc:	1e6a      	subs	r2, r5, #1
 80054ce:	fbb3 f1f7 	udiv	r1, r3, r7
 80054d2:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 80054d6:	428a      	cmp	r2, r1
 80054d8:	d31d      	bcc.n	8005516 <f_lseek+0x22a>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80054da:	427a      	negs	r2, r7
 80054dc:	4013      	ands	r3, r2
				clst = fp->clust;
 80054de:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80054e2:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				ofs -= fp->fptr;
 80054e6:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 80054e8:	2900      	cmp	r1, #0
 80054ea:	d0b9      	beq.n	8005460 <f_lseek+0x174>
				while (ofs > bcs) {						/* Cluster following loop */
 80054ec:	42bd      	cmp	r5, r7
 80054ee:	d823      	bhi.n	8005538 <f_lseek+0x24c>
				fp->fptr += ofs;
 80054f0:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 80054f4:	442b      	add	r3, r5
 80054f6:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 80054fa:	f3c5 0308 	ubfx	r3, r5, #0, #9
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0ae      	beq.n	8005460 <f_lseek+0x174>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8005502:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005506:	f7ff f83b 	bl	8004580 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800550a:	2800      	cmp	r0, #0
 800550c:	f43f af16 	beq.w	800533c <f_lseek+0x50>
					nsect += ofs / SS(fp->fs);
 8005510:	eb00 2555 	add.w	r5, r0, r5, lsr #9
 8005514:	e7a5      	b.n	8005462 <f_lseek+0x176>
				clst = fp->sclust;						/* start from the first cluster */
 8005516:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800551a:	b951      	cbnz	r1, 8005532 <f_lseek+0x246>
					clst = create_chain(fp->fs, 0);
 800551c:	f7ff f968 	bl	80047f0 <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8005520:	2801      	cmp	r0, #1
					clst = create_chain(fp->fs, 0);
 8005522:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8005524:	f43f af0a 	beq.w	800533c <f_lseek+0x50>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005528:	1c42      	adds	r2, r0, #1
 800552a:	f43f af11 	beq.w	8005350 <f_lseek+0x64>
					fp->sclust = clst;
 800552e:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
				fp->clust = clst;
 8005532:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
 8005536:	e7d7      	b.n	80054e8 <f_lseek+0x1fc>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8005538:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800553c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8005540:	079b      	lsls	r3, r3, #30
 8005542:	d505      	bpl.n	8005550 <f_lseek+0x264>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8005544:	f7ff f954 	bl	80047f0 <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 8005548:	4601      	mov	r1, r0
 800554a:	b920      	cbnz	r0, 8005556 <f_lseek+0x26a>
 800554c:	463d      	mov	r5, r7
 800554e:	e7cf      	b.n	80054f0 <f_lseek+0x204>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8005550:	f7ff f824 	bl	800459c <get_fat>
 8005554:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005556:	1c4a      	adds	r2, r1, #1
 8005558:	f43f aefa 	beq.w	8005350 <f_lseek+0x64>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800555c:	2901      	cmp	r1, #1
 800555e:	f67f aeed 	bls.w	800533c <f_lseek+0x50>
 8005562:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8005566:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800556a:	4299      	cmp	r1, r3
 800556c:	f4bf aee6 	bcs.w	800533c <f_lseek+0x50>
					fp->fptr += bcs;
 8005570:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
					fp->clust = clst;
 8005574:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
					fp->fptr += bcs;
 8005578:	443b      	add	r3, r7
 800557a:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
					ofs -= bcs;
 800557e:	1bed      	subs	r5, r5, r7
 8005580:	e7b4      	b.n	80054ec <f_lseek+0x200>
 8005582:	461e      	mov	r6, r3
 8005584:	e6dd      	b.n	8005342 <f_lseek+0x56>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8005586:	2611      	movs	r6, #17
 8005588:	e6db      	b.n	8005342 <f_lseek+0x56>

0800558a <f_mkdir>:
{
 800558a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558e:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
 8005592:	9007      	str	r0, [sp, #28]
	DWORD dsc, dcl, pcl, tm = GET_FATTIME();
 8005594:	f000 fb66 	bl	8005c64 <get_fattime>
	res = find_volume(&dj.fs, &path, 1);
 8005598:	2201      	movs	r2, #1
	DWORD dsc, dcl, pcl, tm = GET_FATTIME();
 800559a:	4607      	mov	r7, r0
	res = find_volume(&dj.fs, &path, 1);
 800559c:	a907      	add	r1, sp, #28
 800559e:	a88c      	add	r0, sp, #560	; 0x230
 80055a0:	f7fe feae 	bl	8004300 <find_volume>
 80055a4:	4605      	mov	r5, r0
 80055a6:	4604      	mov	r4, r0
	if (res == FR_OK) {
 80055a8:	2800      	cmp	r0, #0
 80055aa:	f040 80cd 	bne.w	8005748 <f_mkdir+0x1be>
		INIT_BUF(dj);
 80055ae:	ab09      	add	r3, sp, #36	; 0x24
		res = follow_path(&dj, path);			/* Follow the file path */
 80055b0:	9907      	ldr	r1, [sp, #28]
		INIT_BUF(dj);
 80055b2:	9392      	str	r3, [sp, #584]	; 0x248
		res = follow_path(&dj, path);			/* Follow the file path */
 80055b4:	a80c      	add	r0, sp, #48	; 0x30
 80055b6:	f7ff fa03 	bl	80049c0 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80055ba:	4605      	mov	r5, r0
 80055bc:	2800      	cmp	r0, #0
 80055be:	f000 80cc 	beq.w	800575a <f_mkdir+0x1d0>
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80055c2:	2804      	cmp	r0, #4
 80055c4:	f040 80c0 	bne.w	8005748 <f_mkdir+0x1be>
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
 80055c8:	4621      	mov	r1, r4
 80055ca:	988c      	ldr	r0, [sp, #560]	; 0x230
 80055cc:	f7ff f910 	bl	80047f0 <create_chain>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80055d0:	4606      	mov	r6, r0
 80055d2:	2800      	cmp	r0, #0
 80055d4:	f000 80b3 	beq.w	800573e <f_mkdir+0x1b4>
			if (dcl == 1) res = FR_INT_ERR;
 80055d8:	2801      	cmp	r0, #1
 80055da:	f000 80ba 	beq.w	8005752 <f_mkdir+0x1c8>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80055de:	1c43      	adds	r3, r0, #1
 80055e0:	f000 80b9 	beq.w	8005756 <f_mkdir+0x1cc>
				res = sync_window(dj.fs);
 80055e4:	988c      	ldr	r0, [sp, #560]	; 0x230
 80055e6:	f7fe fddd 	bl	80041a4 <sync_window>
			if (res == FR_OK) {					/* Initialize the new directory table */
 80055ea:	4605      	mov	r5, r0
 80055ec:	2800      	cmp	r0, #0
 80055ee:	f040 80a7 	bne.w	8005740 <f_mkdir+0x1b6>
				dsc = clust2sect(dj.fs, dcl);
 80055f2:	9c8c      	ldr	r4, [sp, #560]	; 0x230
 80055f4:	4631      	mov	r1, r6
 80055f6:	4620      	mov	r0, r4
 80055f8:	f7fe ffc2 	bl	8004580 <clust2sect>
				mem_set(dir, 0, SS(dj.fs));
 80055fc:	4629      	mov	r1, r5
				dsc = clust2sect(dj.fs, dcl);
 80055fe:	9006      	str	r0, [sp, #24]
				mem_set(dir, 0, SS(dj.fs));
 8005600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005604:	4620      	mov	r0, r4
 8005606:	f7fe fcb9 	bl	8003f7c <mem_set>
				mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800560a:	220b      	movs	r2, #11
 800560c:	2120      	movs	r1, #32
 800560e:	4620      	mov	r0, r4
 8005610:	f7fe fcb4 	bl	8003f7c <mem_set>
				ST_DWORD(dir + DIR_WrtTime, tm);
 8005614:	b2fb      	uxtb	r3, r7
 8005616:	9301      	str	r3, [sp, #4]
 8005618:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800561c:	75a3      	strb	r3, [r4, #22]
 800561e:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8005622:	9302      	str	r3, [sp, #8]
 8005624:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005628:	75e3      	strb	r3, [r4, #23]
 800562a:	f3c7 4307 	ubfx	r3, r7, #16, #8
 800562e:	9303      	str	r3, [sp, #12]
 8005630:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005634:	7623      	strb	r3, [r4, #24]
 8005636:	0e3b      	lsrs	r3, r7, #24
 8005638:	9304      	str	r3, [sp, #16]
 800563a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800563e:	7663      	strb	r3, [r4, #25]
				dir[DIR_Attr] = AM_DIR;
 8005640:	2210      	movs	r2, #16
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005642:	b2f3      	uxtb	r3, r6
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005644:	fa26 f802 	lsr.w	r8, r6, r2
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005648:	9305      	str	r3, [sp, #20]
 800564a:	f89d 3014 	ldrb.w	r3, [sp, #20]
				dir[DIR_Attr] = AM_DIR;
 800564e:	72e2      	strb	r2, [r4, #11]
				dir[DIR_Name] = '.';
 8005650:	252e      	movs	r5, #46	; 0x2e
				mem_cpy(dir + SZ_DIRE, dir, SZ_DIRE); 	/* Create ".." entry */
 8005652:	2220      	movs	r2, #32
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005654:	fa5f fb88 	uxtb.w	fp, r8
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005658:	f3c6 2a07 	ubfx	sl, r6, #8, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800565c:	ea4f 2818 	mov.w	r8, r8, lsr #8
				mem_cpy(dir + SZ_DIRE, dir, SZ_DIRE); 	/* Create ".." entry */
 8005660:	18a0      	adds	r0, r4, r2
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005662:	76a3      	strb	r3, [r4, #26]
				mem_cpy(dir + SZ_DIRE, dir, SZ_DIRE); 	/* Create ".." entry */
 8005664:	4621      	mov	r1, r4
				dir[DIR_Name] = '.';
 8005666:	7025      	strb	r5, [r4, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005668:	f884 a01b 	strb.w	sl, [r4, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800566c:	f884 b014 	strb.w	fp, [r4, #20]
 8005670:	f884 8015 	strb.w	r8, [r4, #21]
				mem_cpy(dir + SZ_DIRE, dir, SZ_DIRE); 	/* Create ".." entry */
 8005674:	f7fe fc78 	bl	8003f68 <mem_cpy>
				dir[SZ_DIRE + 1] = '.'; pcl = dj.sclust;
 8005678:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 800567c:	998c      	ldr	r1, [sp, #560]	; 0x230
				dir[SZ_DIRE + 1] = '.'; pcl = dj.sclust;
 800567e:	9a8e      	ldr	r2, [sp, #568]	; 0x238
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 8005680:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
 8005684:	9b06      	ldr	r3, [sp, #24]
 8005686:	2803      	cmp	r0, #3
 8005688:	d104      	bne.n	8005694 <f_mkdir+0x10a>
 800568a:	f8d1 1224 	ldr.w	r1, [r1, #548]	; 0x224
					pcl = 0;
 800568e:	428a      	cmp	r2, r1
 8005690:	bf08      	it	eq
 8005692:	2200      	moveq	r2, #0
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005694:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8005698:	f3c2 2107 	ubfx	r1, r2, #8, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800569c:	0c12      	lsrs	r2, r2, #16
 800569e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80056a2:	af0c      	add	r7, sp, #48	; 0x30
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80056a4:	0a12      	lsrs	r2, r2, #8
	ST_WORD(dir + DIR_FstClusLO, cl);
 80056a6:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80056aa:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80056ae:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 80056b2:	f892 9202 	ldrb.w	r9, [r2, #514]	; 0x202
 80056b6:	f1b9 0f00 	cmp.w	r9, #0
 80056ba:	d126      	bne.n	800570a <f_mkdir+0x180>
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
 80056bc:	4638      	mov	r0, r7
 80056be:	f7ff fa53 	bl	8004b68 <dir_register>
			if (res != FR_OK) {
 80056c2:	4605      	mov	r5, r0
 80056c4:	bbe0      	cbnz	r0, 8005740 <f_mkdir+0x1b6>
				dir = dj.dir;
 80056c6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80056ca:	2210      	movs	r2, #16
 80056cc:	72da      	strb	r2, [r3, #11]
				ST_DWORD(dir + DIR_WrtTime, tm);	/* Created time */
 80056ce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80056d2:	759a      	strb	r2, [r3, #22]
 80056d4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80056d8:	75da      	strb	r2, [r3, #23]
 80056da:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80056de:	761a      	strb	r2, [r3, #24]
 80056e0:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80056e4:	765a      	strb	r2, [r3, #25]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80056e6:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80056ea:	769a      	strb	r2, [r3, #26]
 80056ec:	f883 a01b 	strb.w	sl, [r3, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80056f0:	f883 b014 	strb.w	fp, [r3, #20]
 80056f4:	f883 8015 	strb.w	r8, [r3, #21]
				dj.fs->wflag = 1;
 80056f8:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
 80056fc:	2301      	movs	r3, #1
 80056fe:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
				res = sync_fs(dj.fs);
 8005702:	f7fe fd56 	bl	80041b2 <sync_fs>
 8005706:	4605      	mov	r5, r0
 8005708:	e01e      	b.n	8005748 <f_mkdir+0x1be>
					dj.fs->winsect = dsc++;
 800570a:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
					dj.fs->wflag = 1;
 8005714:	f04f 0301 	mov.w	r3, #1
 8005718:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
					dj.fs->winsect = dsc++;
 800571c:	9206      	str	r2, [sp, #24]
 800571e:	f7fe fd18 	bl	8004152 <sync_window.part.2>
					if (res != FR_OK) break;
 8005722:	4605      	mov	r5, r0
 8005724:	b960      	cbnz	r0, 8005740 <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(dj.fs));
 8005726:	4601      	mov	r1, r0
 8005728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800572c:	4620      	mov	r0, r4
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800572e:	f109 39ff 	add.w	r9, r9, #4294967295
					mem_set(dir, 0, SS(dj.fs));
 8005732:	f7fe fc23 	bl	8003f7c <mem_set>
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8005736:	fa5f f989 	uxtb.w	r9, r9
					dj.fs->winsect = dsc++;
 800573a:	9b06      	ldr	r3, [sp, #24]
 800573c:	e7bb      	b.n	80056b6 <f_mkdir+0x12c>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800573e:	2507      	movs	r5, #7
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
 8005740:	4631      	mov	r1, r6
 8005742:	988c      	ldr	r0, [sp, #560]	; 0x230
 8005744:	f7ff fa4b 	bl	8004bde <remove_chain>
}
 8005748:	4628      	mov	r0, r5
 800574a:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
 800574e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (dcl == 1) res = FR_INT_ERR;
 8005752:	2502      	movs	r5, #2
 8005754:	e7f4      	b.n	8005740 <f_mkdir+0x1b6>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005756:	2501      	movs	r5, #1
 8005758:	e7f2      	b.n	8005740 <f_mkdir+0x1b6>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800575a:	2508      	movs	r5, #8
	LEAVE_FF(dj.fs, res);
 800575c:	e7f4      	b.n	8005748 <f_mkdir+0x1be>

0800575e <f_gets>:
{
 800575e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005762:	4606      	mov	r6, r0
 8005764:	4690      	mov	r8, r2
	TCHAR c, *p = buff;
 8005766:	4605      	mov	r5, r0
	int n = 0;
 8005768:	2400      	movs	r4, #0
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800576a:	1e4f      	subs	r7, r1, #1
 800576c:	42bc      	cmp	r4, r7
 800576e:	da12      	bge.n	8005796 <f_gets+0x38>
		f_read(fp, s, 1, &rc);
 8005770:	ab01      	add	r3, sp, #4
 8005772:	2201      	movs	r2, #1
 8005774:	4669      	mov	r1, sp
 8005776:	4640      	mov	r0, r8
 8005778:	f7ff fb72 	bl	8004e60 <f_read>
		if (rc != 1) break;
 800577c:	9b01      	ldr	r3, [sp, #4]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d109      	bne.n	8005796 <f_gets+0x38>
		c = s[0];
 8005782:	f89d 3000 	ldrb.w	r3, [sp]
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005786:	2b0d      	cmp	r3, #13
 8005788:	d0f0      	beq.n	800576c <f_gets+0xe>
		if (c == '\n') break;		/* Break on EOL */
 800578a:	2b0a      	cmp	r3, #10
		*p++ = c;
 800578c:	f805 3b01 	strb.w	r3, [r5], #1
		n++;
 8005790:	f104 0401 	add.w	r4, r4, #1
		if (c == '\n') break;		/* Break on EOL */
 8005794:	d1ea      	bne.n	800576c <f_gets+0xe>
	*p = 0;
 8005796:	2300      	movs	r3, #0
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8005798:	429c      	cmp	r4, r3
}
 800579a:	bf14      	ite	ne
 800579c:	4630      	movne	r0, r6
 800579e:	4618      	moveq	r0, r3
	*p = 0;
 80057a0:	702b      	strb	r3, [r5, #0]
}
 80057a2:	b002      	add	sp, #8
 80057a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080057a8 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80057a8:	b510      	push	{r4, lr}
 80057aa:	b094      	sub	sp, #80	; 0x50
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
	pb.nchr = pb.idx = 0;
 80057ac:	2300      	movs	r3, #0
	pb.fp = fp;				/* Initialize output buffer */
 80057ae:	9101      	str	r1, [sp, #4]
	pb.nchr = pb.idx = 0;
 80057b0:	9302      	str	r3, [sp, #8]
 80057b2:	9303      	str	r3, [sp, #12]
 80057b4:	1e44      	subs	r4, r0, #1

	while (*str)			/* Put the string */
 80057b6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80057ba:	b931      	cbnz	r1, 80057ca <f_puts+0x22>
		putc_bfd(&pb, *str++);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 80057bc:	9a02      	ldr	r2, [sp, #8]
 80057be:	2a00      	cmp	r2, #0
 80057c0:	da07      	bge.n	80057d2 <f_puts+0x2a>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
		&& (UINT)pb.idx == nw) return pb.nchr;
	return EOF;
 80057c2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80057c6:	b014      	add	sp, #80	; 0x50
 80057c8:	bd10      	pop	{r4, pc}
		putc_bfd(&pb, *str++);
 80057ca:	a801      	add	r0, sp, #4
 80057cc:	f7ff fcfb 	bl	80051c6 <putc_bfd>
 80057d0:	e7f1      	b.n	80057b6 <f_puts+0xe>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 80057d2:	466b      	mov	r3, sp
 80057d4:	a904      	add	r1, sp, #16
 80057d6:	9801      	ldr	r0, [sp, #4]
 80057d8:	f7ff fc06 	bl	8004fe8 <f_write>
 80057dc:	2800      	cmp	r0, #0
 80057de:	d1f0      	bne.n	80057c2 <f_puts+0x1a>
		&& (UINT)pb.idx == nw) return pb.nchr;
 80057e0:	9b00      	ldr	r3, [sp, #0]
 80057e2:	9a02      	ldr	r2, [sp, #8]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d1ec      	bne.n	80057c2 <f_puts+0x1a>
 80057e8:	9803      	ldr	r0, [sp, #12]
 80057ea:	e7ec      	b.n	80057c6 <f_puts+0x1e>

080057ec <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 80057ec:	b40e      	push	{r1, r2, r3}
 80057ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057f2:	b09b      	sub	sp, #108	; 0x6c
 80057f4:	aa23      	add	r2, sp, #140	; 0x8c
	TCHAR c, d, s[16], *p;
	putbuff pb;


	pb.fp = fp;				/* Initialize output buffer */
	pb.nchr = pb.idx = 0;
 80057f6:	2100      	movs	r1, #0
{
 80057f8:	f852 3b04 	ldr.w	r3, [r2], #4
	pb.fp = fp;				/* Initialize output buffer */
 80057fc:	9007      	str	r0, [sp, #28]
	pb.nchr = pb.idx = 0;
 80057fe:	9108      	str	r1, [sp, #32]
 8005800:	9109      	str	r1, [sp, #36]	; 0x24

	va_start(arp, fmt);
 8005802:	9201      	str	r2, [sp, #4]
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
 8005804:	ae03      	add	r6, sp, #12
		c = *fmt++;
 8005806:	7819      	ldrb	r1, [r3, #0]
		if (c == 0) break;			/* End of string */
 8005808:	2900      	cmp	r1, #0
 800580a:	f000 80e0 	beq.w	80059ce <f_printf+0x1e2>
		if (c != '%') {				/* Non escape character */
 800580e:	2925      	cmp	r1, #37	; 0x25
 8005810:	d004      	beq.n	800581c <f_printf+0x30>
		c = *fmt++;
 8005812:	1c5d      	adds	r5, r3, #1
			putc_bfd(&pb, c); continue;
 8005814:	a807      	add	r0, sp, #28
 8005816:	f7ff fcd6 	bl	80051c6 <putc_bfd>
 800581a:	e05d      	b.n	80058d8 <f_printf+0xec>
		c = *fmt++;
 800581c:	7859      	ldrb	r1, [r3, #1]
		if (c == '0') {				/* Flag: '0' padding */
 800581e:	2930      	cmp	r1, #48	; 0x30
 8005820:	d129      	bne.n	8005876 <f_printf+0x8a>
			f = 1; c = *fmt++;
 8005822:	7899      	ldrb	r1, [r3, #2]
 8005824:	1cdd      	adds	r5, r3, #3
 8005826:	2201      	movs	r2, #1
 8005828:	2700      	movs	r7, #0
			w = w * 10 + c - '0';
 800582a:	200a      	movs	r0, #10
		while (IsDigit(c)) {		/* Precision */
 800582c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005830:	2b09      	cmp	r3, #9
 8005832:	d929      	bls.n	8005888 <f_printf+0x9c>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8005834:	f001 03df 	and.w	r3, r1, #223	; 0xdf
 8005838:	2b4c      	cmp	r3, #76	; 0x4c
			f |= 4; c = *fmt++;
 800583a:	bf02      	ittt	eq
 800583c:	7829      	ldrbeq	r1, [r5, #0]
 800583e:	f042 0204 	orreq.w	r2, r2, #4
 8005842:	3501      	addeq	r5, #1
		if (!c) break;
 8005844:	2900      	cmp	r1, #0
 8005846:	f000 80c2 	beq.w	80059ce <f_printf+0x1e2>
		if (IsLower(d)) d -= 0x20;
 800584a:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 800584e:	2b19      	cmp	r3, #25
 8005850:	bf9a      	itte	ls
 8005852:	f1a1 0320 	subls.w	r3, r1, #32
 8005856:	b2db      	uxtbls	r3, r3
 8005858:	460b      	movhi	r3, r1
		switch (d) {				/* Type is... */
 800585a:	2b4f      	cmp	r3, #79	; 0x4f
 800585c:	d03e      	beq.n	80058dc <f_printf+0xf0>
 800585e:	d819      	bhi.n	8005894 <f_printf+0xa8>
 8005860:	2b43      	cmp	r3, #67	; 0x43
 8005862:	f000 8096 	beq.w	8005992 <f_printf+0x1a6>
 8005866:	2b44      	cmp	r3, #68	; 0x44
 8005868:	f000 809b 	beq.w	80059a2 <f_printf+0x1b6>
 800586c:	2b42      	cmp	r3, #66	; 0x42
 800586e:	d1d1      	bne.n	8005814 <f_printf+0x28>
			r = 2; break;
 8005870:	f04f 0e02 	mov.w	lr, #2
 8005874:	e034      	b.n	80058e0 <f_printf+0xf4>
			if (c == '-') {			/* Flag: left justified */
 8005876:	292d      	cmp	r1, #45	; 0x2d
		c = *fmt++;
 8005878:	bf19      	ittee	ne
 800587a:	1c9d      	addne	r5, r3, #2
		w = f = 0;
 800587c:	2200      	movne	r2, #0
				f = 2; c = *fmt++;
 800587e:	1cdd      	addeq	r5, r3, #3
 8005880:	7899      	ldrbeq	r1, [r3, #2]
 8005882:	bf08      	it	eq
 8005884:	2202      	moveq	r2, #2
 8005886:	e7cf      	b.n	8005828 <f_printf+0x3c>
			w = w * 10 + c - '0';
 8005888:	fb00 1707 	mla	r7, r0, r7, r1
 800588c:	3f30      	subs	r7, #48	; 0x30
			c = *fmt++;
 800588e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8005892:	e7cb      	b.n	800582c <f_printf+0x40>
		switch (d) {				/* Type is... */
 8005894:	2b55      	cmp	r3, #85	; 0x55
 8005896:	f000 8084 	beq.w	80059a2 <f_printf+0x1b6>
 800589a:	2b58      	cmp	r3, #88	; 0x58
 800589c:	d07e      	beq.n	800599c <f_printf+0x1b0>
 800589e:	2b53      	cmp	r3, #83	; 0x53
 80058a0:	d1b8      	bne.n	8005814 <f_printf+0x28>
			p = va_arg(arp, TCHAR*);
 80058a2:	9b01      	ldr	r3, [sp, #4]
 80058a4:	f8d3 8000 	ldr.w	r8, [r3]
 80058a8:	1d19      	adds	r1, r3, #4
 80058aa:	9101      	str	r1, [sp, #4]
			for (j = 0; p[j]; j++) ;
 80058ac:	4643      	mov	r3, r8
 80058ae:	eba3 0408 	sub.w	r4, r3, r8
 80058b2:	f813 1b01 	ldrb.w	r1, [r3], #1
 80058b6:	2900      	cmp	r1, #0
 80058b8:	d1f9      	bne.n	80058ae <f_printf+0xc2>
			if (!(f & 2)) {
 80058ba:	0793      	lsls	r3, r2, #30
 80058bc:	d404      	bmi.n	80058c8 <f_printf+0xdc>
				while (j++ < w) putc_bfd(&pb, ' ');
 80058be:	4623      	mov	r3, r4
 80058c0:	42bb      	cmp	r3, r7
 80058c2:	f104 0401 	add.w	r4, r4, #1
 80058c6:	d355      	bcc.n	8005974 <f_printf+0x188>
 80058c8:	f108 38ff 	add.w	r8, r8, #4294967295
			while (*p) putc_bfd(&pb, *p++);
 80058cc:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 80058d0:	2900      	cmp	r1, #0
 80058d2:	d154      	bne.n	800597e <f_printf+0x192>
			while (j++ < w) putc_bfd(&pb, ' ');
 80058d4:	42a7      	cmp	r7, r4
 80058d6:	d856      	bhi.n	8005986 <f_printf+0x19a>
{
 80058d8:	462b      	mov	r3, r5
 80058da:	e794      	b.n	8005806 <f_printf+0x1a>
			r = 8; break;
 80058dc:	f04f 0e08 	mov.w	lr, #8
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80058e0:	f012 0f04 	tst.w	r2, #4
 80058e4:	9801      	ldr	r0, [sp, #4]
 80058e6:	d05f      	beq.n	80059a8 <f_printf+0x1bc>
 80058e8:	1d04      	adds	r4, r0, #4
 80058ea:	6800      	ldr	r0, [r0, #0]
 80058ec:	9401      	str	r4, [sp, #4]
		if (d == 'D' && (v & 0x80000000)) {
 80058ee:	2b44      	cmp	r3, #68	; 0x44
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80058f0:	d104      	bne.n	80058fc <f_printf+0x110>
		if (d == 'D' && (v & 0x80000000)) {
 80058f2:	2800      	cmp	r0, #0
			v = 0 - v;
 80058f4:	bfbc      	itt	lt
 80058f6:	4240      	neglt	r0, r0
			f |= 8;
 80058f8:	f042 0208 	orrlt.w	r2, r2, #8
 80058fc:	2978      	cmp	r1, #120	; 0x78
 80058fe:	bf0c      	ite	eq
 8005900:	f04f 0827 	moveq.w	r8, #39	; 0x27
 8005904:	f04f 0807 	movne.w	r8, #7
		i = 0;
 8005908:	2100      	movs	r1, #0
			d = (TCHAR)(v % r); v /= r;
 800590a:	fbb0 fcfe 	udiv	ip, r0, lr
 800590e:	fb0e 041c 	mls	r4, lr, ip, r0
 8005912:	b2e3      	uxtb	r3, r4
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8005914:	2c09      	cmp	r4, #9
 8005916:	bf84      	itt	hi
 8005918:	4443      	addhi	r3, r8
 800591a:	b2db      	uxtbhi	r3, r3
			s[i++] = d + '0';
 800591c:	3330      	adds	r3, #48	; 0x30
			d = (TCHAR)(v % r); v /= r;
 800591e:	4660      	mov	r0, ip
			s[i++] = d + '0';
 8005920:	1c4c      	adds	r4, r1, #1
 8005922:	5473      	strb	r3, [r6, r1]
		} while (v && i < sizeof s / sizeof s[0]);
 8005924:	f1bc 0f00 	cmp.w	ip, #0
 8005928:	d002      	beq.n	8005930 <f_printf+0x144>
 800592a:	2c10      	cmp	r4, #16
 800592c:	d142      	bne.n	80059b4 <f_printf+0x1c8>
 800592e:	210f      	movs	r1, #15
		if (f & 8) s[i++] = '-';
 8005930:	0710      	lsls	r0, r2, #28
 8005932:	d505      	bpl.n	8005940 <f_printf+0x154>
 8005934:	ab1a      	add	r3, sp, #104	; 0x68
 8005936:	441c      	add	r4, r3
 8005938:	232d      	movs	r3, #45	; 0x2d
 800593a:	f804 3c5c 	strb.w	r3, [r4, #-92]
 800593e:	1c8c      	adds	r4, r1, #2
		j = i; d = (f & 1) ? '0' : ' ';
 8005940:	f012 0f01 	tst.w	r2, #1
 8005944:	bf14      	ite	ne
 8005946:	f04f 0930 	movne.w	r9, #48	; 0x30
 800594a:	f04f 0920 	moveq.w	r9, #32
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800594e:	0793      	lsls	r3, r2, #30
		j = i; d = (f & 1) ? '0' : ' ';
 8005950:	46a0      	mov	r8, r4
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8005952:	d536      	bpl.n	80059c2 <f_printf+0x1d6>
		do putc_bfd(&pb, s[--i]); while (i);
 8005954:	3c01      	subs	r4, #1
 8005956:	a807      	add	r0, sp, #28
 8005958:	5d31      	ldrb	r1, [r6, r4]
 800595a:	f7ff fc34 	bl	80051c6 <putc_bfd>
 800595e:	2c00      	cmp	r4, #0
 8005960:	d1f8      	bne.n	8005954 <f_printf+0x168>
		while (j++ < w) putc_bfd(&pb, d);
 8005962:	4547      	cmp	r7, r8
 8005964:	d9b8      	bls.n	80058d8 <f_printf+0xec>
 8005966:	4649      	mov	r1, r9
 8005968:	a807      	add	r0, sp, #28
 800596a:	f7ff fc2c 	bl	80051c6 <putc_bfd>
 800596e:	f108 0801 	add.w	r8, r8, #1
 8005972:	e7f6      	b.n	8005962 <f_printf+0x176>
				while (j++ < w) putc_bfd(&pb, ' ');
 8005974:	2120      	movs	r1, #32
 8005976:	a807      	add	r0, sp, #28
 8005978:	f7ff fc25 	bl	80051c6 <putc_bfd>
 800597c:	e79f      	b.n	80058be <f_printf+0xd2>
			while (*p) putc_bfd(&pb, *p++);
 800597e:	a807      	add	r0, sp, #28
 8005980:	f7ff fc21 	bl	80051c6 <putc_bfd>
 8005984:	e7a2      	b.n	80058cc <f_printf+0xe0>
			while (j++ < w) putc_bfd(&pb, ' ');
 8005986:	2120      	movs	r1, #32
 8005988:	a807      	add	r0, sp, #28
 800598a:	f7ff fc1c 	bl	80051c6 <putc_bfd>
 800598e:	3401      	adds	r4, #1
 8005990:	e7a0      	b.n	80058d4 <f_printf+0xe8>
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8005992:	9b01      	ldr	r3, [sp, #4]
 8005994:	1d1a      	adds	r2, r3, #4
 8005996:	9201      	str	r2, [sp, #4]
 8005998:	7819      	ldrb	r1, [r3, #0]
 800599a:	e73b      	b.n	8005814 <f_printf+0x28>
			r = 16; break;
 800599c:	f04f 0e10 	mov.w	lr, #16
 80059a0:	e79e      	b.n	80058e0 <f_printf+0xf4>
			r = 10; break;
 80059a2:	f04f 0e0a 	mov.w	lr, #10
 80059a6:	e79b      	b.n	80058e0 <f_printf+0xf4>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80059a8:	2b44      	cmp	r3, #68	; 0x44
 80059aa:	f100 0304 	add.w	r3, r0, #4
 80059ae:	9301      	str	r3, [sp, #4]
 80059b0:	6800      	ldr	r0, [r0, #0]
 80059b2:	e79d      	b.n	80058f0 <f_printf+0x104>
 80059b4:	4621      	mov	r1, r4
 80059b6:	e7a8      	b.n	800590a <f_printf+0x11e>
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80059b8:	4649      	mov	r1, r9
 80059ba:	a807      	add	r0, sp, #28
 80059bc:	f7ff fc03 	bl	80051c6 <putc_bfd>
 80059c0:	46d0      	mov	r8, sl
 80059c2:	45b8      	cmp	r8, r7
 80059c4:	f108 0a01 	add.w	sl, r8, #1
 80059c8:	d3f6      	bcc.n	80059b8 <f_printf+0x1cc>
 80059ca:	46d0      	mov	r8, sl
 80059cc:	e7c2      	b.n	8005954 <f_printf+0x168>
	}

	va_end(arp);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 80059ce:	9a08      	ldr	r2, [sp, #32]
 80059d0:	2a00      	cmp	r2, #0
 80059d2:	da06      	bge.n	80059e2 <f_printf+0x1f6>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
		&& (UINT)pb.idx == nw) return pb.nchr;
	return EOF;
 80059d4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80059d8:	b01b      	add	sp, #108	; 0x6c
 80059da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059de:	b003      	add	sp, #12
 80059e0:	4770      	bx	lr
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 80059e2:	ab02      	add	r3, sp, #8
 80059e4:	a90a      	add	r1, sp, #40	; 0x28
 80059e6:	9807      	ldr	r0, [sp, #28]
 80059e8:	f7ff fafe 	bl	8004fe8 <f_write>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d1f1      	bne.n	80059d4 <f_printf+0x1e8>
		&& (UINT)pb.idx == nw) return pb.nchr;
 80059f0:	9b02      	ldr	r3, [sp, #8]
 80059f2:	9a08      	ldr	r2, [sp, #32]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d1ed      	bne.n	80059d4 <f_printf+0x1e8>
 80059f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059fa:	e7ed      	b.n	80059d8 <f_printf+0x1ec>

080059fc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80059fc:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 80059fe:	4b0f      	ldr	r3, [pc, #60]	; (8005a3c <FATFS_LinkDriverEx+0x40>)
 8005a00:	7a5c      	ldrb	r4, [r3, #9]
 8005a02:	2c01      	cmp	r4, #1
 8005a04:	d818      	bhi.n	8005a38 <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005a06:	7a5d      	ldrb	r5, [r3, #9]
 8005a08:	b2ed      	uxtb	r5, r5
 8005a0a:	2400      	movs	r4, #0
 8005a0c:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 8005a0e:	7a5d      	ldrb	r5, [r3, #9]
 8005a10:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005a14:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 8005a16:	7a58      	ldrb	r0, [r3, #9]
 8005a18:	4418      	add	r0, r3
 8005a1a:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8005a1c:	7a5a      	ldrb	r2, [r3, #9]
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	1c50      	adds	r0, r2, #1
 8005a22:	b2c0      	uxtb	r0, r0
 8005a24:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8005a26:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8005a28:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8005a2a:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8005a2c:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8005a2e:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8005a30:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8005a32:	70cc      	strb	r4, [r1, #3]
 8005a34:	4620      	mov	r0, r4
 8005a36:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8005a38:	2001      	movs	r0, #1
    ret = 0;
  }
  
  return ret;
}
 8005a3a:	bd30      	pop	{r4, r5, pc}
 8005a3c:	2000029c 	.word	0x2000029c

08005a40 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8005a40:	2200      	movs	r2, #0
 8005a42:	f7ff bfdb 	b.w	80059fc <FATFS_LinkDriverEx>

08005a46 <LPS22HB_GetHandle>:
/* Includes ------------------------------------------------------------------*/
#include "LPS22HB.h"

void LPS22HB_GetHandle(LPS22HB_t* LPS22HB, I2C_HandleTypeDef* hi2cx)
{
	LPS22HB->hi2c = hi2cx;
 8005a46:	6001      	str	r1, [r0, #0]
 8005a48:	4770      	bx	lr

08005a4a <LPS22HB_SetAddress>:
}

void LPS22HB_SetAddress(LPS22HB_t* LPS22HB, LPS22HB_Address_t Address)
{
	LPS22HB->address = Address;
 8005a4a:	7101      	strb	r1, [r0, #4]
 8005a4c:	4770      	bx	lr
	...

08005a50 <LPS22HB_GetData>:

    return LPS22HB_Result_Ok;
}

LPS22HB_Result_t LPS22HB_GetData(LPS22HB_t* LPS22HB)
{
 8005a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a52:	b087      	sub	sp, #28
	HAL_StatusTypeDef res[2];
	uint8_t dt[3];

	// 	get pressure data
	res[0] = HAL_I2C_Mem_Read(LPS22HB->hi2c, LPS22HB->address, LPS22HB_PRESS_POUT_XL | 0x80, 1, dt, 3, 0xFFFF);
 8005a54:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8005a58:	2303      	movs	r3, #3
 8005a5a:	ac05      	add	r4, sp, #20
 8005a5c:	7901      	ldrb	r1, [r0, #4]
 8005a5e:	9702      	str	r7, [sp, #8]
 8005a60:	9301      	str	r3, [sp, #4]
 8005a62:	9400      	str	r4, [sp, #0]
{
 8005a64:	4605      	mov	r5, r0
	res[0] = HAL_I2C_Mem_Read(LPS22HB->hi2c, LPS22HB->address, LPS22HB_PRESS_POUT_XL | 0x80, 1, dt, 3, 0xFFFF);
 8005a66:	2301      	movs	r3, #1
 8005a68:	22a8      	movs	r2, #168	; 0xa8
 8005a6a:	6800      	ldr	r0, [r0, #0]
 8005a6c:	f7fb fb13 	bl	8001096 <HAL_I2C_Mem_Read>
	LPS22HB->pressure_raw = dt[2] << 16 | dt[1] << 8 | dt[0];
 8005a70:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8005a74:	f89d 2016 	ldrb.w	r2, [sp, #22]
	LPS22HB->pressure = (float)LPS22HB->pressure_raw / 4096.0f;

	res[1] = HAL_I2C_Mem_Read(LPS22HB->hi2c, LPS22HB->address, LPS22HB_TEMP_OUT_L | 0x80, 1, dt, 2, 0xFFFF);
 8005a78:	9702      	str	r7, [sp, #8]
	LPS22HB->pressure_raw = dt[2] << 16 | dt[1] << 8 | dt[0];
 8005a7a:	021b      	lsls	r3, r3, #8
 8005a7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a80:	f89d 2014 	ldrb.w	r2, [sp, #20]
	res[1] = HAL_I2C_Mem_Read(LPS22HB->hi2c, LPS22HB->address, LPS22HB_TEMP_OUT_L | 0x80, 1, dt, 2, 0xFFFF);
 8005a84:	7929      	ldrb	r1, [r5, #4]
	LPS22HB->pressure_raw = dt[2] << 16 | dt[1] << 8 | dt[0];
 8005a86:	4313      	orrs	r3, r2
	LPS22HB->pressure = (float)LPS22HB->pressure_raw / 4096.0f;
 8005a88:	ee07 3a90 	vmov	s15, r3
 8005a8c:	eefa 7aca 	vcvt.f32.s32	s15, s15, #12
	res[1] = HAL_I2C_Mem_Read(LPS22HB->hi2c, LPS22HB->address, LPS22HB_TEMP_OUT_L | 0x80, 1, dt, 2, 0xFFFF);
 8005a90:	2702      	movs	r7, #2
	LPS22HB->pressure_raw = dt[2] << 16 | dt[1] << 8 | dt[0];
 8005a92:	60eb      	str	r3, [r5, #12]
	LPS22HB->pressure = (float)LPS22HB->pressure_raw / 4096.0f;
 8005a94:	edc5 7a02 	vstr	s15, [r5, #8]
	res[1] = HAL_I2C_Mem_Read(LPS22HB->hi2c, LPS22HB->address, LPS22HB_TEMP_OUT_L | 0x80, 1, dt, 2, 0xFFFF);
 8005a98:	2301      	movs	r3, #1
 8005a9a:	22ab      	movs	r2, #171	; 0xab
	res[0] = HAL_I2C_Mem_Read(LPS22HB->hi2c, LPS22HB->address, LPS22HB_PRESS_POUT_XL | 0x80, 1, dt, 3, 0xFFFF);
 8005a9c:	4606      	mov	r6, r0
	res[1] = HAL_I2C_Mem_Read(LPS22HB->hi2c, LPS22HB->address, LPS22HB_TEMP_OUT_L | 0x80, 1, dt, 2, 0xFFFF);
 8005a9e:	e88d 0090 	stmia.w	sp, {r4, r7}
 8005aa2:	6828      	ldr	r0, [r5, #0]
 8005aa4:	f7fb faf7 	bl	8001096 <HAL_I2C_Mem_Read>
	LPS22HB->temperature_raw = dt[1] << 8 | dt[0];
 8005aa8:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8005aac:	f89d 3014 	ldrb.w	r3, [sp, #20]
	LPS22HB->temperature = (float)LPS22HB->temperature_raw / 100.0f;
 8005ab0:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8005ae0 <LPS22HB_GetData+0x90>
	LPS22HB->temperature_raw = dt[1] << 8 | dt[0];
 8005ab4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ab8:	b21b      	sxth	r3, r3
	LPS22HB->temperature = (float)LPS22HB->temperature_raw / 100.0f;
 8005aba:	ee07 3a90 	vmov	s15, r3
 8005abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	LPS22HB->temperature_raw = dt[1] << 8 | dt[0];
 8005ac2:	82ab      	strh	r3, [r5, #20]
	LPS22HB->temperature = (float)LPS22HB->temperature_raw / 100.0f;
 8005ac4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005ac8:	ed85 7a04 	vstr	s14, [r5, #16]

	if( res[0] != HAL_OK || res[1] != HAL_OK ) {
 8005acc:	b92e      	cbnz	r6, 8005ada <LPS22HB_GetData+0x8a>
 8005ace:	2800      	cmp	r0, #0
		return LPS22HB_Result_Fail;
 8005ad0:	bf0c      	ite	eq
 8005ad2:	2000      	moveq	r0, #0
 8005ad4:	4638      	movne	r0, r7
	}

	return LPS22HB_Result_Ok;
}
 8005ad6:	b007      	add	sp, #28
 8005ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return LPS22HB_Result_Fail;
 8005ada:	4638      	mov	r0, r7
 8005adc:	e7fb      	b.n	8005ad6 <LPS22HB_GetData+0x86>
 8005ade:	bf00      	nop
 8005ae0:	42c80000 	.word	0x42c80000

08005ae4 <LPS22HB_Pressure>:

float LPS22HB_Pressure(LPS22HB_t* LPS22HB)
{
	return LPS22HB->pressure;
}
 8005ae4:	ed90 0a02 	vldr	s0, [r0, #8]
 8005ae8:	4770      	bx	lr

08005aea <LPS22HB_PressureRaw>:

uint32_t LPS22HB_PressureRaw(LPS22HB_t* LPS22HB)
{
	return LPS22HB->pressure_raw;
}
 8005aea:	68c0      	ldr	r0, [r0, #12]
 8005aec:	4770      	bx	lr

08005aee <LPS22HB_Temperature>:

float LPS22HB_Temperature(LPS22HB_t* LPS22HB)
{
	return LPS22HB->temperature;
}
 8005aee:	ed90 0a04 	vldr	s0, [r0, #16]
 8005af2:	4770      	bx	lr

08005af4 <LPS22HB_SetODR>:
{
	return LPS22HB->temperature_raw;
}

LPS22HB_Result_t LPS22HB_SetODR(LPS22HB_t* LPS22HB, LPS22HB_ODR_t ODRConfig)
{
 8005af4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	HAL_StatusTypeDef res[3];
	uint8_t dt[2];

	dt[0] = LPS22HB_CTRL_REG1;
 8005af8:	f04f 0810 	mov.w	r8, #16
 8005afc:	eb0d 0508 	add.w	r5, sp, r8
	res[0] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, sizeof(dt), 0xFFFF);
 8005b00:	f64f 76ff 	movw	r6, #65535	; 0xffff
	dt[0] = LPS22HB_CTRL_REG1;
 8005b04:	f805 8d04 	strb.w	r8, [r5, #-4]!
{
 8005b08:	460f      	mov	r7, r1
	res[0] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, sizeof(dt), 0xFFFF);
 8005b0a:	7901      	ldrb	r1, [r0, #4]
 8005b0c:	9600      	str	r6, [sp, #0]
{
 8005b0e:	4604      	mov	r4, r0
	res[0] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, sizeof(dt), 0xFFFF);
 8005b10:	2302      	movs	r3, #2
 8005b12:	462a      	mov	r2, r5
 8005b14:	6800      	ldr	r0, [r0, #0]
 8005b16:	f7fb f8d4 	bl	8000cc2 <HAL_I2C_Master_Transmit>
	res[1] = HAL_I2C_Master_Receive(LPS22HB->hi2c, LPS22HB->address, dt, sizeof(dt), 0xFFFF);
 8005b1a:	7921      	ldrb	r1, [r4, #4]
 8005b1c:	9600      	str	r6, [sp, #0]
	res[0] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, sizeof(dt), 0xFFFF);
 8005b1e:	4682      	mov	sl, r0
	res[1] = HAL_I2C_Master_Receive(LPS22HB->hi2c, LPS22HB->address, dt, sizeof(dt), 0xFFFF);
 8005b20:	2302      	movs	r3, #2
 8005b22:	462a      	mov	r2, r5
 8005b24:	6820      	ldr	r0, [r4, #0]
 8005b26:	f7fb f965 	bl	8000df4 <HAL_I2C_Master_Receive>

	dt[1] = dt[0];
	dt[1] &= 0xff ^ 0x70;
 8005b2a:	f89d 300c 	ldrb.w	r3, [sp, #12]
	dt[1] |= ODRConfig;
	dt[0] =LPS22HB_CTRL_REG1;

	res[2] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, sizeof(dt), 0xFFFF);
 8005b2e:	7921      	ldrb	r1, [r4, #4]
 8005b30:	9600      	str	r6, [sp, #0]
	dt[1] &= 0xff ^ 0x70;
 8005b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	dt[1] |= ODRConfig;
 8005b36:	431f      	orrs	r7, r3
	res[1] = HAL_I2C_Master_Receive(LPS22HB->hi2c, LPS22HB->address, dt, sizeof(dt), 0xFFFF);
 8005b38:	4681      	mov	r9, r0
	res[2] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, sizeof(dt), 0xFFFF);
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	462a      	mov	r2, r5
 8005b3e:	6820      	ldr	r0, [r4, #0]
	dt[1] |= ODRConfig;
 8005b40:	f88d 700d 	strb.w	r7, [sp, #13]
	dt[0] =LPS22HB_CTRL_REG1;
 8005b44:	f88d 800c 	strb.w	r8, [sp, #12]
	res[2] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, sizeof(dt), 0xFFFF);
 8005b48:	f7fb f8bb 	bl	8000cc2 <HAL_I2C_Master_Transmit>

	if( res[0] != HAL_OK || res[1] != HAL_OK || res[2] != HAL_OK ) {
 8005b4c:	f1ba 0f00 	cmp.w	sl, #0
 8005b50:	d109      	bne.n	8005b66 <LPS22HB_SetODR+0x72>
 8005b52:	f1b9 0f00 	cmp.w	r9, #0
 8005b56:	d106      	bne.n	8005b66 <LPS22HB_SetODR+0x72>
 8005b58:	2800      	cmp	r0, #0
		return LPS22HB_Result_Fail;
	}

	return LPS22HB_Result_Ok;
 8005b5a:	bf14      	ite	ne
 8005b5c:	2002      	movne	r0, #2
 8005b5e:	2000      	moveq	r0, #0
}
 8005b60:	b004      	add	sp, #16
 8005b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return LPS22HB_Result_Fail;
 8005b66:	2002      	movs	r0, #2
 8005b68:	e7fa      	b.n	8005b60 <LPS22HB_SetODR+0x6c>

08005b6a <LPS22HB_Init>:
{
 8005b6a:	b530      	push	{r4, r5, lr}
	if ( HAL_I2C_IsDeviceReady(LPS22HB->hi2c, LPS22HB->address, 3, 0xFFFF) != HAL_OK ) {
 8005b6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8005b70:	b087      	sub	sp, #28
 8005b72:	4604      	mov	r4, r0
 8005b74:	460d      	mov	r5, r1
	if ( HAL_I2C_IsDeviceReady(LPS22HB->hi2c, LPS22HB->address, 3, 0xFFFF) != HAL_OK ) {
 8005b76:	2203      	movs	r2, #3
 8005b78:	7901      	ldrb	r1, [r0, #4]
 8005b7a:	6800      	ldr	r0, [r0, #0]
 8005b7c:	f7fb fb49 	bl	8001212 <HAL_I2C_IsDeviceReady>
 8005b80:	b9d0      	cbnz	r0, 8005bb8 <LPS22HB_Init+0x4e>
	HAL_I2C_Mem_Read(LPS22HB->hi2c, LPS22HB->address, LPS22HB_WHO_AM_I, 1, dt, 1, 0xFFFF);
 8005b82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b86:	9302      	str	r3, [sp, #8]
 8005b88:	aa05      	add	r2, sp, #20
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	9301      	str	r3, [sp, #4]
 8005b8e:	9200      	str	r2, [sp, #0]
 8005b90:	7921      	ldrb	r1, [r4, #4]
 8005b92:	6820      	ldr	r0, [r4, #0]
 8005b94:	220f      	movs	r2, #15
 8005b96:	f7fb fa7e 	bl	8001096 <HAL_I2C_Mem_Read>
    if (dt[0] != I_AM_LPS22HB) {
 8005b9a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8005b9e:	2bb1      	cmp	r3, #177	; 0xb1
 8005ba0:	d002      	beq.n	8005ba8 <LPS22HB_Init+0x3e>
    	return LPS22HB_Result_Fail;
 8005ba2:	2002      	movs	r0, #2
}
 8005ba4:	b007      	add	sp, #28
 8005ba6:	bd30      	pop	{r4, r5, pc}
    if ( LPS22HB_SetODR(LPS22HB, ODR) != LPS22HB_Result_Ok ) {
 8005ba8:	4629      	mov	r1, r5
 8005baa:	4620      	mov	r0, r4
 8005bac:	f7ff ffa2 	bl	8005af4 <LPS22HB_SetODR>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	d1f6      	bne.n	8005ba2 <LPS22HB_Init+0x38>
    LPS22HB->odr = ODR;
 8005bb4:	75a5      	strb	r5, [r4, #22]
    return LPS22HB_Result_Ok;
 8005bb6:	e7f5      	b.n	8005ba4 <LPS22HB_Init+0x3a>
		return LPS22HB_Result_DeviceNotConnected;
 8005bb8:	2001      	movs	r0, #1
 8005bba:	e7f3      	b.n	8005ba4 <LPS22HB_Init+0x3a>

08005bbc <LPS22HB_SetLPF>:

LPS22HB_Result_t LPS22HB_SetLPF(LPS22HB_t* LPS22HB, LPS22HB_LPF_t LPFConfig)
{
 8005bbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	HAL_StatusTypeDef res[3];
	uint8_t dt[2];

	dt[0] = LPS22HB_CTRL_REG1;
 8005bc0:	f04f 0810 	mov.w	r8, #16
 8005bc4:	eb0d 0508 	add.w	r5, sp, r8
	res[0] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, 1, 0xFFFF);
 8005bc8:	f64f 76ff 	movw	r6, #65535	; 0xffff
	dt[0] = LPS22HB_CTRL_REG1;
 8005bcc:	f805 8d04 	strb.w	r8, [r5, #-4]!
{
 8005bd0:	460f      	mov	r7, r1
	res[0] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, 1, 0xFFFF);
 8005bd2:	7901      	ldrb	r1, [r0, #4]
 8005bd4:	9600      	str	r6, [sp, #0]
{
 8005bd6:	4604      	mov	r4, r0
	res[0] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, 1, 0xFFFF);
 8005bd8:	2301      	movs	r3, #1
 8005bda:	462a      	mov	r2, r5
 8005bdc:	6800      	ldr	r0, [r0, #0]
 8005bde:	f7fb f870 	bl	8000cc2 <HAL_I2C_Master_Transmit>
	res[1] = HAL_I2C_Master_Receive(LPS22HB->hi2c, LPS22HB->address, dt, 1, 0xFFFF);
 8005be2:	7921      	ldrb	r1, [r4, #4]
 8005be4:	9600      	str	r6, [sp, #0]
	res[0] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, 1, 0xFFFF);
 8005be6:	4682      	mov	sl, r0
	res[1] = HAL_I2C_Master_Receive(LPS22HB->hi2c, LPS22HB->address, dt, 1, 0xFFFF);
 8005be8:	2301      	movs	r3, #1
 8005bea:	462a      	mov	r2, r5
 8005bec:	6820      	ldr	r0, [r4, #0]
 8005bee:	f7fb f901 	bl	8000df4 <HAL_I2C_Master_Receive>

	dt[1] = dt[0];
	dt[1] &= 0xff ^ 0x0c;
 8005bf2:	f89d 300c 	ldrb.w	r3, [sp, #12]
	dt[1] |= LPFConfig;
	dt[0] = LPS22HB_CTRL_REG1;

	res[2] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, 2, 0xFFFF);
 8005bf6:	7921      	ldrb	r1, [r4, #4]
 8005bf8:	9600      	str	r6, [sp, #0]
	dt[1] &= 0xff ^ 0x0c;
 8005bfa:	f023 030c 	bic.w	r3, r3, #12
	dt[1] |= LPFConfig;
 8005bfe:	431f      	orrs	r7, r3
	res[1] = HAL_I2C_Master_Receive(LPS22HB->hi2c, LPS22HB->address, dt, 1, 0xFFFF);
 8005c00:	4681      	mov	r9, r0
	res[2] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, 2, 0xFFFF);
 8005c02:	2302      	movs	r3, #2
 8005c04:	462a      	mov	r2, r5
 8005c06:	6820      	ldr	r0, [r4, #0]
	dt[1] |= LPFConfig;
 8005c08:	f88d 700d 	strb.w	r7, [sp, #13]
	dt[0] = LPS22HB_CTRL_REG1;
 8005c0c:	f88d 800c 	strb.w	r8, [sp, #12]
	res[2] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, 2, 0xFFFF);
 8005c10:	f7fb f857 	bl	8000cc2 <HAL_I2C_Master_Transmit>

	if( res[0] != HAL_OK || res[1] != HAL_OK || res[2] != HAL_OK ) {
 8005c14:	f1ba 0f00 	cmp.w	sl, #0
 8005c18:	d109      	bne.n	8005c2e <LPS22HB_SetLPF+0x72>
 8005c1a:	f1b9 0f00 	cmp.w	r9, #0
 8005c1e:	d106      	bne.n	8005c2e <LPS22HB_SetLPF+0x72>
 8005c20:	2800      	cmp	r0, #0
		return LPS22HB_Result_Fail;
	}

	return LPS22HB_Result_Ok;
 8005c22:	bf14      	ite	ne
 8005c24:	2002      	movne	r0, #2
 8005c26:	2000      	moveq	r0, #0
}
 8005c28:	b004      	add	sp, #16
 8005c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return LPS22HB_Result_Fail;
 8005c2e:	2002      	movs	r0, #2
 8005c30:	e7fa      	b.n	8005c28 <LPS22HB_SetLPF+0x6c>
	...

08005c34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */
FATFS SDFatFs;
/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8005c34:	b510      	push	{r4, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005c36:	4c07      	ldr	r4, [pc, #28]	; (8005c54 <MX_FATFS_Init+0x20>)
 8005c38:	4807      	ldr	r0, [pc, #28]	; (8005c58 <MX_FATFS_Init+0x24>)
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	f7ff ff00 	bl	8005a40 <FATFS_LinkDriver>
 8005c40:	4b06      	ldr	r3, [pc, #24]	; (8005c5c <MX_FATFS_Init+0x28>)
 8005c42:	7018      	strb	r0, [r3, #0]

  // If you regenerate codes, you should replace "USER_Driver" to "SD_Driver".


  //FRESULT res;
  f_mount(&SDFatFs, (TCHAR const*)USERPath, 0);
 8005c44:	4621      	mov	r1, r4
 8005c46:	2200      	movs	r2, #0
 8005c48:	4805      	ldr	r0, [pc, #20]	; (8005c60 <MX_FATFS_Init+0x2c>)
  //xprintf("f_mount() res=%d\n", (int)res);
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8005c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  f_mount(&SDFatFs, (TCHAR const*)USERPath, 0);
 8005c4e:	f7fe bff9 	b.w	8004c44 <f_mount>
 8005c52:	bf00      	nop
 8005c54:	20000308 	.word	0x20000308
 8005c58:	20000078 	.word	0x20000078
 8005c5c:	2000030c 	.word	0x2000030c
 8005c60:	20000310 	.word	0x20000310

08005c64 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8005c64:	2000      	movs	r0, #0
 8005c66:	4770      	bx	lr

08005c68 <uart_getc>:

/**
 * UART Wrapper
 */
uint8_t uart_getc(void)
{
 8005c68:	b507      	push	{r0, r1, r2, lr}
	uint8_t c = 0;
	char buf[1];
	HAL_UART_Receive(&huart4, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 8005c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c6e:	2201      	movs	r2, #1
 8005c70:	a901      	add	r1, sp, #4
 8005c72:	4804      	ldr	r0, [pc, #16]	; (8005c84 <uart_getc+0x1c>)
 8005c74:	f7fd f8f0 	bl	8002e58 <HAL_UART_Receive>
	c = buf[0];
	return c;
}
 8005c78:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8005c7c:	b003      	add	sp, #12
 8005c7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c82:	bf00      	nop
 8005c84:	20002154 	.word	0x20002154

08005c88 <uart_putc>:
void uart_putc(uint8_t c)
{
 8005c88:	b507      	push	{r0, r1, r2, lr}
	char buf[1];
	buf[0] = c;
 8005c8a:	a902      	add	r1, sp, #8
	HAL_UART_Transmit(&huart4, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 8005c8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	buf[0] = c;
 8005c90:	f801 0d04 	strb.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart4, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 8005c94:	2201      	movs	r2, #1
 8005c96:	4803      	ldr	r0, [pc, #12]	; (8005ca4 <uart_putc+0x1c>)
 8005c98:	f7fd f885 	bl	8002da6 <HAL_UART_Transmit>
}
 8005c9c:	b003      	add	sp, #12
 8005c9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ca2:	bf00      	nop
 8005ca4:	20002154 	.word	0x20002154

08005ca8 <SystemClock_Config>:
{
 8005ca8:	b510      	push	{r4, lr}
 8005caa:	b0a6      	sub	sp, #152	; 0x98
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8005cac:	230a      	movs	r3, #10
 8005cae:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005cb4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cba:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005cbc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8005cc0:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005cc2:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005cc4:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005cc6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8005cc8:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8005cca:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005ccc:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8005cce:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005cd0:	f7fb fb74 	bl	80013bc <HAL_RCC_OscConfig>
 8005cd4:	b100      	cbz	r0, 8005cd8 <SystemClock_Config+0x30>
 8005cd6:	e7fe      	b.n	8005cd6 <SystemClock_Config+0x2e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005cd8:	230f      	movs	r3, #15
 8005cda:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005cdc:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005ce2:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005ce4:	4621      	mov	r1, r4
 8005ce6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ce8:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005cea:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005cec:	f7fb fe0e 	bl	800190c <HAL_RCC_ClockConfig>
 8005cf0:	b100      	cbz	r0, 8005cf4 <SystemClock_Config+0x4c>
 8005cf2:	e7fe      	b.n	8005cf2 <SystemClock_Config+0x4a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_UART4
 8005cf4:	4b11      	ldr	r3, [pc, #68]	; (8005d3c <SystemClock_Config+0x94>)
 8005cf6:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005cf8:	9012      	str	r0, [sp, #72]	; 0x48
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8005cfa:	9015      	str	r0, [sp, #84]	; 0x54
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8005cfc:	9017      	str	r0, [sp, #92]	; 0x5c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005cfe:	f44f 7300 	mov.w	r3, #512	; 0x200
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8005d02:	9022      	str	r0, [sp, #136]	; 0x88
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8005d04:	901e      	str	r0, [sp, #120]	; 0x78
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8005d06:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005d08:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005d0a:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005d0c:	f7fb fef6 	bl	8001afc <HAL_RCCEx_PeriphCLKConfig>
 8005d10:	4604      	mov	r4, r0
 8005d12:	b100      	cbz	r0, 8005d16 <SystemClock_Config+0x6e>
 8005d14:	e7fe      	b.n	8005d14 <SystemClock_Config+0x6c>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8005d16:	f7fb febb 	bl	8001a90 <HAL_RCC_GetHCLKFreq>
 8005d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d1e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005d22:	f7fa fcfb 	bl	800071c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005d26:	2004      	movs	r0, #4
 8005d28:	f7fa fd0e 	bl	8000748 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005d2c:	4622      	mov	r2, r4
 8005d2e:	4621      	mov	r1, r4
 8005d30:	f04f 30ff 	mov.w	r0, #4294967295
 8005d34:	f7fa fcb2 	bl	800069c <HAL_NVIC_SetPriority>
}
 8005d38:	b026      	add	sp, #152	; 0x98
 8005d3a:	bd10      	pop	{r4, pc}
 8005d3c:	00b10029 	.word	0x00b10029

08005d40 <Config_OnePulseDelayTime>:
	timeout = delay * SystemCoreClock / (float)(htim16.Init.Prescaler + 1) ;
 8005d40:	4b17      	ldr	r3, [pc, #92]	; (8005da0 <Config_OnePulseDelayTime+0x60>)
{
 8005d42:	b530      	push	{r4, r5, lr}
	timeout = delay * SystemCoreClock / (float)(htim16.Init.Prescaler + 1) ;
 8005d44:	4d17      	ldr	r5, [pc, #92]	; (8005da4 <Config_OnePulseDelayTime+0x64>)
 8005d46:	edd3 7a00 	vldr	s15, [r3]
 8005d4a:	686b      	ldr	r3, [r5, #4]
 8005d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d50:	3301      	adds	r3, #1
 8005d52:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005d56:	ee07 3a90 	vmov	s15, r3
 8005d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
{
 8005d5e:	b08b      	sub	sp, #44	; 0x2c
	timeout = delay * SystemCoreClock / (float)(htim16.Init.Prescaler + 1) ;
 8005d60:	ee80 7a27 	vdiv.f32	s14, s0, s15
	HAL_TIM_Base_Init(&htim16);
 8005d64:	4628      	mov	r0, r5
	timeout = delay * SystemCoreClock / (float)(htim16.Init.Prescaler + 1) ;
 8005d66:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8005d6a:	edcd 7a01 	vstr	s15, [sp, #4]
	htim16.Init.Period = timeout;
 8005d6e:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8005d72:	60ec      	str	r4, [r5, #12]
	HAL_TIM_Base_Init(&htim16);
 8005d74:	f7fc fb30 	bl	80023d8 <HAL_TIM_Base_Init>
	sConfigOC_TIM16.Pulse = timeout;
 8005d78:	9404      	str	r4, [sp, #16]
	sConfigOC_TIM16.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d7a:	2400      	movs	r4, #0
	sConfigOC_TIM16.OCMode = TIM_OCMODE_ACTIVE;
 8005d7c:	2310      	movs	r3, #16
	HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC_TIM16,TIM_CHANNEL_1);
 8005d7e:	4622      	mov	r2, r4
 8005d80:	a903      	add	r1, sp, #12
 8005d82:	4628      	mov	r0, r5
	sConfigOC_TIM16.OCMode = TIM_OCMODE_ACTIVE;
 8005d84:	9303      	str	r3, [sp, #12]
	sConfigOC_TIM16.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d86:	9405      	str	r4, [sp, #20]
	sConfigOC_TIM16.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005d88:	9406      	str	r4, [sp, #24]
	sConfigOC_TIM16.OCFastMode = TIM_OCFAST_DISABLE;
 8005d8a:	9407      	str	r4, [sp, #28]
	sConfigOC_TIM16.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005d8c:	9408      	str	r4, [sp, #32]
	sConfigOC_TIM16.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005d8e:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC_TIM16,TIM_CHANNEL_1);
 8005d90:	f7fc fdd0 	bl	8002934 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OnePulse_Start_IT(&htim16, TIM_CHANNEL_1);
 8005d94:	4621      	mov	r1, r4
 8005d96:	4628      	mov	r0, r5
 8005d98:	f7fc f9c8 	bl	800212c <HAL_TIM_OnePulse_Start_IT>
}
 8005d9c:	b00b      	add	sp, #44	; 0x2c
 8005d9e:	bd30      	pop	{r4, r5, pc}
 8005da0:	20000070 	.word	0x20000070
 8005da4:	20002280 	.word	0x20002280

08005da8 <Check_Bootcount>:
{
 8005da8:	b510      	push	{r4, lr}
 8005daa:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
    char buff[3] = {};
 8005dae:	2400      	movs	r4, #0
    res = f_open(&filer, "CONFIG/BOOTCNT.TXT", FA_READ );
 8005db0:	2201      	movs	r2, #1
 8005db2:	491f      	ldr	r1, [pc, #124]	; (8005e30 <Check_Bootcount+0x88>)
    char buff[3] = {};
 8005db4:	f8ad 4004 	strh.w	r4, [sp, #4]
    res = f_open(&filer, "CONFIG/BOOTCNT.TXT", FA_READ );
 8005db8:	a802      	add	r0, sp, #8
    char buff[3] = {};
 8005dba:	f88d 4006 	strb.w	r4, [sp, #6]
    res = f_open(&filer, "CONFIG/BOOTCNT.TXT", FA_READ );
 8005dbe:	f7fe ff77 	bl	8004cb0 <f_open>
    if ( FR_OK != res ) {
 8005dc2:	b308      	cbz	r0, 8005e08 <Check_Bootcount+0x60>
        res = f_mkdir("CONFIG");
 8005dc4:	481b      	ldr	r0, [pc, #108]	; (8005e34 <Check_Bootcount+0x8c>)
 8005dc6:	f7ff fbe0 	bl	800558a <f_mkdir>
        if ( FR_OK == res ) {
 8005dca:	b9a0      	cbnz	r0, 8005df6 <Check_Bootcount+0x4e>
        	res = f_open(&filew, "CONFIG/BOOTCNT.TXT", FA_CREATE_ALWAYS | FA_WRITE );
 8005dcc:	220a      	movs	r2, #10
 8005dce:	4918      	ldr	r1, [pc, #96]	; (8005e30 <Check_Bootcount+0x88>)
 8005dd0:	a88d      	add	r0, sp, #564	; 0x234
 8005dd2:	f7fe ff6d 	bl	8004cb0 <f_open>
        	if ( FR_OK != res ) {	//	failed to make file
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	b140      	cbz	r0, 8005dec <Check_Bootcount+0x44>
        		xprintf("filesystem error!\n");
 8005dda:	4817      	ldr	r0, [pc, #92]	; (8005e38 <Check_Bootcount+0x90>)
 8005ddc:	f000 feb2 	bl	8006b44 <xprintf>
            	return -1;
 8005de0:	f04f 34ff 	mov.w	r4, #4294967295
}
 8005de4:	4620      	mov	r0, r4
 8005de6:	f50d 6d8c 	add.w	sp, sp, #1120	; 0x460
 8005dea:	bd10      	pop	{r4, pc}
        		f_printf(&filew, "%d", bootcount);  //  bootcount = 0
 8005dec:	4602      	mov	r2, r0
 8005dee:	4913      	ldr	r1, [pc, #76]	; (8005e3c <Check_Bootcount+0x94>)
 8005df0:	a88d      	add	r0, sp, #564	; 0x234
 8005df2:	f7ff fcfb 	bl	80057ec <f_printf>
    f_printf(&filew, "%d", bootcount);
 8005df6:	4622      	mov	r2, r4
 8005df8:	4910      	ldr	r1, [pc, #64]	; (8005e3c <Check_Bootcount+0x94>)
 8005dfa:	a88d      	add	r0, sp, #564	; 0x234
 8005dfc:	f7ff fcf6 	bl	80057ec <f_printf>
    f_close(&filew);
 8005e00:	a88d      	add	r0, sp, #564	; 0x234
 8005e02:	f7ff fa62 	bl	80052ca <f_close>
    return bootcount;
 8005e06:	e7ed      	b.n	8005de4 <Check_Bootcount+0x3c>
        f_gets((TCHAR *)buff, 4	, &filer);
 8005e08:	2104      	movs	r1, #4
 8005e0a:	aa02      	add	r2, sp, #8
 8005e0c:	eb0d 0001 	add.w	r0, sp, r1
 8005e10:	f7ff fca5 	bl	800575e <f_gets>
        bootcount = atoi(buff);
 8005e14:	a801      	add	r0, sp, #4
 8005e16:	f000 fecc 	bl	8006bb2 <atoi>
        bootcount++;
 8005e1a:	1c44      	adds	r4, r0, #1
        f_close(&filer);
 8005e1c:	a802      	add	r0, sp, #8
 8005e1e:	f7ff fa54 	bl	80052ca <f_close>
        res = f_open(&filew, "CONFIG/BOOTCNT.TXT", FA_CREATE_ALWAYS | FA_WRITE );
 8005e22:	220a      	movs	r2, #10
 8005e24:	4902      	ldr	r1, [pc, #8]	; (8005e30 <Check_Bootcount+0x88>)
 8005e26:	a88d      	add	r0, sp, #564	; 0x234
 8005e28:	f7fe ff42 	bl	8004cb0 <f_open>
 8005e2c:	e7e3      	b.n	8005df6 <Check_Bootcount+0x4e>
 8005e2e:	bf00      	nop
 8005e30:	08007ed3 	.word	0x08007ed3
 8005e34:	08007ee6 	.word	0x08007ee6
 8005e38:	08007eed 	.word	0x08007eed
 8005e3c:	08007f00 	.word	0x08007f00

08005e40 <Config_Logdir>:
{
 8005e40:	b513      	push	{r0, r1, r4, lr}
	bootcount = Check_Bootcount();
 8005e42:	f7ff ffb1 	bl	8005da8 <Check_Bootcount>
	if ( bootcount < 0 ) {
 8005e46:	1e04      	subs	r4, r0, #0
 8005e48:	da18      	bge.n	8005e7c <Config_Logdir+0x3c>
		xprintf("bootcount check failure!\n");
 8005e4a:	4813      	ldr	r0, [pc, #76]	; (8005e98 <Config_Logdir+0x58>)
 8005e4c:	f000 fe7a 	bl	8006b44 <xprintf>
		sprintf(logdir, "LOG");
 8005e50:	4912      	ldr	r1, [pc, #72]	; (8005e9c <Config_Logdir+0x5c>)
 8005e52:	4668      	mov	r0, sp
 8005e54:	f001 f82e 	bl	8006eb4 <strcpy>
		xprintf("log directory was set to \"LOG\" \n");
 8005e58:	4811      	ldr	r0, [pc, #68]	; (8005ea0 <Config_Logdir+0x60>)
 8005e5a:	f000 fe73 	bl	8006b44 <xprintf>
	f_mkdir(logdir);
 8005e5e:	4668      	mov	r0, sp
 8005e60:	f7ff fb93 	bl	800558a <f_mkdir>
	sprintf(dir_syslog, "LOG_%03d/SYSLOG.TXT", bootcount);
 8005e64:	4622      	mov	r2, r4
 8005e66:	490f      	ldr	r1, [pc, #60]	; (8005ea4 <Config_Logdir+0x64>)
 8005e68:	480f      	ldr	r0, [pc, #60]	; (8005ea8 <Config_Logdir+0x68>)
 8005e6a:	f000 ffff 	bl	8006e6c <siprintf>
	sprintf(dir_datlog, "LOG_%03d/DATLOG.CSV", bootcount);
 8005e6e:	4622      	mov	r2, r4
 8005e70:	490e      	ldr	r1, [pc, #56]	; (8005eac <Config_Logdir+0x6c>)
 8005e72:	480f      	ldr	r0, [pc, #60]	; (8005eb0 <Config_Logdir+0x70>)
 8005e74:	f000 fffa 	bl	8006e6c <siprintf>
}
 8005e78:	b002      	add	sp, #8
 8005e7a:	bd10      	pop	{r4, pc}
		xprintf("bootcount is %d\n", bootcount);
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	480d      	ldr	r0, [pc, #52]	; (8005eb4 <Config_Logdir+0x74>)
 8005e80:	f000 fe60 	bl	8006b44 <xprintf>
		sprintf(logdir, "LOG_%03d", bootcount);
 8005e84:	4622      	mov	r2, r4
 8005e86:	490c      	ldr	r1, [pc, #48]	; (8005eb8 <Config_Logdir+0x78>)
 8005e88:	4668      	mov	r0, sp
 8005e8a:	f000 ffef 	bl	8006e6c <siprintf>
		xprintf("log directory was set to \"LOG_%03d\"\n", bootcount);
 8005e8e:	4621      	mov	r1, r4
 8005e90:	480a      	ldr	r0, [pc, #40]	; (8005ebc <Config_Logdir+0x7c>)
 8005e92:	f000 fe57 	bl	8006b44 <xprintf>
 8005e96:	e7e2      	b.n	8005e5e <Config_Logdir+0x1e>
 8005e98:	08007f03 	.word	0x08007f03
 8005e9c:	08007f1d 	.word	0x08007f1d
 8005ea0:	08007f21 	.word	0x08007f21
 8005ea4:	08007f81 	.word	0x08007f81
 8005ea8:	2000005c 	.word	0x2000005c
 8005eac:	08007f95 	.word	0x08007f95
 8005eb0:	20000048 	.word	0x20000048
 8005eb4:	08007f42 	.word	0x08007f42
 8005eb8:	08007f53 	.word	0x08007f53
 8005ebc:	08007f5c 	.word	0x08007f5c

08005ec0 <Init_LoggerSystem>:
{
 8005ec0:	b538      	push	{r3, r4, r5, lr}
	HAL_TIM_Base_Start(&htim2);
 8005ec2:	4829      	ldr	r0, [pc, #164]	; (8005f68 <Init_LoggerSystem+0xa8>)
	LPS22HB_GetHandle(&lps22hb, &hi2c1);
 8005ec4:	4c29      	ldr	r4, [pc, #164]	; (8005f6c <Init_LoggerSystem+0xac>)
 8005ec6:	4d2a      	ldr	r5, [pc, #168]	; (8005f70 <Init_LoggerSystem+0xb0>)
	HAL_TIM_Base_Start(&htim2);
 8005ec8:	f7fc f916 	bl	80020f8 <HAL_TIM_Base_Start>
	Config_OnePulseDelayTime(TRIG_TIME);
 8005ecc:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
 8005ed0:	f7ff ff36 	bl	8005d40 <Config_OnePulseDelayTime>
	Config_Logdir();
 8005ed4:	f7ff ffb4 	bl	8005e40 <Config_Logdir>
	FlightInfo.d_pos = 0;
 8005ed8:	4b26      	ldr	r3, [pc, #152]	; (8005f74 <Init_LoggerSystem+0xb4>)
 8005eda:	2200      	movs	r2, #0
	LPS22HB_GetHandle(&lps22hb, &hi2c1);
 8005edc:	4629      	mov	r1, r5
 8005ede:	4620      	mov	r0, r4
	FlightInfo.d_pos = 0;
 8005ee0:	705a      	strb	r2, [r3, #1]
	FlightInfo.d_num = 0;
 8005ee2:	605a      	str	r2, [r3, #4]
	LPS22HB_GetHandle(&lps22hb, &hi2c1);
 8005ee4:	f7ff fdaf 	bl	8005a46 <LPS22HB_GetHandle>
	LPS22HB_SetAddress(&lps22hb, LPS22HB_Address_L);
 8005ee8:	4620      	mov	r0, r4
 8005eea:	21b8      	movs	r1, #184	; 0xb8
 8005eec:	f7ff fdad 	bl	8005a4a <LPS22HB_SetAddress>
	lpsres = LPS22HB_Init(&lps22hb, LPS22HB_ODR_75HZ);
 8005ef0:	2150      	movs	r1, #80	; 0x50
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f7ff fe39 	bl	8005b6a <LPS22HB_Init>
	xprintf("[lps22hb] status %d\n",  (int)lpsres );
 8005ef8:	4601      	mov	r1, r0
 8005efa:	481f      	ldr	r0, [pc, #124]	; (8005f78 <Init_LoggerSystem+0xb8>)
 8005efc:	f000 fe22 	bl	8006b44 <xprintf>
	lpsres = LPS22HB_SetLPF(&lps22hb, LPS22HB_LPF_BW9);
 8005f00:	2108      	movs	r1, #8
 8005f02:	4620      	mov	r0, r4
 8005f04:	f7ff fe5a 	bl	8005bbc <LPS22HB_SetLPF>
	MPU9250_GetHandle(&mpu9250, &hi2c1);
 8005f08:	4c1c      	ldr	r4, [pc, #112]	; (8005f7c <Init_LoggerSystem+0xbc>)
	xprintf("[lps22hb] set lpf bw9 (stat:%d)\n",  (int)lpsres );
 8005f0a:	4601      	mov	r1, r0
 8005f0c:	481c      	ldr	r0, [pc, #112]	; (8005f80 <Init_LoggerSystem+0xc0>)
 8005f0e:	f000 fe19 	bl	8006b44 <xprintf>
	MPU9250_GetHandle(&mpu9250, &hi2c1);
 8005f12:	4629      	mov	r1, r5
 8005f14:	4620      	mov	r0, r4
 8005f16:	f7fd f872 	bl	8002ffe <MPU9250_GetHandle>
	MPU9250_SetAddress(&mpu9250, MPU9250_Address_H);
 8005f1a:	2169      	movs	r1, #105	; 0x69
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	f7fd f870 	bl	8003002 <MPU9250_SetAddress>
	mpures = MPU9250_begin(&mpu9250);
 8005f22:	4620      	mov	r0, r4
 8005f24:	f7fd f8b2 	bl	800308c <MPU9250_begin>
	xprintf("[mpu9250] status 0x%x\n",  mpures );
 8005f28:	4601      	mov	r1, r0
 8005f2a:	4816      	ldr	r0, [pc, #88]	; (8005f84 <Init_LoggerSystem+0xc4>)
 8005f2c:	f000 fe0a 	bl	8006b44 <xprintf>
	MPU9250_setSensors(&mpu9250, INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS); // Enable all sensors
 8005f30:	2179      	movs	r1, #121	; 0x79
 8005f32:	4620      	mov	r0, r4
 8005f34:	f7fd f8ca 	bl	80030cc <MPU9250_setSensors>
	MPU9250_setGyroFSR(&mpu9250, 2000); // Set gyro to 2000 dps
 8005f38:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f7fd f87b 	bl	8003038 <MPU9250_setGyroFSR>
	MPU9250_setAccelFSR(&mpu9250, 16); // Set accel to +/-16g
 8005f42:	2110      	movs	r1, #16
 8005f44:	4620      	mov	r0, r4
 8005f46:	f7fd f892 	bl	800306e <MPU9250_setAccelFSR>
	MPU9250_setLPF(&mpu9250, 98); // Set LPF corner frequency to 5Hz
 8005f4a:	2162      	movs	r1, #98	; 0x62
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f7fd f85a 	bl	8003006 <MPU9250_setLPF>
	MPU9250_setSampleRate(&mpu9250, 100); // Set sample rate to 10Hz
 8005f52:	2164      	movs	r1, #100	; 0x64
 8005f54:	4620      	mov	r0, r4
 8005f56:	f7fd f859 	bl	800300c <MPU9250_setSampleRate>
	MPU9250_setCompassSampleRate(&mpu9250, 100); // Set mag rate to 100Hz
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	2164      	movs	r1, #100	; 0x64
}
 8005f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	MPU9250_setCompassSampleRate(&mpu9250, 100); // Set mag rate to 100Hz
 8005f62:	f7fd b856 	b.w	8003012 <MPU9250_setCompassSampleRate>
 8005f66:	bf00      	nop
 8005f68:	20002240 	.word	0x20002240
 8005f6c:	200021c4 	.word	0x200021c4
 8005f70:	200009fc 	.word	0x200009fc
 8005f74:	20000a48 	.word	0x20000a48
 8005f78:	08007ffe 	.word	0x08007ffe
 8005f7c:	2000099c 	.word	0x2000099c
 8005f80:	08008013 	.word	0x08008013
 8005f84:	08008034 	.word	0x08008034

08005f88 <HAL_GPIO_EXTI_Callback>:
	if( GPIO_Pin == GPIO_PIN_7 ) {
 8005f88:	2880      	cmp	r0, #128	; 0x80
{
 8005f8a:	b510      	push	{r4, lr}
	if( GPIO_Pin == GPIO_PIN_7 ) {
 8005f8c:	d11a      	bne.n	8005fc4 <HAL_GPIO_EXTI_Callback+0x3c>
		if( FlightInfo.status <= Rocket_OnGround ) {
 8005f8e:	4c0e      	ldr	r4, [pc, #56]	; (8005fc8 <HAL_GPIO_EXTI_Callback+0x40>)
 8005f90:	7823      	ldrb	r3, [r4, #0]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d816      	bhi.n	8005fc4 <HAL_GPIO_EXTI_Callback+0x3c>
			HAL_TIM_Base_Start_IT(&htim16);
 8005f96:	480d      	ldr	r0, [pc, #52]	; (8005fcc <HAL_GPIO_EXTI_Callback+0x44>)
 8005f98:	f7fc f8bb 	bl	8002112 <HAL_TIM_Base_Start_IT>
			FlightInfo.status = Rocket_Launched;
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	7023      	strb	r3, [r4, #0]
			FlightInfo.counter = 0;
 8005fa0:	f241 4308 	movw	r3, #5128	; 0x1408
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	50e2      	str	r2, [r4, r3]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8005fa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fac:	2201      	movs	r2, #1
 8005fae:	4808      	ldr	r0, [pc, #32]	; (8005fd0 <HAL_GPIO_EXTI_Callback+0x48>)
 8005fb0:	f7fa fcaa 	bl	8000908 <HAL_GPIO_WritePin>
			xprintf("Trigger pin was separated!\n");
 8005fb4:	4807      	ldr	r0, [pc, #28]	; (8005fd4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8005fb6:	f000 fdc5 	bl	8006b44 <xprintf>
			xprintf("Release timer count down start\n");
 8005fba:	4807      	ldr	r0, [pc, #28]	; (8005fd8 <HAL_GPIO_EXTI_Callback+0x50>)
}
 8005fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			xprintf("Release timer count down start\n");
 8005fc0:	f000 bdc0 	b.w	8006b44 <xprintf>
 8005fc4:	bd10      	pop	{r4, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20000a48 	.word	0x20000a48
 8005fcc:	20002280 	.word	0x20002280
 8005fd0:	48000800 	.word	0x48000800
 8005fd4:	08007fa9 	.word	0x08007fa9
 8005fd8:	08007fc5 	.word	0x08007fc5

08005fdc <Trigger_ReleaseSystem>:
{
 8005fdc:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005fe4:	4806      	ldr	r0, [pc, #24]	; (8006000 <Trigger_ReleaseSystem+0x24>)
 8005fe6:	f7fa fc8f 	bl	8000908 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8005fea:	4806      	ldr	r0, [pc, #24]	; (8006004 <Trigger_ReleaseSystem+0x28>)
 8005fec:	2201      	movs	r2, #1
 8005fee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ff2:	f7fa fc89 	bl	8000908 <HAL_GPIO_WritePin>
	xprintf("Release system triggered\n");
 8005ff6:	4804      	ldr	r0, [pc, #16]	; (8006008 <Trigger_ReleaseSystem+0x2c>)
}
 8005ff8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	xprintf("Release system triggered\n");
 8005ffc:	f000 bda2 	b.w	8006b44 <xprintf>
 8006000:	48000800 	.word	0x48000800
 8006004:	48000400 	.word	0x48000400
 8006008:	0800804b 	.word	0x0800804b

0800600c <HAL_TIM_OC_DelayElapsedCallback>:
{
 800600c:	b508      	push	{r3, lr}
	if( htim->Instance == TIM16) {
 800600e:	6801      	ldr	r1, [r0, #0]
	uint32_t time = TIM16->CNT;
 8006010:	4b06      	ldr	r3, [pc, #24]	; (800602c <HAL_TIM_OC_DelayElapsedCallback+0x20>)
	if( htim->Instance == TIM16) {
 8006012:	4299      	cmp	r1, r3
	uint32_t time = TIM16->CNT;
 8006014:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	if( htim->Instance == TIM16) {
 8006016:	d107      	bne.n	8006028 <HAL_TIM_OC_DelayElapsedCallback+0x1c>
		if( time != 0) {
 8006018:	b132      	cbz	r2, 8006028 <HAL_TIM_OC_DelayElapsedCallback+0x1c>
			Trigger_ReleaseSystem();
 800601a:	f7ff ffdf 	bl	8005fdc <Trigger_ReleaseSystem>
			xprintf("Initiate release system\n");
 800601e:	4804      	ldr	r0, [pc, #16]	; (8006030 <HAL_TIM_OC_DelayElapsedCallback+0x24>)
}
 8006020:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			xprintf("Initiate release system\n");
 8006024:	f000 bd8e 	b.w	8006b44 <xprintf>
 8006028:	bd08      	pop	{r3, pc}
 800602a:	bf00      	nop
 800602c:	40014400 	.word	0x40014400
 8006030:	08007fe5 	.word	0x08007fe5

08006034 <open_append>:
 */
FRESULT open_append(
	    FIL* fp,            /* [OUT] File object to create */
	    const char* path    /* [IN]  File name to be opened */
		)
{
 8006034:	b538      	push	{r3, r4, r5, lr}
    FRESULT fr;

    /* Opens an existing file. If not exist, creates a new file. */
    fr = f_open(fp, path, FA_WRITE | FA_OPEN_ALWAYS);
 8006036:	2212      	movs	r2, #18
{
 8006038:	4605      	mov	r5, r0
    fr = f_open(fp, path, FA_WRITE | FA_OPEN_ALWAYS);
 800603a:	f7fe fe39 	bl	8004cb0 <f_open>
    if (fr == FR_OK) {
 800603e:	4604      	mov	r4, r0
 8006040:	b948      	cbnz	r0, 8006056 <open_append+0x22>
        /* Seek to end of the file to append data */
        fr = f_lseek(fp, f_size(fp));
 8006042:	f8d5 120c 	ldr.w	r1, [r5, #524]	; 0x20c
 8006046:	4628      	mov	r0, r5
 8006048:	f7ff f950 	bl	80052ec <f_lseek>
        if (fr != FR_OK)
 800604c:	4604      	mov	r4, r0
 800604e:	b110      	cbz	r0, 8006056 <open_append+0x22>
            f_close(fp);
 8006050:	4628      	mov	r0, r5
 8006052:	f7ff f93a 	bl	80052ca <f_close>
    }
    return fr;
}
 8006056:	4620      	mov	r0, r4
 8006058:	bd38      	pop	{r3, r4, r5, pc}
	...

0800605c <main>:
{
 800605c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006060:	ed2d 8b0a 	vpush	{d8-d12}
 8006064:	f2ad 4da4 	subw	sp, sp, #1188	; 0x4a4
  char wbuff[256] = {}; /* File write buffer */
 8006068:	2100      	movs	r1, #0
 800606a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800606e:	a81d      	add	r0, sp, #116	; 0x74
 8006070:	f000 fdd3 	bl	8006c1a <memset>
  xdev_out(uart_putc);
 8006074:	4b9b      	ldr	r3, [pc, #620]	; (80062e4 <main+0x288>)
 8006076:	4a9c      	ldr	r2, [pc, #624]	; (80062e8 <main+0x28c>)
 8006078:	601a      	str	r2, [r3, #0]
  xdev_in(uart_getc);
 800607a:	4b9c      	ldr	r3, [pc, #624]	; (80062ec <main+0x290>)
 800607c:	4a9c      	ldr	r2, [pc, #624]	; (80062f0 <main+0x294>)
 800607e:	601a      	str	r2, [r3, #0]
  HAL_Init();
 8006080:	f7fa faca 	bl	8000618 <HAL_Init>
  SystemClock_Config();
 8006084:	f7ff fe10 	bl	8005ca8 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006088:	4b9a      	ldr	r3, [pc, #616]	; (80062f4 <main+0x298>)
 800608a:	695a      	ldr	r2, [r3, #20]
 800608c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006090:	615a      	str	r2, [r3, #20]
 8006092:	695a      	ldr	r2, [r3, #20]
 8006094:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8006098:	921a      	str	r2, [sp, #104]	; 0x68
 800609a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800609c:	695a      	ldr	r2, [r3, #20]
 800609e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80060a2:	615a      	str	r2, [r3, #20]
 80060a4:	695a      	ldr	r2, [r3, #20]
 80060a6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80060aa:	921b      	str	r2, [sp, #108]	; 0x6c
 80060ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80060ae:	695a      	ldr	r2, [r3, #20]
 80060b0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80060b4:	615a      	str	r2, [r3, #20]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060bc:	931c      	str	r3, [sp, #112]	; 0x70
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80060be:	2200      	movs	r2, #0
 80060c0:	2110      	movs	r1, #16
 80060c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80060c6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80060c8:	f7fa fc1e 	bl	8000908 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin 
 80060cc:	2200      	movs	r2, #0
 80060ce:	f24f 0180 	movw	r1, #61568	; 0xf080
 80060d2:	4889      	ldr	r0, [pc, #548]	; (80062f8 <main+0x29c>)
 80060d4:	f7fa fc18 	bl	8000908 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, BUZZ_Pin|TRIG_Pin, GPIO_PIN_RESET);
 80060d8:	2200      	movs	r2, #0
 80060da:	f44f 7140 	mov.w	r1, #768	; 0x300
 80060de:	4887      	ldr	r0, [pc, #540]	; (80062fc <main+0x2a0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060e0:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOC, BUZZ_Pin|TRIG_Pin, GPIO_PIN_RESET);
 80060e2:	f7fa fc11 	bl	8000908 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060e6:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80060e8:	2310      	movs	r3, #16
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060ea:	a99d      	add	r1, sp, #628	; 0x274
 80060ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80060f0:	939d      	str	r3, [sp, #628]	; 0x274
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060f2:	959e      	str	r5, [sp, #632]	; 0x278
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060f4:	949f      	str	r4, [sp, #636]	; 0x27c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060f6:	94a0      	str	r4, [sp, #640]	; 0x280
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060f8:	f7fa fb36 	bl	8000768 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin 
 80060fc:	f24f 0380 	movw	r3, #61568	; 0xf080
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006100:	a99d      	add	r1, sp, #628	; 0x274
 8006102:	487d      	ldr	r0, [pc, #500]	; (80062f8 <main+0x29c>)
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin 
 8006104:	939d      	str	r3, [sp, #628]	; 0x274
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006106:	959e      	str	r5, [sp, #632]	; 0x278
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006108:	949f      	str	r4, [sp, #636]	; 0x27c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800610a:	94a0      	str	r4, [sp, #640]	; 0x280
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800610c:	f7fa fb2c 	bl	8000768 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FPIN_Pin;
 8006110:	2380      	movs	r3, #128	; 0x80
 8006112:	939d      	str	r3, [sp, #628]	; 0x274
  HAL_GPIO_Init(FPIN_GPIO_Port, &GPIO_InitStruct);
 8006114:	a99d      	add	r1, sp, #628	; 0x274
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006116:	4b7a      	ldr	r3, [pc, #488]	; (8006300 <main+0x2a4>)
  HAL_GPIO_Init(FPIN_GPIO_Port, &GPIO_InitStruct);
 8006118:	4878      	ldr	r0, [pc, #480]	; (80062fc <main+0x2a0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800611a:	939e      	str	r3, [sp, #632]	; 0x278
  GPIO_InitStruct.Pin = BUZZ_Pin|TRIG_Pin;
 800611c:	f44f 7840 	mov.w	r8, #768	; 0x300
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006120:	949f      	str	r4, [sp, #636]	; 0x27c
  HAL_GPIO_Init(FPIN_GPIO_Port, &GPIO_InitStruct);
 8006122:	f7fa fb21 	bl	8000768 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006126:	a99d      	add	r1, sp, #628	; 0x274
 8006128:	4874      	ldr	r0, [pc, #464]	; (80062fc <main+0x2a0>)
  GPIO_InitStruct.Pin = BUZZ_Pin|TRIG_Pin;
 800612a:	f8cd 8274 	str.w	r8, [sp, #628]	; 0x274
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800612e:	959e      	str	r5, [sp, #632]	; 0x278
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006130:	949f      	str	r4, [sp, #636]	; 0x27c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006132:	94a0      	str	r4, [sp, #640]	; 0x280
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006134:	f7fa fb18 	bl	8000768 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006138:	2302      	movs	r3, #2
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800613a:	2718      	movs	r7, #24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800613c:	939e      	str	r3, [sp, #632]	; 0x278
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800613e:	2607      	movs	r6, #7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006140:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006142:	a99d      	add	r1, sp, #628	; 0x274
 8006144:	486c      	ldr	r0, [pc, #432]	; (80062f8 <main+0x29c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006146:	93a0      	str	r3, [sp, #640]	; 0x280
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8006148:	979d      	str	r7, [sp, #628]	; 0x274
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800614a:	949f      	str	r4, [sp, #636]	; 0x27c
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800614c:	96a1      	str	r6, [sp, #644]	; 0x284
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800614e:	f7fa fb0b 	bl	8000768 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006152:	4622      	mov	r2, r4
 8006154:	4621      	mov	r1, r4
 8006156:	2017      	movs	r0, #23
 8006158:	f7fa faa0 	bl	800069c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800615c:	2017      	movs	r0, #23
 800615e:	f7fa fad1 	bl	8000704 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 8006162:	4868      	ldr	r0, [pc, #416]	; (8006304 <main+0x2a8>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006164:	4b68      	ldr	r3, [pc, #416]	; (8006308 <main+0x2ac>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006166:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006168:	f44f 7e82 	mov.w	lr, #260	; 0x104
 800616c:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006170:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006174:	6183      	str	r3, [r0, #24]
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006176:	2308      	movs	r3, #8
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8006178:	f8c0 800c 	str.w	r8, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800617c:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800617e:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006180:	61c7      	str	r7, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006182:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006184:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006186:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006188:	62c6      	str	r6, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800618a:	6304      	str	r4, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800618c:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800618e:	f7fb ff5e 	bl	800204e <HAL_SPI_Init>
 8006192:	b100      	cbz	r0, 8006196 <main+0x13a>
 8006194:	e7fe      	b.n	8006194 <main+0x138>
  huart1.Instance = USART1;
 8006196:	4b5d      	ldr	r3, [pc, #372]	; (800630c <main+0x2b0>)
  huart1.Init.BaudRate = 115200;
 8006198:	4a5d      	ldr	r2, [pc, #372]	; (8006310 <main+0x2b4>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800619a:	6098      	str	r0, [r3, #8]
  huart1.Init.BaudRate = 115200;
 800619c:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
 80061a0:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80061a2:	6118      	str	r0, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80061a4:	240c      	movs	r4, #12
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80061a6:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80061a8:	61d8      	str	r0, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80061aa:	6218      	str	r0, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80061ac:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80061ae:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 115200;
 80061b0:	e883 0044 	stmia.w	r3, {r2, r6}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80061b4:	615c      	str	r4, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80061b6:	f7fc fef0 	bl	8002f9a <HAL_UART_Init>
 80061ba:	b100      	cbz	r0, 80061be <main+0x162>
 80061bc:	e7fe      	b.n	80061bc <main+0x160>
  huart4.Instance = UART4;
 80061be:	4b55      	ldr	r3, [pc, #340]	; (8006314 <main+0x2b8>)
 80061c0:	4a55      	ldr	r2, [pc, #340]	; (8006318 <main+0x2bc>)
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80061c2:	6098      	str	r0, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80061c4:	60d8      	str	r0, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80061c6:	6118      	str	r0, [r3, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80061c8:	6198      	str	r0, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80061ca:	61d8      	str	r0, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80061cc:	6218      	str	r0, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80061ce:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80061d0:	4618      	mov	r0, r3
  huart4.Init.BaudRate = 115200;
 80061d2:	e883 0044 	stmia.w	r3, {r2, r6}
  huart4.Init.Mode = UART_MODE_TX_RX;
 80061d6:	615c      	str	r4, [r3, #20]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80061d8:	f7fc fedf 	bl	8002f9a <HAL_UART_Init>
 80061dc:	b100      	cbz	r0, 80061e0 <main+0x184>
 80061de:	e7fe      	b.n	80061de <main+0x182>
  hi2c1.Instance = I2C1;
 80061e0:	4c4e      	ldr	r4, [pc, #312]	; (800631c <main+0x2c0>)
  hi2c1.Init.Timing = 0x0000020B;
 80061e2:	4b4f      	ldr	r3, [pc, #316]	; (8006320 <main+0x2c4>)
  hi2c1.Init.OwnAddress1 = 0;
 80061e4:	60a0      	str	r0, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80061e6:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80061e8:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80061ea:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80061ec:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80061ee:	6220      	str	r0, [r4, #32]
  hi2c1.Init.Timing = 0x0000020B;
 80061f0:	f240 260b 	movw	r6, #523	; 0x20b
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80061f4:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x0000020B;
 80061f6:	e884 0048 	stmia.w	r4, {r3, r6}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80061fa:	60e5      	str	r5, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80061fc:	f7fa fd10 	bl	8000c20 <HAL_I2C_Init>
 8006200:	4601      	mov	r1, r0
 8006202:	b100      	cbz	r0, 8006206 <main+0x1aa>
 8006204:	e7fe      	b.n	8006204 <main+0x1a8>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006206:	4620      	mov	r0, r4
 8006208:	f7fb f88d 	bl	8001326 <HAL_I2CEx_ConfigAnalogFilter>
 800620c:	4601      	mov	r1, r0
 800620e:	b100      	cbz	r0, 8006212 <main+0x1b6>
 8006210:	e7fe      	b.n	8006210 <main+0x1b4>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006212:	4620      	mov	r0, r4
 8006214:	f7fb f8ad 	bl	8001372 <HAL_I2CEx_ConfigDigitalFilter>
 8006218:	4605      	mov	r5, r0
 800621a:	b100      	cbz	r0, 800621e <main+0x1c2>
 800621c:	e7fe      	b.n	800621c <main+0x1c0>
  htim2.Instance = TIM2;
 800621e:	4c41      	ldr	r4, [pc, #260]	; (8006324 <main+0x2c8>)
  MX_FATFS_Init();
 8006220:	f7ff fd08 	bl	8005c34 <MX_FATFS_Init>
  htim2.Init.Prescaler = 71;
 8006224:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006228:	2347      	movs	r3, #71	; 0x47
 800622a:	e884 0009 	stmia.w	r4, {r0, r3}
  htim2.Init.Period = 4294967295;
 800622e:	f04f 33ff 	mov.w	r3, #4294967295
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006232:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006234:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = 4294967295;
 8006236:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006238:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800623a:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800623c:	f7fc f8cc 	bl	80023d8 <HAL_TIM_Base_Init>
 8006240:	b100      	cbz	r0, 8006244 <main+0x1e8>
 8006242:	e7fe      	b.n	8006242 <main+0x1e6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006248:	a99d      	add	r1, sp, #628	; 0x274
 800624a:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800624c:	939d      	str	r3, [sp, #628]	; 0x274
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800624e:	f7fc fa4b 	bl	80026e8 <HAL_TIM_ConfigClockSource>
 8006252:	b100      	cbz	r0, 8006256 <main+0x1fa>
 8006254:	e7fe      	b.n	8006254 <main+0x1f8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006256:	905d      	str	r0, [sp, #372]	; 0x174
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006258:	905f      	str	r0, [sp, #380]	; 0x17c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800625a:	a95d      	add	r1, sp, #372	; 0x174
 800625c:	4620      	mov	r0, r4
 800625e:	f7fc fba1 	bl	80029a4 <HAL_TIMEx_MasterConfigSynchronization>
 8006262:	b100      	cbz	r0, 8006266 <main+0x20a>
 8006264:	e7fe      	b.n	8006264 <main+0x208>
  htim3.Instance = TIM3;
 8006266:	4b30      	ldr	r3, [pc, #192]	; (8006328 <main+0x2cc>)
  htim3.Init.Prescaler = 72;
 8006268:	4930      	ldr	r1, [pc, #192]	; (800632c <main+0x2d0>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800626a:	6098      	str	r0, [r3, #8]
  htim3.Init.Prescaler = 72;
 800626c:	2248      	movs	r2, #72	; 0x48
 800626e:	e883 0006 	stmia.w	r3, {r1, r2}
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006272:	6118      	str	r0, [r3, #16]
  htim3.Init.Period = 19999;
 8006274:	f644 621f 	movw	r2, #19999	; 0x4e1f
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006278:	6198      	str	r0, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800627a:	4618      	mov	r0, r3
  htim3.Init.Period = 19999;
 800627c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800627e:	f7fc f8ab 	bl	80023d8 <HAL_TIM_Base_Init>
 8006282:	b100      	cbz	r0, 8006286 <main+0x22a>
 8006284:	e7fe      	b.n	8006284 <main+0x228>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800628a:	a99d      	add	r1, sp, #628	; 0x274
 800628c:	4826      	ldr	r0, [pc, #152]	; (8006328 <main+0x2cc>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800628e:	939d      	str	r3, [sp, #628]	; 0x274
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006290:	f7fc fa2a 	bl	80026e8 <HAL_TIM_ConfigClockSource>
 8006294:	b100      	cbz	r0, 8006298 <main+0x23c>
 8006296:	e7fe      	b.n	8006296 <main+0x23a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006298:	905d      	str	r0, [sp, #372]	; 0x174
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800629a:	905f      	str	r0, [sp, #380]	; 0x17c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800629c:	a95d      	add	r1, sp, #372	; 0x174
 800629e:	4822      	ldr	r0, [pc, #136]	; (8006328 <main+0x2cc>)
 80062a0:	f7fc fb80 	bl	80029a4 <HAL_TIMEx_MasterConfigSynchronization>
 80062a4:	b100      	cbz	r0, 80062a8 <main+0x24c>
 80062a6:	e7fe      	b.n	80062a6 <main+0x24a>
  htim16.Instance = TIM16;
 80062a8:	4c21      	ldr	r4, [pc, #132]	; (8006330 <main+0x2d4>)
  htim16.Init.Prescaler = 35999;
 80062aa:	4a22      	ldr	r2, [pc, #136]	; (8006334 <main+0x2d8>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062ac:	60a0      	str	r0, [r4, #8]
  htim16.Init.Prescaler = 35999;
 80062ae:	f648 439f 	movw	r3, #35999	; 0x8c9f
  htim16.Init.Period = 1999;
 80062b2:	f240 75cf 	movw	r5, #1999	; 0x7cf
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062b6:	6120      	str	r0, [r4, #16]
  htim16.Init.RepetitionCounter = 0;
 80062b8:	6160      	str	r0, [r4, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062ba:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80062bc:	4620      	mov	r0, r4
  htim16.Init.Prescaler = 35999;
 80062be:	e884 000c 	stmia.w	r4, {r2, r3}
  htim16.Init.Period = 1999;
 80062c2:	60e5      	str	r5, [r4, #12]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80062c4:	f7fc f888 	bl	80023d8 <HAL_TIM_Base_Init>
 80062c8:	b100      	cbz	r0, 80062cc <main+0x270>
 80062ca:	e7fe      	b.n	80062ca <main+0x26e>
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 80062cc:	4620      	mov	r0, r4
 80062ce:	f7fc f89d 	bl	800240c <HAL_TIM_OC_Init>
 80062d2:	b100      	cbz	r0, 80062d6 <main+0x27a>
 80062d4:	e7fe      	b.n	80062d4 <main+0x278>
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80062d6:	2108      	movs	r1, #8
 80062d8:	4620      	mov	r0, r4
 80062da:	f7fc f8b1 	bl	8002440 <HAL_TIM_OnePulse_Init>
 80062de:	4602      	mov	r2, r0
 80062e0:	b350      	cbz	r0, 8006338 <main+0x2dc>
 80062e2:	e7fe      	b.n	80062e2 <main+0x286>
 80062e4:	200022c4 	.word	0x200022c4
 80062e8:	08005c89 	.word	0x08005c89
 80062ec:	200022c0 	.word	0x200022c0
 80062f0:	08005c69 	.word	0x08005c69
 80062f4:	40021000 	.word	0x40021000
 80062f8:	48000400 	.word	0x48000400
 80062fc:	48000800 	.word	0x48000800
 8006300:	10110000 	.word	0x10110000
 8006304:	200021dc 	.word	0x200021dc
 8006308:	40013000 	.word	0x40013000
 800630c:	200020c0 	.word	0x200020c0
 8006310:	40013800 	.word	0x40013800
 8006314:	20002154 	.word	0x20002154
 8006318:	40004c00 	.word	0x40004c00
 800631c:	200009fc 	.word	0x200009fc
 8006320:	40005400 	.word	0x40005400
 8006324:	20002240 	.word	0x20002240
 8006328:	20001e54 	.word	0x20001e54
 800632c:	40000400 	.word	0x40000400
 8006330:	20002280 	.word	0x20002280
 8006334:	40014400 	.word	0x40014400
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8006338:	2310      	movs	r3, #16
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800633a:	905f      	str	r0, [sp, #380]	; 0x17c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800633c:	9060      	str	r0, [sp, #384]	; 0x180
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800633e:	9061      	str	r0, [sp, #388]	; 0x184
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006340:	9062      	str	r0, [sp, #392]	; 0x188
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006342:	9063      	str	r0, [sp, #396]	; 0x18c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006344:	a95d      	add	r1, sp, #372	; 0x174
 8006346:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8006348:	935d      	str	r3, [sp, #372]	; 0x174
  sConfigOC.Pulse = 1999;
 800634a:	955e      	str	r5, [sp, #376]	; 0x178
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800634c:	f7fc faf2 	bl	8002934 <HAL_TIM_OC_ConfigChannel>
 8006350:	b100      	cbz	r0, 8006354 <main+0x2f8>
 8006352:	e7fe      	b.n	8006352 <main+0x2f6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006354:	909d      	str	r0, [sp, #628]	; 0x274
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006356:	909e      	str	r0, [sp, #632]	; 0x278
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006358:	909f      	str	r0, [sp, #636]	; 0x27c
  sBreakDeadTimeConfig.DeadTime = 0;
 800635a:	90a0      	str	r0, [sp, #640]	; 0x280
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800635c:	90a1      	str	r0, [sp, #644]	; 0x284
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800635e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.BreakFilter = 0;
 8006362:	90a3      	str	r0, [sp, #652]	; 0x28c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006364:	90a7      	str	r0, [sp, #668]	; 0x29c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8006366:	a99d      	add	r1, sp, #628	; 0x274
 8006368:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800636a:	93a2      	str	r3, [sp, #648]	; 0x288
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800636c:	f7fc fb44 	bl	80029f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8006370:	4605      	mov	r5, r0
 8006372:	b100      	cbz	r0, 8006376 <main+0x31a>
 8006374:	e7fe      	b.n	8006374 <main+0x318>
  hrtc.Instance = RTC;
 8006376:	4cb0      	ldr	r4, [pc, #704]	; (8006638 <main+0x5dc>)
 8006378:	4bb0      	ldr	r3, [pc, #704]	; (800663c <main+0x5e0>)
 800637a:	6023      	str	r3, [r4, #0]
if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 800637c:	4601      	mov	r1, r0
 800637e:	4620      	mov	r0, r4
 8006380:	f7fb fe60 	bl	8002044 <HAL_RTCEx_BKUPRead>
 8006384:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8006388:	4298      	cmp	r0, r3
 800638a:	d031      	beq.n	80063f0 <main+0x394>
  hrtc.Init.AsynchPrediv = 127;
 800638c:	237f      	movs	r3, #127	; 0x7f
 800638e:	60a3      	str	r3, [r4, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006390:	4620      	mov	r0, r4
  hrtc.Init.SynchPrediv = 255;
 8006392:	23ff      	movs	r3, #255	; 0xff
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006394:	6065      	str	r5, [r4, #4]
  hrtc.Init.SynchPrediv = 255;
 8006396:	60e3      	str	r3, [r4, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006398:	6125      	str	r5, [r4, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800639a:	6165      	str	r5, [r4, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800639c:	61a5      	str	r5, [r4, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800639e:	f7fb fd23 	bl	8001de8 <HAL_RTC_Init>
 80063a2:	b100      	cbz	r0, 80063a6 <main+0x34a>
 80063a4:	e7fe      	b.n	80063a4 <main+0x348>
  sTime.Hours = 0x0;
 80063a6:	f88d 0274 	strb.w	r0, [sp, #628]	; 0x274
  sTime.Minutes = 0x0;
 80063aa:	f88d 0275 	strb.w	r0, [sp, #629]	; 0x275
  sTime.Seconds = 0x0;
 80063ae:	f88d 0276 	strb.w	r0, [sp, #630]	; 0x276
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80063b2:	90a0      	str	r0, [sp, #640]	; 0x280
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80063b4:	90a1      	str	r0, [sp, #644]	; 0x284
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80063b6:	2201      	movs	r2, #1
 80063b8:	a99d      	add	r1, sp, #628	; 0x274
 80063ba:	4620      	mov	r0, r4
 80063bc:	f7fb fd6d 	bl	8001e9a <HAL_RTC_SetTime>
 80063c0:	b100      	cbz	r0, 80063c4 <main+0x368>
 80063c2:	e7fe      	b.n	80063c2 <main+0x366>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80063c4:	2201      	movs	r2, #1
  sDate.Year = 0x0;
 80063c6:	2300      	movs	r3, #0
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80063c8:	a95d      	add	r1, sp, #372	; 0x174
 80063ca:	489b      	ldr	r0, [pc, #620]	; (8006638 <main+0x5dc>)
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80063cc:	f88d 2174 	strb.w	r2, [sp, #372]	; 0x174
  sDate.Month = RTC_MONTH_JANUARY;
 80063d0:	f88d 2175 	strb.w	r2, [sp, #373]	; 0x175
  sDate.Date = 0x1;
 80063d4:	f88d 2176 	strb.w	r2, [sp, #374]	; 0x176
  sDate.Year = 0x0;
 80063d8:	f88d 3177 	strb.w	r3, [sp, #375]	; 0x177
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80063dc:	f7fb fdcd 	bl	8001f7a <HAL_RTC_SetDate>
 80063e0:	4601      	mov	r1, r0
 80063e2:	b100      	cbz	r0, 80063e6 <main+0x38a>
 80063e4:	e7fe      	b.n	80063e4 <main+0x388>
    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 80063e6:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80063ea:	4893      	ldr	r0, [pc, #588]	; (8006638 <main+0x5dc>)
 80063ec:	f7fb fe25 	bl	800203a <HAL_RTCEx_BKUPWrite>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80063f0:	2200      	movs	r2, #0
 80063f2:	4611      	mov	r1, r2
 80063f4:	2019      	movs	r0, #25
 80063f6:	f7fa f951 	bl	800069c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80063fa:	2019      	movs	r0, #25
 80063fc:	f7fa f982 	bl	8000704 <HAL_NVIC_EnableIRQ>
  Init_LoggerSystem();
 8006400:	f7ff fd5e 	bl	8005ec0 <Init_LoggerSystem>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8006404:	4e8e      	ldr	r6, [pc, #568]	; (8006640 <main+0x5e4>)
	  fres = open_append(&file, dir_datlog);
 8006406:	4f8f      	ldr	r7, [pc, #572]	; (8006644 <main+0x5e8>)
	  MPU9250_update(&mpu9250, UPDATE_ACCEL | UPDATE_GYRO | UPDATE_COMPASS);
 8006408:	4d8f      	ldr	r5, [pc, #572]	; (8006648 <main+0x5ec>)
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800640a:	2201      	movs	r2, #1
 800640c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006410:	4630      	mov	r0, r6
	  tmeasure_a = TIM2->CNT;
 8006412:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8006416:	f7fa fa77 	bl	8000908 <HAL_GPIO_WritePin>
	  fres = open_append(&file, dir_datlog);
 800641a:	4639      	mov	r1, r7
 800641c:	a89d      	add	r0, sp, #628	; 0x274
	  tmeasure_a = TIM2->CNT;
 800641e:	f8da 9024 	ldr.w	r9, [sl, #36]	; 0x24
	  fres = open_append(&file, dir_datlog);
 8006422:	f7ff fe07 	bl	8006034 <open_append>
	  if ( fres != FR_OK ) {
 8006426:	4683      	mov	fp, r0
 8006428:	b130      	cbz	r0, 8006438 <main+0x3dc>
		  xprintf("file open failure!\n");
 800642a:	4888      	ldr	r0, [pc, #544]	; (800664c <main+0x5f0>)
 800642c:	f000 fb8a 	bl	8006b44 <xprintf>
		  HAL_Delay(100);
 8006430:	2064      	movs	r0, #100	; 0x64
 8006432:	f7fa f911 	bl	8000658 <HAL_Delay>
		  continue;
 8006436:	e7e8      	b.n	800640a <main+0x3ae>
	  FlightInfo.time[FlightInfo.d_pos] = TIM2->CNT;
 8006438:	4c85      	ldr	r4, [pc, #532]	; (8006650 <main+0x5f4>)
	  MPU9250_update(&mpu9250, UPDATE_ACCEL | UPDATE_GYRO | UPDATE_COMPASS);
 800643a:	4883      	ldr	r0, [pc, #524]	; (8006648 <main+0x5ec>)
 800643c:	210e      	movs	r1, #14
 800643e:	f7fc fe88 	bl	8003152 <MPU9250_update>
	  LPS22HB_GetData(&lps22hb);
 8006442:	4884      	ldr	r0, [pc, #528]	; (8006654 <main+0x5f8>)
 8006444:	f7ff fb04 	bl	8005a50 <LPS22HB_GetData>
	  FlightInfo.time[FlightInfo.d_pos] = TIM2->CNT;
 8006448:	f894 8001 	ldrb.w	r8, [r4, #1]
 800644c:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
	  FlightInfo.press[FlightInfo.d_pos] = LPS22HB_Pressure(&lps22hb);
 8006450:	4880      	ldr	r0, [pc, #512]	; (8006654 <main+0x5f8>)
	  FlightInfo.time[FlightInfo.d_pos] = TIM2->CNT;
 8006452:	f108 0302 	add.w	r3, r8, #2
	  FlightInfo.press[FlightInfo.d_pos] = LPS22HB_Pressure(&lps22hb);
 8006456:	f208 2802 	addw	r8, r8, #514	; 0x202
	  FlightInfo.time[FlightInfo.d_pos] = TIM2->CNT;
 800645a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	  FlightInfo.press[FlightInfo.d_pos] = LPS22HB_Pressure(&lps22hb);
 800645e:	f7ff fb41 	bl	8005ae4 <LPS22HB_Pressure>
 8006462:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8006466:	ed88 0a00 	vstr	s0, [r8]
	  FlightInfo.pressraw[FlightInfo.d_pos] = LPS22HB_PressureRaw(&lps22hb);
 800646a:	487a      	ldr	r0, [pc, #488]	; (8006654 <main+0x5f8>)
 800646c:	f894 8001 	ldrb.w	r8, [r4, #1]
 8006470:	f7ff fb3b 	bl	8005aea <LPS22HB_PressureRaw>
 8006474:	f508 7881 	add.w	r8, r8, #258	; 0x102
	  sprintf(wbuff, "%d,%d,%lu,%g,%g,%g,%g,%g,%g,%g,%g,%g,%g,%g",
 8006478:	7822      	ldrb	r2, [r4, #0]
	  FlightInfo.pressraw[FlightInfo.d_pos] = LPS22HB_PressureRaw(&lps22hb);
 800647a:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	  sprintf(wbuff, "%d,%d,%lu,%g,%g,%g,%g,%g,%g,%g,%g,%g,%g,%g",
 800647e:	f894 8001 	ldrb.w	r8, [r4, #1]
			  LPS22HB_Pressure(&lps22hb),
 8006482:	4874      	ldr	r0, [pc, #464]	; (8006654 <main+0x5f8>)
	  sprintf(wbuff, "%d,%d,%lu,%g,%g,%g,%g,%g,%g,%g,%g,%g,%g,%g",
 8006484:	9219      	str	r2, [sp, #100]	; 0x64
 8006486:	f108 0302 	add.w	r3, r8, #2
 800648a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800648e:	9318      	str	r3, [sp, #96]	; 0x60
			  LPS22HB_Pressure(&lps22hb),
 8006490:	f7ff fb28 	bl	8005ae4 <LPS22HB_Pressure>
			  LPS22HB_Temperature(&lps22hb),
 8006494:	486f      	ldr	r0, [pc, #444]	; (8006654 <main+0x5f8>)
			  LPS22HB_Pressure(&lps22hb),
 8006496:	eeb0 8a40 	vmov.f32	s16, s0
			  LPS22HB_Temperature(&lps22hb),
 800649a:	f7ff fb28 	bl	8005aee <LPS22HB_Temperature>
			  MPU9250_calcAccel(&mpu9250,mpu9250.ax),
 800649e:	68a9      	ldr	r1, [r5, #8]
 80064a0:	4869      	ldr	r0, [pc, #420]	; (8006648 <main+0x5ec>)
			  LPS22HB_Temperature(&lps22hb),
 80064a2:	eef0 8a40 	vmov.f32	s17, s0
			  MPU9250_calcAccel(&mpu9250,mpu9250.ax),
 80064a6:	f7fc fe77 	bl	8003198 <MPU9250_calcAccel>
			  MPU9250_calcAccel(&mpu9250,mpu9250.ay),
 80064aa:	68e9      	ldr	r1, [r5, #12]
 80064ac:	4866      	ldr	r0, [pc, #408]	; (8006648 <main+0x5ec>)
			  MPU9250_calcAccel(&mpu9250,mpu9250.ax),
 80064ae:	eeb0 9a40 	vmov.f32	s18, s0
			  MPU9250_calcAccel(&mpu9250,mpu9250.ay),
 80064b2:	f7fc fe71 	bl	8003198 <MPU9250_calcAccel>
			  MPU9250_calcAccel(&mpu9250,mpu9250.az),
 80064b6:	6929      	ldr	r1, [r5, #16]
 80064b8:	4863      	ldr	r0, [pc, #396]	; (8006648 <main+0x5ec>)
			  MPU9250_calcAccel(&mpu9250,mpu9250.ay),
 80064ba:	eef0 9a40 	vmov.f32	s19, s0
			  MPU9250_calcAccel(&mpu9250,mpu9250.az),
 80064be:	f7fc fe6b 	bl	8003198 <MPU9250_calcAccel>
			  MPU9250_calcGyro(&mpu9250,mpu9250.gx),
 80064c2:	6969      	ldr	r1, [r5, #20]
 80064c4:	4860      	ldr	r0, [pc, #384]	; (8006648 <main+0x5ec>)
			  MPU9250_calcAccel(&mpu9250,mpu9250.az),
 80064c6:	eeb0 aa40 	vmov.f32	s20, s0
			  MPU9250_calcGyro(&mpu9250,mpu9250.gx),
 80064ca:	f7fc fe72 	bl	80031b2 <MPU9250_calcGyro>
			  MPU9250_calcGyro(&mpu9250,mpu9250.gy),
 80064ce:	69a9      	ldr	r1, [r5, #24]
 80064d0:	485d      	ldr	r0, [pc, #372]	; (8006648 <main+0x5ec>)
			  MPU9250_calcGyro(&mpu9250,mpu9250.gx),
 80064d2:	eef0 aa40 	vmov.f32	s21, s0
			  MPU9250_calcGyro(&mpu9250,mpu9250.gy),
 80064d6:	f7fc fe6c 	bl	80031b2 <MPU9250_calcGyro>
			  MPU9250_calcGyro(&mpu9250,mpu9250.gz),
 80064da:	69e9      	ldr	r1, [r5, #28]
 80064dc:	485a      	ldr	r0, [pc, #360]	; (8006648 <main+0x5ec>)
			  MPU9250_calcGyro(&mpu9250,mpu9250.gy),
 80064de:	eeb0 ba40 	vmov.f32	s22, s0
			  MPU9250_calcGyro(&mpu9250,mpu9250.gz),
 80064e2:	f7fc fe66 	bl	80031b2 <MPU9250_calcGyro>
			  MPU9250_calcMag(&mpu9250,mpu9250.mx),
 80064e6:	6a29      	ldr	r1, [r5, #32]
 80064e8:	4857      	ldr	r0, [pc, #348]	; (8006648 <main+0x5ec>)
			  MPU9250_calcGyro(&mpu9250,mpu9250.gz),
 80064ea:	eef0 ba40 	vmov.f32	s23, s0
			  MPU9250_calcMag(&mpu9250,mpu9250.mx),
 80064ee:	f7fc fe69 	bl	80031c4 <MPU9250_calcMag>
			  MPU9250_calcMag(&mpu9250,mpu9250.my),
 80064f2:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80064f4:	4854      	ldr	r0, [pc, #336]	; (8006648 <main+0x5ec>)
			  MPU9250_calcMag(&mpu9250,mpu9250.mx),
 80064f6:	eeb0 ca40 	vmov.f32	s24, s0
			  MPU9250_calcMag(&mpu9250,mpu9250.my),
 80064fa:	f7fc fe63 	bl	80031c4 <MPU9250_calcMag>
			  MPU9250_calcMag(&mpu9250,mpu9250.mz)
 80064fe:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8006500:	4851      	ldr	r0, [pc, #324]	; (8006648 <main+0x5ec>)
			  MPU9250_calcMag(&mpu9250,mpu9250.my),
 8006502:	eef0 ca40 	vmov.f32	s25, s0
			  MPU9250_calcMag(&mpu9250,mpu9250.mz)
 8006506:	f7fc fe5d 	bl	80031c4 <MPU9250_calcMag>
	  sprintf(wbuff, "%d,%d,%lu,%g,%g,%g,%g,%g,%g,%g,%g,%g,%g,%g",
 800650a:	ee10 0a10 	vmov	r0, s0
 800650e:	f7fa f81b 	bl	8000548 <__aeabi_f2d>
 8006512:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8006516:	ee1c 0a90 	vmov	r0, s25
 800651a:	f7fa f815 	bl	8000548 <__aeabi_f2d>
 800651e:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8006522:	ee1c 0a10 	vmov	r0, s24
 8006526:	f7fa f80f 	bl	8000548 <__aeabi_f2d>
 800652a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800652e:	ee1b 0a90 	vmov	r0, s23
 8006532:	f7fa f809 	bl	8000548 <__aeabi_f2d>
 8006536:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800653a:	ee1b 0a10 	vmov	r0, s22
 800653e:	f7fa f803 	bl	8000548 <__aeabi_f2d>
 8006542:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006546:	ee1a 0a90 	vmov	r0, s21
 800654a:	f7f9 fffd 	bl	8000548 <__aeabi_f2d>
 800654e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006552:	ee1a 0a10 	vmov	r0, s20
 8006556:	f7f9 fff7 	bl	8000548 <__aeabi_f2d>
 800655a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800655e:	ee19 0a90 	vmov	r0, s19
 8006562:	f7f9 fff1 	bl	8000548 <__aeabi_f2d>
 8006566:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800656a:	ee19 0a10 	vmov	r0, s18
 800656e:	f7f9 ffeb 	bl	8000548 <__aeabi_f2d>
 8006572:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006576:	ee18 0a90 	vmov	r0, s17
 800657a:	f7f9 ffe5 	bl	8000548 <__aeabi_f2d>
 800657e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006582:	ee18 0a10 	vmov	r0, s16
 8006586:	f7f9 ffdf 	bl	8000548 <__aeabi_f2d>
 800658a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800658c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006594:	4643      	mov	r3, r8
 8006596:	4930      	ldr	r1, [pc, #192]	; (8006658 <main+0x5fc>)
 8006598:	a81d      	add	r0, sp, #116	; 0x74
 800659a:	f000 fc67 	bl	8006e6c <siprintf>
	  f_puts((TCHAR *)wbuff, &file);
 800659e:	a99d      	add	r1, sp, #628	; 0x274
 80065a0:	a81d      	add	r0, sp, #116	; 0x74
 80065a2:	f7ff f901 	bl	80057a8 <f_puts>
	  f_close(&file);
 80065a6:	a89d      	add	r0, sp, #628	; 0x274
 80065a8:	f7fe fe8f 	bl	80052ca <f_close>
	  puts(wbuff);
 80065ac:	a81d      	add	r0, sp, #116	; 0x74
 80065ae:	f000 fc45 	bl	8006e3c <puts>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80065b2:	465a      	mov	r2, fp
 80065b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80065b8:	4630      	mov	r0, r6
 80065ba:	f7fa f9a5 	bl	8000908 <HAL_GPIO_WritePin>
	  sprintf(ubuff, " %d[t:%lu Pt:%lu] P:%f T:%f A:%f\n",
 80065be:	7862      	ldrb	r2, [r4, #1]
	  tmeasure_b = TIM2->CNT;
 80065c0:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
	  sprintf(ubuff, " %d[t:%lu Pt:%lu] P:%f T:%f A:%f\n",
 80065c4:	1c91      	adds	r1, r2, #2
			  FlightInfo.press[FlightInfo.d_pos],
 80065c6:	f202 2202 	addw	r2, r2, #514	; 0x202
 80065ca:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	  sprintf(ubuff, " %d[t:%lu Pt:%lu] P:%f T:%f A:%f\n",
 80065ce:	eba3 0a09 	sub.w	sl, r3, r9
 80065d2:	6810      	ldr	r0, [r2, #0]
 80065d4:	f854 b021 	ldr.w	fp, [r4, r1, lsl #2]
 80065d8:	f7f9 ffb6 	bl	8000548 <__aeabi_f2d>
 80065dc:	4680      	mov	r8, r0
			  LPS22HB_Temperature(&lps22hb),
 80065de:	481d      	ldr	r0, [pc, #116]	; (8006654 <main+0x5f8>)
	  sprintf(ubuff, " %d[t:%lu Pt:%lu] P:%f T:%f A:%f\n",
 80065e0:	4689      	mov	r9, r1
			  LPS22HB_Temperature(&lps22hb),
 80065e2:	f7ff fa84 	bl	8005aee <LPS22HB_Temperature>
			  FlightInfo.accel[FlightInfo.d_pos]
 80065e6:	7862      	ldrb	r2, [r4, #1]
 80065e8:	9218      	str	r2, [sp, #96]	; 0x60
 80065ea:	f202 3302 	addw	r3, r2, #770	; 0x302
 80065ee:	eb04 0383 	add.w	r3, r4, r3, lsl #2
			  LPS22HB_Temperature(&lps22hb),
 80065f2:	ed8d 0a19 	vstr	s0, [sp, #100]	; 0x64
	  sprintf(ubuff, " %d[t:%lu Pt:%lu] P:%f T:%f A:%f\n",
 80065f6:	6818      	ldr	r0, [r3, #0]
 80065f8:	f7f9 ffa6 	bl	8000548 <__aeabi_f2d>
 80065fc:	ed9d 0a19 	vldr	s0, [sp, #100]	; 0x64
 8006600:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006604:	ee10 0a10 	vmov	r0, s0
 8006608:	f7f9 ff9e 	bl	8000548 <__aeabi_f2d>
 800660c:	465b      	mov	r3, fp
 800660e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006612:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006614:	4911      	ldr	r1, [pc, #68]	; (800665c <main+0x600>)
 8006616:	f8cd a000 	str.w	sl, [sp]
 800661a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800661e:	a85d      	add	r0, sp, #372	; 0x174
 8006620:	f000 fc24 	bl	8006e6c <siprintf>
	 xputs(ubuff);
 8006624:	a85d      	add	r0, sp, #372	; 0x174
 8006626:	f000 f9af 	bl	8006988 <xputs>
	  FlightInfo.d_num++;
 800662a:	6863      	ldr	r3, [r4, #4]
 800662c:	3301      	adds	r3, #1
 800662e:	6063      	str	r3, [r4, #4]
	  FlightInfo.d_pos++;
 8006630:	7863      	ldrb	r3, [r4, #1]
 8006632:	3301      	adds	r3, #1
 8006634:	7063      	strb	r3, [r4, #1]
 8006636:	e6e8      	b.n	800640a <main+0x3ae>
 8006638:	20002134 	.word	0x20002134
 800663c:	40002800 	.word	0x40002800
 8006640:	48000400 	.word	0x48000400
 8006644:	20000048 	.word	0x20000048
 8006648:	2000099c 	.word	0x2000099c
 800664c:	08008065 	.word	0x08008065
 8006650:	20000a48 	.word	0x20000a48
 8006654:	200021c4 	.word	0x200021c4
 8006658:	08008079 	.word	0x08008079
 800665c:	080080a4 	.word	0x080080a4

08006660 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006660:	4b1d      	ldr	r3, [pc, #116]	; (80066d8 <HAL_MspInit+0x78>)
{
 8006662:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006664:	699a      	ldr	r2, [r3, #24]
 8006666:	f042 0201 	orr.w	r2, r2, #1
 800666a:	619a      	str	r2, [r3, #24]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006674:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006676:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006678:	f7f9 fffe 	bl	8000678 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800667c:	2200      	movs	r2, #0
 800667e:	4611      	mov	r1, r2
 8006680:	f06f 000b 	mvn.w	r0, #11
 8006684:	f7fa f80a 	bl	800069c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8006688:	2200      	movs	r2, #0
 800668a:	4611      	mov	r1, r2
 800668c:	f06f 000a 	mvn.w	r0, #10
 8006690:	f7fa f804 	bl	800069c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8006694:	2200      	movs	r2, #0
 8006696:	4611      	mov	r1, r2
 8006698:	f06f 0009 	mvn.w	r0, #9
 800669c:	f7f9 fffe 	bl	800069c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80066a0:	2200      	movs	r2, #0
 80066a2:	4611      	mov	r1, r2
 80066a4:	f06f 0004 	mvn.w	r0, #4
 80066a8:	f7f9 fff8 	bl	800069c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80066ac:	2200      	movs	r2, #0
 80066ae:	4611      	mov	r1, r2
 80066b0:	f06f 0003 	mvn.w	r0, #3
 80066b4:	f7f9 fff2 	bl	800069c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80066b8:	2200      	movs	r2, #0
 80066ba:	4611      	mov	r1, r2
 80066bc:	f06f 0001 	mvn.w	r0, #1
 80066c0:	f7f9 ffec 	bl	800069c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80066c4:	2200      	movs	r2, #0
 80066c6:	4611      	mov	r1, r2
 80066c8:	f04f 30ff 	mov.w	r0, #4294967295
 80066cc:	f7f9 ffe6 	bl	800069c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80066d0:	b003      	add	sp, #12
 80066d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80066d6:	bf00      	nop
 80066d8:	40021000 	.word	0x40021000

080066dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80066dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80066de:	6802      	ldr	r2, [r0, #0]
 80066e0:	4b0f      	ldr	r3, [pc, #60]	; (8006720 <HAL_I2C_MspInit+0x44>)
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d119      	bne.n	800671a <HAL_I2C_MspInit+0x3e>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80066e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80066ea:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80066ec:	2312      	movs	r3, #18
 80066ee:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80066f0:	2301      	movs	r3, #1
 80066f2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80066f4:	2303      	movs	r3, #3
 80066f6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80066f8:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066fa:	eb0d 0103 	add.w	r1, sp, r3
 80066fe:	4809      	ldr	r0, [pc, #36]	; (8006724 <HAL_I2C_MspInit+0x48>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006700:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006702:	f7fa f831 	bl	8000768 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006706:	4b08      	ldr	r3, [pc, #32]	; (8006728 <HAL_I2C_MspInit+0x4c>)
 8006708:	69da      	ldr	r2, [r3, #28]
 800670a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800670e:	61da      	str	r2, [r3, #28]
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800671a:	b007      	add	sp, #28
 800671c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006720:	40005400 	.word	0x40005400
 8006724:	48000400 	.word	0x48000400
 8006728:	40021000 	.word	0x40021000

0800672c <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 800672c:	6802      	ldr	r2, [r0, #0]
 800672e:	4b07      	ldr	r3, [pc, #28]	; (800674c <HAL_RTC_MspInit+0x20>)
 8006730:	429a      	cmp	r2, r3
 8006732:	d10a      	bne.n	800674a <HAL_RTC_MspInit+0x1e>
 8006734:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006738:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800673c:	4b04      	ldr	r3, [pc, #16]	; (8006750 <HAL_RTC_MspInit+0x24>)
 800673e:	fab2 f282 	clz	r2, r2
 8006742:	4413      	add	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	2201      	movs	r2, #1
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	4770      	bx	lr
 800674c:	40002800 	.word	0x40002800
 8006750:	10908100 	.word	0x10908100

08006754 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006754:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8006756:	6802      	ldr	r2, [r0, #0]
 8006758:	4b0f      	ldr	r3, [pc, #60]	; (8006798 <HAL_SPI_MspInit+0x44>)
 800675a:	429a      	cmp	r2, r3
 800675c:	d119      	bne.n	8006792 <HAL_SPI_MspInit+0x3e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800675e:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006762:	a901      	add	r1, sp, #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006764:	699a      	ldr	r2, [r3, #24]
 8006766:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800676a:	619a      	str	r2, [r3, #24]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006776:	23e0      	movs	r3, #224	; 0xe0
 8006778:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800677a:	2302      	movs	r3, #2
 800677c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800677e:	2300      	movs	r3, #0
 8006780:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006782:	2303      	movs	r3, #3
 8006784:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800678a:	2305      	movs	r3, #5
 800678c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800678e:	f7f9 ffeb 	bl	8000768 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006792:	b007      	add	sp, #28
 8006794:	f85d fb04 	ldr.w	pc, [sp], #4
 8006798:	40013000 	.word	0x40013000

0800679c <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 800679c:	6803      	ldr	r3, [r0, #0]
 800679e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 80067a2:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM2)
 80067a4:	d10c      	bne.n	80067c0 <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80067a6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80067aa:	69da      	ldr	r2, [r3, #28]
 80067ac:	f042 0201 	orr.w	r2, r2, #1
 80067b0:	61da      	str	r2, [r3, #28]
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	9301      	str	r3, [sp, #4]
 80067ba:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80067bc:	b004      	add	sp, #16
 80067be:	4770      	bx	lr
  else if(htim_base->Instance==TIM3)
 80067c0:	4a0d      	ldr	r2, [pc, #52]	; (80067f8 <HAL_TIM_Base_MspInit+0x5c>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d10a      	bne.n	80067dc <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80067c6:	4b0d      	ldr	r3, [pc, #52]	; (80067fc <HAL_TIM_Base_MspInit+0x60>)
 80067c8:	69da      	ldr	r2, [r3, #28]
 80067ca:	f042 0202 	orr.w	r2, r2, #2
 80067ce:	61da      	str	r2, [r3, #28]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	9302      	str	r3, [sp, #8]
 80067d8:	9b02      	ldr	r3, [sp, #8]
 80067da:	e7ef      	b.n	80067bc <HAL_TIM_Base_MspInit+0x20>
  else if(htim_base->Instance==TIM16)
 80067dc:	4a08      	ldr	r2, [pc, #32]	; (8006800 <HAL_TIM_Base_MspInit+0x64>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d1ec      	bne.n	80067bc <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80067e2:	4b06      	ldr	r3, [pc, #24]	; (80067fc <HAL_TIM_Base_MspInit+0x60>)
 80067e4:	699a      	ldr	r2, [r3, #24]
 80067e6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80067ea:	619a      	str	r2, [r3, #24]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067f2:	9303      	str	r3, [sp, #12]
 80067f4:	9b03      	ldr	r3, [sp, #12]
}
 80067f6:	e7e1      	b.n	80067bc <HAL_TIM_Base_MspInit+0x20>
 80067f8:	40000400 	.word	0x40000400
 80067fc:	40021000 	.word	0x40021000
 8006800:	40014400 	.word	0x40014400

08006804 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006804:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART4)
 8006806:	6803      	ldr	r3, [r0, #0]
 8006808:	4a1d      	ldr	r2, [pc, #116]	; (8006880 <HAL_UART_MspInit+0x7c>)
 800680a:	4293      	cmp	r3, r2
{
 800680c:	b089      	sub	sp, #36	; 0x24
  if(huart->Instance==UART4)
 800680e:	d11b      	bne.n	8006848 <HAL_UART_MspInit+0x44>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006810:	4b1c      	ldr	r3, [pc, #112]	; (8006884 <HAL_UART_MspInit+0x80>)
    GPIO_InitStruct.Pin = Debug_TX_Pin|Debug_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006812:	481d      	ldr	r0, [pc, #116]	; (8006888 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8006814:	69da      	ldr	r2, [r3, #28]
 8006816:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800681a:	61da      	str	r2, [r3, #28]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006822:	9301      	str	r3, [sp, #4]
 8006824:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = Debug_TX_Pin|Debug_RX_Pin;
 8006826:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800682a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800682c:	2302      	movs	r3, #2
 800682e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006830:	2300      	movs	r3, #0
 8006832:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006834:	2303      	movs	r3, #3
 8006836:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8006838:	2305      	movs	r3, #5
 800683a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800683c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800683e:	f7f9 ff93 	bl	8000768 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006842:	b009      	add	sp, #36	; 0x24
 8006844:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(huart->Instance==USART1)
 8006848:	4a10      	ldr	r2, [pc, #64]	; (800688c <HAL_UART_MspInit+0x88>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d1f9      	bne.n	8006842 <HAL_UART_MspInit+0x3e>
    __HAL_RCC_USART1_CLK_ENABLE();
 800684e:	4b0d      	ldr	r3, [pc, #52]	; (8006884 <HAL_UART_MspInit+0x80>)
 8006850:	699a      	ldr	r2, [r3, #24]
 8006852:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006856:	619a      	str	r2, [r3, #24]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800685e:	9302      	str	r3, [sp, #8]
 8006860:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8006862:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006866:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006868:	2302      	movs	r3, #2
 800686a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800686c:	2300      	movs	r3, #0
 800686e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006870:	2303      	movs	r3, #3
 8006872:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006874:	2307      	movs	r3, #7
 8006876:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006878:	a903      	add	r1, sp, #12
 800687a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800687e:	e7de      	b.n	800683e <HAL_UART_MspInit+0x3a>
 8006880:	40004c00 	.word	0x40004c00
 8006884:	40021000 	.word	0x40021000
 8006888:	48000800 	.word	0x48000800
 800688c:	40013800 	.word	0x40013800

08006890 <NMI_Handler>:
 8006890:	4770      	bx	lr

08006892 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8006892:	e7fe      	b.n	8006892 <HardFault_Handler>

08006894 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8006894:	e7fe      	b.n	8006894 <MemManage_Handler>

08006896 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8006896:	e7fe      	b.n	8006896 <BusFault_Handler>

08006898 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8006898:	e7fe      	b.n	8006898 <UsageFault_Handler>

0800689a <SVC_Handler>:
 800689a:	4770      	bx	lr

0800689c <DebugMon_Handler>:
 800689c:	4770      	bx	lr

0800689e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800689e:	4770      	bx	lr

080068a0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80068a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80068a2:	f7f9 fecb 	bl	800063c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80068a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80068aa:	f7f9 bf59 	b.w	8000760 <HAL_SYSTICK_IRQHandler>

080068ae <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80068ae:	2080      	movs	r0, #128	; 0x80
 80068b0:	f7fa b830 	b.w	8000914 <HAL_GPIO_EXTI_IRQHandler>

080068b4 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80068b4:	4801      	ldr	r0, [pc, #4]	; (80068bc <TIM1_UP_TIM16_IRQHandler+0x8>)
 80068b6:	f7fb bc75 	b.w	80021a4 <HAL_TIM_IRQHandler>
 80068ba:	bf00      	nop
 80068bc:	20002280 	.word	0x20002280

080068c0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80068c0:	4915      	ldr	r1, [pc, #84]	; (8006918 <SystemInit+0x58>)
 80068c2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80068c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80068ce:	4b13      	ldr	r3, [pc, #76]	; (800691c <SystemInit+0x5c>)
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	f042 0201 	orr.w	r2, r2, #1
 80068d6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80068d8:	6858      	ldr	r0, [r3, #4]
 80068da:	4a11      	ldr	r2, [pc, #68]	; (8006920 <SystemInit+0x60>)
 80068dc:	4002      	ands	r2, r0
 80068de:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80068e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80068ea:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80068f2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80068fa:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80068fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fe:	f022 020f 	bic.w	r2, r2, #15
 8006902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8006904:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006906:	4a07      	ldr	r2, [pc, #28]	; (8006924 <SystemInit+0x64>)
 8006908:	4002      	ands	r2, r0
 800690a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800690c:	2200      	movs	r2, #0
 800690e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006910:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006914:	608b      	str	r3, [r1, #8]
 8006916:	4770      	bx	lr
 8006918:	e000ed00 	.word	0xe000ed00
 800691c:	40021000 	.word	0x40021000
 8006920:	f87fc00c 	.word	0xf87fc00c
 8006924:	ff00fccc 	.word	0xff00fccc

08006928 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8006928:	4b02      	ldr	r3, [pc, #8]	; (8006934 <USER_status+0xc>)
 800692a:	2201      	movs	r2, #1
 800692c:	701a      	strb	r2, [r3, #0]
    return Stat;
 800692e:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END STATUS */
}
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	20000074 	.word	0x20000074

08006938 <USER_write>:
{ 
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
  /* USER CODE END WRITE */
}
 8006938:	2000      	movs	r0, #0
 800693a:	4770      	bx	lr

0800693c <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 800693c:	2001      	movs	r0, #1
 800693e:	4770      	bx	lr

08006940 <USER_read>:
 8006940:	2000      	movs	r0, #0
 8006942:	4770      	bx	lr

08006944 <USER_initialize>:
 8006944:	4b02      	ldr	r3, [pc, #8]	; (8006950 <USER_initialize+0xc>)
 8006946:	2201      	movs	r2, #1
 8006948:	701a      	strb	r2, [r3, #0]
 800694a:	7818      	ldrb	r0, [r3, #0]
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	20000074 	.word	0x20000074

08006954 <xputc>:
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 8006954:	280a      	cmp	r0, #10
{
 8006956:	b510      	push	{r4, lr}
 8006958:	4604      	mov	r4, r0
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 800695a:	d102      	bne.n	8006962 <xputc+0xe>
 800695c:	200d      	movs	r0, #13
 800695e:	f7ff fff9 	bl	8006954 <xputc>

	if (outptr) {
 8006962:	4a07      	ldr	r2, [pc, #28]	; (8006980 <xputc+0x2c>)
 8006964:	6813      	ldr	r3, [r2, #0]
 8006966:	b11b      	cbz	r3, 8006970 <xputc+0x1c>
		*outptr++ = (unsigned char)c;
 8006968:	1c59      	adds	r1, r3, #1
 800696a:	701c      	strb	r4, [r3, #0]
 800696c:	6011      	str	r1, [r2, #0]
		return;
 800696e:	bd10      	pop	{r4, pc}
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
 8006970:	4b04      	ldr	r3, [pc, #16]	; (8006984 <xputc+0x30>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	b11b      	cbz	r3, 800697e <xputc+0x2a>
 8006976:	4620      	mov	r0, r4
}
 8006978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (xfunc_out) xfunc_out((unsigned char)c);
 800697c:	4718      	bx	r3
 800697e:	bd10      	pop	{r4, pc}
 8006980:	200002a8 	.word	0x200002a8
 8006984:	200022c4 	.word	0x200022c4

08006988 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 8006988:	b510      	push	{r4, lr}
 800698a:	1e44      	subs	r4, r0, #1
	while (*str)
 800698c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8006990:	b900      	cbnz	r0, 8006994 <xputs+0xc>
		xputc(*str++);
}
 8006992:	bd10      	pop	{r4, pc}
		xputc(*str++);
 8006994:	f7ff ffde 	bl	8006954 <xputc>
 8006998:	e7f8      	b.n	800698c <xputs+0x4>

0800699a <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 800699a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800699e:	4602      	mov	r2, r0
 80069a0:	460d      	mov	r5, r1
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 80069a2:	7810      	ldrb	r0, [r2, #0]
		if (!c) break;				/* End of format? */
 80069a4:	2800      	cmp	r0, #0
 80069a6:	f000 80ca 	beq.w	8006b3e <xvprintf+0x1a4>
		if (c != '%') {				/* Pass through it if not a % sequense */
 80069aa:	2825      	cmp	r0, #37	; 0x25
 80069ac:	d004      	beq.n	80069b8 <xvprintf+0x1e>
		c = *fmt++;					/* Get a char */
 80069ae:	1c57      	adds	r7, r2, #1
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 80069b0:	f7ff ffd0 	bl	8006954 <xputc>
 80069b4:	462c      	mov	r4, r5
 80069b6:	e052      	b.n	8006a5e <xvprintf+0xc4>
		c = *fmt++;					/* Get first char of the sequense */
 80069b8:	7853      	ldrb	r3, [r2, #1]
		if (c == '0') {				/* Flag: '0' padded */
 80069ba:	2b30      	cmp	r3, #48	; 0x30
 80069bc:	d128      	bne.n	8006a10 <xvprintf+0x76>
			f = 1; c = *fmt++;
 80069be:	7893      	ldrb	r3, [r2, #2]
 80069c0:	1cd7      	adds	r7, r2, #3
 80069c2:	2601      	movs	r6, #1
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 80069c4:	f04f 0800 	mov.w	r8, #0
			w = w * 10 + c - '0';
 80069c8:	210a      	movs	r1, #10
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 80069ca:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80069ce:	2a09      	cmp	r2, #9
 80069d0:	d927      	bls.n	8006a22 <xvprintf+0x88>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80069d2:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 80069d6:	2a4c      	cmp	r2, #76	; 0x4c
			f |= 4; c = *fmt++;
 80069d8:	bf02      	ittt	eq
 80069da:	783b      	ldrbeq	r3, [r7, #0]
 80069dc:	f046 0604 	orreq.w	r6, r6, #4
 80069e0:	3701      	addeq	r7, #1
		if (!c) break;				/* End of format? */
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 80ab 	beq.w	8006b3e <xvprintf+0x1a4>
		if (d >= 'a') d -= 0x20;
 80069e8:	2b60      	cmp	r3, #96	; 0x60
 80069ea:	bf86      	itte	hi
 80069ec:	f1a3 0220 	subhi.w	r2, r3, #32
 80069f0:	b2d2      	uxtbhi	r2, r2
 80069f2:	461a      	movls	r2, r3
		switch (d) {				/* Type is... */
 80069f4:	2a4f      	cmp	r2, #79	; 0x4f
 80069f6:	d035      	beq.n	8006a64 <xvprintf+0xca>
 80069f8:	d81a      	bhi.n	8006a30 <xvprintf+0x96>
 80069fa:	2a43      	cmp	r2, #67	; 0x43
 80069fc:	f000 8088 	beq.w	8006b10 <xvprintf+0x176>
 8006a00:	2a44      	cmp	r2, #68	; 0x44
 8006a02:	f000 808e 	beq.w	8006b22 <xvprintf+0x188>
 8006a06:	2a42      	cmp	r2, #66	; 0x42
 8006a08:	f000 8089 	beq.w	8006b1e <xvprintf+0x184>
			xputc(c); continue;
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	e7cf      	b.n	80069b0 <xvprintf+0x16>
			if (c == '-') {			/* Flag: left justified */
 8006a10:	2b2d      	cmp	r3, #45	; 0x2d
		c = *fmt++;					/* Get first char of the sequense */
 8006a12:	bf19      	ittee	ne
 8006a14:	1c97      	addne	r7, r2, #2
		f = 0;
 8006a16:	2600      	movne	r6, #0
				f = 2; c = *fmt++;
 8006a18:	1cd7      	addeq	r7, r2, #3
 8006a1a:	7893      	ldrbeq	r3, [r2, #2]
 8006a1c:	bf08      	it	eq
 8006a1e:	2602      	moveq	r6, #2
 8006a20:	e7d0      	b.n	80069c4 <xvprintf+0x2a>
			w = w * 10 + c - '0';
 8006a22:	fb01 3808 	mla	r8, r1, r8, r3
 8006a26:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8006a2a:	f817 3b01 	ldrb.w	r3, [r7], #1
 8006a2e:	e7cc      	b.n	80069ca <xvprintf+0x30>
		switch (d) {				/* Type is... */
 8006a30:	2a55      	cmp	r2, #85	; 0x55
 8006a32:	d076      	beq.n	8006b22 <xvprintf+0x188>
 8006a34:	2a58      	cmp	r2, #88	; 0x58
 8006a36:	d070      	beq.n	8006b1a <xvprintf+0x180>
 8006a38:	2a53      	cmp	r2, #83	; 0x53
 8006a3a:	d1e7      	bne.n	8006a0c <xvprintf+0x72>
			p = va_arg(arp, char*);
 8006a3c:	f8d5 9000 	ldr.w	r9, [r5]
 8006a40:	1d2c      	adds	r4, r5, #4
			for (j = 0; p[j]; j++) ;
 8006a42:	464b      	mov	r3, r9
 8006a44:	eba3 0509 	sub.w	r5, r3, r9
 8006a48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a4c:	2a00      	cmp	r2, #0
 8006a4e:	d1f9      	bne.n	8006a44 <xvprintf+0xaa>
			while (!(f & 2) && j++ < w) xputc(' ');
 8006a50:	07b0      	lsls	r0, r6, #30
 8006a52:	d552      	bpl.n	8006afa <xvprintf+0x160>
			xputs(p);
 8006a54:	4648      	mov	r0, r9
 8006a56:	f7ff ff97 	bl	8006988 <xputs>
			while (j++ < w) xputc(' ');
 8006a5a:	45a8      	cmp	r8, r5
 8006a5c:	d853      	bhi.n	8006b06 <xvprintf+0x16c>
			xputc(c); continue;
 8006a5e:	4625      	mov	r5, r4
 8006a60:	463a      	mov	r2, r7
 8006a62:	e79e      	b.n	80069a2 <xvprintf+0x8>
			r = 8; break;
 8006a64:	2008      	movs	r0, #8
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 8006a66:	2a44      	cmp	r2, #68	; 0x44
 8006a68:	6829      	ldr	r1, [r5, #0]
 8006a6a:	f105 0404 	add.w	r4, r5, #4
 8006a6e:	d104      	bne.n	8006a7a <xvprintf+0xe0>
		if (d == 'D' && (v & 0x80000000)) {
 8006a70:	2900      	cmp	r1, #0
			v = 0 - v;
 8006a72:	bfbc      	itt	lt
 8006a74:	4249      	neglt	r1, r1
			f |= 8;
 8006a76:	f046 0608 	orrlt.w	r6, r6, #8
 8006a7a:	2b78      	cmp	r3, #120	; 0x78
 8006a7c:	bf0c      	ite	eq
 8006a7e:	f04f 0c27 	moveq.w	ip, #39	; 0x27
 8006a82:	f04f 0c07 	movne.w	ip, #7
		}
		i = 0;
 8006a86:	2200      	movs	r2, #0
		do {
			d = (char)(v % r); v /= r;
 8006a88:	fbb1 fef0 	udiv	lr, r1, r0
 8006a8c:	fb00 151e 	mls	r5, r0, lr, r1
 8006a90:	b2eb      	uxtb	r3, r5
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8006a92:	2d09      	cmp	r5, #9
 8006a94:	bf84      	itt	hi
 8006a96:	4463      	addhi	r3, ip
 8006a98:	b2db      	uxtbhi	r3, r3
			s[i++] = d + '0';
 8006a9a:	3330      	adds	r3, #48	; 0x30
			d = (char)(v % r); v /= r;
 8006a9c:	4671      	mov	r1, lr
			s[i++] = d + '0';
 8006a9e:	1c55      	adds	r5, r2, #1
 8006aa0:	f80d 3002 	strb.w	r3, [sp, r2]
		} while (v && i < sizeof(s));
 8006aa4:	f1be 0f00 	cmp.w	lr, #0
 8006aa8:	d002      	beq.n	8006ab0 <xvprintf+0x116>
 8006aaa:	2d10      	cmp	r5, #16
 8006aac:	d13b      	bne.n	8006b26 <xvprintf+0x18c>
 8006aae:	220f      	movs	r2, #15
		if (f & 8) s[i++] = '-';
 8006ab0:	0731      	lsls	r1, r6, #28
 8006ab2:	d505      	bpl.n	8006ac0 <xvprintf+0x126>
 8006ab4:	ab04      	add	r3, sp, #16
 8006ab6:	441d      	add	r5, r3
 8006ab8:	232d      	movs	r3, #45	; 0x2d
 8006aba:	f805 3c10 	strb.w	r3, [r5, #-16]
 8006abe:	1c95      	adds	r5, r2, #2
		j = i; d = (f & 1) ? '0' : ' ';
 8006ac0:	f016 0f01 	tst.w	r6, #1
 8006ac4:	bf14      	ite	ne
 8006ac6:	f04f 0a30 	movne.w	sl, #48	; 0x30
 8006aca:	f04f 0a20 	moveq.w	sl, #32
		while (!(f & 2) && j++ < w) xputc(d);
 8006ace:	07b3      	lsls	r3, r6, #30
		j = i; d = (f & 1) ? '0' : ' ';
 8006ad0:	46a9      	mov	r9, r5
		while (!(f & 2) && j++ < w) xputc(d);
 8006ad2:	d52e      	bpl.n	8006b32 <xvprintf+0x198>
		do xputc(s[--i]); while(i);
 8006ad4:	3d01      	subs	r5, #1
 8006ad6:	f81d 0005 	ldrb.w	r0, [sp, r5]
 8006ada:	f7ff ff3b 	bl	8006954 <xputc>
 8006ade:	2d00      	cmp	r5, #0
 8006ae0:	d1f8      	bne.n	8006ad4 <xvprintf+0x13a>
		while (j++ < w) xputc(' ');
 8006ae2:	45c8      	cmp	r8, r9
 8006ae4:	d9bb      	bls.n	8006a5e <xvprintf+0xc4>
 8006ae6:	2020      	movs	r0, #32
 8006ae8:	f7ff ff34 	bl	8006954 <xputc>
 8006aec:	f109 0901 	add.w	r9, r9, #1
 8006af0:	e7f7      	b.n	8006ae2 <xvprintf+0x148>
			while (!(f & 2) && j++ < w) xputc(' ');
 8006af2:	2020      	movs	r0, #32
 8006af4:	f7ff ff2e 	bl	8006954 <xputc>
 8006af8:	4635      	mov	r5, r6
 8006afa:	4545      	cmp	r5, r8
 8006afc:	f105 0601 	add.w	r6, r5, #1
 8006b00:	d3f7      	bcc.n	8006af2 <xvprintf+0x158>
 8006b02:	4635      	mov	r5, r6
 8006b04:	e7a6      	b.n	8006a54 <xvprintf+0xba>
			while (j++ < w) xputc(' ');
 8006b06:	2020      	movs	r0, #32
 8006b08:	f7ff ff24 	bl	8006954 <xputc>
 8006b0c:	3501      	adds	r5, #1
 8006b0e:	e7a4      	b.n	8006a5a <xvprintf+0xc0>
			xputc((char)va_arg(arp, int)); continue;
 8006b10:	7828      	ldrb	r0, [r5, #0]
 8006b12:	1d2c      	adds	r4, r5, #4
 8006b14:	f7ff ff1e 	bl	8006954 <xputc>
 8006b18:	e7a1      	b.n	8006a5e <xvprintf+0xc4>
			r = 16; break;
 8006b1a:	2010      	movs	r0, #16
 8006b1c:	e7a3      	b.n	8006a66 <xvprintf+0xcc>
			r = 2; break;
 8006b1e:	2002      	movs	r0, #2
 8006b20:	e7a1      	b.n	8006a66 <xvprintf+0xcc>
			r = 10; break;
 8006b22:	200a      	movs	r0, #10
 8006b24:	e79f      	b.n	8006a66 <xvprintf+0xcc>
 8006b26:	462a      	mov	r2, r5
 8006b28:	e7ae      	b.n	8006a88 <xvprintf+0xee>
		while (!(f & 2) && j++ < w) xputc(d);
 8006b2a:	4650      	mov	r0, sl
 8006b2c:	f7ff ff12 	bl	8006954 <xputc>
 8006b30:	46b1      	mov	r9, r6
 8006b32:	45c1      	cmp	r9, r8
 8006b34:	f109 0601 	add.w	r6, r9, #1
 8006b38:	d3f7      	bcc.n	8006b2a <xvprintf+0x190>
 8006b3a:	46b1      	mov	r9, r6
 8006b3c:	e7ca      	b.n	8006ad4 <xvprintf+0x13a>
	}
}
 8006b3e:	b004      	add	sp, #16
 8006b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006b44 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 8006b44:	b40f      	push	{r0, r1, r2, r3}
 8006b46:	b507      	push	{r0, r1, r2, lr}
 8006b48:	a904      	add	r1, sp, #16
 8006b4a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list arp;


	va_start(arp, fmt);
 8006b4e:	9101      	str	r1, [sp, #4]
	xvprintf(fmt, arp);
 8006b50:	f7ff ff23 	bl	800699a <xvprintf>
	va_end(arp);
}
 8006b54:	b003      	add	sp, #12
 8006b56:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b5a:	b004      	add	sp, #16
 8006b5c:	4770      	bx	lr
	...

08006b60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b98 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006b64:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006b66:	e003      	b.n	8006b70 <LoopCopyDataInit>

08006b68 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006b68:	4b0c      	ldr	r3, [pc, #48]	; (8006b9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006b6a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006b6c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006b6e:	3104      	adds	r1, #4

08006b70 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006b70:	480b      	ldr	r0, [pc, #44]	; (8006ba0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006b72:	4b0c      	ldr	r3, [pc, #48]	; (8006ba4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006b74:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006b76:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006b78:	d3f6      	bcc.n	8006b68 <CopyDataInit>
	ldr	r2, =_sbss
 8006b7a:	4a0b      	ldr	r2, [pc, #44]	; (8006ba8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006b7c:	e002      	b.n	8006b84 <LoopFillZerobss>

08006b7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006b7e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006b80:	f842 3b04 	str.w	r3, [r2], #4

08006b84 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006b84:	4b09      	ldr	r3, [pc, #36]	; (8006bac <LoopForever+0x16>)
	cmp	r2, r3
 8006b86:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006b88:	d3f9      	bcc.n	8006b7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006b8a:	f7ff fe99 	bl	80068c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006b8e:	f000 f815 	bl	8006bbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006b92:	f7ff fa63 	bl	800605c <main>

08006b96 <LoopForever>:

LoopForever:
    b LoopForever
 8006b96:	e7fe      	b.n	8006b96 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006b98:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8006b9c:	0800828c 	.word	0x0800828c
	ldr	r0, =_sdata
 8006ba0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006ba4:	2000025c 	.word	0x2000025c
	ldr	r2, =_sbss
 8006ba8:	2000025c 	.word	0x2000025c
	ldr	r3, = _ebss
 8006bac:	200022cc 	.word	0x200022cc

08006bb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006bb0:	e7fe      	b.n	8006bb0 <ADC1_2_IRQHandler>

08006bb2 <atoi>:
 8006bb2:	220a      	movs	r2, #10
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	f000 ba05 	b.w	8006fc4 <strtol>
	...

08006bbc <__libc_init_array>:
 8006bbc:	b570      	push	{r4, r5, r6, lr}
 8006bbe:	4e0d      	ldr	r6, [pc, #52]	; (8006bf4 <__libc_init_array+0x38>)
 8006bc0:	4c0d      	ldr	r4, [pc, #52]	; (8006bf8 <__libc_init_array+0x3c>)
 8006bc2:	1ba4      	subs	r4, r4, r6
 8006bc4:	10a4      	asrs	r4, r4, #2
 8006bc6:	2500      	movs	r5, #0
 8006bc8:	42a5      	cmp	r5, r4
 8006bca:	d109      	bne.n	8006be0 <__libc_init_array+0x24>
 8006bcc:	4e0b      	ldr	r6, [pc, #44]	; (8006bfc <__libc_init_array+0x40>)
 8006bce:	4c0c      	ldr	r4, [pc, #48]	; (8006c00 <__libc_init_array+0x44>)
 8006bd0:	f001 f8ec 	bl	8007dac <_init>
 8006bd4:	1ba4      	subs	r4, r4, r6
 8006bd6:	10a4      	asrs	r4, r4, #2
 8006bd8:	2500      	movs	r5, #0
 8006bda:	42a5      	cmp	r5, r4
 8006bdc:	d105      	bne.n	8006bea <__libc_init_array+0x2e>
 8006bde:	bd70      	pop	{r4, r5, r6, pc}
 8006be0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006be4:	4798      	blx	r3
 8006be6:	3501      	adds	r5, #1
 8006be8:	e7ee      	b.n	8006bc8 <__libc_init_array+0xc>
 8006bea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bee:	4798      	blx	r3
 8006bf0:	3501      	adds	r5, #1
 8006bf2:	e7f2      	b.n	8006bda <__libc_init_array+0x1e>
 8006bf4:	08008284 	.word	0x08008284
 8006bf8:	08008284 	.word	0x08008284
 8006bfc:	08008284 	.word	0x08008284
 8006c00:	08008288 	.word	0x08008288

08006c04 <memcpy>:
 8006c04:	b510      	push	{r4, lr}
 8006c06:	1e43      	subs	r3, r0, #1
 8006c08:	440a      	add	r2, r1
 8006c0a:	4291      	cmp	r1, r2
 8006c0c:	d100      	bne.n	8006c10 <memcpy+0xc>
 8006c0e:	bd10      	pop	{r4, pc}
 8006c10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c18:	e7f7      	b.n	8006c0a <memcpy+0x6>

08006c1a <memset>:
 8006c1a:	4402      	add	r2, r0
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d100      	bne.n	8006c24 <memset+0xa>
 8006c22:	4770      	bx	lr
 8006c24:	f803 1b01 	strb.w	r1, [r3], #1
 8006c28:	e7f9      	b.n	8006c1e <memset+0x4>
	...

08006c2c <_free_r>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	4605      	mov	r5, r0
 8006c30:	2900      	cmp	r1, #0
 8006c32:	d045      	beq.n	8006cc0 <_free_r+0x94>
 8006c34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c38:	1f0c      	subs	r4, r1, #4
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	bfb8      	it	lt
 8006c3e:	18e4      	addlt	r4, r4, r3
 8006c40:	f000 fc8c 	bl	800755c <__malloc_lock>
 8006c44:	4a1f      	ldr	r2, [pc, #124]	; (8006cc4 <_free_r+0x98>)
 8006c46:	6813      	ldr	r3, [r2, #0]
 8006c48:	4610      	mov	r0, r2
 8006c4a:	b933      	cbnz	r3, 8006c5a <_free_r+0x2e>
 8006c4c:	6063      	str	r3, [r4, #4]
 8006c4e:	6014      	str	r4, [r2, #0]
 8006c50:	4628      	mov	r0, r5
 8006c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c56:	f000 bc82 	b.w	800755e <__malloc_unlock>
 8006c5a:	42a3      	cmp	r3, r4
 8006c5c:	d90c      	bls.n	8006c78 <_free_r+0x4c>
 8006c5e:	6821      	ldr	r1, [r4, #0]
 8006c60:	1862      	adds	r2, r4, r1
 8006c62:	4293      	cmp	r3, r2
 8006c64:	bf04      	itt	eq
 8006c66:	681a      	ldreq	r2, [r3, #0]
 8006c68:	685b      	ldreq	r3, [r3, #4]
 8006c6a:	6063      	str	r3, [r4, #4]
 8006c6c:	bf04      	itt	eq
 8006c6e:	1852      	addeq	r2, r2, r1
 8006c70:	6022      	streq	r2, [r4, #0]
 8006c72:	6004      	str	r4, [r0, #0]
 8006c74:	e7ec      	b.n	8006c50 <_free_r+0x24>
 8006c76:	4613      	mov	r3, r2
 8006c78:	685a      	ldr	r2, [r3, #4]
 8006c7a:	b10a      	cbz	r2, 8006c80 <_free_r+0x54>
 8006c7c:	42a2      	cmp	r2, r4
 8006c7e:	d9fa      	bls.n	8006c76 <_free_r+0x4a>
 8006c80:	6819      	ldr	r1, [r3, #0]
 8006c82:	1858      	adds	r0, r3, r1
 8006c84:	42a0      	cmp	r0, r4
 8006c86:	d10b      	bne.n	8006ca0 <_free_r+0x74>
 8006c88:	6820      	ldr	r0, [r4, #0]
 8006c8a:	4401      	add	r1, r0
 8006c8c:	1858      	adds	r0, r3, r1
 8006c8e:	4282      	cmp	r2, r0
 8006c90:	6019      	str	r1, [r3, #0]
 8006c92:	d1dd      	bne.n	8006c50 <_free_r+0x24>
 8006c94:	6810      	ldr	r0, [r2, #0]
 8006c96:	6852      	ldr	r2, [r2, #4]
 8006c98:	605a      	str	r2, [r3, #4]
 8006c9a:	4401      	add	r1, r0
 8006c9c:	6019      	str	r1, [r3, #0]
 8006c9e:	e7d7      	b.n	8006c50 <_free_r+0x24>
 8006ca0:	d902      	bls.n	8006ca8 <_free_r+0x7c>
 8006ca2:	230c      	movs	r3, #12
 8006ca4:	602b      	str	r3, [r5, #0]
 8006ca6:	e7d3      	b.n	8006c50 <_free_r+0x24>
 8006ca8:	6820      	ldr	r0, [r4, #0]
 8006caa:	1821      	adds	r1, r4, r0
 8006cac:	428a      	cmp	r2, r1
 8006cae:	bf04      	itt	eq
 8006cb0:	6811      	ldreq	r1, [r2, #0]
 8006cb2:	6852      	ldreq	r2, [r2, #4]
 8006cb4:	6062      	str	r2, [r4, #4]
 8006cb6:	bf04      	itt	eq
 8006cb8:	1809      	addeq	r1, r1, r0
 8006cba:	6021      	streq	r1, [r4, #0]
 8006cbc:	605c      	str	r4, [r3, #4]
 8006cbe:	e7c7      	b.n	8006c50 <_free_r+0x24>
 8006cc0:	bd38      	pop	{r3, r4, r5, pc}
 8006cc2:	bf00      	nop
 8006cc4:	200002ac 	.word	0x200002ac

08006cc8 <_malloc_r>:
 8006cc8:	b570      	push	{r4, r5, r6, lr}
 8006cca:	1ccd      	adds	r5, r1, #3
 8006ccc:	f025 0503 	bic.w	r5, r5, #3
 8006cd0:	3508      	adds	r5, #8
 8006cd2:	2d0c      	cmp	r5, #12
 8006cd4:	bf38      	it	cc
 8006cd6:	250c      	movcc	r5, #12
 8006cd8:	2d00      	cmp	r5, #0
 8006cda:	4606      	mov	r6, r0
 8006cdc:	db01      	blt.n	8006ce2 <_malloc_r+0x1a>
 8006cde:	42a9      	cmp	r1, r5
 8006ce0:	d903      	bls.n	8006cea <_malloc_r+0x22>
 8006ce2:	230c      	movs	r3, #12
 8006ce4:	6033      	str	r3, [r6, #0]
 8006ce6:	2000      	movs	r0, #0
 8006ce8:	bd70      	pop	{r4, r5, r6, pc}
 8006cea:	f000 fc37 	bl	800755c <__malloc_lock>
 8006cee:	4a23      	ldr	r2, [pc, #140]	; (8006d7c <_malloc_r+0xb4>)
 8006cf0:	6814      	ldr	r4, [r2, #0]
 8006cf2:	4621      	mov	r1, r4
 8006cf4:	b991      	cbnz	r1, 8006d1c <_malloc_r+0x54>
 8006cf6:	4c22      	ldr	r4, [pc, #136]	; (8006d80 <_malloc_r+0xb8>)
 8006cf8:	6823      	ldr	r3, [r4, #0]
 8006cfa:	b91b      	cbnz	r3, 8006d04 <_malloc_r+0x3c>
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	f000 f8a5 	bl	8006e4c <_sbrk_r>
 8006d02:	6020      	str	r0, [r4, #0]
 8006d04:	4629      	mov	r1, r5
 8006d06:	4630      	mov	r0, r6
 8006d08:	f000 f8a0 	bl	8006e4c <_sbrk_r>
 8006d0c:	1c43      	adds	r3, r0, #1
 8006d0e:	d126      	bne.n	8006d5e <_malloc_r+0x96>
 8006d10:	230c      	movs	r3, #12
 8006d12:	6033      	str	r3, [r6, #0]
 8006d14:	4630      	mov	r0, r6
 8006d16:	f000 fc22 	bl	800755e <__malloc_unlock>
 8006d1a:	e7e4      	b.n	8006ce6 <_malloc_r+0x1e>
 8006d1c:	680b      	ldr	r3, [r1, #0]
 8006d1e:	1b5b      	subs	r3, r3, r5
 8006d20:	d41a      	bmi.n	8006d58 <_malloc_r+0x90>
 8006d22:	2b0b      	cmp	r3, #11
 8006d24:	d90f      	bls.n	8006d46 <_malloc_r+0x7e>
 8006d26:	600b      	str	r3, [r1, #0]
 8006d28:	50cd      	str	r5, [r1, r3]
 8006d2a:	18cc      	adds	r4, r1, r3
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	f000 fc16 	bl	800755e <__malloc_unlock>
 8006d32:	f104 000b 	add.w	r0, r4, #11
 8006d36:	1d23      	adds	r3, r4, #4
 8006d38:	f020 0007 	bic.w	r0, r0, #7
 8006d3c:	1ac3      	subs	r3, r0, r3
 8006d3e:	d01b      	beq.n	8006d78 <_malloc_r+0xb0>
 8006d40:	425a      	negs	r2, r3
 8006d42:	50e2      	str	r2, [r4, r3]
 8006d44:	bd70      	pop	{r4, r5, r6, pc}
 8006d46:	428c      	cmp	r4, r1
 8006d48:	bf0d      	iteet	eq
 8006d4a:	6863      	ldreq	r3, [r4, #4]
 8006d4c:	684b      	ldrne	r3, [r1, #4]
 8006d4e:	6063      	strne	r3, [r4, #4]
 8006d50:	6013      	streq	r3, [r2, #0]
 8006d52:	bf18      	it	ne
 8006d54:	460c      	movne	r4, r1
 8006d56:	e7e9      	b.n	8006d2c <_malloc_r+0x64>
 8006d58:	460c      	mov	r4, r1
 8006d5a:	6849      	ldr	r1, [r1, #4]
 8006d5c:	e7ca      	b.n	8006cf4 <_malloc_r+0x2c>
 8006d5e:	1cc4      	adds	r4, r0, #3
 8006d60:	f024 0403 	bic.w	r4, r4, #3
 8006d64:	42a0      	cmp	r0, r4
 8006d66:	d005      	beq.n	8006d74 <_malloc_r+0xac>
 8006d68:	1a21      	subs	r1, r4, r0
 8006d6a:	4630      	mov	r0, r6
 8006d6c:	f000 f86e 	bl	8006e4c <_sbrk_r>
 8006d70:	3001      	adds	r0, #1
 8006d72:	d0cd      	beq.n	8006d10 <_malloc_r+0x48>
 8006d74:	6025      	str	r5, [r4, #0]
 8006d76:	e7d9      	b.n	8006d2c <_malloc_r+0x64>
 8006d78:	bd70      	pop	{r4, r5, r6, pc}
 8006d7a:	bf00      	nop
 8006d7c:	200002ac 	.word	0x200002ac
 8006d80:	200002b0 	.word	0x200002b0

08006d84 <_puts_r>:
 8006d84:	b570      	push	{r4, r5, r6, lr}
 8006d86:	460e      	mov	r6, r1
 8006d88:	4605      	mov	r5, r0
 8006d8a:	b118      	cbz	r0, 8006d94 <_puts_r+0x10>
 8006d8c:	6983      	ldr	r3, [r0, #24]
 8006d8e:	b90b      	cbnz	r3, 8006d94 <_puts_r+0x10>
 8006d90:	f000 fae0 	bl	8007354 <__sinit>
 8006d94:	69ab      	ldr	r3, [r5, #24]
 8006d96:	68ac      	ldr	r4, [r5, #8]
 8006d98:	b913      	cbnz	r3, 8006da0 <_puts_r+0x1c>
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	f000 fada 	bl	8007354 <__sinit>
 8006da0:	4b23      	ldr	r3, [pc, #140]	; (8006e30 <_puts_r+0xac>)
 8006da2:	429c      	cmp	r4, r3
 8006da4:	d117      	bne.n	8006dd6 <_puts_r+0x52>
 8006da6:	686c      	ldr	r4, [r5, #4]
 8006da8:	89a3      	ldrh	r3, [r4, #12]
 8006daa:	071b      	lsls	r3, r3, #28
 8006dac:	d51d      	bpl.n	8006dea <_puts_r+0x66>
 8006dae:	6923      	ldr	r3, [r4, #16]
 8006db0:	b1db      	cbz	r3, 8006dea <_puts_r+0x66>
 8006db2:	3e01      	subs	r6, #1
 8006db4:	68a3      	ldr	r3, [r4, #8]
 8006db6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	60a3      	str	r3, [r4, #8]
 8006dbe:	b9e9      	cbnz	r1, 8006dfc <_puts_r+0x78>
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	da2e      	bge.n	8006e22 <_puts_r+0x9e>
 8006dc4:	4622      	mov	r2, r4
 8006dc6:	210a      	movs	r1, #10
 8006dc8:	4628      	mov	r0, r5
 8006dca:	f000 f911 	bl	8006ff0 <__swbuf_r>
 8006dce:	3001      	adds	r0, #1
 8006dd0:	d011      	beq.n	8006df6 <_puts_r+0x72>
 8006dd2:	200a      	movs	r0, #10
 8006dd4:	bd70      	pop	{r4, r5, r6, pc}
 8006dd6:	4b17      	ldr	r3, [pc, #92]	; (8006e34 <_puts_r+0xb0>)
 8006dd8:	429c      	cmp	r4, r3
 8006dda:	d101      	bne.n	8006de0 <_puts_r+0x5c>
 8006ddc:	68ac      	ldr	r4, [r5, #8]
 8006dde:	e7e3      	b.n	8006da8 <_puts_r+0x24>
 8006de0:	4b15      	ldr	r3, [pc, #84]	; (8006e38 <_puts_r+0xb4>)
 8006de2:	429c      	cmp	r4, r3
 8006de4:	bf08      	it	eq
 8006de6:	68ec      	ldreq	r4, [r5, #12]
 8006de8:	e7de      	b.n	8006da8 <_puts_r+0x24>
 8006dea:	4621      	mov	r1, r4
 8006dec:	4628      	mov	r0, r5
 8006dee:	f000 f951 	bl	8007094 <__swsetup_r>
 8006df2:	2800      	cmp	r0, #0
 8006df4:	d0dd      	beq.n	8006db2 <_puts_r+0x2e>
 8006df6:	f04f 30ff 	mov.w	r0, #4294967295
 8006dfa:	bd70      	pop	{r4, r5, r6, pc}
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	da04      	bge.n	8006e0a <_puts_r+0x86>
 8006e00:	69a2      	ldr	r2, [r4, #24]
 8006e02:	4293      	cmp	r3, r2
 8006e04:	db06      	blt.n	8006e14 <_puts_r+0x90>
 8006e06:	290a      	cmp	r1, #10
 8006e08:	d004      	beq.n	8006e14 <_puts_r+0x90>
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	6022      	str	r2, [r4, #0]
 8006e10:	7019      	strb	r1, [r3, #0]
 8006e12:	e7cf      	b.n	8006db4 <_puts_r+0x30>
 8006e14:	4622      	mov	r2, r4
 8006e16:	4628      	mov	r0, r5
 8006e18:	f000 f8ea 	bl	8006ff0 <__swbuf_r>
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	d1c9      	bne.n	8006db4 <_puts_r+0x30>
 8006e20:	e7e9      	b.n	8006df6 <_puts_r+0x72>
 8006e22:	6823      	ldr	r3, [r4, #0]
 8006e24:	200a      	movs	r0, #10
 8006e26:	1c5a      	adds	r2, r3, #1
 8006e28:	6022      	str	r2, [r4, #0]
 8006e2a:	7018      	strb	r0, [r3, #0]
 8006e2c:	bd70      	pop	{r4, r5, r6, pc}
 8006e2e:	bf00      	nop
 8006e30:	08008100 	.word	0x08008100
 8006e34:	08008120 	.word	0x08008120
 8006e38:	080080e0 	.word	0x080080e0

08006e3c <puts>:
 8006e3c:	4b02      	ldr	r3, [pc, #8]	; (8006e48 <puts+0xc>)
 8006e3e:	4601      	mov	r1, r0
 8006e40:	6818      	ldr	r0, [r3, #0]
 8006e42:	f7ff bf9f 	b.w	8006d84 <_puts_r>
 8006e46:	bf00      	nop
 8006e48:	2000008c 	.word	0x2000008c

08006e4c <_sbrk_r>:
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	4c06      	ldr	r4, [pc, #24]	; (8006e68 <_sbrk_r+0x1c>)
 8006e50:	2300      	movs	r3, #0
 8006e52:	4605      	mov	r5, r0
 8006e54:	4608      	mov	r0, r1
 8006e56:	6023      	str	r3, [r4, #0]
 8006e58:	f000 ff92 	bl	8007d80 <_sbrk>
 8006e5c:	1c43      	adds	r3, r0, #1
 8006e5e:	d102      	bne.n	8006e66 <_sbrk_r+0x1a>
 8006e60:	6823      	ldr	r3, [r4, #0]
 8006e62:	b103      	cbz	r3, 8006e66 <_sbrk_r+0x1a>
 8006e64:	602b      	str	r3, [r5, #0]
 8006e66:	bd38      	pop	{r3, r4, r5, pc}
 8006e68:	200022c8 	.word	0x200022c8

08006e6c <siprintf>:
 8006e6c:	b40e      	push	{r1, r2, r3}
 8006e6e:	b500      	push	{lr}
 8006e70:	b09c      	sub	sp, #112	; 0x70
 8006e72:	f44f 7102 	mov.w	r1, #520	; 0x208
 8006e76:	ab1d      	add	r3, sp, #116	; 0x74
 8006e78:	f8ad 1014 	strh.w	r1, [sp, #20]
 8006e7c:	9002      	str	r0, [sp, #8]
 8006e7e:	9006      	str	r0, [sp, #24]
 8006e80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e84:	480a      	ldr	r0, [pc, #40]	; (8006eb0 <siprintf+0x44>)
 8006e86:	9104      	str	r1, [sp, #16]
 8006e88:	9107      	str	r1, [sp, #28]
 8006e8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006e8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e92:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006e96:	6800      	ldr	r0, [r0, #0]
 8006e98:	9301      	str	r3, [sp, #4]
 8006e9a:	a902      	add	r1, sp, #8
 8006e9c:	f000 fbbc 	bl	8007618 <_svfiprintf_r>
 8006ea0:	9b02      	ldr	r3, [sp, #8]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	701a      	strb	r2, [r3, #0]
 8006ea6:	b01c      	add	sp, #112	; 0x70
 8006ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006eac:	b003      	add	sp, #12
 8006eae:	4770      	bx	lr
 8006eb0:	2000008c 	.word	0x2000008c

08006eb4 <strcpy>:
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006eba:	f803 2b01 	strb.w	r2, [r3], #1
 8006ebe:	2a00      	cmp	r2, #0
 8006ec0:	d1f9      	bne.n	8006eb6 <strcpy+0x2>
 8006ec2:	4770      	bx	lr

08006ec4 <_strtol_l.isra.0>:
 8006ec4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec8:	4680      	mov	r8, r0
 8006eca:	4689      	mov	r9, r1
 8006ecc:	4692      	mov	sl, r2
 8006ece:	461f      	mov	r7, r3
 8006ed0:	468b      	mov	fp, r1
 8006ed2:	465d      	mov	r5, fp
 8006ed4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006ed6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006eda:	f000 fac5 	bl	8007468 <__locale_ctype_ptr_l>
 8006ede:	4420      	add	r0, r4
 8006ee0:	7846      	ldrb	r6, [r0, #1]
 8006ee2:	f016 0608 	ands.w	r6, r6, #8
 8006ee6:	d10b      	bne.n	8006f00 <_strtol_l.isra.0+0x3c>
 8006ee8:	2c2d      	cmp	r4, #45	; 0x2d
 8006eea:	d10b      	bne.n	8006f04 <_strtol_l.isra.0+0x40>
 8006eec:	782c      	ldrb	r4, [r5, #0]
 8006eee:	2601      	movs	r6, #1
 8006ef0:	f10b 0502 	add.w	r5, fp, #2
 8006ef4:	b167      	cbz	r7, 8006f10 <_strtol_l.isra.0+0x4c>
 8006ef6:	2f10      	cmp	r7, #16
 8006ef8:	d114      	bne.n	8006f24 <_strtol_l.isra.0+0x60>
 8006efa:	2c30      	cmp	r4, #48	; 0x30
 8006efc:	d00a      	beq.n	8006f14 <_strtol_l.isra.0+0x50>
 8006efe:	e011      	b.n	8006f24 <_strtol_l.isra.0+0x60>
 8006f00:	46ab      	mov	fp, r5
 8006f02:	e7e6      	b.n	8006ed2 <_strtol_l.isra.0+0xe>
 8006f04:	2c2b      	cmp	r4, #43	; 0x2b
 8006f06:	bf04      	itt	eq
 8006f08:	782c      	ldrbeq	r4, [r5, #0]
 8006f0a:	f10b 0502 	addeq.w	r5, fp, #2
 8006f0e:	e7f1      	b.n	8006ef4 <_strtol_l.isra.0+0x30>
 8006f10:	2c30      	cmp	r4, #48	; 0x30
 8006f12:	d127      	bne.n	8006f64 <_strtol_l.isra.0+0xa0>
 8006f14:	782b      	ldrb	r3, [r5, #0]
 8006f16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006f1a:	2b58      	cmp	r3, #88	; 0x58
 8006f1c:	d14b      	bne.n	8006fb6 <_strtol_l.isra.0+0xf2>
 8006f1e:	786c      	ldrb	r4, [r5, #1]
 8006f20:	2710      	movs	r7, #16
 8006f22:	3502      	adds	r5, #2
 8006f24:	2e00      	cmp	r6, #0
 8006f26:	bf0c      	ite	eq
 8006f28:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006f2c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006f30:	2200      	movs	r2, #0
 8006f32:	fbb1 fef7 	udiv	lr, r1, r7
 8006f36:	4610      	mov	r0, r2
 8006f38:	fb07 1c1e 	mls	ip, r7, lr, r1
 8006f3c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006f40:	2b09      	cmp	r3, #9
 8006f42:	d811      	bhi.n	8006f68 <_strtol_l.isra.0+0xa4>
 8006f44:	461c      	mov	r4, r3
 8006f46:	42a7      	cmp	r7, r4
 8006f48:	dd1d      	ble.n	8006f86 <_strtol_l.isra.0+0xc2>
 8006f4a:	1c53      	adds	r3, r2, #1
 8006f4c:	d007      	beq.n	8006f5e <_strtol_l.isra.0+0x9a>
 8006f4e:	4586      	cmp	lr, r0
 8006f50:	d316      	bcc.n	8006f80 <_strtol_l.isra.0+0xbc>
 8006f52:	d101      	bne.n	8006f58 <_strtol_l.isra.0+0x94>
 8006f54:	45a4      	cmp	ip, r4
 8006f56:	db13      	blt.n	8006f80 <_strtol_l.isra.0+0xbc>
 8006f58:	fb00 4007 	mla	r0, r0, r7, r4
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f62:	e7eb      	b.n	8006f3c <_strtol_l.isra.0+0x78>
 8006f64:	270a      	movs	r7, #10
 8006f66:	e7dd      	b.n	8006f24 <_strtol_l.isra.0+0x60>
 8006f68:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006f6c:	2b19      	cmp	r3, #25
 8006f6e:	d801      	bhi.n	8006f74 <_strtol_l.isra.0+0xb0>
 8006f70:	3c37      	subs	r4, #55	; 0x37
 8006f72:	e7e8      	b.n	8006f46 <_strtol_l.isra.0+0x82>
 8006f74:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006f78:	2b19      	cmp	r3, #25
 8006f7a:	d804      	bhi.n	8006f86 <_strtol_l.isra.0+0xc2>
 8006f7c:	3c57      	subs	r4, #87	; 0x57
 8006f7e:	e7e2      	b.n	8006f46 <_strtol_l.isra.0+0x82>
 8006f80:	f04f 32ff 	mov.w	r2, #4294967295
 8006f84:	e7eb      	b.n	8006f5e <_strtol_l.isra.0+0x9a>
 8006f86:	1c53      	adds	r3, r2, #1
 8006f88:	d108      	bne.n	8006f9c <_strtol_l.isra.0+0xd8>
 8006f8a:	2322      	movs	r3, #34	; 0x22
 8006f8c:	f8c8 3000 	str.w	r3, [r8]
 8006f90:	4608      	mov	r0, r1
 8006f92:	f1ba 0f00 	cmp.w	sl, #0
 8006f96:	d107      	bne.n	8006fa8 <_strtol_l.isra.0+0xe4>
 8006f98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f9c:	b106      	cbz	r6, 8006fa0 <_strtol_l.isra.0+0xdc>
 8006f9e:	4240      	negs	r0, r0
 8006fa0:	f1ba 0f00 	cmp.w	sl, #0
 8006fa4:	d00c      	beq.n	8006fc0 <_strtol_l.isra.0+0xfc>
 8006fa6:	b122      	cbz	r2, 8006fb2 <_strtol_l.isra.0+0xee>
 8006fa8:	3d01      	subs	r5, #1
 8006faa:	f8ca 5000 	str.w	r5, [sl]
 8006fae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb2:	464d      	mov	r5, r9
 8006fb4:	e7f9      	b.n	8006faa <_strtol_l.isra.0+0xe6>
 8006fb6:	2430      	movs	r4, #48	; 0x30
 8006fb8:	2f00      	cmp	r7, #0
 8006fba:	d1b3      	bne.n	8006f24 <_strtol_l.isra.0+0x60>
 8006fbc:	2708      	movs	r7, #8
 8006fbe:	e7b1      	b.n	8006f24 <_strtol_l.isra.0+0x60>
 8006fc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006fc4 <strtol>:
 8006fc4:	4b08      	ldr	r3, [pc, #32]	; (8006fe8 <strtol+0x24>)
 8006fc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fc8:	681c      	ldr	r4, [r3, #0]
 8006fca:	4d08      	ldr	r5, [pc, #32]	; (8006fec <strtol+0x28>)
 8006fcc:	6a23      	ldr	r3, [r4, #32]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	bf08      	it	eq
 8006fd2:	462b      	moveq	r3, r5
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	460a      	mov	r2, r1
 8006fda:	4601      	mov	r1, r0
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f7ff ff71 	bl	8006ec4 <_strtol_l.isra.0>
 8006fe2:	b003      	add	sp, #12
 8006fe4:	bd30      	pop	{r4, r5, pc}
 8006fe6:	bf00      	nop
 8006fe8:	2000008c 	.word	0x2000008c
 8006fec:	200000f0 	.word	0x200000f0

08006ff0 <__swbuf_r>:
 8006ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff2:	460e      	mov	r6, r1
 8006ff4:	4614      	mov	r4, r2
 8006ff6:	4605      	mov	r5, r0
 8006ff8:	b118      	cbz	r0, 8007002 <__swbuf_r+0x12>
 8006ffa:	6983      	ldr	r3, [r0, #24]
 8006ffc:	b90b      	cbnz	r3, 8007002 <__swbuf_r+0x12>
 8006ffe:	f000 f9a9 	bl	8007354 <__sinit>
 8007002:	4b21      	ldr	r3, [pc, #132]	; (8007088 <__swbuf_r+0x98>)
 8007004:	429c      	cmp	r4, r3
 8007006:	d12a      	bne.n	800705e <__swbuf_r+0x6e>
 8007008:	686c      	ldr	r4, [r5, #4]
 800700a:	69a3      	ldr	r3, [r4, #24]
 800700c:	60a3      	str	r3, [r4, #8]
 800700e:	89a3      	ldrh	r3, [r4, #12]
 8007010:	071a      	lsls	r2, r3, #28
 8007012:	d52e      	bpl.n	8007072 <__swbuf_r+0x82>
 8007014:	6923      	ldr	r3, [r4, #16]
 8007016:	b363      	cbz	r3, 8007072 <__swbuf_r+0x82>
 8007018:	6923      	ldr	r3, [r4, #16]
 800701a:	6820      	ldr	r0, [r4, #0]
 800701c:	1ac0      	subs	r0, r0, r3
 800701e:	6963      	ldr	r3, [r4, #20]
 8007020:	b2f6      	uxtb	r6, r6
 8007022:	4298      	cmp	r0, r3
 8007024:	4637      	mov	r7, r6
 8007026:	db04      	blt.n	8007032 <__swbuf_r+0x42>
 8007028:	4621      	mov	r1, r4
 800702a:	4628      	mov	r0, r5
 800702c:	f000 f928 	bl	8007280 <_fflush_r>
 8007030:	bb28      	cbnz	r0, 800707e <__swbuf_r+0x8e>
 8007032:	68a3      	ldr	r3, [r4, #8]
 8007034:	3b01      	subs	r3, #1
 8007036:	60a3      	str	r3, [r4, #8]
 8007038:	6823      	ldr	r3, [r4, #0]
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	6022      	str	r2, [r4, #0]
 800703e:	701e      	strb	r6, [r3, #0]
 8007040:	6963      	ldr	r3, [r4, #20]
 8007042:	3001      	adds	r0, #1
 8007044:	4298      	cmp	r0, r3
 8007046:	d004      	beq.n	8007052 <__swbuf_r+0x62>
 8007048:	89a3      	ldrh	r3, [r4, #12]
 800704a:	07db      	lsls	r3, r3, #31
 800704c:	d519      	bpl.n	8007082 <__swbuf_r+0x92>
 800704e:	2e0a      	cmp	r6, #10
 8007050:	d117      	bne.n	8007082 <__swbuf_r+0x92>
 8007052:	4621      	mov	r1, r4
 8007054:	4628      	mov	r0, r5
 8007056:	f000 f913 	bl	8007280 <_fflush_r>
 800705a:	b190      	cbz	r0, 8007082 <__swbuf_r+0x92>
 800705c:	e00f      	b.n	800707e <__swbuf_r+0x8e>
 800705e:	4b0b      	ldr	r3, [pc, #44]	; (800708c <__swbuf_r+0x9c>)
 8007060:	429c      	cmp	r4, r3
 8007062:	d101      	bne.n	8007068 <__swbuf_r+0x78>
 8007064:	68ac      	ldr	r4, [r5, #8]
 8007066:	e7d0      	b.n	800700a <__swbuf_r+0x1a>
 8007068:	4b09      	ldr	r3, [pc, #36]	; (8007090 <__swbuf_r+0xa0>)
 800706a:	429c      	cmp	r4, r3
 800706c:	bf08      	it	eq
 800706e:	68ec      	ldreq	r4, [r5, #12]
 8007070:	e7cb      	b.n	800700a <__swbuf_r+0x1a>
 8007072:	4621      	mov	r1, r4
 8007074:	4628      	mov	r0, r5
 8007076:	f000 f80d 	bl	8007094 <__swsetup_r>
 800707a:	2800      	cmp	r0, #0
 800707c:	d0cc      	beq.n	8007018 <__swbuf_r+0x28>
 800707e:	f04f 37ff 	mov.w	r7, #4294967295
 8007082:	4638      	mov	r0, r7
 8007084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007086:	bf00      	nop
 8007088:	08008100 	.word	0x08008100
 800708c:	08008120 	.word	0x08008120
 8007090:	080080e0 	.word	0x080080e0

08007094 <__swsetup_r>:
 8007094:	4b32      	ldr	r3, [pc, #200]	; (8007160 <__swsetup_r+0xcc>)
 8007096:	b570      	push	{r4, r5, r6, lr}
 8007098:	681d      	ldr	r5, [r3, #0]
 800709a:	4606      	mov	r6, r0
 800709c:	460c      	mov	r4, r1
 800709e:	b125      	cbz	r5, 80070aa <__swsetup_r+0x16>
 80070a0:	69ab      	ldr	r3, [r5, #24]
 80070a2:	b913      	cbnz	r3, 80070aa <__swsetup_r+0x16>
 80070a4:	4628      	mov	r0, r5
 80070a6:	f000 f955 	bl	8007354 <__sinit>
 80070aa:	4b2e      	ldr	r3, [pc, #184]	; (8007164 <__swsetup_r+0xd0>)
 80070ac:	429c      	cmp	r4, r3
 80070ae:	d10f      	bne.n	80070d0 <__swsetup_r+0x3c>
 80070b0:	686c      	ldr	r4, [r5, #4]
 80070b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	0715      	lsls	r5, r2, #28
 80070ba:	d42c      	bmi.n	8007116 <__swsetup_r+0x82>
 80070bc:	06d0      	lsls	r0, r2, #27
 80070be:	d411      	bmi.n	80070e4 <__swsetup_r+0x50>
 80070c0:	2209      	movs	r2, #9
 80070c2:	6032      	str	r2, [r6, #0]
 80070c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070c8:	81a3      	strh	r3, [r4, #12]
 80070ca:	f04f 30ff 	mov.w	r0, #4294967295
 80070ce:	bd70      	pop	{r4, r5, r6, pc}
 80070d0:	4b25      	ldr	r3, [pc, #148]	; (8007168 <__swsetup_r+0xd4>)
 80070d2:	429c      	cmp	r4, r3
 80070d4:	d101      	bne.n	80070da <__swsetup_r+0x46>
 80070d6:	68ac      	ldr	r4, [r5, #8]
 80070d8:	e7eb      	b.n	80070b2 <__swsetup_r+0x1e>
 80070da:	4b24      	ldr	r3, [pc, #144]	; (800716c <__swsetup_r+0xd8>)
 80070dc:	429c      	cmp	r4, r3
 80070de:	bf08      	it	eq
 80070e0:	68ec      	ldreq	r4, [r5, #12]
 80070e2:	e7e6      	b.n	80070b2 <__swsetup_r+0x1e>
 80070e4:	0751      	lsls	r1, r2, #29
 80070e6:	d512      	bpl.n	800710e <__swsetup_r+0x7a>
 80070e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070ea:	b141      	cbz	r1, 80070fe <__swsetup_r+0x6a>
 80070ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070f0:	4299      	cmp	r1, r3
 80070f2:	d002      	beq.n	80070fa <__swsetup_r+0x66>
 80070f4:	4630      	mov	r0, r6
 80070f6:	f7ff fd99 	bl	8006c2c <_free_r>
 80070fa:	2300      	movs	r3, #0
 80070fc:	6363      	str	r3, [r4, #52]	; 0x34
 80070fe:	89a3      	ldrh	r3, [r4, #12]
 8007100:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007104:	81a3      	strh	r3, [r4, #12]
 8007106:	2300      	movs	r3, #0
 8007108:	6063      	str	r3, [r4, #4]
 800710a:	6923      	ldr	r3, [r4, #16]
 800710c:	6023      	str	r3, [r4, #0]
 800710e:	89a3      	ldrh	r3, [r4, #12]
 8007110:	f043 0308 	orr.w	r3, r3, #8
 8007114:	81a3      	strh	r3, [r4, #12]
 8007116:	6923      	ldr	r3, [r4, #16]
 8007118:	b94b      	cbnz	r3, 800712e <__swsetup_r+0x9a>
 800711a:	89a3      	ldrh	r3, [r4, #12]
 800711c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007124:	d003      	beq.n	800712e <__swsetup_r+0x9a>
 8007126:	4621      	mov	r1, r4
 8007128:	4630      	mov	r0, r6
 800712a:	f000 f9c5 	bl	80074b8 <__smakebuf_r>
 800712e:	89a2      	ldrh	r2, [r4, #12]
 8007130:	f012 0301 	ands.w	r3, r2, #1
 8007134:	d00c      	beq.n	8007150 <__swsetup_r+0xbc>
 8007136:	2300      	movs	r3, #0
 8007138:	60a3      	str	r3, [r4, #8]
 800713a:	6963      	ldr	r3, [r4, #20]
 800713c:	425b      	negs	r3, r3
 800713e:	61a3      	str	r3, [r4, #24]
 8007140:	6923      	ldr	r3, [r4, #16]
 8007142:	b953      	cbnz	r3, 800715a <__swsetup_r+0xc6>
 8007144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007148:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800714c:	d1ba      	bne.n	80070c4 <__swsetup_r+0x30>
 800714e:	bd70      	pop	{r4, r5, r6, pc}
 8007150:	0792      	lsls	r2, r2, #30
 8007152:	bf58      	it	pl
 8007154:	6963      	ldrpl	r3, [r4, #20]
 8007156:	60a3      	str	r3, [r4, #8]
 8007158:	e7f2      	b.n	8007140 <__swsetup_r+0xac>
 800715a:	2000      	movs	r0, #0
 800715c:	e7f7      	b.n	800714e <__swsetup_r+0xba>
 800715e:	bf00      	nop
 8007160:	2000008c 	.word	0x2000008c
 8007164:	08008100 	.word	0x08008100
 8007168:	08008120 	.word	0x08008120
 800716c:	080080e0 	.word	0x080080e0

08007170 <__sflush_r>:
 8007170:	898a      	ldrh	r2, [r1, #12]
 8007172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007176:	4605      	mov	r5, r0
 8007178:	0710      	lsls	r0, r2, #28
 800717a:	460c      	mov	r4, r1
 800717c:	d45a      	bmi.n	8007234 <__sflush_r+0xc4>
 800717e:	684b      	ldr	r3, [r1, #4]
 8007180:	2b00      	cmp	r3, #0
 8007182:	dc05      	bgt.n	8007190 <__sflush_r+0x20>
 8007184:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007186:	2b00      	cmp	r3, #0
 8007188:	dc02      	bgt.n	8007190 <__sflush_r+0x20>
 800718a:	2000      	movs	r0, #0
 800718c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007190:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007192:	2e00      	cmp	r6, #0
 8007194:	d0f9      	beq.n	800718a <__sflush_r+0x1a>
 8007196:	2300      	movs	r3, #0
 8007198:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800719c:	682f      	ldr	r7, [r5, #0]
 800719e:	602b      	str	r3, [r5, #0]
 80071a0:	d033      	beq.n	800720a <__sflush_r+0x9a>
 80071a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80071a4:	89a3      	ldrh	r3, [r4, #12]
 80071a6:	075a      	lsls	r2, r3, #29
 80071a8:	d505      	bpl.n	80071b6 <__sflush_r+0x46>
 80071aa:	6863      	ldr	r3, [r4, #4]
 80071ac:	1ac0      	subs	r0, r0, r3
 80071ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071b0:	b10b      	cbz	r3, 80071b6 <__sflush_r+0x46>
 80071b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071b4:	1ac0      	subs	r0, r0, r3
 80071b6:	2300      	movs	r3, #0
 80071b8:	4602      	mov	r2, r0
 80071ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071bc:	6a21      	ldr	r1, [r4, #32]
 80071be:	4628      	mov	r0, r5
 80071c0:	47b0      	blx	r6
 80071c2:	1c43      	adds	r3, r0, #1
 80071c4:	89a3      	ldrh	r3, [r4, #12]
 80071c6:	d106      	bne.n	80071d6 <__sflush_r+0x66>
 80071c8:	6829      	ldr	r1, [r5, #0]
 80071ca:	291d      	cmp	r1, #29
 80071cc:	d84b      	bhi.n	8007266 <__sflush_r+0xf6>
 80071ce:	4a2b      	ldr	r2, [pc, #172]	; (800727c <__sflush_r+0x10c>)
 80071d0:	40ca      	lsrs	r2, r1
 80071d2:	07d6      	lsls	r6, r2, #31
 80071d4:	d547      	bpl.n	8007266 <__sflush_r+0xf6>
 80071d6:	2200      	movs	r2, #0
 80071d8:	6062      	str	r2, [r4, #4]
 80071da:	04d9      	lsls	r1, r3, #19
 80071dc:	6922      	ldr	r2, [r4, #16]
 80071de:	6022      	str	r2, [r4, #0]
 80071e0:	d504      	bpl.n	80071ec <__sflush_r+0x7c>
 80071e2:	1c42      	adds	r2, r0, #1
 80071e4:	d101      	bne.n	80071ea <__sflush_r+0x7a>
 80071e6:	682b      	ldr	r3, [r5, #0]
 80071e8:	b903      	cbnz	r3, 80071ec <__sflush_r+0x7c>
 80071ea:	6560      	str	r0, [r4, #84]	; 0x54
 80071ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071ee:	602f      	str	r7, [r5, #0]
 80071f0:	2900      	cmp	r1, #0
 80071f2:	d0ca      	beq.n	800718a <__sflush_r+0x1a>
 80071f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071f8:	4299      	cmp	r1, r3
 80071fa:	d002      	beq.n	8007202 <__sflush_r+0x92>
 80071fc:	4628      	mov	r0, r5
 80071fe:	f7ff fd15 	bl	8006c2c <_free_r>
 8007202:	2000      	movs	r0, #0
 8007204:	6360      	str	r0, [r4, #52]	; 0x34
 8007206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800720a:	6a21      	ldr	r1, [r4, #32]
 800720c:	2301      	movs	r3, #1
 800720e:	4628      	mov	r0, r5
 8007210:	47b0      	blx	r6
 8007212:	1c41      	adds	r1, r0, #1
 8007214:	d1c6      	bne.n	80071a4 <__sflush_r+0x34>
 8007216:	682b      	ldr	r3, [r5, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d0c3      	beq.n	80071a4 <__sflush_r+0x34>
 800721c:	2b1d      	cmp	r3, #29
 800721e:	d001      	beq.n	8007224 <__sflush_r+0xb4>
 8007220:	2b16      	cmp	r3, #22
 8007222:	d101      	bne.n	8007228 <__sflush_r+0xb8>
 8007224:	602f      	str	r7, [r5, #0]
 8007226:	e7b0      	b.n	800718a <__sflush_r+0x1a>
 8007228:	89a3      	ldrh	r3, [r4, #12]
 800722a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800722e:	81a3      	strh	r3, [r4, #12]
 8007230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007234:	690f      	ldr	r7, [r1, #16]
 8007236:	2f00      	cmp	r7, #0
 8007238:	d0a7      	beq.n	800718a <__sflush_r+0x1a>
 800723a:	0793      	lsls	r3, r2, #30
 800723c:	680e      	ldr	r6, [r1, #0]
 800723e:	bf08      	it	eq
 8007240:	694b      	ldreq	r3, [r1, #20]
 8007242:	600f      	str	r7, [r1, #0]
 8007244:	bf18      	it	ne
 8007246:	2300      	movne	r3, #0
 8007248:	eba6 0807 	sub.w	r8, r6, r7
 800724c:	608b      	str	r3, [r1, #8]
 800724e:	f1b8 0f00 	cmp.w	r8, #0
 8007252:	dd9a      	ble.n	800718a <__sflush_r+0x1a>
 8007254:	4643      	mov	r3, r8
 8007256:	463a      	mov	r2, r7
 8007258:	6a21      	ldr	r1, [r4, #32]
 800725a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800725c:	4628      	mov	r0, r5
 800725e:	47b0      	blx	r6
 8007260:	2800      	cmp	r0, #0
 8007262:	dc07      	bgt.n	8007274 <__sflush_r+0x104>
 8007264:	89a3      	ldrh	r3, [r4, #12]
 8007266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800726a:	81a3      	strh	r3, [r4, #12]
 800726c:	f04f 30ff 	mov.w	r0, #4294967295
 8007270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007274:	4407      	add	r7, r0
 8007276:	eba8 0800 	sub.w	r8, r8, r0
 800727a:	e7e8      	b.n	800724e <__sflush_r+0xde>
 800727c:	20400001 	.word	0x20400001

08007280 <_fflush_r>:
 8007280:	b538      	push	{r3, r4, r5, lr}
 8007282:	690b      	ldr	r3, [r1, #16]
 8007284:	4605      	mov	r5, r0
 8007286:	460c      	mov	r4, r1
 8007288:	b1db      	cbz	r3, 80072c2 <_fflush_r+0x42>
 800728a:	b118      	cbz	r0, 8007294 <_fflush_r+0x14>
 800728c:	6983      	ldr	r3, [r0, #24]
 800728e:	b90b      	cbnz	r3, 8007294 <_fflush_r+0x14>
 8007290:	f000 f860 	bl	8007354 <__sinit>
 8007294:	4b0c      	ldr	r3, [pc, #48]	; (80072c8 <_fflush_r+0x48>)
 8007296:	429c      	cmp	r4, r3
 8007298:	d109      	bne.n	80072ae <_fflush_r+0x2e>
 800729a:	686c      	ldr	r4, [r5, #4]
 800729c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072a0:	b17b      	cbz	r3, 80072c2 <_fflush_r+0x42>
 80072a2:	4621      	mov	r1, r4
 80072a4:	4628      	mov	r0, r5
 80072a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072aa:	f7ff bf61 	b.w	8007170 <__sflush_r>
 80072ae:	4b07      	ldr	r3, [pc, #28]	; (80072cc <_fflush_r+0x4c>)
 80072b0:	429c      	cmp	r4, r3
 80072b2:	d101      	bne.n	80072b8 <_fflush_r+0x38>
 80072b4:	68ac      	ldr	r4, [r5, #8]
 80072b6:	e7f1      	b.n	800729c <_fflush_r+0x1c>
 80072b8:	4b05      	ldr	r3, [pc, #20]	; (80072d0 <_fflush_r+0x50>)
 80072ba:	429c      	cmp	r4, r3
 80072bc:	bf08      	it	eq
 80072be:	68ec      	ldreq	r4, [r5, #12]
 80072c0:	e7ec      	b.n	800729c <_fflush_r+0x1c>
 80072c2:	2000      	movs	r0, #0
 80072c4:	bd38      	pop	{r3, r4, r5, pc}
 80072c6:	bf00      	nop
 80072c8:	08008100 	.word	0x08008100
 80072cc:	08008120 	.word	0x08008120
 80072d0:	080080e0 	.word	0x080080e0

080072d4 <_cleanup_r>:
 80072d4:	4901      	ldr	r1, [pc, #4]	; (80072dc <_cleanup_r+0x8>)
 80072d6:	f000 b8a9 	b.w	800742c <_fwalk_reent>
 80072da:	bf00      	nop
 80072dc:	08007281 	.word	0x08007281

080072e0 <std.isra.0>:
 80072e0:	2300      	movs	r3, #0
 80072e2:	b510      	push	{r4, lr}
 80072e4:	4604      	mov	r4, r0
 80072e6:	6003      	str	r3, [r0, #0]
 80072e8:	6043      	str	r3, [r0, #4]
 80072ea:	6083      	str	r3, [r0, #8]
 80072ec:	8181      	strh	r1, [r0, #12]
 80072ee:	6643      	str	r3, [r0, #100]	; 0x64
 80072f0:	81c2      	strh	r2, [r0, #14]
 80072f2:	6103      	str	r3, [r0, #16]
 80072f4:	6143      	str	r3, [r0, #20]
 80072f6:	6183      	str	r3, [r0, #24]
 80072f8:	4619      	mov	r1, r3
 80072fa:	2208      	movs	r2, #8
 80072fc:	305c      	adds	r0, #92	; 0x5c
 80072fe:	f7ff fc8c 	bl	8006c1a <memset>
 8007302:	4b05      	ldr	r3, [pc, #20]	; (8007318 <std.isra.0+0x38>)
 8007304:	6263      	str	r3, [r4, #36]	; 0x24
 8007306:	4b05      	ldr	r3, [pc, #20]	; (800731c <std.isra.0+0x3c>)
 8007308:	62a3      	str	r3, [r4, #40]	; 0x28
 800730a:	4b05      	ldr	r3, [pc, #20]	; (8007320 <std.isra.0+0x40>)
 800730c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800730e:	4b05      	ldr	r3, [pc, #20]	; (8007324 <std.isra.0+0x44>)
 8007310:	6224      	str	r4, [r4, #32]
 8007312:	6323      	str	r3, [r4, #48]	; 0x30
 8007314:	bd10      	pop	{r4, pc}
 8007316:	bf00      	nop
 8007318:	08007b2d 	.word	0x08007b2d
 800731c:	08007b4f 	.word	0x08007b4f
 8007320:	08007b87 	.word	0x08007b87
 8007324:	08007bab 	.word	0x08007bab

08007328 <__sfmoreglue>:
 8007328:	b570      	push	{r4, r5, r6, lr}
 800732a:	1e4a      	subs	r2, r1, #1
 800732c:	2568      	movs	r5, #104	; 0x68
 800732e:	4355      	muls	r5, r2
 8007330:	460e      	mov	r6, r1
 8007332:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007336:	f7ff fcc7 	bl	8006cc8 <_malloc_r>
 800733a:	4604      	mov	r4, r0
 800733c:	b140      	cbz	r0, 8007350 <__sfmoreglue+0x28>
 800733e:	2100      	movs	r1, #0
 8007340:	e880 0042 	stmia.w	r0, {r1, r6}
 8007344:	300c      	adds	r0, #12
 8007346:	60a0      	str	r0, [r4, #8]
 8007348:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800734c:	f7ff fc65 	bl	8006c1a <memset>
 8007350:	4620      	mov	r0, r4
 8007352:	bd70      	pop	{r4, r5, r6, pc}

08007354 <__sinit>:
 8007354:	6983      	ldr	r3, [r0, #24]
 8007356:	b510      	push	{r4, lr}
 8007358:	4604      	mov	r4, r0
 800735a:	bb33      	cbnz	r3, 80073aa <__sinit+0x56>
 800735c:	6483      	str	r3, [r0, #72]	; 0x48
 800735e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8007360:	6503      	str	r3, [r0, #80]	; 0x50
 8007362:	4b12      	ldr	r3, [pc, #72]	; (80073ac <__sinit+0x58>)
 8007364:	4a12      	ldr	r2, [pc, #72]	; (80073b0 <__sinit+0x5c>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6282      	str	r2, [r0, #40]	; 0x28
 800736a:	4298      	cmp	r0, r3
 800736c:	bf04      	itt	eq
 800736e:	2301      	moveq	r3, #1
 8007370:	6183      	streq	r3, [r0, #24]
 8007372:	f000 f81f 	bl	80073b4 <__sfp>
 8007376:	6060      	str	r0, [r4, #4]
 8007378:	4620      	mov	r0, r4
 800737a:	f000 f81b 	bl	80073b4 <__sfp>
 800737e:	60a0      	str	r0, [r4, #8]
 8007380:	4620      	mov	r0, r4
 8007382:	f000 f817 	bl	80073b4 <__sfp>
 8007386:	2200      	movs	r2, #0
 8007388:	60e0      	str	r0, [r4, #12]
 800738a:	2104      	movs	r1, #4
 800738c:	6860      	ldr	r0, [r4, #4]
 800738e:	f7ff ffa7 	bl	80072e0 <std.isra.0>
 8007392:	2201      	movs	r2, #1
 8007394:	2109      	movs	r1, #9
 8007396:	68a0      	ldr	r0, [r4, #8]
 8007398:	f7ff ffa2 	bl	80072e0 <std.isra.0>
 800739c:	2202      	movs	r2, #2
 800739e:	2112      	movs	r1, #18
 80073a0:	68e0      	ldr	r0, [r4, #12]
 80073a2:	f7ff ff9d 	bl	80072e0 <std.isra.0>
 80073a6:	2301      	movs	r3, #1
 80073a8:	61a3      	str	r3, [r4, #24]
 80073aa:	bd10      	pop	{r4, pc}
 80073ac:	08008140 	.word	0x08008140
 80073b0:	080072d5 	.word	0x080072d5

080073b4 <__sfp>:
 80073b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b6:	4b1c      	ldr	r3, [pc, #112]	; (8007428 <__sfp+0x74>)
 80073b8:	681e      	ldr	r6, [r3, #0]
 80073ba:	69b3      	ldr	r3, [r6, #24]
 80073bc:	4607      	mov	r7, r0
 80073be:	b913      	cbnz	r3, 80073c6 <__sfp+0x12>
 80073c0:	4630      	mov	r0, r6
 80073c2:	f7ff ffc7 	bl	8007354 <__sinit>
 80073c6:	3648      	adds	r6, #72	; 0x48
 80073c8:	68b4      	ldr	r4, [r6, #8]
 80073ca:	6873      	ldr	r3, [r6, #4]
 80073cc:	3b01      	subs	r3, #1
 80073ce:	d503      	bpl.n	80073d8 <__sfp+0x24>
 80073d0:	6833      	ldr	r3, [r6, #0]
 80073d2:	b133      	cbz	r3, 80073e2 <__sfp+0x2e>
 80073d4:	6836      	ldr	r6, [r6, #0]
 80073d6:	e7f7      	b.n	80073c8 <__sfp+0x14>
 80073d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80073dc:	b16d      	cbz	r5, 80073fa <__sfp+0x46>
 80073de:	3468      	adds	r4, #104	; 0x68
 80073e0:	e7f4      	b.n	80073cc <__sfp+0x18>
 80073e2:	2104      	movs	r1, #4
 80073e4:	4638      	mov	r0, r7
 80073e6:	f7ff ff9f 	bl	8007328 <__sfmoreglue>
 80073ea:	6030      	str	r0, [r6, #0]
 80073ec:	2800      	cmp	r0, #0
 80073ee:	d1f1      	bne.n	80073d4 <__sfp+0x20>
 80073f0:	230c      	movs	r3, #12
 80073f2:	603b      	str	r3, [r7, #0]
 80073f4:	4604      	mov	r4, r0
 80073f6:	4620      	mov	r0, r4
 80073f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073fe:	81e3      	strh	r3, [r4, #14]
 8007400:	2301      	movs	r3, #1
 8007402:	81a3      	strh	r3, [r4, #12]
 8007404:	6665      	str	r5, [r4, #100]	; 0x64
 8007406:	6025      	str	r5, [r4, #0]
 8007408:	60a5      	str	r5, [r4, #8]
 800740a:	6065      	str	r5, [r4, #4]
 800740c:	6125      	str	r5, [r4, #16]
 800740e:	6165      	str	r5, [r4, #20]
 8007410:	61a5      	str	r5, [r4, #24]
 8007412:	2208      	movs	r2, #8
 8007414:	4629      	mov	r1, r5
 8007416:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800741a:	f7ff fbfe 	bl	8006c1a <memset>
 800741e:	6365      	str	r5, [r4, #52]	; 0x34
 8007420:	63a5      	str	r5, [r4, #56]	; 0x38
 8007422:	64a5      	str	r5, [r4, #72]	; 0x48
 8007424:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007426:	e7e6      	b.n	80073f6 <__sfp+0x42>
 8007428:	08008140 	.word	0x08008140

0800742c <_fwalk_reent>:
 800742c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007430:	4680      	mov	r8, r0
 8007432:	4689      	mov	r9, r1
 8007434:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007438:	2600      	movs	r6, #0
 800743a:	b914      	cbnz	r4, 8007442 <_fwalk_reent+0x16>
 800743c:	4630      	mov	r0, r6
 800743e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007442:	68a5      	ldr	r5, [r4, #8]
 8007444:	6867      	ldr	r7, [r4, #4]
 8007446:	3f01      	subs	r7, #1
 8007448:	d501      	bpl.n	800744e <_fwalk_reent+0x22>
 800744a:	6824      	ldr	r4, [r4, #0]
 800744c:	e7f5      	b.n	800743a <_fwalk_reent+0xe>
 800744e:	89ab      	ldrh	r3, [r5, #12]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d907      	bls.n	8007464 <_fwalk_reent+0x38>
 8007454:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007458:	3301      	adds	r3, #1
 800745a:	d003      	beq.n	8007464 <_fwalk_reent+0x38>
 800745c:	4629      	mov	r1, r5
 800745e:	4640      	mov	r0, r8
 8007460:	47c8      	blx	r9
 8007462:	4306      	orrs	r6, r0
 8007464:	3568      	adds	r5, #104	; 0x68
 8007466:	e7ee      	b.n	8007446 <_fwalk_reent+0x1a>

08007468 <__locale_ctype_ptr_l>:
 8007468:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800746c:	4770      	bx	lr

0800746e <__swhatbuf_r>:
 800746e:	b570      	push	{r4, r5, r6, lr}
 8007470:	460e      	mov	r6, r1
 8007472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007476:	2900      	cmp	r1, #0
 8007478:	b090      	sub	sp, #64	; 0x40
 800747a:	4614      	mov	r4, r2
 800747c:	461d      	mov	r5, r3
 800747e:	da07      	bge.n	8007490 <__swhatbuf_r+0x22>
 8007480:	2300      	movs	r3, #0
 8007482:	602b      	str	r3, [r5, #0]
 8007484:	89b3      	ldrh	r3, [r6, #12]
 8007486:	061a      	lsls	r2, r3, #24
 8007488:	d410      	bmi.n	80074ac <__swhatbuf_r+0x3e>
 800748a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800748e:	e00e      	b.n	80074ae <__swhatbuf_r+0x40>
 8007490:	aa01      	add	r2, sp, #4
 8007492:	f000 fbbd 	bl	8007c10 <_fstat_r>
 8007496:	2800      	cmp	r0, #0
 8007498:	dbf2      	blt.n	8007480 <__swhatbuf_r+0x12>
 800749a:	9a02      	ldr	r2, [sp, #8]
 800749c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80074a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80074a4:	425a      	negs	r2, r3
 80074a6:	415a      	adcs	r2, r3
 80074a8:	602a      	str	r2, [r5, #0]
 80074aa:	e7ee      	b.n	800748a <__swhatbuf_r+0x1c>
 80074ac:	2340      	movs	r3, #64	; 0x40
 80074ae:	2000      	movs	r0, #0
 80074b0:	6023      	str	r3, [r4, #0]
 80074b2:	b010      	add	sp, #64	; 0x40
 80074b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080074b8 <__smakebuf_r>:
 80074b8:	898b      	ldrh	r3, [r1, #12]
 80074ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074bc:	079d      	lsls	r5, r3, #30
 80074be:	4606      	mov	r6, r0
 80074c0:	460c      	mov	r4, r1
 80074c2:	d507      	bpl.n	80074d4 <__smakebuf_r+0x1c>
 80074c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80074c8:	6023      	str	r3, [r4, #0]
 80074ca:	6123      	str	r3, [r4, #16]
 80074cc:	2301      	movs	r3, #1
 80074ce:	6163      	str	r3, [r4, #20]
 80074d0:	b002      	add	sp, #8
 80074d2:	bd70      	pop	{r4, r5, r6, pc}
 80074d4:	ab01      	add	r3, sp, #4
 80074d6:	466a      	mov	r2, sp
 80074d8:	f7ff ffc9 	bl	800746e <__swhatbuf_r>
 80074dc:	9900      	ldr	r1, [sp, #0]
 80074de:	4605      	mov	r5, r0
 80074e0:	4630      	mov	r0, r6
 80074e2:	f7ff fbf1 	bl	8006cc8 <_malloc_r>
 80074e6:	b948      	cbnz	r0, 80074fc <__smakebuf_r+0x44>
 80074e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074ec:	059a      	lsls	r2, r3, #22
 80074ee:	d4ef      	bmi.n	80074d0 <__smakebuf_r+0x18>
 80074f0:	f023 0303 	bic.w	r3, r3, #3
 80074f4:	f043 0302 	orr.w	r3, r3, #2
 80074f8:	81a3      	strh	r3, [r4, #12]
 80074fa:	e7e3      	b.n	80074c4 <__smakebuf_r+0xc>
 80074fc:	4b0d      	ldr	r3, [pc, #52]	; (8007534 <__smakebuf_r+0x7c>)
 80074fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8007500:	89a3      	ldrh	r3, [r4, #12]
 8007502:	6020      	str	r0, [r4, #0]
 8007504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007508:	81a3      	strh	r3, [r4, #12]
 800750a:	9b00      	ldr	r3, [sp, #0]
 800750c:	6163      	str	r3, [r4, #20]
 800750e:	9b01      	ldr	r3, [sp, #4]
 8007510:	6120      	str	r0, [r4, #16]
 8007512:	b15b      	cbz	r3, 800752c <__smakebuf_r+0x74>
 8007514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007518:	4630      	mov	r0, r6
 800751a:	f000 fb8b 	bl	8007c34 <_isatty_r>
 800751e:	b128      	cbz	r0, 800752c <__smakebuf_r+0x74>
 8007520:	89a3      	ldrh	r3, [r4, #12]
 8007522:	f023 0303 	bic.w	r3, r3, #3
 8007526:	f043 0301 	orr.w	r3, r3, #1
 800752a:	81a3      	strh	r3, [r4, #12]
 800752c:	89a3      	ldrh	r3, [r4, #12]
 800752e:	431d      	orrs	r5, r3
 8007530:	81a5      	strh	r5, [r4, #12]
 8007532:	e7cd      	b.n	80074d0 <__smakebuf_r+0x18>
 8007534:	080072d5 	.word	0x080072d5

08007538 <__ascii_mbtowc>:
 8007538:	b082      	sub	sp, #8
 800753a:	b901      	cbnz	r1, 800753e <__ascii_mbtowc+0x6>
 800753c:	a901      	add	r1, sp, #4
 800753e:	b142      	cbz	r2, 8007552 <__ascii_mbtowc+0x1a>
 8007540:	b14b      	cbz	r3, 8007556 <__ascii_mbtowc+0x1e>
 8007542:	7813      	ldrb	r3, [r2, #0]
 8007544:	600b      	str	r3, [r1, #0]
 8007546:	7812      	ldrb	r2, [r2, #0]
 8007548:	1c10      	adds	r0, r2, #0
 800754a:	bf18      	it	ne
 800754c:	2001      	movne	r0, #1
 800754e:	b002      	add	sp, #8
 8007550:	4770      	bx	lr
 8007552:	4610      	mov	r0, r2
 8007554:	e7fb      	b.n	800754e <__ascii_mbtowc+0x16>
 8007556:	f06f 0001 	mvn.w	r0, #1
 800755a:	e7f8      	b.n	800754e <__ascii_mbtowc+0x16>

0800755c <__malloc_lock>:
 800755c:	4770      	bx	lr

0800755e <__malloc_unlock>:
 800755e:	4770      	bx	lr

08007560 <__ssputs_r>:
 8007560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007564:	688e      	ldr	r6, [r1, #8]
 8007566:	429e      	cmp	r6, r3
 8007568:	4682      	mov	sl, r0
 800756a:	460c      	mov	r4, r1
 800756c:	4691      	mov	r9, r2
 800756e:	4698      	mov	r8, r3
 8007570:	d835      	bhi.n	80075de <__ssputs_r+0x7e>
 8007572:	898a      	ldrh	r2, [r1, #12]
 8007574:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007578:	d031      	beq.n	80075de <__ssputs_r+0x7e>
 800757a:	6825      	ldr	r5, [r4, #0]
 800757c:	6909      	ldr	r1, [r1, #16]
 800757e:	1a6f      	subs	r7, r5, r1
 8007580:	6965      	ldr	r5, [r4, #20]
 8007582:	2302      	movs	r3, #2
 8007584:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007588:	fb95 f5f3 	sdiv	r5, r5, r3
 800758c:	f108 0301 	add.w	r3, r8, #1
 8007590:	443b      	add	r3, r7
 8007592:	429d      	cmp	r5, r3
 8007594:	bf38      	it	cc
 8007596:	461d      	movcc	r5, r3
 8007598:	0553      	lsls	r3, r2, #21
 800759a:	d531      	bpl.n	8007600 <__ssputs_r+0xa0>
 800759c:	4629      	mov	r1, r5
 800759e:	f7ff fb93 	bl	8006cc8 <_malloc_r>
 80075a2:	4606      	mov	r6, r0
 80075a4:	b950      	cbnz	r0, 80075bc <__ssputs_r+0x5c>
 80075a6:	230c      	movs	r3, #12
 80075a8:	f8ca 3000 	str.w	r3, [sl]
 80075ac:	89a3      	ldrh	r3, [r4, #12]
 80075ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075b2:	81a3      	strh	r3, [r4, #12]
 80075b4:	f04f 30ff 	mov.w	r0, #4294967295
 80075b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075bc:	463a      	mov	r2, r7
 80075be:	6921      	ldr	r1, [r4, #16]
 80075c0:	f7ff fb20 	bl	8006c04 <memcpy>
 80075c4:	89a3      	ldrh	r3, [r4, #12]
 80075c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80075ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ce:	81a3      	strh	r3, [r4, #12]
 80075d0:	6126      	str	r6, [r4, #16]
 80075d2:	6165      	str	r5, [r4, #20]
 80075d4:	443e      	add	r6, r7
 80075d6:	1bed      	subs	r5, r5, r7
 80075d8:	6026      	str	r6, [r4, #0]
 80075da:	60a5      	str	r5, [r4, #8]
 80075dc:	4646      	mov	r6, r8
 80075de:	4546      	cmp	r6, r8
 80075e0:	bf28      	it	cs
 80075e2:	4646      	movcs	r6, r8
 80075e4:	4632      	mov	r2, r6
 80075e6:	4649      	mov	r1, r9
 80075e8:	6820      	ldr	r0, [r4, #0]
 80075ea:	f000 fb45 	bl	8007c78 <memmove>
 80075ee:	68a3      	ldr	r3, [r4, #8]
 80075f0:	1b9b      	subs	r3, r3, r6
 80075f2:	60a3      	str	r3, [r4, #8]
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	441e      	add	r6, r3
 80075f8:	6026      	str	r6, [r4, #0]
 80075fa:	2000      	movs	r0, #0
 80075fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007600:	462a      	mov	r2, r5
 8007602:	f000 fb53 	bl	8007cac <_realloc_r>
 8007606:	4606      	mov	r6, r0
 8007608:	2800      	cmp	r0, #0
 800760a:	d1e1      	bne.n	80075d0 <__ssputs_r+0x70>
 800760c:	6921      	ldr	r1, [r4, #16]
 800760e:	4650      	mov	r0, sl
 8007610:	f7ff fb0c 	bl	8006c2c <_free_r>
 8007614:	e7c7      	b.n	80075a6 <__ssputs_r+0x46>
	...

08007618 <_svfiprintf_r>:
 8007618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800761c:	b09d      	sub	sp, #116	; 0x74
 800761e:	4680      	mov	r8, r0
 8007620:	9303      	str	r3, [sp, #12]
 8007622:	898b      	ldrh	r3, [r1, #12]
 8007624:	061c      	lsls	r4, r3, #24
 8007626:	460d      	mov	r5, r1
 8007628:	4616      	mov	r6, r2
 800762a:	d50f      	bpl.n	800764c <_svfiprintf_r+0x34>
 800762c:	690b      	ldr	r3, [r1, #16]
 800762e:	b96b      	cbnz	r3, 800764c <_svfiprintf_r+0x34>
 8007630:	2140      	movs	r1, #64	; 0x40
 8007632:	f7ff fb49 	bl	8006cc8 <_malloc_r>
 8007636:	6028      	str	r0, [r5, #0]
 8007638:	6128      	str	r0, [r5, #16]
 800763a:	b928      	cbnz	r0, 8007648 <_svfiprintf_r+0x30>
 800763c:	230c      	movs	r3, #12
 800763e:	f8c8 3000 	str.w	r3, [r8]
 8007642:	f04f 30ff 	mov.w	r0, #4294967295
 8007646:	e0c5      	b.n	80077d4 <_svfiprintf_r+0x1bc>
 8007648:	2340      	movs	r3, #64	; 0x40
 800764a:	616b      	str	r3, [r5, #20]
 800764c:	2300      	movs	r3, #0
 800764e:	9309      	str	r3, [sp, #36]	; 0x24
 8007650:	2320      	movs	r3, #32
 8007652:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007656:	2330      	movs	r3, #48	; 0x30
 8007658:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800765c:	f04f 0b01 	mov.w	fp, #1
 8007660:	4637      	mov	r7, r6
 8007662:	463c      	mov	r4, r7
 8007664:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007668:	2b00      	cmp	r3, #0
 800766a:	d13c      	bne.n	80076e6 <_svfiprintf_r+0xce>
 800766c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007670:	d00b      	beq.n	800768a <_svfiprintf_r+0x72>
 8007672:	4653      	mov	r3, sl
 8007674:	4632      	mov	r2, r6
 8007676:	4629      	mov	r1, r5
 8007678:	4640      	mov	r0, r8
 800767a:	f7ff ff71 	bl	8007560 <__ssputs_r>
 800767e:	3001      	adds	r0, #1
 8007680:	f000 80a3 	beq.w	80077ca <_svfiprintf_r+0x1b2>
 8007684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007686:	4453      	add	r3, sl
 8007688:	9309      	str	r3, [sp, #36]	; 0x24
 800768a:	783b      	ldrb	r3, [r7, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 809c 	beq.w	80077ca <_svfiprintf_r+0x1b2>
 8007692:	2300      	movs	r3, #0
 8007694:	f04f 32ff 	mov.w	r2, #4294967295
 8007698:	9304      	str	r3, [sp, #16]
 800769a:	9307      	str	r3, [sp, #28]
 800769c:	9205      	str	r2, [sp, #20]
 800769e:	9306      	str	r3, [sp, #24]
 80076a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076a4:	931a      	str	r3, [sp, #104]	; 0x68
 80076a6:	2205      	movs	r2, #5
 80076a8:	7821      	ldrb	r1, [r4, #0]
 80076aa:	4850      	ldr	r0, [pc, #320]	; (80077ec <_svfiprintf_r+0x1d4>)
 80076ac:	f7f8 fd98 	bl	80001e0 <memchr>
 80076b0:	1c67      	adds	r7, r4, #1
 80076b2:	9b04      	ldr	r3, [sp, #16]
 80076b4:	b9d8      	cbnz	r0, 80076ee <_svfiprintf_r+0xd6>
 80076b6:	06d9      	lsls	r1, r3, #27
 80076b8:	bf44      	itt	mi
 80076ba:	2220      	movmi	r2, #32
 80076bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80076c0:	071a      	lsls	r2, r3, #28
 80076c2:	bf44      	itt	mi
 80076c4:	222b      	movmi	r2, #43	; 0x2b
 80076c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80076ca:	7822      	ldrb	r2, [r4, #0]
 80076cc:	2a2a      	cmp	r2, #42	; 0x2a
 80076ce:	d016      	beq.n	80076fe <_svfiprintf_r+0xe6>
 80076d0:	9a07      	ldr	r2, [sp, #28]
 80076d2:	2100      	movs	r1, #0
 80076d4:	200a      	movs	r0, #10
 80076d6:	4627      	mov	r7, r4
 80076d8:	3401      	adds	r4, #1
 80076da:	783b      	ldrb	r3, [r7, #0]
 80076dc:	3b30      	subs	r3, #48	; 0x30
 80076de:	2b09      	cmp	r3, #9
 80076e0:	d951      	bls.n	8007786 <_svfiprintf_r+0x16e>
 80076e2:	b1c9      	cbz	r1, 8007718 <_svfiprintf_r+0x100>
 80076e4:	e011      	b.n	800770a <_svfiprintf_r+0xf2>
 80076e6:	2b25      	cmp	r3, #37	; 0x25
 80076e8:	d0c0      	beq.n	800766c <_svfiprintf_r+0x54>
 80076ea:	4627      	mov	r7, r4
 80076ec:	e7b9      	b.n	8007662 <_svfiprintf_r+0x4a>
 80076ee:	4a3f      	ldr	r2, [pc, #252]	; (80077ec <_svfiprintf_r+0x1d4>)
 80076f0:	1a80      	subs	r0, r0, r2
 80076f2:	fa0b f000 	lsl.w	r0, fp, r0
 80076f6:	4318      	orrs	r0, r3
 80076f8:	9004      	str	r0, [sp, #16]
 80076fa:	463c      	mov	r4, r7
 80076fc:	e7d3      	b.n	80076a6 <_svfiprintf_r+0x8e>
 80076fe:	9a03      	ldr	r2, [sp, #12]
 8007700:	1d11      	adds	r1, r2, #4
 8007702:	6812      	ldr	r2, [r2, #0]
 8007704:	9103      	str	r1, [sp, #12]
 8007706:	2a00      	cmp	r2, #0
 8007708:	db01      	blt.n	800770e <_svfiprintf_r+0xf6>
 800770a:	9207      	str	r2, [sp, #28]
 800770c:	e004      	b.n	8007718 <_svfiprintf_r+0x100>
 800770e:	4252      	negs	r2, r2
 8007710:	f043 0302 	orr.w	r3, r3, #2
 8007714:	9207      	str	r2, [sp, #28]
 8007716:	9304      	str	r3, [sp, #16]
 8007718:	783b      	ldrb	r3, [r7, #0]
 800771a:	2b2e      	cmp	r3, #46	; 0x2e
 800771c:	d10e      	bne.n	800773c <_svfiprintf_r+0x124>
 800771e:	787b      	ldrb	r3, [r7, #1]
 8007720:	2b2a      	cmp	r3, #42	; 0x2a
 8007722:	f107 0101 	add.w	r1, r7, #1
 8007726:	d132      	bne.n	800778e <_svfiprintf_r+0x176>
 8007728:	9b03      	ldr	r3, [sp, #12]
 800772a:	1d1a      	adds	r2, r3, #4
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	9203      	str	r2, [sp, #12]
 8007730:	2b00      	cmp	r3, #0
 8007732:	bfb8      	it	lt
 8007734:	f04f 33ff 	movlt.w	r3, #4294967295
 8007738:	3702      	adds	r7, #2
 800773a:	9305      	str	r3, [sp, #20]
 800773c:	4c2c      	ldr	r4, [pc, #176]	; (80077f0 <_svfiprintf_r+0x1d8>)
 800773e:	7839      	ldrb	r1, [r7, #0]
 8007740:	2203      	movs	r2, #3
 8007742:	4620      	mov	r0, r4
 8007744:	f7f8 fd4c 	bl	80001e0 <memchr>
 8007748:	b138      	cbz	r0, 800775a <_svfiprintf_r+0x142>
 800774a:	2340      	movs	r3, #64	; 0x40
 800774c:	1b00      	subs	r0, r0, r4
 800774e:	fa03 f000 	lsl.w	r0, r3, r0
 8007752:	9b04      	ldr	r3, [sp, #16]
 8007754:	4303      	orrs	r3, r0
 8007756:	9304      	str	r3, [sp, #16]
 8007758:	3701      	adds	r7, #1
 800775a:	7839      	ldrb	r1, [r7, #0]
 800775c:	4825      	ldr	r0, [pc, #148]	; (80077f4 <_svfiprintf_r+0x1dc>)
 800775e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007762:	2206      	movs	r2, #6
 8007764:	1c7e      	adds	r6, r7, #1
 8007766:	f7f8 fd3b 	bl	80001e0 <memchr>
 800776a:	2800      	cmp	r0, #0
 800776c:	d035      	beq.n	80077da <_svfiprintf_r+0x1c2>
 800776e:	4b22      	ldr	r3, [pc, #136]	; (80077f8 <_svfiprintf_r+0x1e0>)
 8007770:	b9fb      	cbnz	r3, 80077b2 <_svfiprintf_r+0x19a>
 8007772:	9b03      	ldr	r3, [sp, #12]
 8007774:	3307      	adds	r3, #7
 8007776:	f023 0307 	bic.w	r3, r3, #7
 800777a:	3308      	adds	r3, #8
 800777c:	9303      	str	r3, [sp, #12]
 800777e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007780:	444b      	add	r3, r9
 8007782:	9309      	str	r3, [sp, #36]	; 0x24
 8007784:	e76c      	b.n	8007660 <_svfiprintf_r+0x48>
 8007786:	fb00 3202 	mla	r2, r0, r2, r3
 800778a:	2101      	movs	r1, #1
 800778c:	e7a3      	b.n	80076d6 <_svfiprintf_r+0xbe>
 800778e:	2300      	movs	r3, #0
 8007790:	9305      	str	r3, [sp, #20]
 8007792:	4618      	mov	r0, r3
 8007794:	240a      	movs	r4, #10
 8007796:	460f      	mov	r7, r1
 8007798:	3101      	adds	r1, #1
 800779a:	783a      	ldrb	r2, [r7, #0]
 800779c:	3a30      	subs	r2, #48	; 0x30
 800779e:	2a09      	cmp	r2, #9
 80077a0:	d903      	bls.n	80077aa <_svfiprintf_r+0x192>
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d0ca      	beq.n	800773c <_svfiprintf_r+0x124>
 80077a6:	9005      	str	r0, [sp, #20]
 80077a8:	e7c8      	b.n	800773c <_svfiprintf_r+0x124>
 80077aa:	fb04 2000 	mla	r0, r4, r0, r2
 80077ae:	2301      	movs	r3, #1
 80077b0:	e7f1      	b.n	8007796 <_svfiprintf_r+0x17e>
 80077b2:	ab03      	add	r3, sp, #12
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	462a      	mov	r2, r5
 80077b8:	4b10      	ldr	r3, [pc, #64]	; (80077fc <_svfiprintf_r+0x1e4>)
 80077ba:	a904      	add	r1, sp, #16
 80077bc:	4640      	mov	r0, r8
 80077be:	f3af 8000 	nop.w
 80077c2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80077c6:	4681      	mov	r9, r0
 80077c8:	d1d9      	bne.n	800777e <_svfiprintf_r+0x166>
 80077ca:	89ab      	ldrh	r3, [r5, #12]
 80077cc:	065b      	lsls	r3, r3, #25
 80077ce:	f53f af38 	bmi.w	8007642 <_svfiprintf_r+0x2a>
 80077d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077d4:	b01d      	add	sp, #116	; 0x74
 80077d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077da:	ab03      	add	r3, sp, #12
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	462a      	mov	r2, r5
 80077e0:	4b06      	ldr	r3, [pc, #24]	; (80077fc <_svfiprintf_r+0x1e4>)
 80077e2:	a904      	add	r1, sp, #16
 80077e4:	4640      	mov	r0, r8
 80077e6:	f000 f881 	bl	80078ec <_printf_i>
 80077ea:	e7ea      	b.n	80077c2 <_svfiprintf_r+0x1aa>
 80077ec:	0800814e 	.word	0x0800814e
 80077f0:	08008154 	.word	0x08008154
 80077f4:	08008158 	.word	0x08008158
 80077f8:	00000000 	.word	0x00000000
 80077fc:	08007561 	.word	0x08007561

08007800 <_printf_common>:
 8007800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007804:	4691      	mov	r9, r2
 8007806:	461f      	mov	r7, r3
 8007808:	688a      	ldr	r2, [r1, #8]
 800780a:	690b      	ldr	r3, [r1, #16]
 800780c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007810:	4293      	cmp	r3, r2
 8007812:	bfb8      	it	lt
 8007814:	4613      	movlt	r3, r2
 8007816:	f8c9 3000 	str.w	r3, [r9]
 800781a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800781e:	4606      	mov	r6, r0
 8007820:	460c      	mov	r4, r1
 8007822:	b112      	cbz	r2, 800782a <_printf_common+0x2a>
 8007824:	3301      	adds	r3, #1
 8007826:	f8c9 3000 	str.w	r3, [r9]
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	0699      	lsls	r1, r3, #26
 800782e:	bf42      	ittt	mi
 8007830:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007834:	3302      	addmi	r3, #2
 8007836:	f8c9 3000 	strmi.w	r3, [r9]
 800783a:	6825      	ldr	r5, [r4, #0]
 800783c:	f015 0506 	ands.w	r5, r5, #6
 8007840:	d107      	bne.n	8007852 <_printf_common+0x52>
 8007842:	f104 0a19 	add.w	sl, r4, #25
 8007846:	68e3      	ldr	r3, [r4, #12]
 8007848:	f8d9 2000 	ldr.w	r2, [r9]
 800784c:	1a9b      	subs	r3, r3, r2
 800784e:	429d      	cmp	r5, r3
 8007850:	db29      	blt.n	80078a6 <_printf_common+0xa6>
 8007852:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007856:	6822      	ldr	r2, [r4, #0]
 8007858:	3300      	adds	r3, #0
 800785a:	bf18      	it	ne
 800785c:	2301      	movne	r3, #1
 800785e:	0692      	lsls	r2, r2, #26
 8007860:	d42e      	bmi.n	80078c0 <_printf_common+0xc0>
 8007862:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007866:	4639      	mov	r1, r7
 8007868:	4630      	mov	r0, r6
 800786a:	47c0      	blx	r8
 800786c:	3001      	adds	r0, #1
 800786e:	d021      	beq.n	80078b4 <_printf_common+0xb4>
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	68e5      	ldr	r5, [r4, #12]
 8007874:	f8d9 2000 	ldr.w	r2, [r9]
 8007878:	f003 0306 	and.w	r3, r3, #6
 800787c:	2b04      	cmp	r3, #4
 800787e:	bf08      	it	eq
 8007880:	1aad      	subeq	r5, r5, r2
 8007882:	68a3      	ldr	r3, [r4, #8]
 8007884:	6922      	ldr	r2, [r4, #16]
 8007886:	bf0c      	ite	eq
 8007888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800788c:	2500      	movne	r5, #0
 800788e:	4293      	cmp	r3, r2
 8007890:	bfc4      	itt	gt
 8007892:	1a9b      	subgt	r3, r3, r2
 8007894:	18ed      	addgt	r5, r5, r3
 8007896:	f04f 0900 	mov.w	r9, #0
 800789a:	341a      	adds	r4, #26
 800789c:	454d      	cmp	r5, r9
 800789e:	d11b      	bne.n	80078d8 <_printf_common+0xd8>
 80078a0:	2000      	movs	r0, #0
 80078a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078a6:	2301      	movs	r3, #1
 80078a8:	4652      	mov	r2, sl
 80078aa:	4639      	mov	r1, r7
 80078ac:	4630      	mov	r0, r6
 80078ae:	47c0      	blx	r8
 80078b0:	3001      	adds	r0, #1
 80078b2:	d103      	bne.n	80078bc <_printf_common+0xbc>
 80078b4:	f04f 30ff 	mov.w	r0, #4294967295
 80078b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078bc:	3501      	adds	r5, #1
 80078be:	e7c2      	b.n	8007846 <_printf_common+0x46>
 80078c0:	18e1      	adds	r1, r4, r3
 80078c2:	1c5a      	adds	r2, r3, #1
 80078c4:	2030      	movs	r0, #48	; 0x30
 80078c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078ca:	4422      	add	r2, r4
 80078cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078d4:	3302      	adds	r3, #2
 80078d6:	e7c4      	b.n	8007862 <_printf_common+0x62>
 80078d8:	2301      	movs	r3, #1
 80078da:	4622      	mov	r2, r4
 80078dc:	4639      	mov	r1, r7
 80078de:	4630      	mov	r0, r6
 80078e0:	47c0      	blx	r8
 80078e2:	3001      	adds	r0, #1
 80078e4:	d0e6      	beq.n	80078b4 <_printf_common+0xb4>
 80078e6:	f109 0901 	add.w	r9, r9, #1
 80078ea:	e7d7      	b.n	800789c <_printf_common+0x9c>

080078ec <_printf_i>:
 80078ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078f0:	4617      	mov	r7, r2
 80078f2:	7e0a      	ldrb	r2, [r1, #24]
 80078f4:	b085      	sub	sp, #20
 80078f6:	2a6e      	cmp	r2, #110	; 0x6e
 80078f8:	4698      	mov	r8, r3
 80078fa:	4606      	mov	r6, r0
 80078fc:	460c      	mov	r4, r1
 80078fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007900:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8007904:	f000 80bc 	beq.w	8007a80 <_printf_i+0x194>
 8007908:	d81a      	bhi.n	8007940 <_printf_i+0x54>
 800790a:	2a63      	cmp	r2, #99	; 0x63
 800790c:	d02e      	beq.n	800796c <_printf_i+0x80>
 800790e:	d80a      	bhi.n	8007926 <_printf_i+0x3a>
 8007910:	2a00      	cmp	r2, #0
 8007912:	f000 80c8 	beq.w	8007aa6 <_printf_i+0x1ba>
 8007916:	2a58      	cmp	r2, #88	; 0x58
 8007918:	f000 808a 	beq.w	8007a30 <_printf_i+0x144>
 800791c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007920:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8007924:	e02a      	b.n	800797c <_printf_i+0x90>
 8007926:	2a64      	cmp	r2, #100	; 0x64
 8007928:	d001      	beq.n	800792e <_printf_i+0x42>
 800792a:	2a69      	cmp	r2, #105	; 0x69
 800792c:	d1f6      	bne.n	800791c <_printf_i+0x30>
 800792e:	6821      	ldr	r1, [r4, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007936:	d023      	beq.n	8007980 <_printf_i+0x94>
 8007938:	1d11      	adds	r1, r2, #4
 800793a:	6019      	str	r1, [r3, #0]
 800793c:	6813      	ldr	r3, [r2, #0]
 800793e:	e027      	b.n	8007990 <_printf_i+0xa4>
 8007940:	2a73      	cmp	r2, #115	; 0x73
 8007942:	f000 80b4 	beq.w	8007aae <_printf_i+0x1c2>
 8007946:	d808      	bhi.n	800795a <_printf_i+0x6e>
 8007948:	2a6f      	cmp	r2, #111	; 0x6f
 800794a:	d02a      	beq.n	80079a2 <_printf_i+0xb6>
 800794c:	2a70      	cmp	r2, #112	; 0x70
 800794e:	d1e5      	bne.n	800791c <_printf_i+0x30>
 8007950:	680a      	ldr	r2, [r1, #0]
 8007952:	f042 0220 	orr.w	r2, r2, #32
 8007956:	600a      	str	r2, [r1, #0]
 8007958:	e003      	b.n	8007962 <_printf_i+0x76>
 800795a:	2a75      	cmp	r2, #117	; 0x75
 800795c:	d021      	beq.n	80079a2 <_printf_i+0xb6>
 800795e:	2a78      	cmp	r2, #120	; 0x78
 8007960:	d1dc      	bne.n	800791c <_printf_i+0x30>
 8007962:	2278      	movs	r2, #120	; 0x78
 8007964:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8007968:	496e      	ldr	r1, [pc, #440]	; (8007b24 <_printf_i+0x238>)
 800796a:	e064      	b.n	8007a36 <_printf_i+0x14a>
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8007972:	1d11      	adds	r1, r2, #4
 8007974:	6019      	str	r1, [r3, #0]
 8007976:	6813      	ldr	r3, [r2, #0]
 8007978:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800797c:	2301      	movs	r3, #1
 800797e:	e0a3      	b.n	8007ac8 <_printf_i+0x1dc>
 8007980:	f011 0f40 	tst.w	r1, #64	; 0x40
 8007984:	f102 0104 	add.w	r1, r2, #4
 8007988:	6019      	str	r1, [r3, #0]
 800798a:	d0d7      	beq.n	800793c <_printf_i+0x50>
 800798c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8007990:	2b00      	cmp	r3, #0
 8007992:	da03      	bge.n	800799c <_printf_i+0xb0>
 8007994:	222d      	movs	r2, #45	; 0x2d
 8007996:	425b      	negs	r3, r3
 8007998:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800799c:	4962      	ldr	r1, [pc, #392]	; (8007b28 <_printf_i+0x23c>)
 800799e:	220a      	movs	r2, #10
 80079a0:	e017      	b.n	80079d2 <_printf_i+0xe6>
 80079a2:	6820      	ldr	r0, [r4, #0]
 80079a4:	6819      	ldr	r1, [r3, #0]
 80079a6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80079aa:	d003      	beq.n	80079b4 <_printf_i+0xc8>
 80079ac:	1d08      	adds	r0, r1, #4
 80079ae:	6018      	str	r0, [r3, #0]
 80079b0:	680b      	ldr	r3, [r1, #0]
 80079b2:	e006      	b.n	80079c2 <_printf_i+0xd6>
 80079b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80079b8:	f101 0004 	add.w	r0, r1, #4
 80079bc:	6018      	str	r0, [r3, #0]
 80079be:	d0f7      	beq.n	80079b0 <_printf_i+0xc4>
 80079c0:	880b      	ldrh	r3, [r1, #0]
 80079c2:	4959      	ldr	r1, [pc, #356]	; (8007b28 <_printf_i+0x23c>)
 80079c4:	2a6f      	cmp	r2, #111	; 0x6f
 80079c6:	bf14      	ite	ne
 80079c8:	220a      	movne	r2, #10
 80079ca:	2208      	moveq	r2, #8
 80079cc:	2000      	movs	r0, #0
 80079ce:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80079d2:	6865      	ldr	r5, [r4, #4]
 80079d4:	60a5      	str	r5, [r4, #8]
 80079d6:	2d00      	cmp	r5, #0
 80079d8:	f2c0 809c 	blt.w	8007b14 <_printf_i+0x228>
 80079dc:	6820      	ldr	r0, [r4, #0]
 80079de:	f020 0004 	bic.w	r0, r0, #4
 80079e2:	6020      	str	r0, [r4, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d13f      	bne.n	8007a68 <_printf_i+0x17c>
 80079e8:	2d00      	cmp	r5, #0
 80079ea:	f040 8095 	bne.w	8007b18 <_printf_i+0x22c>
 80079ee:	4675      	mov	r5, lr
 80079f0:	2a08      	cmp	r2, #8
 80079f2:	d10b      	bne.n	8007a0c <_printf_i+0x120>
 80079f4:	6823      	ldr	r3, [r4, #0]
 80079f6:	07da      	lsls	r2, r3, #31
 80079f8:	d508      	bpl.n	8007a0c <_printf_i+0x120>
 80079fa:	6923      	ldr	r3, [r4, #16]
 80079fc:	6862      	ldr	r2, [r4, #4]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	bfde      	ittt	le
 8007a02:	2330      	movle	r3, #48	; 0x30
 8007a04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a0c:	ebae 0305 	sub.w	r3, lr, r5
 8007a10:	6123      	str	r3, [r4, #16]
 8007a12:	f8cd 8000 	str.w	r8, [sp]
 8007a16:	463b      	mov	r3, r7
 8007a18:	aa03      	add	r2, sp, #12
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	4630      	mov	r0, r6
 8007a1e:	f7ff feef 	bl	8007800 <_printf_common>
 8007a22:	3001      	adds	r0, #1
 8007a24:	d155      	bne.n	8007ad2 <_printf_i+0x1e6>
 8007a26:	f04f 30ff 	mov.w	r0, #4294967295
 8007a2a:	b005      	add	sp, #20
 8007a2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a30:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8007a34:	493c      	ldr	r1, [pc, #240]	; (8007b28 <_printf_i+0x23c>)
 8007a36:	6822      	ldr	r2, [r4, #0]
 8007a38:	6818      	ldr	r0, [r3, #0]
 8007a3a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007a3e:	f100 0504 	add.w	r5, r0, #4
 8007a42:	601d      	str	r5, [r3, #0]
 8007a44:	d001      	beq.n	8007a4a <_printf_i+0x15e>
 8007a46:	6803      	ldr	r3, [r0, #0]
 8007a48:	e002      	b.n	8007a50 <_printf_i+0x164>
 8007a4a:	0655      	lsls	r5, r2, #25
 8007a4c:	d5fb      	bpl.n	8007a46 <_printf_i+0x15a>
 8007a4e:	8803      	ldrh	r3, [r0, #0]
 8007a50:	07d0      	lsls	r0, r2, #31
 8007a52:	bf44      	itt	mi
 8007a54:	f042 0220 	orrmi.w	r2, r2, #32
 8007a58:	6022      	strmi	r2, [r4, #0]
 8007a5a:	b91b      	cbnz	r3, 8007a64 <_printf_i+0x178>
 8007a5c:	6822      	ldr	r2, [r4, #0]
 8007a5e:	f022 0220 	bic.w	r2, r2, #32
 8007a62:	6022      	str	r2, [r4, #0]
 8007a64:	2210      	movs	r2, #16
 8007a66:	e7b1      	b.n	80079cc <_printf_i+0xe0>
 8007a68:	4675      	mov	r5, lr
 8007a6a:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a6e:	fb02 3310 	mls	r3, r2, r0, r3
 8007a72:	5ccb      	ldrb	r3, [r1, r3]
 8007a74:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	d1f5      	bne.n	8007a6a <_printf_i+0x17e>
 8007a7e:	e7b7      	b.n	80079f0 <_printf_i+0x104>
 8007a80:	6808      	ldr	r0, [r1, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	6949      	ldr	r1, [r1, #20]
 8007a86:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007a8a:	d004      	beq.n	8007a96 <_printf_i+0x1aa>
 8007a8c:	1d10      	adds	r0, r2, #4
 8007a8e:	6018      	str	r0, [r3, #0]
 8007a90:	6813      	ldr	r3, [r2, #0]
 8007a92:	6019      	str	r1, [r3, #0]
 8007a94:	e007      	b.n	8007aa6 <_printf_i+0x1ba>
 8007a96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a9a:	f102 0004 	add.w	r0, r2, #4
 8007a9e:	6018      	str	r0, [r3, #0]
 8007aa0:	6813      	ldr	r3, [r2, #0]
 8007aa2:	d0f6      	beq.n	8007a92 <_printf_i+0x1a6>
 8007aa4:	8019      	strh	r1, [r3, #0]
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	6123      	str	r3, [r4, #16]
 8007aaa:	4675      	mov	r5, lr
 8007aac:	e7b1      	b.n	8007a12 <_printf_i+0x126>
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	1d11      	adds	r1, r2, #4
 8007ab2:	6019      	str	r1, [r3, #0]
 8007ab4:	6815      	ldr	r5, [r2, #0]
 8007ab6:	6862      	ldr	r2, [r4, #4]
 8007ab8:	2100      	movs	r1, #0
 8007aba:	4628      	mov	r0, r5
 8007abc:	f7f8 fb90 	bl	80001e0 <memchr>
 8007ac0:	b108      	cbz	r0, 8007ac6 <_printf_i+0x1da>
 8007ac2:	1b40      	subs	r0, r0, r5
 8007ac4:	6060      	str	r0, [r4, #4]
 8007ac6:	6863      	ldr	r3, [r4, #4]
 8007ac8:	6123      	str	r3, [r4, #16]
 8007aca:	2300      	movs	r3, #0
 8007acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ad0:	e79f      	b.n	8007a12 <_printf_i+0x126>
 8007ad2:	6923      	ldr	r3, [r4, #16]
 8007ad4:	462a      	mov	r2, r5
 8007ad6:	4639      	mov	r1, r7
 8007ad8:	4630      	mov	r0, r6
 8007ada:	47c0      	blx	r8
 8007adc:	3001      	adds	r0, #1
 8007ade:	d0a2      	beq.n	8007a26 <_printf_i+0x13a>
 8007ae0:	6823      	ldr	r3, [r4, #0]
 8007ae2:	079b      	lsls	r3, r3, #30
 8007ae4:	d507      	bpl.n	8007af6 <_printf_i+0x20a>
 8007ae6:	2500      	movs	r5, #0
 8007ae8:	f104 0919 	add.w	r9, r4, #25
 8007aec:	68e3      	ldr	r3, [r4, #12]
 8007aee:	9a03      	ldr	r2, [sp, #12]
 8007af0:	1a9b      	subs	r3, r3, r2
 8007af2:	429d      	cmp	r5, r3
 8007af4:	db05      	blt.n	8007b02 <_printf_i+0x216>
 8007af6:	68e0      	ldr	r0, [r4, #12]
 8007af8:	9b03      	ldr	r3, [sp, #12]
 8007afa:	4298      	cmp	r0, r3
 8007afc:	bfb8      	it	lt
 8007afe:	4618      	movlt	r0, r3
 8007b00:	e793      	b.n	8007a2a <_printf_i+0x13e>
 8007b02:	2301      	movs	r3, #1
 8007b04:	464a      	mov	r2, r9
 8007b06:	4639      	mov	r1, r7
 8007b08:	4630      	mov	r0, r6
 8007b0a:	47c0      	blx	r8
 8007b0c:	3001      	adds	r0, #1
 8007b0e:	d08a      	beq.n	8007a26 <_printf_i+0x13a>
 8007b10:	3501      	adds	r5, #1
 8007b12:	e7eb      	b.n	8007aec <_printf_i+0x200>
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1a7      	bne.n	8007a68 <_printf_i+0x17c>
 8007b18:	780b      	ldrb	r3, [r1, #0]
 8007b1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b1e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b22:	e765      	b.n	80079f0 <_printf_i+0x104>
 8007b24:	08008170 	.word	0x08008170
 8007b28:	0800815f 	.word	0x0800815f

08007b2c <__sread>:
 8007b2c:	b510      	push	{r4, lr}
 8007b2e:	460c      	mov	r4, r1
 8007b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b34:	f000 f8e0 	bl	8007cf8 <_read_r>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	bfab      	itete	ge
 8007b3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b3e:	89a3      	ldrhlt	r3, [r4, #12]
 8007b40:	181b      	addge	r3, r3, r0
 8007b42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b46:	bfac      	ite	ge
 8007b48:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b4a:	81a3      	strhlt	r3, [r4, #12]
 8007b4c:	bd10      	pop	{r4, pc}

08007b4e <__swrite>:
 8007b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b52:	461f      	mov	r7, r3
 8007b54:	898b      	ldrh	r3, [r1, #12]
 8007b56:	05db      	lsls	r3, r3, #23
 8007b58:	4605      	mov	r5, r0
 8007b5a:	460c      	mov	r4, r1
 8007b5c:	4616      	mov	r6, r2
 8007b5e:	d505      	bpl.n	8007b6c <__swrite+0x1e>
 8007b60:	2302      	movs	r3, #2
 8007b62:	2200      	movs	r2, #0
 8007b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b68:	f000 f874 	bl	8007c54 <_lseek_r>
 8007b6c:	89a3      	ldrh	r3, [r4, #12]
 8007b6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b76:	81a3      	strh	r3, [r4, #12]
 8007b78:	4632      	mov	r2, r6
 8007b7a:	463b      	mov	r3, r7
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b82:	f000 b823 	b.w	8007bcc <_write_r>

08007b86 <__sseek>:
 8007b86:	b510      	push	{r4, lr}
 8007b88:	460c      	mov	r4, r1
 8007b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b8e:	f000 f861 	bl	8007c54 <_lseek_r>
 8007b92:	1c43      	adds	r3, r0, #1
 8007b94:	89a3      	ldrh	r3, [r4, #12]
 8007b96:	bf15      	itete	ne
 8007b98:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ba2:	81a3      	strheq	r3, [r4, #12]
 8007ba4:	bf18      	it	ne
 8007ba6:	81a3      	strhne	r3, [r4, #12]
 8007ba8:	bd10      	pop	{r4, pc}

08007baa <__sclose>:
 8007baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bae:	f000 b81f 	b.w	8007bf0 <_close_r>

08007bb2 <__ascii_wctomb>:
 8007bb2:	b149      	cbz	r1, 8007bc8 <__ascii_wctomb+0x16>
 8007bb4:	2aff      	cmp	r2, #255	; 0xff
 8007bb6:	bf85      	ittet	hi
 8007bb8:	238a      	movhi	r3, #138	; 0x8a
 8007bba:	6003      	strhi	r3, [r0, #0]
 8007bbc:	700a      	strbls	r2, [r1, #0]
 8007bbe:	f04f 30ff 	movhi.w	r0, #4294967295
 8007bc2:	bf98      	it	ls
 8007bc4:	2001      	movls	r0, #1
 8007bc6:	4770      	bx	lr
 8007bc8:	4608      	mov	r0, r1
 8007bca:	4770      	bx	lr

08007bcc <_write_r>:
 8007bcc:	b538      	push	{r3, r4, r5, lr}
 8007bce:	4c07      	ldr	r4, [pc, #28]	; (8007bec <_write_r+0x20>)
 8007bd0:	4605      	mov	r5, r0
 8007bd2:	4608      	mov	r0, r1
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	6022      	str	r2, [r4, #0]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	f000 f8de 	bl	8007d9c <_write>
 8007be0:	1c43      	adds	r3, r0, #1
 8007be2:	d102      	bne.n	8007bea <_write_r+0x1e>
 8007be4:	6823      	ldr	r3, [r4, #0]
 8007be6:	b103      	cbz	r3, 8007bea <_write_r+0x1e>
 8007be8:	602b      	str	r3, [r5, #0]
 8007bea:	bd38      	pop	{r3, r4, r5, pc}
 8007bec:	200022c8 	.word	0x200022c8

08007bf0 <_close_r>:
 8007bf0:	b538      	push	{r3, r4, r5, lr}
 8007bf2:	4c06      	ldr	r4, [pc, #24]	; (8007c0c <_close_r+0x1c>)
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	4605      	mov	r5, r0
 8007bf8:	4608      	mov	r0, r1
 8007bfa:	6023      	str	r3, [r4, #0]
 8007bfc:	f000 f898 	bl	8007d30 <_close>
 8007c00:	1c43      	adds	r3, r0, #1
 8007c02:	d102      	bne.n	8007c0a <_close_r+0x1a>
 8007c04:	6823      	ldr	r3, [r4, #0]
 8007c06:	b103      	cbz	r3, 8007c0a <_close_r+0x1a>
 8007c08:	602b      	str	r3, [r5, #0]
 8007c0a:	bd38      	pop	{r3, r4, r5, pc}
 8007c0c:	200022c8 	.word	0x200022c8

08007c10 <_fstat_r>:
 8007c10:	b538      	push	{r3, r4, r5, lr}
 8007c12:	4c07      	ldr	r4, [pc, #28]	; (8007c30 <_fstat_r+0x20>)
 8007c14:	2300      	movs	r3, #0
 8007c16:	4605      	mov	r5, r0
 8007c18:	4608      	mov	r0, r1
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	6023      	str	r3, [r4, #0]
 8007c1e:	f000 f88f 	bl	8007d40 <_fstat>
 8007c22:	1c43      	adds	r3, r0, #1
 8007c24:	d102      	bne.n	8007c2c <_fstat_r+0x1c>
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	b103      	cbz	r3, 8007c2c <_fstat_r+0x1c>
 8007c2a:	602b      	str	r3, [r5, #0]
 8007c2c:	bd38      	pop	{r3, r4, r5, pc}
 8007c2e:	bf00      	nop
 8007c30:	200022c8 	.word	0x200022c8

08007c34 <_isatty_r>:
 8007c34:	b538      	push	{r3, r4, r5, lr}
 8007c36:	4c06      	ldr	r4, [pc, #24]	; (8007c50 <_isatty_r+0x1c>)
 8007c38:	2300      	movs	r3, #0
 8007c3a:	4605      	mov	r5, r0
 8007c3c:	4608      	mov	r0, r1
 8007c3e:	6023      	str	r3, [r4, #0]
 8007c40:	f000 f886 	bl	8007d50 <_isatty>
 8007c44:	1c43      	adds	r3, r0, #1
 8007c46:	d102      	bne.n	8007c4e <_isatty_r+0x1a>
 8007c48:	6823      	ldr	r3, [r4, #0]
 8007c4a:	b103      	cbz	r3, 8007c4e <_isatty_r+0x1a>
 8007c4c:	602b      	str	r3, [r5, #0]
 8007c4e:	bd38      	pop	{r3, r4, r5, pc}
 8007c50:	200022c8 	.word	0x200022c8

08007c54 <_lseek_r>:
 8007c54:	b538      	push	{r3, r4, r5, lr}
 8007c56:	4c07      	ldr	r4, [pc, #28]	; (8007c74 <_lseek_r+0x20>)
 8007c58:	4605      	mov	r5, r0
 8007c5a:	4608      	mov	r0, r1
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	2200      	movs	r2, #0
 8007c60:	6022      	str	r2, [r4, #0]
 8007c62:	461a      	mov	r2, r3
 8007c64:	f000 f87c 	bl	8007d60 <_lseek>
 8007c68:	1c43      	adds	r3, r0, #1
 8007c6a:	d102      	bne.n	8007c72 <_lseek_r+0x1e>
 8007c6c:	6823      	ldr	r3, [r4, #0]
 8007c6e:	b103      	cbz	r3, 8007c72 <_lseek_r+0x1e>
 8007c70:	602b      	str	r3, [r5, #0]
 8007c72:	bd38      	pop	{r3, r4, r5, pc}
 8007c74:	200022c8 	.word	0x200022c8

08007c78 <memmove>:
 8007c78:	4288      	cmp	r0, r1
 8007c7a:	b510      	push	{r4, lr}
 8007c7c:	eb01 0302 	add.w	r3, r1, r2
 8007c80:	d803      	bhi.n	8007c8a <memmove+0x12>
 8007c82:	1e42      	subs	r2, r0, #1
 8007c84:	4299      	cmp	r1, r3
 8007c86:	d10c      	bne.n	8007ca2 <memmove+0x2a>
 8007c88:	bd10      	pop	{r4, pc}
 8007c8a:	4298      	cmp	r0, r3
 8007c8c:	d2f9      	bcs.n	8007c82 <memmove+0xa>
 8007c8e:	1881      	adds	r1, r0, r2
 8007c90:	1ad2      	subs	r2, r2, r3
 8007c92:	42d3      	cmn	r3, r2
 8007c94:	d100      	bne.n	8007c98 <memmove+0x20>
 8007c96:	bd10      	pop	{r4, pc}
 8007c98:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c9c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007ca0:	e7f7      	b.n	8007c92 <memmove+0x1a>
 8007ca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ca6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007caa:	e7eb      	b.n	8007c84 <memmove+0xc>

08007cac <_realloc_r>:
 8007cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cae:	4607      	mov	r7, r0
 8007cb0:	4614      	mov	r4, r2
 8007cb2:	460e      	mov	r6, r1
 8007cb4:	b921      	cbnz	r1, 8007cc0 <_realloc_r+0x14>
 8007cb6:	4611      	mov	r1, r2
 8007cb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007cbc:	f7ff b804 	b.w	8006cc8 <_malloc_r>
 8007cc0:	b922      	cbnz	r2, 8007ccc <_realloc_r+0x20>
 8007cc2:	f7fe ffb3 	bl	8006c2c <_free_r>
 8007cc6:	4625      	mov	r5, r4
 8007cc8:	4628      	mov	r0, r5
 8007cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ccc:	f000 f826 	bl	8007d1c <_malloc_usable_size_r>
 8007cd0:	4284      	cmp	r4, r0
 8007cd2:	d90f      	bls.n	8007cf4 <_realloc_r+0x48>
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	f7fe fff6 	bl	8006cc8 <_malloc_r>
 8007cdc:	4605      	mov	r5, r0
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d0f2      	beq.n	8007cc8 <_realloc_r+0x1c>
 8007ce2:	4631      	mov	r1, r6
 8007ce4:	4622      	mov	r2, r4
 8007ce6:	f7fe ff8d 	bl	8006c04 <memcpy>
 8007cea:	4631      	mov	r1, r6
 8007cec:	4638      	mov	r0, r7
 8007cee:	f7fe ff9d 	bl	8006c2c <_free_r>
 8007cf2:	e7e9      	b.n	8007cc8 <_realloc_r+0x1c>
 8007cf4:	4635      	mov	r5, r6
 8007cf6:	e7e7      	b.n	8007cc8 <_realloc_r+0x1c>

08007cf8 <_read_r>:
 8007cf8:	b538      	push	{r3, r4, r5, lr}
 8007cfa:	4c07      	ldr	r4, [pc, #28]	; (8007d18 <_read_r+0x20>)
 8007cfc:	4605      	mov	r5, r0
 8007cfe:	4608      	mov	r0, r1
 8007d00:	4611      	mov	r1, r2
 8007d02:	2200      	movs	r2, #0
 8007d04:	6022      	str	r2, [r4, #0]
 8007d06:	461a      	mov	r2, r3
 8007d08:	f000 f832 	bl	8007d70 <_read>
 8007d0c:	1c43      	adds	r3, r0, #1
 8007d0e:	d102      	bne.n	8007d16 <_read_r+0x1e>
 8007d10:	6823      	ldr	r3, [r4, #0]
 8007d12:	b103      	cbz	r3, 8007d16 <_read_r+0x1e>
 8007d14:	602b      	str	r3, [r5, #0]
 8007d16:	bd38      	pop	{r3, r4, r5, pc}
 8007d18:	200022c8 	.word	0x200022c8

08007d1c <_malloc_usable_size_r>:
 8007d1c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8007d20:	2800      	cmp	r0, #0
 8007d22:	f1a0 0004 	sub.w	r0, r0, #4
 8007d26:	bfbc      	itt	lt
 8007d28:	580b      	ldrlt	r3, [r1, r0]
 8007d2a:	18c0      	addlt	r0, r0, r3
 8007d2c:	4770      	bx	lr
	...

08007d30 <_close>:
 8007d30:	4b02      	ldr	r3, [pc, #8]	; (8007d3c <_close+0xc>)
 8007d32:	2258      	movs	r2, #88	; 0x58
 8007d34:	601a      	str	r2, [r3, #0]
 8007d36:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3a:	4770      	bx	lr
 8007d3c:	200022c8 	.word	0x200022c8

08007d40 <_fstat>:
 8007d40:	4b02      	ldr	r3, [pc, #8]	; (8007d4c <_fstat+0xc>)
 8007d42:	2258      	movs	r2, #88	; 0x58
 8007d44:	601a      	str	r2, [r3, #0]
 8007d46:	f04f 30ff 	mov.w	r0, #4294967295
 8007d4a:	4770      	bx	lr
 8007d4c:	200022c8 	.word	0x200022c8

08007d50 <_isatty>:
 8007d50:	4b02      	ldr	r3, [pc, #8]	; (8007d5c <_isatty+0xc>)
 8007d52:	2258      	movs	r2, #88	; 0x58
 8007d54:	601a      	str	r2, [r3, #0]
 8007d56:	2000      	movs	r0, #0
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	200022c8 	.word	0x200022c8

08007d60 <_lseek>:
 8007d60:	4b02      	ldr	r3, [pc, #8]	; (8007d6c <_lseek+0xc>)
 8007d62:	2258      	movs	r2, #88	; 0x58
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6a:	4770      	bx	lr
 8007d6c:	200022c8 	.word	0x200022c8

08007d70 <_read>:
 8007d70:	4b02      	ldr	r3, [pc, #8]	; (8007d7c <_read+0xc>)
 8007d72:	2258      	movs	r2, #88	; 0x58
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	f04f 30ff 	mov.w	r0, #4294967295
 8007d7a:	4770      	bx	lr
 8007d7c:	200022c8 	.word	0x200022c8

08007d80 <_sbrk>:
 8007d80:	4b04      	ldr	r3, [pc, #16]	; (8007d94 <_sbrk+0x14>)
 8007d82:	6819      	ldr	r1, [r3, #0]
 8007d84:	4602      	mov	r2, r0
 8007d86:	b909      	cbnz	r1, 8007d8c <_sbrk+0xc>
 8007d88:	4903      	ldr	r1, [pc, #12]	; (8007d98 <_sbrk+0x18>)
 8007d8a:	6019      	str	r1, [r3, #0]
 8007d8c:	6818      	ldr	r0, [r3, #0]
 8007d8e:	4402      	add	r2, r0
 8007d90:	601a      	str	r2, [r3, #0]
 8007d92:	4770      	bx	lr
 8007d94:	200002b4 	.word	0x200002b4
 8007d98:	200022cc 	.word	0x200022cc

08007d9c <_write>:
 8007d9c:	4b02      	ldr	r3, [pc, #8]	; (8007da8 <_write+0xc>)
 8007d9e:	2258      	movs	r2, #88	; 0x58
 8007da0:	601a      	str	r2, [r3, #0]
 8007da2:	f04f 30ff 	mov.w	r0, #4294967295
 8007da6:	4770      	bx	lr
 8007da8:	200022c8 	.word	0x200022c8

08007dac <_init>:
 8007dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dae:	bf00      	nop
 8007db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007db2:	bc08      	pop	{r3}
 8007db4:	469e      	mov	lr, r3
 8007db6:	4770      	bx	lr

08007db8 <_fini>:
 8007db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dba:	bf00      	nop
 8007dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dbe:	bc08      	pop	{r3}
 8007dc0:	469e      	mov	lr, r3
 8007dc2:	4770      	bx	lr
