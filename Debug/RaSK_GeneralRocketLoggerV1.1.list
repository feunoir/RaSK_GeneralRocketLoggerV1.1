
RaSK_GeneralRocketLoggerV1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017d8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800196c  0800196c  0001196c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080019a8  080019a8  000119a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080019ac  080019ac  000119ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080019b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          000001b0  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001b4  200001b4  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   000144d6  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000024d0  00000000  00000000  0003450a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007b69  00000000  00000000  000369da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000918  00000000  00000000  0003e548  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000cb0  00000000  00000000  0003ee60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005d35  00000000  00000000  0003fb10  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000037f3  00000000  00000000  00045845  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00049038  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001b80  00000000  00000000  000490b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001954 	.word	0x08001954

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08001954 	.word	0x08001954

080001d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001d4:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001d6:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <HAL_InitTick+0x24>)
{
 80001d8:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001da:	6818      	ldr	r0, [r3, #0]
 80001dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e4:	f000 f870 	bl	80002c8 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001e8:	2200      	movs	r2, #0
 80001ea:	4621      	mov	r1, r4
 80001ec:	f04f 30ff 	mov.w	r0, #4294967295
 80001f0:	f000 f836 	bl	8000260 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001f4:	2000      	movs	r0, #0
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000000 	.word	0x20000000

080001fc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001fc:	4a07      	ldr	r2, [pc, #28]	; (800021c <HAL_Init+0x20>)
{
 80001fe:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000200:	6813      	ldr	r3, [r2, #0]
 8000202:	f043 0310 	orr.w	r3, r3, #16
 8000206:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000208:	2003      	movs	r0, #3
 800020a:	f000 f817 	bl	800023c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800020e:	2000      	movs	r0, #0
 8000210:	f7ff ffe0 	bl	80001d4 <HAL_InitTick>
  HAL_MspInit();
 8000214:	f001 fa3c 	bl	8001690 <HAL_MspInit>
}
 8000218:	2000      	movs	r0, #0
 800021a:	bd08      	pop	{r3, pc}
 800021c:	40022000 	.word	0x40022000

08000220 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000220:	4a02      	ldr	r2, [pc, #8]	; (800022c <HAL_IncTick+0xc>)
 8000222:	6813      	ldr	r3, [r2, #0]
 8000224:	3301      	adds	r3, #1
 8000226:	6013      	str	r3, [r2, #0]
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	20000020 	.word	0x20000020

08000230 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000230:	4b01      	ldr	r3, [pc, #4]	; (8000238 <HAL_GetTick+0x8>)
 8000232:	6818      	ldr	r0, [r3, #0]
}
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	20000020 	.word	0x20000020

0800023c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800023c:	4a07      	ldr	r2, [pc, #28]	; (800025c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800023e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000240:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000244:	041b      	lsls	r3, r3, #16
 8000246:	0c1b      	lsrs	r3, r3, #16
 8000248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800024c:	0200      	lsls	r0, r0, #8
 800024e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000252:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000256:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000258:	60d3      	str	r3, [r2, #12]
 800025a:	4770      	bx	lr
 800025c:	e000ed00 	.word	0xe000ed00

08000260 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000260:	4b17      	ldr	r3, [pc, #92]	; (80002c0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000262:	b530      	push	{r4, r5, lr}
 8000264:	68dc      	ldr	r4, [r3, #12]
 8000266:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800026a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800026e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000270:	2b04      	cmp	r3, #4
 8000272:	bf28      	it	cs
 8000274:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000276:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000278:	f04f 0501 	mov.w	r5, #1
 800027c:	fa05 f303 	lsl.w	r3, r5, r3
 8000280:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000284:	bf8c      	ite	hi
 8000286:	3c03      	subhi	r4, #3
 8000288:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800028a:	4019      	ands	r1, r3
 800028c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800028e:	fa05 f404 	lsl.w	r4, r5, r4
 8000292:	3c01      	subs	r4, #1
 8000294:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000296:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000298:	ea42 0201 	orr.w	r2, r2, r1
 800029c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a0:	bfaf      	iteee	ge
 80002a2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a6:	f000 000f 	andlt.w	r0, r0, #15
 80002aa:	4b06      	ldrlt	r3, [pc, #24]	; (80002c4 <HAL_NVIC_SetPriority+0x64>)
 80002ac:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ae:	bfa5      	ittet	ge
 80002b0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002b4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002bc:	bd30      	pop	{r4, r5, pc}
 80002be:	bf00      	nop
 80002c0:	e000ed00 	.word	0xe000ed00
 80002c4:	e000ed14 	.word	0xe000ed14

080002c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002c8:	3801      	subs	r0, #1
 80002ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ce:	d20a      	bcs.n	80002e6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002d0:	4b06      	ldr	r3, [pc, #24]	; (80002ec <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d2:	4a07      	ldr	r2, [pc, #28]	; (80002f0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002d4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	21f0      	movs	r1, #240	; 0xf0
 80002d8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002dc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002de:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002e0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002e6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	e000e010 	.word	0xe000e010
 80002f0:	e000ed00 	.word	0xe000ed00

080002f4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002f4:	4b04      	ldr	r3, [pc, #16]	; (8000308 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002f6:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002f8:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002fa:	bf0c      	ite	eq
 80002fc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000300:	f022 0204 	bicne.w	r2, r2, #4
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	4770      	bx	lr
 8000308:	e000e010 	.word	0xe000e010

0800030c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800030c:	4770      	bx	lr

0800030e <HAL_SYSTICK_IRQHandler>:
{
 800030e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000310:	f7ff fffc 	bl	800030c <HAL_SYSTICK_Callback>
 8000314:	bd08      	pop	{r3, pc}
	...

08000318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800031c:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000320:	f8df 9190 	ldr.w	r9, [pc, #400]	; 80004b4 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000324:	4a61      	ldr	r2, [pc, #388]	; (80004ac <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 8000326:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000328:	fa38 f403 	lsrs.w	r4, r8, r3
 800032c:	d102      	bne.n	8000334 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 800032e:	b003      	add	sp, #12
 8000330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000334:	f04f 0e01 	mov.w	lr, #1
 8000338:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 800033c:	ea18 060e 	ands.w	r6, r8, lr
 8000340:	f000 80a6 	beq.w	8000490 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000344:	684c      	ldr	r4, [r1, #4]
 8000346:	f024 0710 	bic.w	r7, r4, #16
 800034a:	2f02      	cmp	r7, #2
 800034c:	d116      	bne.n	800037c <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 800034e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000352:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000356:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800035a:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800035e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000362:	f04f 0c0f 	mov.w	ip, #15
 8000366:	fa0c fc0b 	lsl.w	ip, ip, fp
 800036a:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800036e:	690d      	ldr	r5, [r1, #16]
 8000370:	fa05 f50b 	lsl.w	r5, r5, fp
 8000374:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000378:	f8ca 5020 	str.w	r5, [sl, #32]
 800037c:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000380:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000382:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000386:	fa05 f50a 	lsl.w	r5, r5, sl
 800038a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800038c:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000390:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000394:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000398:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800039a:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800039e:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80003a0:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003a4:	d811      	bhi.n	80003ca <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80003a6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003a8:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003ac:	68cf      	ldr	r7, [r1, #12]
 80003ae:	fa07 fc0a 	lsl.w	ip, r7, sl
 80003b2:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80003b6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80003b8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003ba:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003be:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80003c2:	409f      	lsls	r7, r3
 80003c4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80003c8:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80003ca:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003cc:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80003ce:	688f      	ldr	r7, [r1, #8]
 80003d0:	fa07 f70a 	lsl.w	r7, r7, sl
 80003d4:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80003d6:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003d8:	00e5      	lsls	r5, r4, #3
 80003da:	d559      	bpl.n	8000490 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003dc:	f8d9 5018 	ldr.w	r5, [r9, #24]
 80003e0:	f045 0501 	orr.w	r5, r5, #1
 80003e4:	f8c9 5018 	str.w	r5, [r9, #24]
 80003e8:	f8d9 5018 	ldr.w	r5, [r9, #24]
 80003ec:	f023 0703 	bic.w	r7, r3, #3
 80003f0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80003f4:	f005 0501 	and.w	r5, r5, #1
 80003f8:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80003fc:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80003fe:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000402:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000404:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000406:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800040a:	f04f 0e0f 	mov.w	lr, #15
 800040e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000412:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000416:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800041a:	d03b      	beq.n	8000494 <HAL_GPIO_Init+0x17c>
 800041c:	4d24      	ldr	r5, [pc, #144]	; (80004b0 <HAL_GPIO_Init+0x198>)
 800041e:	42a8      	cmp	r0, r5
 8000420:	d03a      	beq.n	8000498 <HAL_GPIO_Init+0x180>
 8000422:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000426:	42a8      	cmp	r0, r5
 8000428:	d038      	beq.n	800049c <HAL_GPIO_Init+0x184>
 800042a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800042e:	42a8      	cmp	r0, r5
 8000430:	d036      	beq.n	80004a0 <HAL_GPIO_Init+0x188>
 8000432:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000436:	42a8      	cmp	r0, r5
 8000438:	d034      	beq.n	80004a4 <HAL_GPIO_Init+0x18c>
 800043a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800043e:	42a8      	cmp	r0, r5
 8000440:	d032      	beq.n	80004a8 <HAL_GPIO_Init+0x190>
 8000442:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000446:	42a8      	cmp	r0, r5
 8000448:	bf14      	ite	ne
 800044a:	2507      	movne	r5, #7
 800044c:	2506      	moveq	r5, #6
 800044e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000452:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000456:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000458:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800045a:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800045c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000460:	bf0c      	ite	eq
 8000462:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000464:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000466:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000468:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800046a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800046e:	bf0c      	ite	eq
 8000470:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000472:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000474:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000476:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000478:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800047c:	bf0c      	ite	eq
 800047e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000480:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000482:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000484:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000486:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000488:	bf54      	ite	pl
 800048a:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800048c:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 800048e:	60d5      	str	r5, [r2, #12]
    position++;
 8000490:	3301      	adds	r3, #1
 8000492:	e749      	b.n	8000328 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000494:	2500      	movs	r5, #0
 8000496:	e7da      	b.n	800044e <HAL_GPIO_Init+0x136>
 8000498:	2501      	movs	r5, #1
 800049a:	e7d8      	b.n	800044e <HAL_GPIO_Init+0x136>
 800049c:	2502      	movs	r5, #2
 800049e:	e7d6      	b.n	800044e <HAL_GPIO_Init+0x136>
 80004a0:	2503      	movs	r5, #3
 80004a2:	e7d4      	b.n	800044e <HAL_GPIO_Init+0x136>
 80004a4:	2504      	movs	r5, #4
 80004a6:	e7d2      	b.n	800044e <HAL_GPIO_Init+0x136>
 80004a8:	2505      	movs	r5, #5
 80004aa:	e7d0      	b.n	800044e <HAL_GPIO_Init+0x136>
 80004ac:	40010400 	.word	0x40010400
 80004b0:	48000400 	.word	0x48000400
 80004b4:	40021000 	.word	0x40021000

080004b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004b8:	b10a      	cbz	r2, 80004be <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004ba:	6181      	str	r1, [r0, #24]
 80004bc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004be:	6281      	str	r1, [r0, #40]	; 0x28
 80004c0:	4770      	bx	lr

080004c2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80004c2:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80004c4:	4604      	mov	r4, r0
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d04a      	beq.n	8000560 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80004ca:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80004ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80004d2:	b91b      	cbnz	r3, 80004dc <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80004d4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80004d8:	f001 f918 	bl	800170c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80004dc:	2324      	movs	r3, #36	; 0x24
 80004de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80004e2:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80004e4:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	f022 0201 	bic.w	r2, r2, #1
 80004ec:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80004ee:	6862      	ldr	r2, [r4, #4]
 80004f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80004f4:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80004f6:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80004f8:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80004fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000502:	d124      	bne.n	800054e <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000504:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000508:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800050a:	685a      	ldr	r2, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800050c:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800050e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000512:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000516:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000518:	68da      	ldr	r2, [r3, #12]
 800051a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800051e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000520:	6922      	ldr	r2, [r4, #16]
 8000522:	430a      	orrs	r2, r1
 8000524:	69a1      	ldr	r1, [r4, #24]
 8000526:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800052a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800052c:	6a21      	ldr	r1, [r4, #32]
 800052e:	69e2      	ldr	r2, [r4, #28]
 8000530:	430a      	orrs	r2, r1
 8000532:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f042 0201 	orr.w	r2, r2, #1
 800053a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800053c:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800053e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000540:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000542:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000546:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000548:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 800054c:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800054e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000552:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000554:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000556:	bf04      	itt	eq
 8000558:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800055c:	605a      	streq	r2, [r3, #4]
 800055e:	e7d4      	b.n	800050a <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000560:	2001      	movs	r0, #1
}
 8000562:	bd10      	pop	{r4, pc}

08000564 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000564:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000568:	b2d2      	uxtb	r2, r2
 800056a:	2a20      	cmp	r2, #32
{
 800056c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800056e:	d11d      	bne.n	80005ac <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000570:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000574:	2b01      	cmp	r3, #1
 8000576:	d019      	beq.n	80005ac <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000578:	2324      	movs	r3, #36	; 0x24
 800057a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800057e:	6803      	ldr	r3, [r0, #0]
 8000580:	681c      	ldr	r4, [r3, #0]
 8000582:	f024 0401 	bic.w	r4, r4, #1
 8000586:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000588:	681c      	ldr	r4, [r3, #0]
 800058a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800058e:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000590:	681c      	ldr	r4, [r3, #0]
 8000592:	4321      	orrs	r1, r4
 8000594:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000596:	6819      	ldr	r1, [r3, #0]
 8000598:	f041 0101 	orr.w	r1, r1, #1
 800059c:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800059e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80005a0:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80005a4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80005a8:	4618      	mov	r0, r3
 80005aa:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80005ac:	2002      	movs	r0, #2
  }
}
 80005ae:	bd10      	pop	{r4, pc}

080005b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80005b0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80005b2:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80005b6:	b2e4      	uxtb	r4, r4
 80005b8:	2c20      	cmp	r4, #32
 80005ba:	d11c      	bne.n	80005f6 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80005bc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d018      	beq.n	80005f6 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80005c4:	2324      	movs	r3, #36	; 0x24
 80005c6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80005ca:	6803      	ldr	r3, [r0, #0]
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	f022 0201 	bic.w	r2, r2, #1
 80005d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80005d4:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80005d6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80005da:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80005de:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	f042 0201 	orr.w	r2, r2, #1
 80005e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80005e8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80005ea:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80005ee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80005f2:	4618      	mov	r0, r3
 80005f4:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80005f6:	2002      	movs	r0, #2
  }
}
 80005f8:	bd10      	pop	{r4, pc}
	...

080005fc <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005fc:	6803      	ldr	r3, [r0, #0]
{
 80005fe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000602:	07df      	lsls	r7, r3, #31
{
 8000604:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000606:	d411      	bmi.n	800062c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000608:	682b      	ldr	r3, [r5, #0]
 800060a:	079e      	lsls	r6, r3, #30
 800060c:	f100 808b 	bmi.w	8000726 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000610:	682b      	ldr	r3, [r5, #0]
 8000612:	071c      	lsls	r4, r3, #28
 8000614:	f100 80fe 	bmi.w	8000814 <HAL_RCC_OscConfig+0x218>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000618:	682b      	ldr	r3, [r5, #0]
 800061a:	0758      	lsls	r0, r3, #29
 800061c:	f100 8147 	bmi.w	80008ae <HAL_RCC_OscConfig+0x2b2>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000620:	69aa      	ldr	r2, [r5, #24]
 8000622:	2a00      	cmp	r2, #0
 8000624:	f040 81dd 	bne.w	80009e2 <HAL_RCC_OscConfig+0x3e6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000628:	2000      	movs	r0, #0
 800062a:	e024      	b.n	8000676 <HAL_RCC_OscConfig+0x7a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800062c:	4cbd      	ldr	r4, [pc, #756]	; (8000924 <HAL_RCC_OscConfig+0x328>)
 800062e:	6863      	ldr	r3, [r4, #4]
 8000630:	f003 030c 	and.w	r3, r3, #12
 8000634:	2b04      	cmp	r3, #4
 8000636:	d00a      	beq.n	800064e <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000638:	6863      	ldr	r3, [r4, #4]
 800063a:	f003 030c 	and.w	r3, r3, #12
 800063e:	2b08      	cmp	r3, #8
 8000640:	d11c      	bne.n	800067c <HAL_RCC_OscConfig+0x80>
 8000642:	6863      	ldr	r3, [r4, #4]
 8000644:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800064c:	d116      	bne.n	800067c <HAL_RCC_OscConfig+0x80>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800064e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000652:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000656:	6821      	ldr	r1, [r4, #0]
 8000658:	fa93 f3a3 	rbit	r3, r3
 800065c:	fab3 f383 	clz	r3, r3
 8000660:	f003 031f 	and.w	r3, r3, #31
 8000664:	2201      	movs	r2, #1
 8000666:	fa02 f303 	lsl.w	r3, r2, r3
 800066a:	420b      	tst	r3, r1
 800066c:	d0cc      	beq.n	8000608 <HAL_RCC_OscConfig+0xc>
 800066e:	686b      	ldr	r3, [r5, #4]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1c9      	bne.n	8000608 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000674:	2001      	movs	r0, #1
}
 8000676:	b002      	add	sp, #8
 8000678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800067c:	686b      	ldr	r3, [r5, #4]
 800067e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000682:	d11e      	bne.n	80006c2 <HAL_RCC_OscConfig+0xc6>
 8000684:	6823      	ldr	r3, [r4, #0]
 8000686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800068a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800068c:	f7ff fdd0 	bl	8000230 <HAL_GetTick>
 8000690:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000694:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000696:	2701      	movs	r7, #1
 8000698:	fa96 f3a6 	rbit	r3, r6
 800069c:	6822      	ldr	r2, [r4, #0]
 800069e:	fa96 f3a6 	rbit	r3, r6
 80006a2:	fab3 f383 	clz	r3, r3
 80006a6:	f003 031f 	and.w	r3, r3, #31
 80006aa:	fa07 f303 	lsl.w	r3, r7, r3
 80006ae:	4213      	tst	r3, r2
 80006b0:	d1aa      	bne.n	8000608 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006b2:	f7ff fdbd 	bl	8000230 <HAL_GetTick>
 80006b6:	eba0 0008 	sub.w	r0, r0, r8
 80006ba:	2864      	cmp	r0, #100	; 0x64
 80006bc:	d9ec      	bls.n	8000698 <HAL_RCC_OscConfig+0x9c>
            return HAL_TIMEOUT;
 80006be:	2003      	movs	r0, #3
 80006c0:	e7d9      	b.n	8000676 <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006c2:	bb0b      	cbnz	r3, 8000708 <HAL_RCC_OscConfig+0x10c>
 80006c4:	6823      	ldr	r3, [r4, #0]
 80006c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006ca:	6023      	str	r3, [r4, #0]
 80006cc:	6823      	ldr	r3, [r4, #0]
 80006ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006d2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006d4:	f7ff fdac 	bl	8000230 <HAL_GetTick>
 80006d8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80006dc:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006de:	2701      	movs	r7, #1
 80006e0:	fa96 f3a6 	rbit	r3, r6
 80006e4:	6822      	ldr	r2, [r4, #0]
 80006e6:	fa96 f3a6 	rbit	r3, r6
 80006ea:	fab3 f383 	clz	r3, r3
 80006ee:	f003 031f 	and.w	r3, r3, #31
 80006f2:	fa07 f303 	lsl.w	r3, r7, r3
 80006f6:	4213      	tst	r3, r2
 80006f8:	d086      	beq.n	8000608 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006fa:	f7ff fd99 	bl	8000230 <HAL_GetTick>
 80006fe:	eba0 0008 	sub.w	r0, r0, r8
 8000702:	2864      	cmp	r0, #100	; 0x64
 8000704:	d9ec      	bls.n	80006e0 <HAL_RCC_OscConfig+0xe4>
 8000706:	e7da      	b.n	80006be <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800070c:	6823      	ldr	r3, [r4, #0]
 800070e:	d103      	bne.n	8000718 <HAL_RCC_OscConfig+0x11c>
 8000710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000714:	6023      	str	r3, [r4, #0]
 8000716:	e7b5      	b.n	8000684 <HAL_RCC_OscConfig+0x88>
 8000718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800071c:	6023      	str	r3, [r4, #0]
 800071e:	6823      	ldr	r3, [r4, #0]
 8000720:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000724:	e7b1      	b.n	800068a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000726:	4c7f      	ldr	r4, [pc, #508]	; (8000924 <HAL_RCC_OscConfig+0x328>)
 8000728:	6863      	ldr	r3, [r4, #4]
 800072a:	f013 0f0c 	tst.w	r3, #12
 800072e:	d00a      	beq.n	8000746 <HAL_RCC_OscConfig+0x14a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000730:	6863      	ldr	r3, [r4, #4]
 8000732:	f003 030c 	and.w	r3, r3, #12
 8000736:	2b08      	cmp	r3, #8
 8000738:	d124      	bne.n	8000784 <HAL_RCC_OscConfig+0x188>
 800073a:	6863      	ldr	r3, [r4, #4]
 800073c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000744:	d11e      	bne.n	8000784 <HAL_RCC_OscConfig+0x188>
 8000746:	2302      	movs	r3, #2
 8000748:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800074c:	6821      	ldr	r1, [r4, #0]
 800074e:	fa93 f3a3 	rbit	r3, r3
 8000752:	fab3 f383 	clz	r3, r3
 8000756:	f003 031f 	and.w	r3, r3, #31
 800075a:	2201      	movs	r2, #1
 800075c:	fa02 f303 	lsl.w	r3, r2, r3
 8000760:	420b      	tst	r3, r1
 8000762:	d002      	beq.n	800076a <HAL_RCC_OscConfig+0x16e>
 8000764:	68eb      	ldr	r3, [r5, #12]
 8000766:	4293      	cmp	r3, r2
 8000768:	d184      	bne.n	8000674 <HAL_RCC_OscConfig+0x78>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800076a:	6821      	ldr	r1, [r4, #0]
 800076c:	23f8      	movs	r3, #248	; 0xf8
 800076e:	fa93 f3a3 	rbit	r3, r3
 8000772:	fab3 f283 	clz	r2, r3
 8000776:	692b      	ldr	r3, [r5, #16]
 8000778:	4093      	lsls	r3, r2
 800077a:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800077e:	4313      	orrs	r3, r2
 8000780:	6023      	str	r3, [r4, #0]
 8000782:	e745      	b.n	8000610 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000784:	68ea      	ldr	r2, [r5, #12]
 8000786:	2601      	movs	r6, #1
 8000788:	b30a      	cbz	r2, 80007ce <HAL_RCC_OscConfig+0x1d2>
 800078a:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 800078e:	fab3 f383 	clz	r3, r3
 8000792:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000796:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	2702      	movs	r7, #2
 800079e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80007a0:	f7ff fd46 	bl	8000230 <HAL_GetTick>
 80007a4:	4680      	mov	r8, r0
 80007a6:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80007aa:	6822      	ldr	r2, [r4, #0]
 80007ac:	fa97 f3a7 	rbit	r3, r7
 80007b0:	fab3 f383 	clz	r3, r3
 80007b4:	f003 031f 	and.w	r3, r3, #31
 80007b8:	fa06 f303 	lsl.w	r3, r6, r3
 80007bc:	4213      	tst	r3, r2
 80007be:	d1d4      	bne.n	800076a <HAL_RCC_OscConfig+0x16e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007c0:	f7ff fd36 	bl	8000230 <HAL_GetTick>
 80007c4:	eba0 0008 	sub.w	r0, r0, r8
 80007c8:	2802      	cmp	r0, #2
 80007ca:	d9ec      	bls.n	80007a6 <HAL_RCC_OscConfig+0x1aa>
 80007cc:	e777      	b.n	80006be <HAL_RCC_OscConfig+0xc2>
 80007ce:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80007d2:	fab3 f383 	clz	r3, r3
 80007d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80007da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	2702      	movs	r7, #2
 80007e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007e4:	f7ff fd24 	bl	8000230 <HAL_GetTick>
 80007e8:	4680      	mov	r8, r0
 80007ea:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007ee:	6822      	ldr	r2, [r4, #0]
 80007f0:	fa97 f3a7 	rbit	r3, r7
 80007f4:	fab3 f383 	clz	r3, r3
 80007f8:	f003 031f 	and.w	r3, r3, #31
 80007fc:	fa06 f303 	lsl.w	r3, r6, r3
 8000800:	4213      	tst	r3, r2
 8000802:	f43f af05 	beq.w	8000610 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000806:	f7ff fd13 	bl	8000230 <HAL_GetTick>
 800080a:	eba0 0008 	sub.w	r0, r0, r8
 800080e:	2802      	cmp	r0, #2
 8000810:	d9eb      	bls.n	80007ea <HAL_RCC_OscConfig+0x1ee>
 8000812:	e754      	b.n	80006be <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000814:	696a      	ldr	r2, [r5, #20]
 8000816:	4e43      	ldr	r6, [pc, #268]	; (8000924 <HAL_RCC_OscConfig+0x328>)
 8000818:	4943      	ldr	r1, [pc, #268]	; (8000928 <HAL_RCC_OscConfig+0x32c>)
 800081a:	2401      	movs	r4, #1
 800081c:	b31a      	cbz	r2, 8000866 <HAL_RCC_OscConfig+0x26a>
 800081e:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000822:	fab3 f383 	clz	r3, r3
 8000826:	440b      	add	r3, r1
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	2702      	movs	r7, #2
 800082c:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 800082e:	f7ff fcff 	bl	8000230 <HAL_GetTick>
 8000832:	4680      	mov	r8, r0
 8000834:	fa97 f3a7 	rbit	r3, r7
 8000838:	fa97 f3a7 	rbit	r3, r7
 800083c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000840:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000842:	fa97 f3a7 	rbit	r3, r7
 8000846:	fab3 f383 	clz	r3, r3
 800084a:	f003 031f 	and.w	r3, r3, #31
 800084e:	fa04 f303 	lsl.w	r3, r4, r3
 8000852:	4213      	tst	r3, r2
 8000854:	f47f aee0 	bne.w	8000618 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000858:	f7ff fcea 	bl	8000230 <HAL_GetTick>
 800085c:	eba0 0008 	sub.w	r0, r0, r8
 8000860:	2802      	cmp	r0, #2
 8000862:	d9e7      	bls.n	8000834 <HAL_RCC_OscConfig+0x238>
 8000864:	e72b      	b.n	80006be <HAL_RCC_OscConfig+0xc2>
 8000866:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 800086a:	fab3 f383 	clz	r3, r3
 800086e:	440b      	add	r3, r1
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	2702      	movs	r7, #2
 8000874:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000876:	f7ff fcdb 	bl	8000230 <HAL_GetTick>
 800087a:	4680      	mov	r8, r0
 800087c:	fa97 f3a7 	rbit	r3, r7
 8000880:	fa97 f3a7 	rbit	r3, r7
 8000884:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000888:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800088a:	fa97 f3a7 	rbit	r3, r7
 800088e:	fab3 f383 	clz	r3, r3
 8000892:	f003 031f 	and.w	r3, r3, #31
 8000896:	fa04 f303 	lsl.w	r3, r4, r3
 800089a:	4213      	tst	r3, r2
 800089c:	f43f aebc 	beq.w	8000618 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008a0:	f7ff fcc6 	bl	8000230 <HAL_GetTick>
 80008a4:	eba0 0008 	sub.w	r0, r0, r8
 80008a8:	2802      	cmp	r0, #2
 80008aa:	d9e7      	bls.n	800087c <HAL_RCC_OscConfig+0x280>
 80008ac:	e707      	b.n	80006be <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80008ae:	4c1d      	ldr	r4, [pc, #116]	; (8000924 <HAL_RCC_OscConfig+0x328>)
 80008b0:	69e3      	ldr	r3, [r4, #28]
 80008b2:	00d9      	lsls	r1, r3, #3
 80008b4:	d434      	bmi.n	8000920 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	69e3      	ldr	r3, [r4, #28]
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008bc:	61e3      	str	r3, [r4, #28]
 80008be:	69e3      	ldr	r3, [r4, #28]
 80008c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80008c8:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008ca:	4f18      	ldr	r7, [pc, #96]	; (800092c <HAL_RCC_OscConfig+0x330>)
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	05da      	lsls	r2, r3, #23
 80008d0:	d52e      	bpl.n	8000930 <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008d2:	68ab      	ldr	r3, [r5, #8]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d13c      	bne.n	8000952 <HAL_RCC_OscConfig+0x356>
 80008d8:	6a23      	ldr	r3, [r4, #32]
 80008da:	f043 0301 	orr.w	r3, r3, #1
 80008de:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80008e0:	f7ff fca6 	bl	8000230 <HAL_GetTick>
 80008e4:	2702      	movs	r7, #2
 80008e6:	4682      	mov	sl, r0
 80008e8:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008ea:	f04f 0801 	mov.w	r8, #1
 80008ee:	fa97 f3a7 	rbit	r3, r7
 80008f2:	fa97 f3a7 	rbit	r3, r7
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d06b      	beq.n	80009d2 <HAL_RCC_OscConfig+0x3d6>
 80008fa:	6a22      	ldr	r2, [r4, #32]
 80008fc:	fa99 f3a9 	rbit	r3, r9
 8000900:	fab3 f383 	clz	r3, r3
 8000904:	f003 031f 	and.w	r3, r3, #31
 8000908:	fa08 f303 	lsl.w	r3, r8, r3
 800090c:	4213      	tst	r3, r2
 800090e:	d057      	beq.n	80009c0 <HAL_RCC_OscConfig+0x3c4>
    if(pwrclkchanged == SET)
 8000910:	2e00      	cmp	r6, #0
 8000912:	f43f ae85 	beq.w	8000620 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000916:	69e3      	ldr	r3, [r4, #28]
 8000918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800091c:	61e3      	str	r3, [r4, #28]
 800091e:	e67f      	b.n	8000620 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000920:	2600      	movs	r6, #0
 8000922:	e7d2      	b.n	80008ca <HAL_RCC_OscConfig+0x2ce>
 8000924:	40021000 	.word	0x40021000
 8000928:	10908120 	.word	0x10908120
 800092c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000936:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000938:	f7ff fc7a 	bl	8000230 <HAL_GetTick>
 800093c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	05db      	lsls	r3, r3, #23
 8000942:	d4c6      	bmi.n	80008d2 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000944:	f7ff fc74 	bl	8000230 <HAL_GetTick>
 8000948:	eba0 0008 	sub.w	r0, r0, r8
 800094c:	2864      	cmp	r0, #100	; 0x64
 800094e:	d9f6      	bls.n	800093e <HAL_RCC_OscConfig+0x342>
 8000950:	e6b5      	b.n	80006be <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000952:	bb3b      	cbnz	r3, 80009a4 <HAL_RCC_OscConfig+0x3a8>
 8000954:	6a23      	ldr	r3, [r4, #32]
 8000956:	f023 0301 	bic.w	r3, r3, #1
 800095a:	6223      	str	r3, [r4, #32]
 800095c:	6a23      	ldr	r3, [r4, #32]
 800095e:	f023 0304 	bic.w	r3, r3, #4
 8000962:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000964:	f7ff fc64 	bl	8000230 <HAL_GetTick>
 8000968:	2702      	movs	r7, #2
 800096a:	4682      	mov	sl, r0
 800096c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800096e:	f04f 0801 	mov.w	r8, #1
 8000972:	fa97 f3a7 	rbit	r3, r7
 8000976:	fa97 f3a7 	rbit	r3, r7
 800097a:	b373      	cbz	r3, 80009da <HAL_RCC_OscConfig+0x3de>
 800097c:	6a22      	ldr	r2, [r4, #32]
 800097e:	fa99 f3a9 	rbit	r3, r9
 8000982:	fab3 f383 	clz	r3, r3
 8000986:	f003 031f 	and.w	r3, r3, #31
 800098a:	fa08 f303 	lsl.w	r3, r8, r3
 800098e:	4213      	tst	r3, r2
 8000990:	d0be      	beq.n	8000910 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000992:	f7ff fc4d 	bl	8000230 <HAL_GetTick>
 8000996:	f241 3388 	movw	r3, #5000	; 0x1388
 800099a:	eba0 000a 	sub.w	r0, r0, sl
 800099e:	4298      	cmp	r0, r3
 80009a0:	d9e7      	bls.n	8000972 <HAL_RCC_OscConfig+0x376>
 80009a2:	e68c      	b.n	80006be <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009a4:	2b05      	cmp	r3, #5
 80009a6:	6a23      	ldr	r3, [r4, #32]
 80009a8:	d103      	bne.n	80009b2 <HAL_RCC_OscConfig+0x3b6>
 80009aa:	f043 0304 	orr.w	r3, r3, #4
 80009ae:	6223      	str	r3, [r4, #32]
 80009b0:	e792      	b.n	80008d8 <HAL_RCC_OscConfig+0x2dc>
 80009b2:	f023 0301 	bic.w	r3, r3, #1
 80009b6:	6223      	str	r3, [r4, #32]
 80009b8:	6a23      	ldr	r3, [r4, #32]
 80009ba:	f023 0304 	bic.w	r3, r3, #4
 80009be:	e78e      	b.n	80008de <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009c0:	f7ff fc36 	bl	8000230 <HAL_GetTick>
 80009c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80009c8:	eba0 000a 	sub.w	r0, r0, sl
 80009cc:	4298      	cmp	r0, r3
 80009ce:	d98e      	bls.n	80008ee <HAL_RCC_OscConfig+0x2f2>
 80009d0:	e675      	b.n	80006be <HAL_RCC_OscConfig+0xc2>
 80009d2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80009d8:	e790      	b.n	80008fc <HAL_RCC_OscConfig+0x300>
 80009da:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80009e0:	e7cd      	b.n	800097e <HAL_RCC_OscConfig+0x382>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009e2:	4c44      	ldr	r4, [pc, #272]	; (8000af4 <HAL_RCC_OscConfig+0x4f8>)
 80009e4:	6863      	ldr	r3, [r4, #4]
 80009e6:	f003 030c 	and.w	r3, r3, #12
 80009ea:	2b08      	cmp	r3, #8
 80009ec:	f43f ae42 	beq.w	8000674 <HAL_RCC_OscConfig+0x78>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009f0:	2a02      	cmp	r2, #2
 80009f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009f6:	d158      	bne.n	8000aaa <HAL_RCC_OscConfig+0x4ae>
 80009f8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80009fc:	fab3 f383 	clz	r3, r3
 8000a00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a0e:	f7ff fc0f 	bl	8000230 <HAL_GetTick>
 8000a12:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000a16:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a18:	2601      	movs	r6, #1
 8000a1a:	fa97 f3a7 	rbit	r3, r7
 8000a1e:	6822      	ldr	r2, [r4, #0]
 8000a20:	fa97 f3a7 	rbit	r3, r7
 8000a24:	fab3 f383 	clz	r3, r3
 8000a28:	f003 031f 	and.w	r3, r3, #31
 8000a2c:	fa06 f303 	lsl.w	r3, r6, r3
 8000a30:	4213      	tst	r3, r2
 8000a32:	d133      	bne.n	8000a9c <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a36:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000a38:	f023 030f 	bic.w	r3, r3, #15
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a40:	6862      	ldr	r2, [r4, #4]
 8000a42:	6a2b      	ldr	r3, [r5, #32]
 8000a44:	69e9      	ldr	r1, [r5, #28]
 8000a46:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8000a4a:	430b      	orrs	r3, r1
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	6063      	str	r3, [r4, #4]
 8000a50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a54:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000a58:	fab3 f383 	clz	r3, r3
 8000a5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000a6a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000a6c:	f7ff fbe0 	bl	8000230 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a70:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000a72:	4607      	mov	r7, r0
 8000a74:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a78:	6822      	ldr	r2, [r4, #0]
 8000a7a:	fa95 f3a5 	rbit	r3, r5
 8000a7e:	fab3 f383 	clz	r3, r3
 8000a82:	f003 031f 	and.w	r3, r3, #31
 8000a86:	fa06 f303 	lsl.w	r3, r6, r3
 8000a8a:	4213      	tst	r3, r2
 8000a8c:	f47f adcc 	bne.w	8000628 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a90:	f7ff fbce 	bl	8000230 <HAL_GetTick>
 8000a94:	1bc0      	subs	r0, r0, r7
 8000a96:	2802      	cmp	r0, #2
 8000a98:	d9ec      	bls.n	8000a74 <HAL_RCC_OscConfig+0x478>
 8000a9a:	e610      	b.n	80006be <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a9c:	f7ff fbc8 	bl	8000230 <HAL_GetTick>
 8000aa0:	eba0 0008 	sub.w	r0, r0, r8
 8000aa4:	2802      	cmp	r0, #2
 8000aa6:	d9b8      	bls.n	8000a1a <HAL_RCC_OscConfig+0x41e>
 8000aa8:	e609      	b.n	80006be <HAL_RCC_OscConfig+0xc2>
 8000aaa:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000aae:	fab3 f383 	clz	r3, r3
 8000ab2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ab6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ac0:	f7ff fbb6 	bl	8000230 <HAL_GetTick>
 8000ac4:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000ac8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000aca:	2601      	movs	r6, #1
 8000acc:	fa95 f3a5 	rbit	r3, r5
 8000ad0:	6822      	ldr	r2, [r4, #0]
 8000ad2:	fa95 f3a5 	rbit	r3, r5
 8000ad6:	fab3 f383 	clz	r3, r3
 8000ada:	f003 031f 	and.w	r3, r3, #31
 8000ade:	fa06 f303 	lsl.w	r3, r6, r3
 8000ae2:	4213      	tst	r3, r2
 8000ae4:	f43f ada0 	beq.w	8000628 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ae8:	f7ff fba2 	bl	8000230 <HAL_GetTick>
 8000aec:	1bc0      	subs	r0, r0, r7
 8000aee:	2802      	cmp	r0, #2
 8000af0:	d9ec      	bls.n	8000acc <HAL_RCC_OscConfig+0x4d0>
 8000af2:	e5e4      	b.n	80006be <HAL_RCC_OscConfig+0xc2>
 8000af4:	40021000 	.word	0x40021000

08000af8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000af8:	4911      	ldr	r1, [pc, #68]	; (8000b40 <HAL_RCC_GetSysClockFreq+0x48>)
 8000afa:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000afc:	f003 020c 	and.w	r2, r3, #12
 8000b00:	2a08      	cmp	r2, #8
 8000b02:	d11a      	bne.n	8000b3a <HAL_RCC_GetSysClockFreq+0x42>
 8000b04:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000b08:	fa92 f2a2 	rbit	r2, r2
 8000b0c:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000b0e:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000b12:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000b14:	fa90 f0a0 	rbit	r0, r0
 8000b18:	fab0 f080 	clz	r0, r0
 8000b1c:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000b20:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000b24:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000b26:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000b28:	4a06      	ldr	r2, [pc, #24]	; (8000b44 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000b2a:	4807      	ldr	r0, [pc, #28]	; (8000b48 <HAL_RCC_GetSysClockFreq+0x50>)
 8000b2c:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000b2e:	4807      	ldr	r0, [pc, #28]	; (8000b4c <HAL_RCC_GetSysClockFreq+0x54>)
 8000b30:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000b34:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000b36:	4348      	muls	r0, r1
 8000b38:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000b3a:	4804      	ldr	r0, [pc, #16]	; (8000b4c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40021000 	.word	0x40021000
 8000b44:	0800196c 	.word	0x0800196c
 8000b48:	0800197c 	.word	0x0800197c
 8000b4c:	007a1200 	.word	0x007a1200

08000b50 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b50:	4a5c      	ldr	r2, [pc, #368]	; (8000cc4 <HAL_RCC_ClockConfig+0x174>)
 8000b52:	6813      	ldr	r3, [r2, #0]
 8000b54:	f003 0307 	and.w	r3, r3, #7
 8000b58:	428b      	cmp	r3, r1
{
 8000b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b5e:	4606      	mov	r6, r0
 8000b60:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b62:	d330      	bcc.n	8000bc6 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b64:	6832      	ldr	r2, [r6, #0]
 8000b66:	0791      	lsls	r1, r2, #30
 8000b68:	d43a      	bmi.n	8000be0 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b6a:	07d2      	lsls	r2, r2, #31
 8000b6c:	d440      	bmi.n	8000bf0 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b6e:	4a55      	ldr	r2, [pc, #340]	; (8000cc4 <HAL_RCC_ClockConfig+0x174>)
 8000b70:	6813      	ldr	r3, [r2, #0]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	429d      	cmp	r5, r3
 8000b78:	f0c0 8092 	bcc.w	8000ca0 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b7c:	6832      	ldr	r2, [r6, #0]
 8000b7e:	4c52      	ldr	r4, [pc, #328]	; (8000cc8 <HAL_RCC_ClockConfig+0x178>)
 8000b80:	f012 0f04 	tst.w	r2, #4
 8000b84:	f040 8097 	bne.w	8000cb6 <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b88:	0713      	lsls	r3, r2, #28
 8000b8a:	d506      	bpl.n	8000b9a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000b8c:	6863      	ldr	r3, [r4, #4]
 8000b8e:	6932      	ldr	r2, [r6, #16]
 8000b90:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b94:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b98:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000b9a:	f7ff ffad 	bl	8000af8 <HAL_RCC_GetSysClockFreq>
 8000b9e:	6863      	ldr	r3, [r4, #4]
 8000ba0:	22f0      	movs	r2, #240	; 0xf0
 8000ba2:	fa92 f2a2 	rbit	r2, r2
 8000ba6:	fab2 f282 	clz	r2, r2
 8000baa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bae:	40d3      	lsrs	r3, r2
 8000bb0:	4a46      	ldr	r2, [pc, #280]	; (8000ccc <HAL_RCC_ClockConfig+0x17c>)
 8000bb2:	5cd3      	ldrb	r3, [r2, r3]
 8000bb4:	40d8      	lsrs	r0, r3
 8000bb6:	4b46      	ldr	r3, [pc, #280]	; (8000cd0 <HAL_RCC_ClockConfig+0x180>)
 8000bb8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f7ff fb0a 	bl	80001d4 <HAL_InitTick>
  return HAL_OK;
 8000bc0:	2000      	movs	r0, #0
}
 8000bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bc6:	6813      	ldr	r3, [r2, #0]
 8000bc8:	f023 0307 	bic.w	r3, r3, #7
 8000bcc:	430b      	orrs	r3, r1
 8000bce:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000bd0:	6813      	ldr	r3, [r2, #0]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	d0c4      	beq.n	8000b64 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000bda:	2001      	movs	r0, #1
 8000bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000be0:	4939      	ldr	r1, [pc, #228]	; (8000cc8 <HAL_RCC_ClockConfig+0x178>)
 8000be2:	68b0      	ldr	r0, [r6, #8]
 8000be4:	684b      	ldr	r3, [r1, #4]
 8000be6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000bea:	4303      	orrs	r3, r0
 8000bec:	604b      	str	r3, [r1, #4]
 8000bee:	e7bc      	b.n	8000b6a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bf0:	6872      	ldr	r2, [r6, #4]
 8000bf2:	4c35      	ldr	r4, [pc, #212]	; (8000cc8 <HAL_RCC_ClockConfig+0x178>)
 8000bf4:	2a01      	cmp	r2, #1
 8000bf6:	d128      	bne.n	8000c4a <HAL_RCC_ClockConfig+0xfa>
 8000bf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bfc:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c00:	6821      	ldr	r1, [r4, #0]
 8000c02:	fa93 f3a3 	rbit	r3, r3
 8000c06:	fab3 f383 	clz	r3, r3
 8000c0a:	f003 031f 	and.w	r3, r3, #31
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c14:	d0e1      	beq.n	8000bda <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c16:	6863      	ldr	r3, [r4, #4]
 8000c18:	f023 0303 	bic.w	r3, r3, #3
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8000c20:	f7ff fb06 	bl	8000230 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c24:	6873      	ldr	r3, [r6, #4]
 8000c26:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000c28:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c2a:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c2e:	d11f      	bne.n	8000c70 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c30:	6863      	ldr	r3, [r4, #4]
 8000c32:	f003 030c 	and.w	r3, r3, #12
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	d099      	beq.n	8000b6e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c3a:	f7ff faf9 	bl	8000230 <HAL_GetTick>
 8000c3e:	1bc0      	subs	r0, r0, r7
 8000c40:	4540      	cmp	r0, r8
 8000c42:	d9f5      	bls.n	8000c30 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8000c44:	2003      	movs	r0, #3
 8000c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c4a:	2a02      	cmp	r2, #2
 8000c4c:	bf0c      	ite	eq
 8000c4e:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000c52:	2302      	movne	r3, #2
 8000c54:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c58:	6820      	ldr	r0, [r4, #0]
 8000c5a:	fa93 f3a3 	rbit	r3, r3
 8000c5e:	fab3 f383 	clz	r3, r3
 8000c62:	f003 031f 	and.w	r3, r3, #31
 8000c66:	2101      	movs	r1, #1
 8000c68:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6c:	4203      	tst	r3, r0
 8000c6e:	e7d1      	b.n	8000c14 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d110      	bne.n	8000c96 <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c74:	6863      	ldr	r3, [r4, #4]
 8000c76:	f003 030c 	and.w	r3, r3, #12
 8000c7a:	2b08      	cmp	r3, #8
 8000c7c:	f43f af77 	beq.w	8000b6e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c80:	f7ff fad6 	bl	8000230 <HAL_GetTick>
 8000c84:	1bc0      	subs	r0, r0, r7
 8000c86:	4540      	cmp	r0, r8
 8000c88:	d9f4      	bls.n	8000c74 <HAL_RCC_ClockConfig+0x124>
 8000c8a:	e7db      	b.n	8000c44 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c8c:	f7ff fad0 	bl	8000230 <HAL_GetTick>
 8000c90:	1bc0      	subs	r0, r0, r7
 8000c92:	4540      	cmp	r0, r8
 8000c94:	d8d6      	bhi.n	8000c44 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c96:	6863      	ldr	r3, [r4, #4]
 8000c98:	f013 0f0c 	tst.w	r3, #12
 8000c9c:	d1f6      	bne.n	8000c8c <HAL_RCC_ClockConfig+0x13c>
 8000c9e:	e766      	b.n	8000b6e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ca0:	6813      	ldr	r3, [r2, #0]
 8000ca2:	f023 0307 	bic.w	r3, r3, #7
 8000ca6:	432b      	orrs	r3, r5
 8000ca8:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000caa:	6813      	ldr	r3, [r2, #0]
 8000cac:	f003 0307 	and.w	r3, r3, #7
 8000cb0:	429d      	cmp	r5, r3
 8000cb2:	d192      	bne.n	8000bda <HAL_RCC_ClockConfig+0x8a>
 8000cb4:	e762      	b.n	8000b7c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000cb6:	6863      	ldr	r3, [r4, #4]
 8000cb8:	68f1      	ldr	r1, [r6, #12]
 8000cba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000cbe:	430b      	orrs	r3, r1
 8000cc0:	6063      	str	r3, [r4, #4]
 8000cc2:	e761      	b.n	8000b88 <HAL_RCC_ClockConfig+0x38>
 8000cc4:	40022000 	.word	0x40022000
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	08001990 	.word	0x08001990
 8000cd0:	20000000 	.word	0x20000000

08000cd4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000cd4:	4b01      	ldr	r3, [pc, #4]	; (8000cdc <HAL_RCC_GetHCLKFreq+0x8>)
 8000cd6:	6818      	ldr	r0, [r3, #0]
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000000 	.word	0x20000000

08000ce0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000ce2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	fa92 f2a2 	rbit	r2, r2
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000cf4:	40d3      	lsrs	r3, r2
 8000cf6:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000cf8:	5cd3      	ldrb	r3, [r2, r3]
 8000cfa:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000cfc:	6810      	ldr	r0, [r2, #0]
}    
 8000cfe:	40d8      	lsrs	r0, r3
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40021000 	.word	0x40021000
 8000d08:	080019a0 	.word	0x080019a0
 8000d0c:	20000000 	.word	0x20000000

08000d10 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000d12:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	fa92 f2a2 	rbit	r2, r2
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000d24:	40d3      	lsrs	r3, r2
 8000d26:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000d28:	5cd3      	ldrb	r3, [r2, r3]
 8000d2a:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000d2c:	6810      	ldr	r0, [r2, #0]
} 
 8000d2e:	40d8      	lsrs	r0, r3
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000
 8000d38:	080019a0 	.word	0x080019a0
 8000d3c:	20000000 	.word	0x20000000

08000d40 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000d40:	6803      	ldr	r3, [r0, #0]
{
 8000d42:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000d46:	03df      	lsls	r7, r3, #15
{
 8000d48:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000d4a:	d523      	bpl.n	8000d94 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d4c:	4d9b      	ldr	r5, [pc, #620]	; (8000fbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d4e:	69eb      	ldr	r3, [r5, #28]
 8000d50:	00de      	lsls	r6, r3, #3
 8000d52:	f100 80d7 	bmi.w	8000f04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d56:	69eb      	ldr	r3, [r5, #28]
 8000d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d5c:	61eb      	str	r3, [r5, #28]
 8000d5e:	69eb      	ldr	r3, [r5, #28]
 8000d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d64:	9301      	str	r3, [sp, #4]
 8000d66:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d68:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d6a:	4f95      	ldr	r7, [pc, #596]	; (8000fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	05d8      	lsls	r0, r3, #23
 8000d70:	f140 80ca 	bpl.w	8000f08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000d74:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000d76:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000d7a:	f040 80da 	bne.w	8000f32 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000d7e:	6a2b      	ldr	r3, [r5, #32]
 8000d80:	6862      	ldr	r2, [r4, #4]
 8000d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d86:	4313      	orrs	r3, r2
 8000d88:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000d8a:	b11e      	cbz	r6, 8000d94 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d8c:	69eb      	ldr	r3, [r5, #28]
 8000d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d92:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000d94:	6820      	ldr	r0, [r4, #0]
 8000d96:	07c3      	lsls	r3, r0, #31
 8000d98:	d506      	bpl.n	8000da8 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000d9a:	4a88      	ldr	r2, [pc, #544]	; (8000fbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d9c:	68a1      	ldr	r1, [r4, #8]
 8000d9e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000da0:	f023 0303 	bic.w	r3, r3, #3
 8000da4:	430b      	orrs	r3, r1
 8000da6:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000da8:	0787      	lsls	r7, r0, #30
 8000daa:	d506      	bpl.n	8000dba <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000dac:	4a83      	ldr	r2, [pc, #524]	; (8000fbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000dae:	68e1      	ldr	r1, [r4, #12]
 8000db0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000db2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000db6:	430b      	orrs	r3, r1
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8000dba:	0746      	lsls	r6, r0, #29
 8000dbc:	d506      	bpl.n	8000dcc <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8000dbe:	4a7f      	ldr	r2, [pc, #508]	; (8000fbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000dc0:	6921      	ldr	r1, [r4, #16]
 8000dc2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dc4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000dc8:	430b      	orrs	r3, r1
 8000dca:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000dcc:	0685      	lsls	r5, r0, #26
 8000dce:	d506      	bpl.n	8000dde <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000dd0:	4a7a      	ldr	r2, [pc, #488]	; (8000fbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000dd2:	69e1      	ldr	r1, [r4, #28]
 8000dd4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dd6:	f023 0310 	bic.w	r3, r3, #16
 8000dda:	430b      	orrs	r3, r1
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000dde:	0381      	lsls	r1, r0, #14
 8000de0:	d506      	bpl.n	8000df0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8000de2:	4a76      	ldr	r2, [pc, #472]	; (8000fbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000de4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000de6:	6853      	ldr	r3, [r2, #4]
 8000de8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000dec:	430b      	orrs	r3, r1
 8000dee:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8000df0:	0642      	lsls	r2, r0, #25
 8000df2:	d506      	bpl.n	8000e02 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8000df4:	4a71      	ldr	r2, [pc, #452]	; (8000fbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000df6:	6a21      	ldr	r1, [r4, #32]
 8000df8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dfa:	f023 0320 	bic.w	r3, r3, #32
 8000dfe:	430b      	orrs	r3, r1
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000e02:	0343      	lsls	r3, r0, #13
 8000e04:	d506      	bpl.n	8000e14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000e06:	4a6d      	ldr	r2, [pc, #436]	; (8000fbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000e08:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000e0a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e10:	430b      	orrs	r3, r1
 8000e12:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8000e14:	0707      	lsls	r7, r0, #28
 8000e16:	d506      	bpl.n	8000e26 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8000e18:	4a68      	ldr	r2, [pc, #416]	; (8000fbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000e1a:	6961      	ldr	r1, [r4, #20]
 8000e1c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e1e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000e22:	430b      	orrs	r3, r1
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8000e26:	06c6      	lsls	r6, r0, #27
 8000e28:	d506      	bpl.n	8000e38 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8000e2a:	4a64      	ldr	r2, [pc, #400]	; (8000fbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000e2c:	69a1      	ldr	r1, [r4, #24]
 8000e2e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e30:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000e34:	430b      	orrs	r3, r1
 8000e36:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8000e38:	0585      	lsls	r5, r0, #22
 8000e3a:	d506      	bpl.n	8000e4a <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000e3c:	4a5f      	ldr	r2, [pc, #380]	; (8000fbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000e3e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000e40:	6853      	ldr	r3, [r2, #4]
 8000e42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e46:	430b      	orrs	r3, r1
 8000e48:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8000e4a:	0601      	lsls	r1, r0, #24
 8000e4c:	d506      	bpl.n	8000e5c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8000e4e:	4a5b      	ldr	r2, [pc, #364]	; (8000fbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000e50:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000e52:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000e54:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8000e5c:	05c2      	lsls	r2, r0, #23
 8000e5e:	d506      	bpl.n	8000e6e <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8000e60:	4a56      	ldr	r2, [pc, #344]	; (8000fbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000e62:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000e64:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000e66:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8000e6a:	430b      	orrs	r3, r1
 8000e6c:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8000e6e:	04c3      	lsls	r3, r0, #19
 8000e70:	d506      	bpl.n	8000e80 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8000e72:	4a52      	ldr	r2, [pc, #328]	; (8000fbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000e74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e76:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e7c:	430b      	orrs	r3, r1
 8000e7e:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8000e80:	0487      	lsls	r7, r0, #18
 8000e82:	d506      	bpl.n	8000e92 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8000e84:	4a4d      	ldr	r2, [pc, #308]	; (8000fbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000e86:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000e88:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e8a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e8e:	430b      	orrs	r3, r1
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8000e92:	02c6      	lsls	r6, r0, #11
 8000e94:	d506      	bpl.n	8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8000e96:	4a49      	ldr	r2, [pc, #292]	; (8000fbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000e98:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000e9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ea0:	430b      	orrs	r3, r1
 8000ea2:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8000ea4:	0285      	lsls	r5, r0, #10
 8000ea6:	d506      	bpl.n	8000eb6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8000ea8:	4a44      	ldr	r2, [pc, #272]	; (8000fbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000eaa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000eac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000eae:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000eb2:	430b      	orrs	r3, r1
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8000eb6:	0241      	lsls	r1, r0, #9
 8000eb8:	d506      	bpl.n	8000ec8 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8000eba:	4a40      	ldr	r2, [pc, #256]	; (8000fbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000ebc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000ebe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ec0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ec4:	430b      	orrs	r3, r1
 8000ec6:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8000ec8:	0202      	lsls	r2, r0, #8
 8000eca:	d506      	bpl.n	8000eda <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8000ecc:	4a3b      	ldr	r2, [pc, #236]	; (8000fbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000ece:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000ed0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ed2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ed6:	430b      	orrs	r3, r1
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8000eda:	01c3      	lsls	r3, r0, #7
 8000edc:	d506      	bpl.n	8000eec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8000ede:	4a37      	ldr	r2, [pc, #220]	; (8000fbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000ee0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8000ee2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ee4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ee8:	430b      	orrs	r3, r1
 8000eea:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8000eec:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8000ef0:	d01c      	beq.n	8000f2c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8000ef2:	4a32      	ldr	r2, [pc, #200]	; (8000fbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000ef4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000ef6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ef8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000efc:	430b      	orrs	r3, r1
 8000efe:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8000f00:	2000      	movs	r0, #0
 8000f02:	e013      	b.n	8000f2c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 8000f04:	2600      	movs	r6, #0
 8000f06:	e730      	b.n	8000d6a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000f10:	f7ff f98e 	bl	8000230 <HAL_GetTick>
 8000f14:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	05d9      	lsls	r1, r3, #23
 8000f1a:	f53f af2b 	bmi.w	8000d74 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f1e:	f7ff f987 	bl	8000230 <HAL_GetTick>
 8000f22:	eba0 0008 	sub.w	r0, r0, r8
 8000f26:	2864      	cmp	r0, #100	; 0x64
 8000f28:	d9f5      	bls.n	8000f16 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 8000f2a:	2003      	movs	r0, #3
}
 8000f2c:	b002      	add	sp, #8
 8000f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000f32:	6862      	ldr	r2, [r4, #4]
 8000f34:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	f43f af20 	beq.w	8000d7e <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f3e:	6a29      	ldr	r1, [r5, #32]
 8000f40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f44:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8000f48:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f4c:	f8df e074 	ldr.w	lr, [pc, #116]	; 8000fc4 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8000f50:	fab2 f282 	clz	r2, r2
 8000f54:	4472      	add	r2, lr
 8000f56:	0092      	lsls	r2, r2, #2
 8000f58:	2701      	movs	r7, #1
 8000f5a:	6017      	str	r7, [r2, #0]
 8000f5c:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000f60:	fab3 f383 	clz	r3, r3
 8000f64:	4473      	add	r3, lr
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000f6c:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8000f6e:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000f70:	f57f af05 	bpl.w	8000d7e <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8000f74:	f7ff f95c 	bl	8000230 <HAL_GetTick>
 8000f78:	f04f 0802 	mov.w	r8, #2
 8000f7c:	4682      	mov	sl, r0
 8000f7e:	46c1      	mov	r9, r8
 8000f80:	fa98 f3a8 	rbit	r3, r8
 8000f84:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f88:	b1a3      	cbz	r3, 8000fb4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8000f8a:	6a2a      	ldr	r2, [r5, #32]
 8000f8c:	fa99 f3a9 	rbit	r3, r9
 8000f90:	fab3 f383 	clz	r3, r3
 8000f94:	f003 031f 	and.w	r3, r3, #31
 8000f98:	fa07 f303 	lsl.w	r3, r7, r3
 8000f9c:	4213      	tst	r3, r2
 8000f9e:	f47f aeee 	bne.w	8000d7e <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fa2:	f7ff f945 	bl	8000230 <HAL_GetTick>
 8000fa6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000faa:	eba0 000a 	sub.w	r0, r0, sl
 8000fae:	4298      	cmp	r0, r3
 8000fb0:	d9e6      	bls.n	8000f80 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8000fb2:	e7ba      	b.n	8000f2a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8000fb4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000fba:	e7e7      	b.n	8000f8c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40007000 	.word	0x40007000
 8000fc4:	10908100 	.word	0x10908100

08000fc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000fc8:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000fca:	4604      	mov	r4, r0
 8000fcc:	2800      	cmp	r0, #0
 8000fce:	d04e      	beq.n	800106e <HAL_SPI_Init+0xa6>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000fd4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8000fd8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000fdc:	b91b      	cbnz	r3, 8000fe6 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000fde:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000fe2:	f000 fbbb 	bl	800175c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000fe6:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000fe8:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000fea:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8000fee:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000ff0:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8000ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000ff6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8000ffa:	600b      	str	r3, [r1, #0]
 8000ffc:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001000:	d932      	bls.n	8001068 <HAL_SPI_Init+0xa0>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001002:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001004:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001008:	bf18      	it	ne
 800100a:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800100c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800100e:	b92b      	cbnz	r3, 800101c <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001010:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001014:	bf8c      	ite	hi
 8001016:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001018:	2301      	movls	r3, #1
 800101a:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800101c:	68a6      	ldr	r6, [r4, #8]
 800101e:	6863      	ldr	r3, [r4, #4]
 8001020:	69a5      	ldr	r5, [r4, #24]
 8001022:	4333      	orrs	r3, r6
 8001024:	6926      	ldr	r6, [r4, #16]
 8001026:	4333      	orrs	r3, r6
 8001028:	6966      	ldr	r6, [r4, #20]
 800102a:	4333      	orrs	r3, r6
 800102c:	69e6      	ldr	r6, [r4, #28]
 800102e:	4333      	orrs	r3, r6
 8001030:	6a26      	ldr	r6, [r4, #32]
 8001032:	4333      	orrs	r3, r6
 8001034:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001036:	4333      	orrs	r3, r6
 8001038:	f405 7600 	and.w	r6, r5, #512	; 0x200
 800103c:	4333      	orrs	r3, r6
 800103e:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001040:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001042:	431a      	orrs	r2, r3
 8001044:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001046:	0c2d      	lsrs	r5, r5, #16
 8001048:	431a      	orrs	r2, r3
 800104a:	f005 0504 	and.w	r5, r5, #4
 800104e:	432a      	orrs	r2, r5
 8001050:	4302      	orrs	r2, r0
 8001052:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001054:	69cb      	ldr	r3, [r1, #28]
 8001056:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800105a:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800105c:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800105e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001060:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001062:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8001066:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001068:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800106c:	e7cc      	b.n	8001008 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 800106e:	2001      	movs	r0, #1
}
 8001070:	bd70      	pop	{r4, r5, r6, pc}
	...

08001074 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001074:	b538      	push	{r3, r4, r5, lr}
 8001076:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001078:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800107a:	6921      	ldr	r1, [r4, #16]
 800107c:	68a2      	ldr	r2, [r4, #8]
 800107e:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001080:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001082:	430a      	orrs	r2, r1
 8001084:	6961      	ldr	r1, [r4, #20]
 8001086:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001088:	4977      	ldr	r1, [pc, #476]	; (8001268 <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800108a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800108c:	4001      	ands	r1, r0
 800108e:	430a      	orrs	r2, r1
 8001090:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001092:	686a      	ldr	r2, [r5, #4]
 8001094:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001096:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001098:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800109c:	430a      	orrs	r2, r1
 800109e:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80010a0:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80010a2:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80010a4:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80010a8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80010aa:	430a      	orrs	r2, r1
 80010ac:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80010ae:	4a6f      	ldr	r2, [pc, #444]	; (800126c <UART_SetConfig+0x1f8>)
 80010b0:	4295      	cmp	r5, r2
 80010b2:	d112      	bne.n	80010da <UART_SetConfig+0x66>
 80010b4:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80010b8:	496d      	ldr	r1, [pc, #436]	; (8001270 <UART_SetConfig+0x1fc>)
 80010ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80010bc:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010c4:	5c8a      	ldrb	r2, [r1, r2]
 80010c6:	d066      	beq.n	8001196 <UART_SetConfig+0x122>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 80010c8:	2a08      	cmp	r2, #8
 80010ca:	d819      	bhi.n	8001100 <UART_SetConfig+0x8c>
 80010cc:	e8df f002 	tbb	[pc, r2]
 80010d0:	189e92c2 	.word	0x189e92c2
 80010d4:	181818a9 	.word	0x181818a9
 80010d8:	ac          	.byte	0xac
 80010d9:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80010da:	4a66      	ldr	r2, [pc, #408]	; (8001274 <UART_SetConfig+0x200>)
 80010dc:	4295      	cmp	r5, r2
 80010de:	d124      	bne.n	800112a <UART_SetConfig+0xb6>
 80010e0:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80010e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80010e6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80010ea:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80010ee:	f000 80a0 	beq.w	8001232 <UART_SetConfig+0x1be>
 80010f2:	d807      	bhi.n	8001104 <UART_SetConfig+0x90>
 80010f4:	2a00      	cmp	r2, #0
 80010f6:	f000 80aa 	beq.w	800124e <UART_SetConfig+0x1da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010fe:	d076      	beq.n	80011ee <UART_SetConfig+0x17a>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001100:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8001102:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001104:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8001108:	f000 8099 	beq.w	800123e <UART_SetConfig+0x1ca>
 800110c:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8001110:	d1f3      	bne.n	80010fa <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001116:	d179      	bne.n	800120c <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001118:	6860      	ldr	r0, [r4, #4]
 800111a:	0843      	lsrs	r3, r0, #1
 800111c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001120:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001124:	fbb3 f3f0 	udiv	r3, r3, r0
 8001128:	e054      	b.n	80011d4 <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800112a:	4a53      	ldr	r2, [pc, #332]	; (8001278 <UART_SetConfig+0x204>)
 800112c:	4295      	cmp	r5, r2
 800112e:	d10e      	bne.n	800114e <UART_SetConfig+0xda>
 8001130:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8001134:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001136:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 800113a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800113e:	d078      	beq.n	8001232 <UART_SetConfig+0x1be>
 8001140:	d9d8      	bls.n	80010f4 <UART_SetConfig+0x80>
 8001142:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8001146:	d07a      	beq.n	800123e <UART_SetConfig+0x1ca>
 8001148:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 800114c:	e7e0      	b.n	8001110 <UART_SetConfig+0x9c>
 800114e:	4a4b      	ldr	r2, [pc, #300]	; (800127c <UART_SetConfig+0x208>)
 8001150:	4295      	cmp	r5, r2
 8001152:	d10e      	bne.n	8001172 <UART_SetConfig+0xfe>
 8001154:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8001158:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800115a:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800115e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001162:	d066      	beq.n	8001232 <UART_SetConfig+0x1be>
 8001164:	d9c6      	bls.n	80010f4 <UART_SetConfig+0x80>
 8001166:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800116a:	d068      	beq.n	800123e <UART_SetConfig+0x1ca>
 800116c:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8001170:	e7ce      	b.n	8001110 <UART_SetConfig+0x9c>
 8001172:	4a43      	ldr	r2, [pc, #268]	; (8001280 <UART_SetConfig+0x20c>)
 8001174:	4295      	cmp	r5, r2
 8001176:	d1c0      	bne.n	80010fa <UART_SetConfig+0x86>
 8001178:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 800117c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800117e:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8001182:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8001186:	d054      	beq.n	8001232 <UART_SetConfig+0x1be>
 8001188:	d9b4      	bls.n	80010f4 <UART_SetConfig+0x80>
 800118a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800118e:	d056      	beq.n	800123e <UART_SetConfig+0x1ca>
 8001190:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8001194:	e7bc      	b.n	8001110 <UART_SetConfig+0x9c>
    switch (clocksource)
 8001196:	2a08      	cmp	r2, #8
 8001198:	d829      	bhi.n	80011ee <UART_SetConfig+0x17a>
 800119a:	a301      	add	r3, pc, #4	; (adr r3, 80011a0 <UART_SetConfig+0x12c>)
 800119c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80011a0:	080011c5 	.word	0x080011c5
 80011a4:	080011e9 	.word	0x080011e9
 80011a8:	08001119 	.word	0x08001119
 80011ac:	080011ef 	.word	0x080011ef
 80011b0:	08001239 	.word	0x08001239
 80011b4:	080011ef 	.word	0x080011ef
 80011b8:	080011ef 	.word	0x080011ef
 80011bc:	080011ef 	.word	0x080011ef
 80011c0:	08001245 	.word	0x08001245
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80011c4:	f7ff fd8c 	bl	8000ce0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80011c8:	6861      	ldr	r1, [r4, #4]
 80011ca:	084a      	lsrs	r2, r1, #1
 80011cc:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80011d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80011d6:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80011d8:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 80011dc:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80011de:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80011e2:	4313      	orrs	r3, r2
 80011e4:	60cb      	str	r3, [r1, #12]
 80011e6:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80011e8:	f7ff fd92 	bl	8000d10 <HAL_RCC_GetPCLK2Freq>
 80011ec:	e7ec      	b.n	80011c8 <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 80011ee:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	e7f1      	b.n	80011d8 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80011f4:	f7ff fd8c 	bl	8000d10 <HAL_RCC_GetPCLK2Freq>
 80011f8:	6863      	ldr	r3, [r4, #4]
 80011fa:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80011fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <UART_SetConfig+0x1f8>)
 8001204:	b280      	uxth	r0, r0
 8001206:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001208:	2000      	movs	r0, #0
        break;
 800120a:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800120c:	6862      	ldr	r2, [r4, #4]
 800120e:	0853      	lsrs	r3, r2, #1
 8001210:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001214:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001218:	fbb3 f3f2 	udiv	r3, r3, r2
 800121c:	b29b      	uxth	r3, r3
 800121e:	60eb      	str	r3, [r5, #12]
 8001220:	e7f2      	b.n	8001208 <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001222:	f7ff fc69 	bl	8000af8 <HAL_RCC_GetSysClockFreq>
 8001226:	e017      	b.n	8001258 <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001228:	6862      	ldr	r2, [r4, #4]
 800122a:	0853      	lsrs	r3, r2, #1
 800122c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001230:	e7f2      	b.n	8001218 <UART_SetConfig+0x1a4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001236:	d1f4      	bne.n	8001222 <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001238:	f7ff fc5e 	bl	8000af8 <HAL_RCC_GetSysClockFreq>
 800123c:	e7c4      	b.n	80011c8 <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800123e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001242:	d1f1      	bne.n	8001228 <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001244:	6860      	ldr	r0, [r4, #4]
 8001246:	0843      	lsrs	r3, r0, #1
 8001248:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800124c:	e76a      	b.n	8001124 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800124e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001252:	d0b7      	beq.n	80011c4 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001254:	f7ff fd44 	bl	8000ce0 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001258:	6863      	ldr	r3, [r4, #4]
 800125a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800125e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001262:	b280      	uxth	r0, r0
 8001264:	60e8      	str	r0, [r5, #12]
 8001266:	e7cf      	b.n	8001208 <UART_SetConfig+0x194>
 8001268:	efff69f3 	.word	0xefff69f3
 800126c:	40013800 	.word	0x40013800
 8001270:	0800198c 	.word	0x0800198c
 8001274:	40004400 	.word	0x40004400
 8001278:	40004800 	.word	0x40004800
 800127c:	40004c00 	.word	0x40004c00
 8001280:	40005000 	.word	0x40005000

08001284 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001284:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001286:	07da      	lsls	r2, r3, #31
{
 8001288:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800128a:	d506      	bpl.n	800129a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800128c:	6801      	ldr	r1, [r0, #0]
 800128e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001290:	684a      	ldr	r2, [r1, #4]
 8001292:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001296:	4322      	orrs	r2, r4
 8001298:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800129a:	079c      	lsls	r4, r3, #30
 800129c:	d506      	bpl.n	80012ac <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800129e:	6801      	ldr	r1, [r0, #0]
 80012a0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80012a2:	684a      	ldr	r2, [r1, #4]
 80012a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012a8:	4322      	orrs	r2, r4
 80012aa:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80012ac:	0759      	lsls	r1, r3, #29
 80012ae:	d506      	bpl.n	80012be <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80012b0:	6801      	ldr	r1, [r0, #0]
 80012b2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80012b4:	684a      	ldr	r2, [r1, #4]
 80012b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012ba:	4322      	orrs	r2, r4
 80012bc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80012be:	071a      	lsls	r2, r3, #28
 80012c0:	d506      	bpl.n	80012d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80012c2:	6801      	ldr	r1, [r0, #0]
 80012c4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80012c6:	684a      	ldr	r2, [r1, #4]
 80012c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012cc:	4322      	orrs	r2, r4
 80012ce:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80012d0:	06dc      	lsls	r4, r3, #27
 80012d2:	d506      	bpl.n	80012e2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80012d4:	6801      	ldr	r1, [r0, #0]
 80012d6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80012d8:	688a      	ldr	r2, [r1, #8]
 80012da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012de:	4322      	orrs	r2, r4
 80012e0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80012e2:	0699      	lsls	r1, r3, #26
 80012e4:	d506      	bpl.n	80012f4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80012e6:	6801      	ldr	r1, [r0, #0]
 80012e8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80012ea:	688a      	ldr	r2, [r1, #8]
 80012ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012f0:	4322      	orrs	r2, r4
 80012f2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80012f4:	065a      	lsls	r2, r3, #25
 80012f6:	d50f      	bpl.n	8001318 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80012f8:	6801      	ldr	r1, [r0, #0]
 80012fa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80012fc:	684a      	ldr	r2, [r1, #4]
 80012fe:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001302:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001304:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001308:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800130a:	d105      	bne.n	8001318 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800130c:	684a      	ldr	r2, [r1, #4]
 800130e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001310:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001314:	4322      	orrs	r2, r4
 8001316:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001318:	061b      	lsls	r3, r3, #24
 800131a:	d506      	bpl.n	800132a <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800131c:	6802      	ldr	r2, [r0, #0]
 800131e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001320:	6853      	ldr	r3, [r2, #4]
 8001322:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001326:	430b      	orrs	r3, r1
 8001328:	6053      	str	r3, [r2, #4]
 800132a:	bd10      	pop	{r4, pc}

0800132c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800132c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001330:	9d06      	ldr	r5, [sp, #24]
 8001332:	4604      	mov	r4, r0
 8001334:	460f      	mov	r7, r1
 8001336:	4616      	mov	r6, r2
 8001338:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800133a:	6821      	ldr	r1, [r4, #0]
 800133c:	69ca      	ldr	r2, [r1, #28]
 800133e:	ea37 0302 	bics.w	r3, r7, r2
 8001342:	bf0c      	ite	eq
 8001344:	2201      	moveq	r2, #1
 8001346:	2200      	movne	r2, #0
 8001348:	42b2      	cmp	r2, r6
 800134a:	d002      	beq.n	8001352 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800134c:	2000      	movs	r0, #0
}
 800134e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001352:	1c6b      	adds	r3, r5, #1
 8001354:	d0f2      	beq.n	800133c <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001356:	b99d      	cbnz	r5, 8001380 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001358:	6823      	ldr	r3, [r4, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001360:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	f022 0201 	bic.w	r2, r2, #1
 8001368:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800136a:	2320      	movs	r3, #32
 800136c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001370:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001374:	2300      	movs	r3, #0
 8001376:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800137a:	2003      	movs	r0, #3
 800137c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001380:	f7fe ff56 	bl	8000230 <HAL_GetTick>
 8001384:	eba0 0008 	sub.w	r0, r0, r8
 8001388:	4285      	cmp	r5, r0
 800138a:	d2d6      	bcs.n	800133a <UART_WaitOnFlagUntilTimeout+0xe>
 800138c:	e7e4      	b.n	8001358 <UART_WaitOnFlagUntilTimeout+0x2c>

0800138e <UART_CheckIdleState>:
{
 800138e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001390:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001392:	2600      	movs	r6, #0
 8001394:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001396:	f7fe ff4b 	bl	8000230 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800139a:	6823      	ldr	r3, [r4, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80013a0:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80013a2:	d417      	bmi.n	80013d4 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80013a4:	6823      	ldr	r3, [r4, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	075b      	lsls	r3, r3, #29
 80013aa:	d50a      	bpl.n	80013c2 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80013ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2200      	movs	r2, #0
 80013b4:	462b      	mov	r3, r5
 80013b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80013ba:	4620      	mov	r0, r4
 80013bc:	f7ff ffb6 	bl	800132c <UART_WaitOnFlagUntilTimeout>
 80013c0:	b9a0      	cbnz	r0, 80013ec <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 80013c2:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80013c4:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80013c6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80013ca:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80013ce:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 80013d2:	e00c      	b.n	80013ee <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80013d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	4632      	mov	r2, r6
 80013dc:	4603      	mov	r3, r0
 80013de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80013e2:	4620      	mov	r0, r4
 80013e4:	f7ff ffa2 	bl	800132c <UART_WaitOnFlagUntilTimeout>
 80013e8:	2800      	cmp	r0, #0
 80013ea:	d0db      	beq.n	80013a4 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80013ec:	2003      	movs	r0, #3
}
 80013ee:	b002      	add	sp, #8
 80013f0:	bd70      	pop	{r4, r5, r6, pc}

080013f2 <HAL_UART_Init>:
{
 80013f2:	b510      	push	{r4, lr}
  if(huart == NULL)
 80013f4:	4604      	mov	r4, r0
 80013f6:	b360      	cbz	r0, 8001452 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80013f8:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80013fc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001400:	b91b      	cbnz	r3, 800140a <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001402:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001406:	f000 f9cd 	bl	80017a4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800140a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800140c:	2324      	movs	r3, #36	; 0x24
 800140e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001412:	6813      	ldr	r3, [r2, #0]
 8001414:	f023 0301 	bic.w	r3, r3, #1
 8001418:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800141a:	4620      	mov	r0, r4
 800141c:	f7ff fe2a 	bl	8001074 <UART_SetConfig>
 8001420:	2801      	cmp	r0, #1
 8001422:	d016      	beq.n	8001452 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001424:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001426:	b113      	cbz	r3, 800142e <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001428:	4620      	mov	r0, r4
 800142a:	f7ff ff2b 	bl	8001284 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800142e:	6823      	ldr	r3, [r4, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001436:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800143e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001446:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001448:	601a      	str	r2, [r3, #0]
}
 800144a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800144e:	f7ff bf9e 	b.w	800138e <UART_CheckIdleState>
}
 8001452:	2001      	movs	r0, #1
 8001454:	bd10      	pop	{r4, pc}

08001456 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001456:	b510      	push	{r4, lr}
 8001458:	b0a6      	sub	sp, #152	; 0x98
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800145a:	2302      	movs	r3, #2
 800145c:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800145e:	2301      	movs	r3, #1
 8001460:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001462:	2310      	movs	r3, #16
 8001464:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001466:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001468:	2300      	movs	r3, #0
 800146a:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800146c:	f7ff f8c6 	bl	80005fc <HAL_RCC_OscConfig>
 8001470:	4601      	mov	r1, r0
 8001472:	b100      	cbz	r0, 8001476 <SystemClock_Config+0x20>
 8001474:	e7fe      	b.n	8001474 <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001476:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001478:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147a:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800147c:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800147e:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001480:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001482:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001484:	f7ff fb64 	bl	8000b50 <HAL_RCC_ClockConfig>
 8001488:	b100      	cbz	r0, 800148c <SystemClock_Config+0x36>
 800148a:	e7fe      	b.n	800148a <SystemClock_Config+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_UART4
 800148c:	2329      	movs	r3, #41	; 0x29
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800148e:	9012      	str	r0, [sp, #72]	; 0x48
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001490:	9015      	str	r0, [sp, #84]	; 0x54
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001492:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001494:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_UART4
 8001496:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001498:	f7ff fc52 	bl	8000d40 <HAL_RCCEx_PeriphCLKConfig>
 800149c:	4604      	mov	r4, r0
 800149e:	b100      	cbz	r0, 80014a2 <SystemClock_Config+0x4c>
 80014a0:	e7fe      	b.n	80014a0 <SystemClock_Config+0x4a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80014a2:	f7ff fc17 	bl	8000cd4 <HAL_RCC_GetHCLKFreq>
 80014a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80014ae:	f7fe ff0b 	bl	80002c8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80014b2:	2004      	movs	r0, #4
 80014b4:	f7fe ff1e 	bl	80002f4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80014b8:	4622      	mov	r2, r4
 80014ba:	4621      	mov	r1, r4
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	f7fe fece 	bl	8000260 <HAL_NVIC_SetPriority>
}
 80014c4:	b026      	add	sp, #152	; 0x98
 80014c6:	bd10      	pop	{r4, pc}

080014c8 <main>:
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
  HAL_Init();
 80014cc:	f7fe fe96 	bl	80001fc <HAL_Init>
  SystemClock_Config();
 80014d0:	f7ff ffc1 	bl	8001456 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d4:	4b61      	ldr	r3, [pc, #388]	; (800165c <main+0x194>)
 80014d6:	695a      	ldr	r2, [r3, #20]
 80014d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80014dc:	615a      	str	r2, [r3, #20]
 80014de:	695a      	ldr	r2, [r3, #20]
 80014e0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80014e4:	9200      	str	r2, [sp, #0]
 80014e6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e8:	695a      	ldr	r2, [r3, #20]
 80014ea:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80014ee:	615a      	str	r2, [r3, #20]
 80014f0:	695a      	ldr	r2, [r3, #20]
 80014f2:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80014f6:	9201      	str	r2, [sp, #4]
 80014f8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	695a      	ldr	r2, [r3, #20]
 80014fc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001500:	615a      	str	r2, [r3, #20]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001508:	9302      	str	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	2110      	movs	r1, #16
 800150e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001512:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001514:	f7fe ffd0 	bl	80004b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin 
 8001518:	2200      	movs	r2, #0
 800151a:	f24f 0180 	movw	r1, #61568	; 0xf080
 800151e:	4850      	ldr	r0, [pc, #320]	; (8001660 <main+0x198>)
 8001520:	f7fe ffca 	bl	80004b8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZ_Pin|TRIG_Pin, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	f44f 7140 	mov.w	r1, #768	; 0x300
 800152a:	484e      	ldr	r0, [pc, #312]	; (8001664 <main+0x19c>)

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOC, BUZZ_Pin|TRIG_Pin, GPIO_PIN_RESET);
 800152e:	f7fe ffc3 	bl	80004b8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001534:	2310      	movs	r3, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	a903      	add	r1, sp, #12
 8001538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800153c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	f7fe fee8 	bl	8000318 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin 
                           PB7 */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin 
 8001548:	f24f 0380 	movw	r3, #61568	; 0xf080
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154c:	a903      	add	r1, sp, #12
 800154e:	4844      	ldr	r0, [pc, #272]	; (8001660 <main+0x198>)
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin 
 8001550:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001552:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001558:	f7fe fede 	bl	8000318 <HAL_GPIO_Init>

  /*Configure GPIO pin : FPIN_Pin */
  GPIO_InitStruct.Pin = FPIN_Pin;
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(FPIN_GPIO_Port, &GPIO_InitStruct);
 8001560:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001562:	4b41      	ldr	r3, [pc, #260]	; (8001668 <main+0x1a0>)
  HAL_GPIO_Init(FPIN_GPIO_Port, &GPIO_InitStruct);
 8001564:	483f      	ldr	r0, [pc, #252]	; (8001664 <main+0x19c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001566:	9304      	str	r3, [sp, #16]

  /*Configure GPIO pins : BUZZ_Pin TRIG_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin|TRIG_Pin;
 8001568:	f44f 7740 	mov.w	r7, #768	; 0x300
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(FPIN_GPIO_Port, &GPIO_InitStruct);
 800156e:	f7fe fed3 	bl	8000318 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001572:	a903      	add	r1, sp, #12
 8001574:	483b      	ldr	r0, [pc, #236]	; (8001664 <main+0x19c>)
  GPIO_InitStruct.Pin = BUZZ_Pin|TRIG_Pin;
 8001576:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001578:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157e:	f7fe fecb 	bl	8000318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001582:	2318      	movs	r3, #24
 8001584:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800158a:	2607      	movs	r6, #7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800158c:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158e:	4834      	ldr	r0, [pc, #208]	; (8001660 <main+0x198>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001590:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001592:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001596:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001598:	f7fe febe 	bl	8000318 <HAL_GPIO_Init>
  hspi1.Instance = SPI1;
 800159c:	4833      	ldr	r0, [pc, #204]	; (800166c <main+0x1a4>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800159e:	4b34      	ldr	r3, [pc, #208]	; (8001670 <main+0x1a8>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015a0:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015a2:	f44f 7e82 	mov.w	lr, #260	; 0x104
 80015a6:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015ae:	6183      	str	r3, [r0, #24]
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015b0:	2308      	movs	r3, #8
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80015b2:	60c7      	str	r7, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015b4:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015b6:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015b8:	61c4      	str	r4, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ba:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015bc:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015be:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015c0:	62c6      	str	r6, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015c2:	6304      	str	r4, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015c4:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015c6:	f7ff fcff 	bl	8000fc8 <HAL_SPI_Init>
 80015ca:	b100      	cbz	r0, 80015ce <main+0x106>
 80015cc:	e7fe      	b.n	80015cc <main+0x104>
  huart1.Instance = USART1;
 80015ce:	4b29      	ldr	r3, [pc, #164]	; (8001674 <main+0x1ac>)
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80015d0:	4a29      	ldr	r2, [pc, #164]	; (8001678 <main+0x1b0>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015d2:	60d8      	str	r0, [r3, #12]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80015d4:	f44f 4416 	mov.w	r4, #38400	; 0x9600
 80015d8:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 80015dc:	e883 0054 	stmia.w	r3, {r2, r4, r6}
  huart1.Init.Parity = UART_PARITY_NONE;
 80015e0:	6118      	str	r0, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015e2:	240c      	movs	r4, #12
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e4:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e6:	61d8      	str	r0, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e8:	6218      	str	r0, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ea:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ec:	4618      	mov	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015ee:	615c      	str	r4, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015f0:	f7ff feff 	bl	80013f2 <HAL_UART_Init>
 80015f4:	b100      	cbz	r0, 80015f8 <main+0x130>
 80015f6:	e7fe      	b.n	80015f6 <main+0x12e>
  huart4.Instance = UART4;
 80015f8:	4b20      	ldr	r3, [pc, #128]	; (800167c <main+0x1b4>)
  huart4.Init.BaudRate = 115200;
 80015fa:	4921      	ldr	r1, [pc, #132]	; (8001680 <main+0x1b8>)
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015fc:	6098      	str	r0, [r3, #8]
  huart4.Init.BaudRate = 115200;
 80015fe:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001602:	60d8      	str	r0, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001604:	6118      	str	r0, [r3, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001606:	6198      	str	r0, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001608:	61d8      	str	r0, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800160a:	6218      	str	r0, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800160c:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800160e:	4618      	mov	r0, r3
  huart4.Init.BaudRate = 115200;
 8001610:	e883 0006 	stmia.w	r3, {r1, r2}
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001614:	615c      	str	r4, [r3, #20]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001616:	f7ff feec 	bl	80013f2 <HAL_UART_Init>
 800161a:	b100      	cbz	r0, 800161e <main+0x156>
 800161c:	e7fe      	b.n	800161c <main+0x154>
  hi2c1.Instance = I2C1;
 800161e:	4c19      	ldr	r4, [pc, #100]	; (8001684 <main+0x1bc>)
  hi2c1.Init.Timing = 0x2000090E;
 8001620:	4a19      	ldr	r2, [pc, #100]	; (8001688 <main+0x1c0>)
 8001622:	4b1a      	ldr	r3, [pc, #104]	; (800168c <main+0x1c4>)
  hi2c1.Init.OwnAddress1 = 0;
 8001624:	60a0      	str	r0, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001626:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001628:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800162a:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800162c:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800162e:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001630:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x2000090E;
 8001632:	e884 000c 	stmia.w	r4, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001636:	60e5      	str	r5, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001638:	f7fe ff43 	bl	80004c2 <HAL_I2C_Init>
 800163c:	4601      	mov	r1, r0
 800163e:	b100      	cbz	r0, 8001642 <main+0x17a>
 8001640:	e7fe      	b.n	8001640 <main+0x178>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001642:	4620      	mov	r0, r4
 8001644:	f7fe ff8e 	bl	8000564 <HAL_I2CEx_ConfigAnalogFilter>
 8001648:	4601      	mov	r1, r0
 800164a:	b100      	cbz	r0, 800164e <main+0x186>
 800164c:	e7fe      	b.n	800164c <main+0x184>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800164e:	4620      	mov	r0, r4
 8001650:	f7fe ffae 	bl	80005b0 <HAL_I2CEx_ConfigDigitalFilter>
 8001654:	b100      	cbz	r0, 8001658 <main+0x190>
 8001656:	e7fe      	b.n	8001656 <main+0x18e>
 8001658:	e7fe      	b.n	8001658 <main+0x190>
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000
 8001660:	48000400 	.word	0x48000400
 8001664:	48000800 	.word	0x48000800
 8001668:	10110000 	.word	0x10110000
 800166c:	20000150 	.word	0x20000150
 8001670:	40013000 	.word	0x40013000
 8001674:	20000070 	.word	0x20000070
 8001678:	40013800 	.word	0x40013800
 800167c:	200000e0 	.word	0x200000e0
 8001680:	40004c00 	.word	0x40004c00
 8001684:	20000024 	.word	0x20000024
 8001688:	40005400 	.word	0x40005400
 800168c:	2000090e 	.word	0x2000090e

08001690 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001690:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <HAL_MspInit+0x78>)
{
 8001692:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001694:	699a      	ldr	r2, [r3, #24]
 8001696:	f042 0201 	orr.w	r2, r2, #1
 800169a:	619a      	str	r2, [r3, #24]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a4:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a8:	f7fe fdc8 	bl	800023c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	4611      	mov	r1, r2
 80016b0:	f06f 000b 	mvn.w	r0, #11
 80016b4:	f7fe fdd4 	bl	8000260 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80016b8:	2200      	movs	r2, #0
 80016ba:	4611      	mov	r1, r2
 80016bc:	f06f 000a 	mvn.w	r0, #10
 80016c0:	f7fe fdce 	bl	8000260 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80016c4:	2200      	movs	r2, #0
 80016c6:	4611      	mov	r1, r2
 80016c8:	f06f 0009 	mvn.w	r0, #9
 80016cc:	f7fe fdc8 	bl	8000260 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80016d0:	2200      	movs	r2, #0
 80016d2:	4611      	mov	r1, r2
 80016d4:	f06f 0004 	mvn.w	r0, #4
 80016d8:	f7fe fdc2 	bl	8000260 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	4611      	mov	r1, r2
 80016e0:	f06f 0003 	mvn.w	r0, #3
 80016e4:	f7fe fdbc 	bl	8000260 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	4611      	mov	r1, r2
 80016ec:	f06f 0001 	mvn.w	r0, #1
 80016f0:	f7fe fdb6 	bl	8000260 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	4611      	mov	r1, r2
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f7fe fdb0 	bl	8000260 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001700:	b003      	add	sp, #12
 8001702:	f85d fb04 	ldr.w	pc, [sp], #4
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000

0800170c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800170c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800170e:	6802      	ldr	r2, [r0, #0]
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <HAL_I2C_MspInit+0x44>)
 8001712:	429a      	cmp	r2, r3
 8001714:	d119      	bne.n	800174a <HAL_I2C_MspInit+0x3e>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001716:	f44f 7340 	mov.w	r3, #768	; 0x300
 800171a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800171c:	2312      	movs	r3, #18
 800171e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001720:	2301      	movs	r3, #1
 8001722:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001724:	2303      	movs	r3, #3
 8001726:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001728:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172a:	eb0d 0103 	add.w	r1, sp, r3
 800172e:	4809      	ldr	r0, [pc, #36]	; (8001754 <HAL_I2C_MspInit+0x48>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001730:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001732:	f7fe fdf1 	bl	8000318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <HAL_I2C_MspInit+0x4c>)
 8001738:	69da      	ldr	r2, [r3, #28]
 800173a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800173e:	61da      	str	r2, [r3, #28]
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800174a:	b007      	add	sp, #28
 800174c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001750:	40005400 	.word	0x40005400
 8001754:	48000400 	.word	0x48000400
 8001758:	40021000 	.word	0x40021000

0800175c <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800175c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 800175e:	6802      	ldr	r2, [r0, #0]
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <HAL_SPI_MspInit+0x44>)
 8001762:	429a      	cmp	r2, r3
 8001764:	d119      	bne.n	800179a <HAL_SPI_MspInit+0x3e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001766:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	a901      	add	r1, sp, #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 800176c:	699a      	ldr	r2, [r3, #24]
 800176e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001772:	619a      	str	r2, [r3, #24]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800177e:	23e0      	movs	r3, #224	; 0xe0
 8001780:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001792:	2305      	movs	r3, #5
 8001794:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001796:	f7fe fdbf 	bl	8000318 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800179a:	b007      	add	sp, #28
 800179c:	f85d fb04 	ldr.w	pc, [sp], #4
 80017a0:	40013000 	.word	0x40013000

080017a4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a4:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART4)
 80017a6:	6803      	ldr	r3, [r0, #0]
 80017a8:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <HAL_UART_MspInit+0x7c>)
 80017aa:	4293      	cmp	r3, r2
{
 80017ac:	b089      	sub	sp, #36	; 0x24
  if(huart->Instance==UART4)
 80017ae:	d11b      	bne.n	80017e8 <HAL_UART_MspInit+0x44>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80017b0:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <HAL_UART_MspInit+0x80>)
    GPIO_InitStruct.Pin = Debug_TX_Pin|Debug_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b2:	481d      	ldr	r0, [pc, #116]	; (8001828 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_UART4_CLK_ENABLE();
 80017b4:	69da      	ldr	r2, [r3, #28]
 80017b6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80017ba:	61da      	str	r2, [r3, #28]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = Debug_TX_Pin|Debug_RX_Pin;
 80017c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d4:	2303      	movs	r3, #3
 80017d6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80017d8:	2305      	movs	r3, #5
 80017da:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017dc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	f7fe fd9b 	bl	8000318 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017e2:	b009      	add	sp, #36	; 0x24
 80017e4:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(huart->Instance==USART1)
 80017e8:	4a10      	ldr	r2, [pc, #64]	; (800182c <HAL_UART_MspInit+0x88>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d1f9      	bne.n	80017e2 <HAL_UART_MspInit+0x3e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_UART_MspInit+0x80>)
 80017f0:	699a      	ldr	r2, [r3, #24]
 80017f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017f6:	619a      	str	r2, [r3, #24]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fe:	9302      	str	r3, [sp, #8]
 8001800:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8001802:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001806:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001810:	2303      	movs	r3, #3
 8001812:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001814:	2307      	movs	r3, #7
 8001816:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	a903      	add	r1, sp, #12
 800181a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181e:	e7de      	b.n	80017de <HAL_UART_MspInit+0x3a>
 8001820:	40004c00 	.word	0x40004c00
 8001824:	40021000 	.word	0x40021000
 8001828:	48000800 	.word	0x48000800
 800182c:	40013800 	.word	0x40013800

08001830 <NMI_Handler>:
 8001830:	4770      	bx	lr

08001832 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001832:	e7fe      	b.n	8001832 <HardFault_Handler>

08001834 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001834:	e7fe      	b.n	8001834 <MemManage_Handler>

08001836 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001836:	e7fe      	b.n	8001836 <BusFault_Handler>

08001838 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001838:	e7fe      	b.n	8001838 <UsageFault_Handler>

0800183a <SVC_Handler>:
 800183a:	4770      	bx	lr

0800183c <DebugMon_Handler>:
 800183c:	4770      	bx	lr

0800183e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800183e:	4770      	bx	lr

08001840 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001840:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001842:	f7fe fced 	bl	8000220 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001846:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800184a:	f7fe bd60 	b.w	800030e <HAL_SYSTICK_IRQHandler>
	...

08001850 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001850:	4915      	ldr	r1, [pc, #84]	; (80018a8 <SystemInit+0x58>)
 8001852:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001856:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800185a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800185e:	4b13      	ldr	r3, [pc, #76]	; (80018ac <SystemInit+0x5c>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	f042 0201 	orr.w	r2, r2, #1
 8001866:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001868:	6858      	ldr	r0, [r3, #4]
 800186a:	4a11      	ldr	r2, [pc, #68]	; (80018b0 <SystemInit+0x60>)
 800186c:	4002      	ands	r2, r0
 800186e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001876:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800187a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001882:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800188a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800188c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800188e:	f022 020f 	bic.w	r2, r2, #15
 8001892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001894:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001896:	4a07      	ldr	r2, [pc, #28]	; (80018b4 <SystemInit+0x64>)
 8001898:	4002      	ands	r2, r0
 800189a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80018a4:	608b      	str	r3, [r1, #8]
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00
 80018ac:	40021000 	.word	0x40021000
 80018b0:	f87fc00c 	.word	0xf87fc00c
 80018b4:	ff00fccc 	.word	0xff00fccc

080018b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80018bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80018be:	e003      	b.n	80018c8 <LoopCopyDataInit>

080018c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80018c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80018c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80018c6:	3104      	adds	r1, #4

080018c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80018c8:	480b      	ldr	r0, [pc, #44]	; (80018f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80018cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80018ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80018d0:	d3f6      	bcc.n	80018c0 <CopyDataInit>
	ldr	r2, =_sbss
 80018d2:	4a0b      	ldr	r2, [pc, #44]	; (8001900 <LoopForever+0x12>)
	b	LoopFillZerobss
 80018d4:	e002      	b.n	80018dc <LoopFillZerobss>

080018d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80018d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80018d8:	f842 3b04 	str.w	r3, [r2], #4

080018dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80018dc:	4b09      	ldr	r3, [pc, #36]	; (8001904 <LoopForever+0x16>)
	cmp	r2, r3
 80018de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80018e0:	d3f9      	bcc.n	80018d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018e2:	f7ff ffb5 	bl	8001850 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018e6:	f000 f811 	bl	800190c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018ea:	f7ff fded 	bl	80014c8 <main>

080018ee <LoopForever>:

LoopForever:
    b LoopForever
 80018ee:	e7fe      	b.n	80018ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018f0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80018f4:	080019b0 	.word	0x080019b0
	ldr	r0, =_sdata
 80018f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80018fc:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8001900:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8001904:	200001b4 	.word	0x200001b4

08001908 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001908:	e7fe      	b.n	8001908 <ADC1_2_IRQHandler>
	...

0800190c <__libc_init_array>:
 800190c:	b570      	push	{r4, r5, r6, lr}
 800190e:	4e0d      	ldr	r6, [pc, #52]	; (8001944 <__libc_init_array+0x38>)
 8001910:	4c0d      	ldr	r4, [pc, #52]	; (8001948 <__libc_init_array+0x3c>)
 8001912:	1ba4      	subs	r4, r4, r6
 8001914:	10a4      	asrs	r4, r4, #2
 8001916:	2500      	movs	r5, #0
 8001918:	42a5      	cmp	r5, r4
 800191a:	d109      	bne.n	8001930 <__libc_init_array+0x24>
 800191c:	4e0b      	ldr	r6, [pc, #44]	; (800194c <__libc_init_array+0x40>)
 800191e:	4c0c      	ldr	r4, [pc, #48]	; (8001950 <__libc_init_array+0x44>)
 8001920:	f000 f818 	bl	8001954 <_init>
 8001924:	1ba4      	subs	r4, r4, r6
 8001926:	10a4      	asrs	r4, r4, #2
 8001928:	2500      	movs	r5, #0
 800192a:	42a5      	cmp	r5, r4
 800192c:	d105      	bne.n	800193a <__libc_init_array+0x2e>
 800192e:	bd70      	pop	{r4, r5, r6, pc}
 8001930:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001934:	4798      	blx	r3
 8001936:	3501      	adds	r5, #1
 8001938:	e7ee      	b.n	8001918 <__libc_init_array+0xc>
 800193a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800193e:	4798      	blx	r3
 8001940:	3501      	adds	r5, #1
 8001942:	e7f2      	b.n	800192a <__libc_init_array+0x1e>
 8001944:	080019a8 	.word	0x080019a8
 8001948:	080019a8 	.word	0x080019a8
 800194c:	080019a8 	.word	0x080019a8
 8001950:	080019ac 	.word	0x080019ac

08001954 <_init>:
 8001954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001956:	bf00      	nop
 8001958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800195a:	bc08      	pop	{r3}
 800195c:	469e      	mov	lr, r3
 800195e:	4770      	bx	lr

08001960 <_fini>:
 8001960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001962:	bf00      	nop
 8001964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001966:	bc08      	pop	{r3}
 8001968:	469e      	mov	lr, r3
 800196a:	4770      	bx	lr
