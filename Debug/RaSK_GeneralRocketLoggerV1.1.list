
RaSK_GeneralRocketLoggerV1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b54  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08008cf4  08008cf4  00018cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080091c8  080091c8  000191c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080091cc  080091cc  000191cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000024c  20000000  080091d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002024c  2**0
                  CONTENTS
  7 .bss          000020d8  2000024c  2000024c  0002024c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002324  20002324  0002024c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00035b0e  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000059e6  00000000  00000000  00055d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001718d  00000000  00000000  0005b770  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000017c8  00000000  00000000  00072900  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001ec8  00000000  00000000  000740c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000da2f  00000000  00000000  00075f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00008b4b  00000000  00000000  000839bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0008c50a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000056d4  00000000  00000000  0008c588  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         0000009c  00000000  00000000  00091c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000014d  00000000  00000000  00091cf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000024c 	.word	0x2000024c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008cdc 	.word	0x08008cdc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000250 	.word	0x20000250
 80001dc:	08008cdc 	.word	0x08008cdc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f0:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <HAL_InitTick+0x24>)
{
 80005f4:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80005f6:	6818      	ldr	r0, [r3, #0]
 80005f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000600:	f000 f88c 	bl	800071c <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000604:	2200      	movs	r2, #0
 8000606:	4621      	mov	r1, r4
 8000608:	f04f 30ff 	mov.w	r0, #4294967295
 800060c:	f000 f846 	bl	800069c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000610:	2000      	movs	r0, #0
 8000612:	bd10      	pop	{r4, pc}
 8000614:	20000078 	.word	0x20000078

08000618 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000618:	4a07      	ldr	r2, [pc, #28]	; (8000638 <HAL_Init+0x20>)
{
 800061a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800061c:	6813      	ldr	r3, [r2, #0]
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f827 	bl	8000678 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800062a:	2000      	movs	r0, #0
 800062c:	f7ff ffe0 	bl	80005f0 <HAL_InitTick>
  HAL_MspInit();
 8000630:	f006 fec6 	bl	80073c0 <HAL_MspInit>
}
 8000634:	2000      	movs	r0, #0
 8000636:	bd08      	pop	{r3, pc}
 8000638:	40022000 	.word	0x40022000

0800063c <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800063c:	4a02      	ldr	r2, [pc, #8]	; (8000648 <HAL_IncTick+0xc>)
 800063e:	6813      	ldr	r3, [r2, #0]
 8000640:	3301      	adds	r3, #1
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000310 	.word	0x20000310

0800064c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800064c:	4b01      	ldr	r3, [pc, #4]	; (8000654 <HAL_GetTick+0x8>)
 800064e:	6818      	ldr	r0, [r3, #0]
}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000310 	.word	0x20000310

08000658 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800065a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800065c:	f7ff fff6 	bl	800064c <HAL_GetTick>
  uint32_t wait = Delay;
 8000660:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000662:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000664:	4605      	mov	r5, r0
  {
     wait++;
 8000666:	bf18      	it	ne
 8000668:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800066a:	f7ff ffef 	bl	800064c <HAL_GetTick>
 800066e:	1b40      	subs	r0, r0, r5
 8000670:	42a0      	cmp	r0, r4
 8000672:	d3fa      	bcc.n	800066a <HAL_Delay+0x12>
  {
  }
}
 8000674:	b003      	add	sp, #12
 8000676:	bd30      	pop	{r4, r5, pc}

08000678 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000678:	4a07      	ldr	r2, [pc, #28]	; (8000698 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800067a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000680:	041b      	lsls	r3, r3, #16
 8000682:	0c1b      	lsrs	r3, r3, #16
 8000684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000688:	0200      	lsls	r0, r0, #8
 800068a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000692:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000694:	60d3      	str	r3, [r2, #12]
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	68dc      	ldr	r4, [r3, #12]
 80006a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006aa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ac:	2b04      	cmp	r3, #4
 80006ae:	bf28      	it	cs
 80006b0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	f04f 0501 	mov.w	r5, #1
 80006b8:	fa05 f303 	lsl.w	r3, r5, r3
 80006bc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c0:	bf8c      	ite	hi
 80006c2:	3c03      	subhi	r4, #3
 80006c4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c6:	4019      	ands	r1, r3
 80006c8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ca:	fa05 f404 	lsl.w	r4, r5, r4
 80006ce:	3c01      	subs	r4, #1
 80006d0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80006d2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	ea42 0201 	orr.w	r2, r2, r1
 80006d8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	bfaf      	iteee	ge
 80006de:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	f000 000f 	andlt.w	r0, r0, #15
 80006e6:	4b06      	ldrlt	r3, [pc, #24]	; (8000700 <HAL_NVIC_SetPriority+0x64>)
 80006e8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ea:	bfa5      	ittet	ge
 80006ec:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80006f0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00
 8000700:	e000ed14 	.word	0xe000ed14

08000704 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000704:	0942      	lsrs	r2, r0, #5
 8000706:	2301      	movs	r3, #1
 8000708:	f000 001f 	and.w	r0, r0, #31
 800070c:	fa03 f000 	lsl.w	r0, r3, r0
 8000710:	4b01      	ldr	r3, [pc, #4]	; (8000718 <HAL_NVIC_EnableIRQ+0x14>)
 8000712:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000716:	4770      	bx	lr
 8000718:	e000e100 	.word	0xe000e100

0800071c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800071c:	3801      	subs	r0, #1
 800071e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000722:	d20a      	bcs.n	800073a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000726:	4a07      	ldr	r2, [pc, #28]	; (8000744 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000728:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072a:	21f0      	movs	r1, #240	; 0xf0
 800072c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000730:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000732:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000734:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800073a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	e000e010 	.word	0xe000e010
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800074a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800074c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800074e:	bf0c      	ite	eq
 8000750:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000754:	f022 0204 	bicne.w	r2, r2, #4
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	4770      	bx	lr
 800075c:	e000e010 	.word	0xe000e010

08000760 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000760:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000762:	f003 fdd5 	bl	8004310 <HAL_SYSTICK_Callback>
 8000766:	bd08      	pop	{r3, pc}

08000768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800076c:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000770:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8000904 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000774:	4a61      	ldr	r2, [pc, #388]	; (80008fc <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 8000776:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000778:	fa38 f403 	lsrs.w	r4, r8, r3
 800077c:	d102      	bne.n	8000784 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 800077e:	b003      	add	sp, #12
 8000780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000784:	f04f 0e01 	mov.w	lr, #1
 8000788:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 800078c:	ea18 060e 	ands.w	r6, r8, lr
 8000790:	f000 80a6 	beq.w	80008e0 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000794:	684c      	ldr	r4, [r1, #4]
 8000796:	f024 0710 	bic.w	r7, r4, #16
 800079a:	2f02      	cmp	r7, #2
 800079c:	d116      	bne.n	80007cc <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 800079e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80007a2:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007a6:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80007aa:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007ae:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80007b2:	f04f 0c0f 	mov.w	ip, #15
 80007b6:	fa0c fc0b 	lsl.w	ip, ip, fp
 80007ba:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007be:	690d      	ldr	r5, [r1, #16]
 80007c0:	fa05 f50b 	lsl.w	r5, r5, fp
 80007c4:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80007c8:	f8ca 5020 	str.w	r5, [sl, #32]
 80007cc:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007d0:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80007d2:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007d6:	fa05 f50a 	lsl.w	r5, r5, sl
 80007da:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007dc:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007e0:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007e4:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007e8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007ea:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ee:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80007f0:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007f4:	d811      	bhi.n	800081a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80007f6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007f8:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007fc:	68cf      	ldr	r7, [r1, #12]
 80007fe:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000802:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000806:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000808:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800080a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800080e:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000812:	409f      	lsls	r7, r3
 8000814:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000818:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800081a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800081c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800081e:	688f      	ldr	r7, [r1, #8]
 8000820:	fa07 f70a 	lsl.w	r7, r7, sl
 8000824:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000826:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000828:	00e5      	lsls	r5, r4, #3
 800082a:	d559      	bpl.n	80008e0 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082c:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000830:	f045 0501 	orr.w	r5, r5, #1
 8000834:	f8c9 5018 	str.w	r5, [r9, #24]
 8000838:	f8d9 5018 	ldr.w	r5, [r9, #24]
 800083c:	f023 0703 	bic.w	r7, r3, #3
 8000840:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000844:	f005 0501 	and.w	r5, r5, #1
 8000848:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800084c:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800084e:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000854:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000856:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800085a:	f04f 0e0f 	mov.w	lr, #15
 800085e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000862:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000866:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800086a:	d03b      	beq.n	80008e4 <HAL_GPIO_Init+0x17c>
 800086c:	4d24      	ldr	r5, [pc, #144]	; (8000900 <HAL_GPIO_Init+0x198>)
 800086e:	42a8      	cmp	r0, r5
 8000870:	d03a      	beq.n	80008e8 <HAL_GPIO_Init+0x180>
 8000872:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000876:	42a8      	cmp	r0, r5
 8000878:	d038      	beq.n	80008ec <HAL_GPIO_Init+0x184>
 800087a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800087e:	42a8      	cmp	r0, r5
 8000880:	d036      	beq.n	80008f0 <HAL_GPIO_Init+0x188>
 8000882:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000886:	42a8      	cmp	r0, r5
 8000888:	d034      	beq.n	80008f4 <HAL_GPIO_Init+0x18c>
 800088a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800088e:	42a8      	cmp	r0, r5
 8000890:	d032      	beq.n	80008f8 <HAL_GPIO_Init+0x190>
 8000892:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000896:	42a8      	cmp	r0, r5
 8000898:	bf14      	ite	ne
 800089a:	2507      	movne	r5, #7
 800089c:	2506      	moveq	r5, #6
 800089e:	fa05 f50c 	lsl.w	r5, r5, ip
 80008a2:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80008a6:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80008a8:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80008aa:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008ac:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80008b0:	bf0c      	ite	eq
 80008b2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80008b4:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 80008b6:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80008b8:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008ba:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80008be:	bf0c      	ite	eq
 80008c0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80008c2:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 80008c4:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80008c6:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008c8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80008cc:	bf0c      	ite	eq
 80008ce:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80008d0:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 80008d2:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80008d4:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008d6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008d8:	bf54      	ite	pl
 80008da:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80008dc:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 80008de:	60d5      	str	r5, [r2, #12]
    position++;
 80008e0:	3301      	adds	r3, #1
 80008e2:	e749      	b.n	8000778 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80008e4:	2500      	movs	r5, #0
 80008e6:	e7da      	b.n	800089e <HAL_GPIO_Init+0x136>
 80008e8:	2501      	movs	r5, #1
 80008ea:	e7d8      	b.n	800089e <HAL_GPIO_Init+0x136>
 80008ec:	2502      	movs	r5, #2
 80008ee:	e7d6      	b.n	800089e <HAL_GPIO_Init+0x136>
 80008f0:	2503      	movs	r5, #3
 80008f2:	e7d4      	b.n	800089e <HAL_GPIO_Init+0x136>
 80008f4:	2504      	movs	r5, #4
 80008f6:	e7d2      	b.n	800089e <HAL_GPIO_Init+0x136>
 80008f8:	2505      	movs	r5, #5
 80008fa:	e7d0      	b.n	800089e <HAL_GPIO_Init+0x136>
 80008fc:	40010400 	.word	0x40010400
 8000900:	48000400 	.word	0x48000400
 8000904:	40021000 	.word	0x40021000

08000908 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = (0x0FU) << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800090c:	4c41      	ldr	r4, [pc, #260]	; (8000a14 <HAL_GPIO_DeInit+0x10c>)
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800090e:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8000a1c <HAL_GPIO_DeInit+0x114>
 8000912:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8000a20 <HAL_GPIO_DeInit+0x118>
  uint32_t position = 0x00U;
 8000916:	2300      	movs	r3, #0
    iocurrent = GPIO_Pin & (1U << position);
 8000918:	f04f 0801 	mov.w	r8, #1
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800091c:	f04f 0903 	mov.w	r9, #3
  while ((GPIO_Pin >> position) != RESET)
 8000920:	fa31 f203 	lsrs.w	r2, r1, r3
 8000924:	d102      	bne.n	800092c <HAL_GPIO_DeInit+0x24>
      }
    }
    
    position++;
  }
}
 8000926:	b003      	add	sp, #12
 8000928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1U << position);
 800092c:	fa08 fc03 	lsl.w	ip, r8, r3
    if (iocurrent)
 8000930:	ea11 020c 	ands.w	r2, r1, ip
 8000934:	9201      	str	r2, [sp, #4]
 8000936:	d05e      	beq.n	80009f6 <HAL_GPIO_DeInit+0xee>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000938:	005a      	lsls	r2, r3, #1
 800093a:	6806      	ldr	r6, [r0, #0]
 800093c:	fa09 f202 	lsl.w	r2, r9, r2
 8000940:	43d2      	mvns	r2, r2
      GPIOx->AFR[position >> 3] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000942:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000946:	4016      	ands	r6, r2
 8000948:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800094c:	6006      	str	r6, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800094e:	f8de 6020 	ldr.w	r6, [lr, #32]
 8000952:	f003 0707 	and.w	r7, r3, #7
 8000956:	4635      	mov	r5, r6
 8000958:	00bf      	lsls	r7, r7, #2
 800095a:	260f      	movs	r6, #15
 800095c:	fa06 f707 	lsl.w	r7, r6, r7
 8000960:	ea25 0707 	bic.w	r7, r5, r7
 8000964:	f8ce 7020 	str.w	r7, [lr, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000968:	6887      	ldr	r7, [r0, #8]
 800096a:	4017      	ands	r7, r2
 800096c:	6087      	str	r7, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800096e:	6847      	ldr	r7, [r0, #4]
 8000970:	ea27 070c 	bic.w	r7, r7, ip
 8000974:	6047      	str	r7, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000976:	68c7      	ldr	r7, [r0, #12]
 8000978:	403a      	ands	r2, r7
 800097a:	f023 0703 	bic.w	r7, r3, #3
 800097e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000982:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000986:	60c2      	str	r2, [r0, #12]
      tmp &= ((0x0FU) << (4U * (position & 0x03U)));
 8000988:	f003 0e03 	and.w	lr, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 800098c:	68ba      	ldr	r2, [r7, #8]
      tmp &= ((0x0FU) << (4U * (position & 0x03U)));
 800098e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000992:	fa06 f60e 	lsl.w	r6, r6, lr
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8000996:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= ((0x0FU) << (4U * (position & 0x03U)));
 800099a:	ea02 0c06 	and.w	ip, r2, r6
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800099e:	d02c      	beq.n	80009fa <HAL_GPIO_DeInit+0xf2>
 80009a0:	4a1d      	ldr	r2, [pc, #116]	; (8000a18 <HAL_GPIO_DeInit+0x110>)
 80009a2:	4290      	cmp	r0, r2
 80009a4:	d02b      	beq.n	80009fe <HAL_GPIO_DeInit+0xf6>
 80009a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80009aa:	4290      	cmp	r0, r2
 80009ac:	d029      	beq.n	8000a02 <HAL_GPIO_DeInit+0xfa>
 80009ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80009b2:	4290      	cmp	r0, r2
 80009b4:	d027      	beq.n	8000a06 <HAL_GPIO_DeInit+0xfe>
 80009b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80009ba:	4290      	cmp	r0, r2
 80009bc:	d025      	beq.n	8000a0a <HAL_GPIO_DeInit+0x102>
 80009be:	4550      	cmp	r0, sl
 80009c0:	d025      	beq.n	8000a0e <HAL_GPIO_DeInit+0x106>
 80009c2:	4558      	cmp	r0, fp
 80009c4:	bf0c      	ite	eq
 80009c6:	2206      	moveq	r2, #6
 80009c8:	2207      	movne	r2, #7
 80009ca:	fa02 f20e 	lsl.w	r2, r2, lr
 80009ce:	4594      	cmp	ip, r2
 80009d0:	d111      	bne.n	80009f6 <HAL_GPIO_DeInit+0xee>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80009d2:	68ba      	ldr	r2, [r7, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80009d4:	9d01      	ldr	r5, [sp, #4]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80009d6:	ea22 0606 	bic.w	r6, r2, r6
 80009da:	60be      	str	r6, [r7, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80009dc:	6822      	ldr	r2, [r4, #0]
 80009de:	43ed      	mvns	r5, r5
 80009e0:	402a      	ands	r2, r5
 80009e2:	6022      	str	r2, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80009e4:	6862      	ldr	r2, [r4, #4]
 80009e6:	402a      	ands	r2, r5
 80009e8:	6062      	str	r2, [r4, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80009ea:	68a2      	ldr	r2, [r4, #8]
 80009ec:	402a      	ands	r2, r5
 80009ee:	60a2      	str	r2, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80009f0:	68e2      	ldr	r2, [r4, #12]
 80009f2:	4015      	ands	r5, r2
 80009f4:	60e5      	str	r5, [r4, #12]
    position++;
 80009f6:	3301      	adds	r3, #1
 80009f8:	e792      	b.n	8000920 <HAL_GPIO_DeInit+0x18>
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80009fa:	2200      	movs	r2, #0
 80009fc:	e7e5      	b.n	80009ca <HAL_GPIO_DeInit+0xc2>
 80009fe:	2201      	movs	r2, #1
 8000a00:	e7e3      	b.n	80009ca <HAL_GPIO_DeInit+0xc2>
 8000a02:	2202      	movs	r2, #2
 8000a04:	e7e1      	b.n	80009ca <HAL_GPIO_DeInit+0xc2>
 8000a06:	2203      	movs	r2, #3
 8000a08:	e7df      	b.n	80009ca <HAL_GPIO_DeInit+0xc2>
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	e7dd      	b.n	80009ca <HAL_GPIO_DeInit+0xc2>
 8000a0e:	2205      	movs	r2, #5
 8000a10:	e7db      	b.n	80009ca <HAL_GPIO_DeInit+0xc2>
 8000a12:	bf00      	nop
 8000a14:	40010400 	.word	0x40010400
 8000a18:	48000400 	.word	0x48000400
 8000a1c:	48001400 	.word	0x48001400
 8000a20:	48001800 	.word	0x48001800

08000a24 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a24:	b10a      	cbz	r2, 8000a2a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a26:	6181      	str	r1, [r0, #24]
 8000a28:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a2a:	6281      	str	r1, [r0, #40]	; 0x28
 8000a2c:	4770      	bx	lr
	...

08000a30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000a30:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000a32:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000a34:	6959      	ldr	r1, [r3, #20]
 8000a36:	4201      	tst	r1, r0
 8000a38:	d002      	beq.n	8000a40 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000a3a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000a3c:	f005 fcfa 	bl	8006434 <HAL_GPIO_EXTI_Callback>
 8000a40:	bd08      	pop	{r3, pc}
 8000a42:	bf00      	nop
 8000a44:	40010400 	.word	0x40010400

08000a48 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000a48:	6803      	ldr	r3, [r0, #0]
 8000a4a:	699a      	ldr	r2, [r3, #24]
 8000a4c:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8000a4e:	bf44      	itt	mi
 8000a50:	2200      	movmi	r2, #0
 8000a52:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000a54:	699a      	ldr	r2, [r3, #24]
 8000a56:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000a58:	bf5e      	ittt	pl
 8000a5a:	699a      	ldrpl	r2, [r3, #24]
 8000a5c:	f042 0201 	orrpl.w	r2, r2, #1
 8000a60:	619a      	strpl	r2, [r3, #24]
 8000a62:	4770      	bx	lr

08000a64 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000a64:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8000a66:	6805      	ldr	r5, [r0, #0]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8000a68:	9c03      	ldr	r4, [sp, #12]
  tmpreg = hi2c->Instance->CR2;
 8000a6a:	6868      	ldr	r0, [r5, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8000a6c:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
 8000a70:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8000a74:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8000a78:	4323      	orrs	r3, r4
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8000a7a:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8000a7e:	4319      	orrs	r1, r3
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8000a80:	f020 0003 	bic.w	r0, r0, #3
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8000a84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000a88:	4301      	orrs	r1, r0
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8000a8a:	6069      	str	r1, [r5, #4]
 8000a8c:	bd30      	pop	{r4, r5, pc}

08000a8e <I2C_WaitOnFlagUntilTimeout>:
{
 8000a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a92:	9f06      	ldr	r7, [sp, #24]
 8000a94:	4604      	mov	r4, r0
 8000a96:	4688      	mov	r8, r1
 8000a98:	4616      	mov	r6, r2
 8000a9a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000a9c:	6822      	ldr	r2, [r4, #0]
 8000a9e:	6993      	ldr	r3, [r2, #24]
 8000aa0:	ea38 0303 	bics.w	r3, r8, r3
 8000aa4:	bf0c      	ite	eq
 8000aa6:	2301      	moveq	r3, #1
 8000aa8:	2300      	movne	r3, #0
 8000aaa:	42b3      	cmp	r3, r6
 8000aac:	d002      	beq.n	8000ab4 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8000aae:	2000      	movs	r0, #0
}
 8000ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000ab4:	1c6b      	adds	r3, r5, #1
 8000ab6:	d0f2      	beq.n	8000a9e <I2C_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000ab8:	b955      	cbnz	r5, 8000ad0 <I2C_WaitOnFlagUntilTimeout+0x42>
        hi2c->State = HAL_I2C_STATE_READY;
 8000aba:	2320      	movs	r3, #32
 8000abc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8000ac6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8000aca:	2003      	movs	r0, #3
 8000acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000ad0:	f7ff fdbc 	bl	800064c <HAL_GetTick>
 8000ad4:	1bc0      	subs	r0, r0, r7
 8000ad6:	4285      	cmp	r5, r0
 8000ad8:	d2e0      	bcs.n	8000a9c <I2C_WaitOnFlagUntilTimeout+0xe>
 8000ada:	e7ee      	b.n	8000aba <I2C_WaitOnFlagUntilTimeout+0x2c>

08000adc <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000adc:	6803      	ldr	r3, [r0, #0]
{
 8000ade:	b570      	push	{r4, r5, r6, lr}
 8000ae0:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000ae2:	6998      	ldr	r0, [r3, #24]
 8000ae4:	f010 0010 	ands.w	r0, r0, #16
{
 8000ae8:	460d      	mov	r5, r1
 8000aea:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000aec:	d112      	bne.n	8000b14 <I2C_IsAcknowledgeFailed+0x38>
 8000aee:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000af0:	1c69      	adds	r1, r5, #1
 8000af2:	d010      	beq.n	8000b16 <I2C_IsAcknowledgeFailed+0x3a>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000af4:	b94d      	cbnz	r5, 8000b0a <I2C_IsAcknowledgeFailed+0x2e>
          hi2c->State = HAL_I2C_STATE_READY;
 8000af6:	2320      	movs	r3, #32
 8000af8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8000b02:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 8000b06:	2003      	movs	r0, #3
 8000b08:	bd70      	pop	{r4, r5, r6, pc}
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000b0a:	f7ff fd9f 	bl	800064c <HAL_GetTick>
 8000b0e:	1b80      	subs	r0, r0, r6
 8000b10:	4285      	cmp	r5, r0
 8000b12:	d3f0      	bcc.n	8000af6 <I2C_IsAcknowledgeFailed+0x1a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000b14:	6823      	ldr	r3, [r4, #0]
 8000b16:	6999      	ldr	r1, [r3, #24]
 8000b18:	068a      	lsls	r2, r1, #26
 8000b1a:	d5e9      	bpl.n	8000af0 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000b1c:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b1e:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000b20:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000b22:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b24:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000b26:	f7ff ff8f 	bl	8000a48 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8000b2a:	6822      	ldr	r2, [r4, #0]
 8000b2c:	6853      	ldr	r3, [r2, #4]
 8000b2e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8000b32:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8000b36:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000b3a:	f023 0301 	bic.w	r3, r3, #1
 8000b3e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000b40:	2304      	movs	r3, #4
 8000b42:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b44:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000b46:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000b4a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_ERROR;
 8000b52:	2001      	movs	r0, #1
}
 8000b54:	bd70      	pop	{r4, r5, r6, pc}

08000b56 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8000b56:	b570      	push	{r4, r5, r6, lr}
 8000b58:	4604      	mov	r4, r0
 8000b5a:	460d      	mov	r5, r1
 8000b5c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000b5e:	6823      	ldr	r3, [r4, #0]
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	079b      	lsls	r3, r3, #30
 8000b64:	d501      	bpl.n	8000b6a <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8000b66:	2000      	movs	r0, #0
 8000b68:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b6a:	4632      	mov	r2, r6
 8000b6c:	4629      	mov	r1, r5
 8000b6e:	4620      	mov	r0, r4
 8000b70:	f7ff ffb4 	bl	8000adc <I2C_IsAcknowledgeFailed>
 8000b74:	b9b0      	cbnz	r0, 8000ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8000b76:	1c6a      	adds	r2, r5, #1
 8000b78:	d0f1      	beq.n	8000b5e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000b7a:	b96d      	cbnz	r5, 8000b98 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000b7c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b7e:	f043 0320 	orr.w	r3, r3, #32
 8000b82:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000b84:	2320      	movs	r3, #32
 8000b86:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000b90:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000b94:	2003      	movs	r0, #3
 8000b96:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000b98:	f7ff fd58 	bl	800064c <HAL_GetTick>
 8000b9c:	1b80      	subs	r0, r0, r6
 8000b9e:	4285      	cmp	r5, r0
 8000ba0:	d2dd      	bcs.n	8000b5e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 8000ba2:	e7eb      	b.n	8000b7c <I2C_WaitOnTXISFlagUntilTimeout+0x26>
      return HAL_ERROR;
 8000ba4:	2001      	movs	r0, #1
}
 8000ba6:	bd70      	pop	{r4, r5, r6, pc}

08000ba8 <I2C_RequestMemoryWrite>:
{
 8000ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000baa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000bac:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000bae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 8000bb2:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000bb4:	9300      	str	r3, [sp, #0]
{
 8000bb6:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000bb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bbc:	b2fa      	uxtb	r2, r7
 8000bbe:	f7ff ff51 	bl	8000a64 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000bc2:	4632      	mov	r2, r6
 8000bc4:	9908      	ldr	r1, [sp, #32]
 8000bc6:	4620      	mov	r0, r4
 8000bc8:	f7ff ffc5 	bl	8000b56 <I2C_WaitOnTXISFlagUntilTimeout>
 8000bcc:	b128      	cbz	r0, 8000bda <I2C_RequestMemoryWrite+0x32>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000bce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000bd0:	2b04      	cmp	r3, #4
 8000bd2:	d110      	bne.n	8000bf6 <I2C_RequestMemoryWrite+0x4e>
      return HAL_ERROR;
 8000bd4:	2001      	movs	r0, #1
}
 8000bd6:	b003      	add	sp, #12
 8000bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000bda:	2f01      	cmp	r7, #1
 8000bdc:	6823      	ldr	r3, [r4, #0]
 8000bde:	d10c      	bne.n	8000bfa <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000be0:	b2ed      	uxtb	r5, r5
 8000be2:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8000be4:	9b08      	ldr	r3, [sp, #32]
 8000be6:	9600      	str	r6, [sp, #0]
 8000be8:	2200      	movs	r2, #0
 8000bea:	2180      	movs	r1, #128	; 0x80
 8000bec:	4620      	mov	r0, r4
 8000bee:	f7ff ff4e 	bl	8000a8e <I2C_WaitOnFlagUntilTimeout>
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	d0ef      	beq.n	8000bd6 <I2C_RequestMemoryWrite+0x2e>
      return HAL_TIMEOUT;
 8000bf6:	2003      	movs	r0, #3
 8000bf8:	e7ed      	b.n	8000bd6 <I2C_RequestMemoryWrite+0x2e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000bfa:	0a2a      	lsrs	r2, r5, #8
 8000bfc:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000bfe:	9908      	ldr	r1, [sp, #32]
 8000c00:	4632      	mov	r2, r6
 8000c02:	4620      	mov	r0, r4
 8000c04:	f7ff ffa7 	bl	8000b56 <I2C_WaitOnTXISFlagUntilTimeout>
 8000c08:	2800      	cmp	r0, #0
 8000c0a:	d1e0      	bne.n	8000bce <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000c0c:	6823      	ldr	r3, [r4, #0]
 8000c0e:	e7e7      	b.n	8000be0 <I2C_RequestMemoryWrite+0x38>

08000c10 <I2C_RequestMemoryRead>:
{
 8000c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000c12:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000c14:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000c16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 8000c1a:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000c1c:	9300      	str	r3, [sp, #0]
{
 8000c1e:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000c20:	2300      	movs	r3, #0
 8000c22:	b2fa      	uxtb	r2, r7
 8000c24:	f7ff ff1e 	bl	8000a64 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c28:	4632      	mov	r2, r6
 8000c2a:	9908      	ldr	r1, [sp, #32]
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	f7ff ff92 	bl	8000b56 <I2C_WaitOnTXISFlagUntilTimeout>
 8000c32:	b128      	cbz	r0, 8000c40 <I2C_RequestMemoryRead+0x30>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000c34:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	d110      	bne.n	8000c5c <I2C_RequestMemoryRead+0x4c>
      return HAL_ERROR;
 8000c3a:	2001      	movs	r0, #1
}
 8000c3c:	b003      	add	sp, #12
 8000c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000c40:	2f01      	cmp	r7, #1
 8000c42:	6823      	ldr	r3, [r4, #0]
 8000c44:	d10c      	bne.n	8000c60 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000c46:	b2ed      	uxtb	r5, r5
 8000c48:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8000c4a:	9b08      	ldr	r3, [sp, #32]
 8000c4c:	9600      	str	r6, [sp, #0]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2140      	movs	r1, #64	; 0x40
 8000c52:	4620      	mov	r0, r4
 8000c54:	f7ff ff1b 	bl	8000a8e <I2C_WaitOnFlagUntilTimeout>
 8000c58:	2800      	cmp	r0, #0
 8000c5a:	d0ef      	beq.n	8000c3c <I2C_RequestMemoryRead+0x2c>
      return HAL_TIMEOUT;
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	e7ed      	b.n	8000c3c <I2C_RequestMemoryRead+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000c60:	0a2a      	lsrs	r2, r5, #8
 8000c62:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c64:	9908      	ldr	r1, [sp, #32]
 8000c66:	4632      	mov	r2, r6
 8000c68:	4620      	mov	r0, r4
 8000c6a:	f7ff ff74 	bl	8000b56 <I2C_WaitOnTXISFlagUntilTimeout>
 8000c6e:	2800      	cmp	r0, #0
 8000c70:	d1e0      	bne.n	8000c34 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000c72:	6823      	ldr	r3, [r4, #0]
 8000c74:	e7e7      	b.n	8000c46 <I2C_RequestMemoryRead+0x36>

08000c76 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000c76:	b570      	push	{r4, r5, r6, lr}
 8000c78:	4604      	mov	r4, r0
 8000c7a:	460d      	mov	r5, r1
 8000c7c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000c7e:	6823      	ldr	r3, [r4, #0]
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	075b      	lsls	r3, r3, #29
 8000c84:	d501      	bpl.n	8000c8a <I2C_WaitOnRXNEFlagUntilTimeout+0x14>
  return HAL_OK;
 8000c86:	2000      	movs	r0, #0
 8000c88:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c8a:	4632      	mov	r2, r6
 8000c8c:	4629      	mov	r1, r5
 8000c8e:	4620      	mov	r0, r4
 8000c90:	f7ff ff24 	bl	8000adc <I2C_IsAcknowledgeFailed>
 8000c94:	b9b0      	cbnz	r0, 8000cc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000c96:	6823      	ldr	r3, [r4, #0]
 8000c98:	699a      	ldr	r2, [r3, #24]
 8000c9a:	0692      	lsls	r2, r2, #26
 8000c9c:	d514      	bpl.n	8000cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000c9e:	2120      	movs	r1, #32
 8000ca0:	61d9      	str	r1, [r3, #28]
      I2C_RESET_CR2(hi2c);
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000ca8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000cac:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000cb0:	f022 0201 	bic.w	r2, r2, #1
 8000cb4:	605a      	str	r2, [r3, #4]
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cb6:	6460      	str	r0, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8000cb8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 8000cbc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000cc0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      return HAL_ERROR;
 8000cc4:	2001      	movs	r0, #1
}
 8000cc6:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000cc8:	b95d      	cbnz	r5, 8000ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000cca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ccc:	f043 0320 	orr.w	r3, r3, #32
 8000cd0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000cd2:	2320      	movs	r3, #32
 8000cd4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000cde:	2003      	movs	r0, #3
 8000ce0:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000ce2:	f7ff fcb3 	bl	800064c <HAL_GetTick>
 8000ce6:	1b80      	subs	r0, r0, r6
 8000ce8:	4285      	cmp	r5, r0
 8000cea:	d2c8      	bcs.n	8000c7e <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8000cec:	e7ed      	b.n	8000cca <I2C_WaitOnRXNEFlagUntilTimeout+0x54>

08000cee <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8000cee:	b570      	push	{r4, r5, r6, lr}
 8000cf0:	4604      	mov	r4, r0
 8000cf2:	460d      	mov	r5, r1
 8000cf4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000cf6:	6823      	ldr	r3, [r4, #0]
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	069b      	lsls	r3, r3, #26
 8000cfc:	d501      	bpl.n	8000d02 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8000cfe:	2000      	movs	r0, #0
 8000d00:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000d02:	4632      	mov	r2, r6
 8000d04:	4629      	mov	r1, r5
 8000d06:	4620      	mov	r0, r4
 8000d08:	f7ff fee8 	bl	8000adc <I2C_IsAcknowledgeFailed>
 8000d0c:	b9a0      	cbnz	r0, 8000d38 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000d0e:	b96d      	cbnz	r5, 8000d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000d10:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d12:	f043 0320 	orr.w	r3, r3, #32
 8000d16:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000d18:	2320      	movs	r3, #32
 8000d1a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8000d24:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000d28:	2003      	movs	r0, #3
 8000d2a:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000d2c:	f7ff fc8e 	bl	800064c <HAL_GetTick>
 8000d30:	1b80      	subs	r0, r0, r6
 8000d32:	4285      	cmp	r5, r0
 8000d34:	d2df      	bcs.n	8000cf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 8000d36:	e7eb      	b.n	8000d10 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000d38:	2001      	movs	r0, #1
}
 8000d3a:	bd70      	pop	{r4, r5, r6, pc}

08000d3c <HAL_I2C_Init>:
{
 8000d3c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8000d3e:	4604      	mov	r4, r0
 8000d40:	2800      	cmp	r0, #0
 8000d42:	d04a      	beq.n	8000dda <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d44:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000d48:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d4c:	b91b      	cbnz	r3, 8000d56 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000d4e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000d52:	f006 fb73 	bl	800743c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d56:	2324      	movs	r3, #36	; 0x24
 8000d58:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8000d5c:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d5e:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	f022 0201 	bic.w	r2, r2, #1
 8000d66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d68:	6862      	ldr	r2, [r4, #4]
 8000d6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d6e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d70:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d72:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d7c:	d124      	bne.n	8000dc8 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d82:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d84:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000d86:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d88:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000d8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d90:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d92:	68da      	ldr	r2, [r3, #12]
 8000d94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d98:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000d9a:	6922      	ldr	r2, [r4, #16]
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	69a1      	ldr	r1, [r4, #24]
 8000da0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000da4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000da6:	6a21      	ldr	r1, [r4, #32]
 8000da8:	69e2      	ldr	r2, [r4, #28]
 8000daa:	430a      	orrs	r2, r1
 8000dac:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	f042 0201 	orr.w	r2, r2, #1
 8000db4:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000db6:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000db8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dba:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000dbc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000dc0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dc2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8000dc6:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000dc8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000dcc:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000dce:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000dd0:	bf04      	itt	eq
 8000dd2:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000dd6:	605a      	streq	r2, [r3, #4]
 8000dd8:	e7d4      	b.n	8000d84 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000dda:	2001      	movs	r0, #1
}
 8000ddc:	bd10      	pop	{r4, pc}

08000dde <HAL_I2C_Master_Transmit>:
{
 8000dde:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000de2:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000de4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000de8:	2b20      	cmp	r3, #32
{
 8000dea:	4604      	mov	r4, r0
 8000dec:	460e      	mov	r6, r1
 8000dee:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000df0:	f040 808c 	bne.w	8000f0c <HAL_I2C_Master_Transmit+0x12e>
    __HAL_LOCK(hi2c);
 8000df4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	f000 8087 	beq.w	8000f0c <HAL_I2C_Master_Transmit+0x12e>
 8000dfe:	2701      	movs	r7, #1
 8000e00:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000e04:	f7ff fc22 	bl	800064c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e08:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8000e0a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e0c:	9000      	str	r0, [sp, #0]
 8000e0e:	463a      	mov	r2, r7
 8000e10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e14:	4620      	mov	r0, r4
 8000e16:	f7ff fe3a 	bl	8000a8e <I2C_WaitOnFlagUntilTimeout>
 8000e1a:	2800      	cmp	r0, #0
 8000e1c:	d14b      	bne.n	8000eb6 <HAL_I2C_Master_Transmit+0xd8>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e1e:	2321      	movs	r3, #33	; 0x21
 8000e20:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000e24:	2310      	movs	r3, #16
 8000e26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e2a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8000e2c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e30:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8000e32:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8000e3a:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e3c:	d927      	bls.n	8000e8e <HAL_I2C_Master_Transmit+0xb0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e3e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000e40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e44:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000e46:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000e48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	4620      	mov	r0, r4
 8000e50:	f7ff fe08 	bl	8000a64 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000e54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e56:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8000e58:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e5a:	462a      	mov	r2, r5
 8000e5c:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8000e5e:	bb03      	cbnz	r3, 8000ea2 <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e60:	f7ff ff45 	bl	8000cee <I2C_WaitOnSTOPFlagUntilTimeout>
 8000e64:	bb00      	cbnz	r0, 8000ea8 <HAL_I2C_Master_Transmit+0xca>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e66:	6823      	ldr	r3, [r4, #0]
 8000e68:	2120      	movs	r1, #32
 8000e6a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000e72:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000e76:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000e7a:	f022 0201 	bic.w	r2, r2, #1
 8000e7e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000e80:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000e84:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000e88:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000e8c:	e010      	b.n	8000eb0 <HAL_I2C_Master_Transmit+0xd2>
      hi2c->XferSize = hi2c->XferCount;
 8000e8e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000e90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
      hi2c->XferSize = hi2c->XferCount;
 8000e94:	b292      	uxth	r2, r2
 8000e96:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000e98:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000e9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	e7d4      	b.n	8000e4c <HAL_I2C_Master_Transmit+0x6e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ea2:	f7ff fe58 	bl	8000b56 <I2C_WaitOnTXISFlagUntilTimeout>
 8000ea6:	b140      	cbz	r0, 8000eba <HAL_I2C_Master_Transmit+0xdc>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ea8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	d103      	bne.n	8000eb6 <HAL_I2C_Master_Transmit+0xd8>
          return HAL_ERROR;
 8000eae:	2001      	movs	r0, #1
}
 8000eb0:	b003      	add	sp, #12
 8000eb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return HAL_TIMEOUT;
 8000eb6:	2003      	movs	r0, #3
 8000eb8:	e7fa      	b.n	8000eb0 <HAL_I2C_Master_Transmit+0xd2>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ebc:	6822      	ldr	r2, [r4, #0]
 8000ebe:	1c59      	adds	r1, r3, #1
 8000ec0:	6261      	str	r1, [r4, #36]	; 0x24
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8000ec6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000ec8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000eca:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8000ecc:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8000ece:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8000ed0:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8000ed2:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000ed4:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000ed6:	2a00      	cmp	r2, #0
 8000ed8:	d1bc      	bne.n	8000e54 <HAL_I2C_Master_Transmit+0x76>
 8000eda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d0b8      	beq.n	8000e54 <HAL_I2C_Master_Transmit+0x76>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000ee2:	9500      	str	r5, [sp, #0]
 8000ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000ee6:	2180      	movs	r1, #128	; 0x80
 8000ee8:	4620      	mov	r0, r4
 8000eea:	f7ff fdd0 	bl	8000a8e <I2C_WaitOnFlagUntilTimeout>
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	d1e1      	bne.n	8000eb6 <HAL_I2C_Master_Transmit+0xd8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ef2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	2bff      	cmp	r3, #255	; 0xff
 8000ef8:	d903      	bls.n	8000f02 <HAL_I2C_Master_Transmit+0x124>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000efa:	22ff      	movs	r2, #255	; 0xff
 8000efc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000efe:	9000      	str	r0, [sp, #0]
 8000f00:	e7a2      	b.n	8000e48 <HAL_I2C_Master_Transmit+0x6a>
          hi2c->XferSize = hi2c->XferCount;
 8000f02:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000f04:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8000f06:	b292      	uxth	r2, r2
 8000f08:	8522      	strh	r2, [r4, #40]	; 0x28
 8000f0a:	e7c6      	b.n	8000e9a <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 8000f0c:	2002      	movs	r0, #2
 8000f0e:	e7cf      	b.n	8000eb0 <HAL_I2C_Master_Transmit+0xd2>

08000f10 <HAL_I2C_Master_Receive>:
{
 8000f10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000f14:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f16:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000f1a:	2b20      	cmp	r3, #32
{
 8000f1c:	4604      	mov	r4, r0
 8000f1e:	460e      	mov	r6, r1
 8000f20:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f22:	f040 808c 	bne.w	800103e <HAL_I2C_Master_Receive+0x12e>
    __HAL_LOCK(hi2c);
 8000f26:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	f000 8087 	beq.w	800103e <HAL_I2C_Master_Receive+0x12e>
 8000f30:	2701      	movs	r7, #1
 8000f32:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8000f36:	f7ff fb89 	bl	800064c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f3a:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8000f3c:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f3e:	9000      	str	r0, [sp, #0]
 8000f40:	463a      	mov	r2, r7
 8000f42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f46:	4620      	mov	r0, r4
 8000f48:	f7ff fda1 	bl	8000a8e <I2C_WaitOnFlagUntilTimeout>
 8000f4c:	2800      	cmp	r0, #0
 8000f4e:	d14b      	bne.n	8000fe8 <HAL_I2C_Master_Receive+0xd8>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000f50:	2322      	movs	r3, #34	; 0x22
 8000f52:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000f56:	2310      	movs	r3, #16
 8000f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f5c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8000f5e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8000f64:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8000f6c:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f6e:	d927      	bls.n	8000fc0 <HAL_I2C_Master_Receive+0xb0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f70:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000f72:	f44f 5310 	mov.w	r3, #9216	; 0x2400
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f76:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000f78:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000f7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000f7e:	4631      	mov	r1, r6
 8000f80:	4620      	mov	r0, r4
 8000f82:	f7ff fd6f 	bl	8000a64 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000f86:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f88:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8000f8a:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f8c:	462a      	mov	r2, r5
 8000f8e:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8000f90:	bb03      	cbnz	r3, 8000fd4 <HAL_I2C_Master_Receive+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f92:	f7ff feac 	bl	8000cee <I2C_WaitOnSTOPFlagUntilTimeout>
 8000f96:	bb00      	cbnz	r0, 8000fda <HAL_I2C_Master_Receive+0xca>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f98:	6823      	ldr	r3, [r4, #0]
 8000f9a:	2120      	movs	r1, #32
 8000f9c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8000fa4:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8000fa8:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8000fac:	f022 0201 	bic.w	r2, r2, #1
 8000fb0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000fb2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000fb6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000fba:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8000fbe:	e010      	b.n	8000fe2 <HAL_I2C_Master_Receive+0xd2>
      hi2c->XferSize = hi2c->XferCount;
 8000fc0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000fc2:	f44f 5310 	mov.w	r3, #9216	; 0x2400
      hi2c->XferSize = hi2c->XferCount;
 8000fc6:	b292      	uxth	r2, r2
 8000fc8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000fca:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000fcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	e7d4      	b.n	8000f7e <HAL_I2C_Master_Receive+0x6e>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fd4:	f7ff fe4f 	bl	8000c76 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000fd8:	b140      	cbz	r0, 8000fec <HAL_I2C_Master_Receive+0xdc>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fda:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d103      	bne.n	8000fe8 <HAL_I2C_Master_Receive+0xd8>
          return HAL_ERROR;
 8000fe0:	2001      	movs	r0, #1
}
 8000fe2:	b003      	add	sp, #12
 8000fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return HAL_TIMEOUT;
 8000fe8:	2003      	movs	r0, #3
 8000fea:	e7fa      	b.n	8000fe2 <HAL_I2C_Master_Receive+0xd2>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8000fec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	6262      	str	r2, [r4, #36]	; 0x24
 8000ff2:	6822      	ldr	r2, [r4, #0]
 8000ff4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000ff6:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8000ff8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000ffa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000ffc:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8000ffe:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8001000:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8001002:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001004:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001006:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001008:	2a00      	cmp	r2, #0
 800100a:	d1bc      	bne.n	8000f86 <HAL_I2C_Master_Receive+0x76>
 800100c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800100e:	b29b      	uxth	r3, r3
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0b8      	beq.n	8000f86 <HAL_I2C_Master_Receive+0x76>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001014:	9500      	str	r5, [sp, #0]
 8001016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001018:	2180      	movs	r1, #128	; 0x80
 800101a:	4620      	mov	r0, r4
 800101c:	f7ff fd37 	bl	8000a8e <I2C_WaitOnFlagUntilTimeout>
 8001020:	2800      	cmp	r0, #0
 8001022:	d1e1      	bne.n	8000fe8 <HAL_I2C_Master_Receive+0xd8>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001024:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001026:	b29b      	uxth	r3, r3
 8001028:	2bff      	cmp	r3, #255	; 0xff
 800102a:	d903      	bls.n	8001034 <HAL_I2C_Master_Receive+0x124>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800102c:	22ff      	movs	r2, #255	; 0xff
 800102e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001030:	9000      	str	r0, [sp, #0]
 8001032:	e7a2      	b.n	8000f7a <HAL_I2C_Master_Receive+0x6a>
          hi2c->XferSize = hi2c->XferCount;
 8001034:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001036:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001038:	b292      	uxth	r2, r2
 800103a:	8522      	strh	r2, [r4, #40]	; 0x28
 800103c:	e7c6      	b.n	8000fcc <HAL_I2C_Master_Receive+0xbc>
    return HAL_BUSY;
 800103e:	2002      	movs	r0, #2
 8001040:	e7cf      	b.n	8000fe2 <HAL_I2C_Master_Receive+0xd2>

08001042 <HAL_I2C_Mem_Write>:
{
 8001042:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001046:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001048:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800104c:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 800104e:	2b20      	cmp	r3, #32
{
 8001050:	4604      	mov	r4, r0
 8001052:	460f      	mov	r7, r1
 8001054:	9203      	str	r2, [sp, #12]
 8001056:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 800105a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 800105e:	f040 80a6 	bne.w	80011ae <HAL_I2C_Mem_Write+0x16c>
    if ((pData == NULL) || (Size == 0U))
 8001062:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001064:	b91b      	cbnz	r3, 800106e <HAL_I2C_Mem_Write+0x2c>
      return  HAL_ERROR;
 8001066:	2001      	movs	r0, #1
}
 8001068:	b005      	add	sp, #20
 800106a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 800106e:	f1ba 0f00 	cmp.w	sl, #0
 8001072:	d0f8      	beq.n	8001066 <HAL_I2C_Mem_Write+0x24>
    __HAL_LOCK(hi2c);
 8001074:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001078:	2b01      	cmp	r3, #1
 800107a:	f000 8098 	beq.w	80011ae <HAL_I2C_Mem_Write+0x16c>
 800107e:	2501      	movs	r5, #1
 8001080:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001084:	f7ff fae2 	bl	800064c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001088:	2319      	movs	r3, #25
 800108a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800108c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800108e:	462a      	mov	r2, r5
 8001090:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001094:	4620      	mov	r0, r4
 8001096:	f7ff fcfa 	bl	8000a8e <I2C_WaitOnFlagUntilTimeout>
 800109a:	4680      	mov	r8, r0
 800109c:	b9d0      	cbnz	r0, 80010d4 <HAL_I2C_Mem_Write+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800109e:	2321      	movs	r3, #33	; 0x21
 80010a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80010a4:	2340      	movs	r3, #64	; 0x40
 80010a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80010aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010ac:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80010ae:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 80010b0:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80010b2:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80010b6:	9601      	str	r6, [sp, #4]
 80010b8:	f8cd 9000 	str.w	r9, [sp]
 80010bc:	465b      	mov	r3, fp
 80010be:	9a03      	ldr	r2, [sp, #12]
 80010c0:	4639      	mov	r1, r7
 80010c2:	4620      	mov	r0, r4
 80010c4:	f7ff fd70 	bl	8000ba8 <I2C_RequestMemoryWrite>
 80010c8:	b130      	cbz	r0, 80010d8 <HAL_I2C_Mem_Write+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80010cc:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	d0c8      	beq.n	8001066 <HAL_I2C_Mem_Write+0x24>
          return HAL_TIMEOUT;
 80010d4:	2003      	movs	r0, #3
 80010d6:	e7c7      	b.n	8001068 <HAL_I2C_Mem_Write+0x26>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80010da:	b29b      	uxth	r3, r3
 80010dc:	2bff      	cmp	r3, #255	; 0xff
 80010de:	d910      	bls.n	8001102 <HAL_I2C_Mem_Write+0xc0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010e0:	22ff      	movs	r2, #255	; 0xff
 80010e2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80010e4:	9000      	str	r0, [sp, #0]
 80010e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80010ea:	4639      	mov	r1, r7
 80010ec:	4620      	mov	r0, r4
 80010ee:	f7ff fcb9 	bl	8000a64 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010f2:	4632      	mov	r2, r6
 80010f4:	4649      	mov	r1, r9
 80010f6:	4620      	mov	r0, r4
 80010f8:	f7ff fd2d 	bl	8000b56 <I2C_WaitOnTXISFlagUntilTimeout>
 80010fc:	b148      	cbz	r0, 8001112 <HAL_I2C_Mem_Write+0xd0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001100:	e7e6      	b.n	80010d0 <HAL_I2C_Mem_Write+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 8001102:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001104:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001106:	b292      	uxth	r2, r2
 8001108:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800110a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	e7eb      	b.n	80010ea <HAL_I2C_Mem_Write+0xa8>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001112:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001114:	6822      	ldr	r2, [r4, #0]
 8001116:	1c59      	adds	r1, r3, #1
 8001118:	6261      	str	r1, [r4, #36]	; 0x24
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 800111e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001120:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001122:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8001124:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8001126:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001128:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800112a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800112c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 800112e:	b9ba      	cbnz	r2, 8001160 <HAL_I2C_Mem_Write+0x11e>
 8001130:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001132:	b29b      	uxth	r3, r3
 8001134:	b1a3      	cbz	r3, 8001160 <HAL_I2C_Mem_Write+0x11e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001136:	9600      	str	r6, [sp, #0]
 8001138:	464b      	mov	r3, r9
 800113a:	2180      	movs	r1, #128	; 0x80
 800113c:	4620      	mov	r0, r4
 800113e:	f7ff fca6 	bl	8000a8e <I2C_WaitOnFlagUntilTimeout>
 8001142:	2800      	cmp	r0, #0
 8001144:	d1c6      	bne.n	80010d4 <HAL_I2C_Mem_Write+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001146:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001148:	b29b      	uxth	r3, r3
 800114a:	2bff      	cmp	r3, #255	; 0xff
 800114c:	d927      	bls.n	800119e <HAL_I2C_Mem_Write+0x15c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800114e:	22ff      	movs	r2, #255	; 0xff
 8001150:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001152:	9000      	str	r0, [sp, #0]
 8001154:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001158:	4639      	mov	r1, r7
 800115a:	4620      	mov	r0, r4
 800115c:	f7ff fc82 	bl	8000a64 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8001160:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001162:	b29b      	uxth	r3, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1c4      	bne.n	80010f2 <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001168:	4632      	mov	r2, r6
 800116a:	4649      	mov	r1, r9
 800116c:	4620      	mov	r0, r4
 800116e:	f7ff fdbe 	bl	8000cee <I2C_WaitOnSTOPFlagUntilTimeout>
 8001172:	2800      	cmp	r0, #0
 8001174:	d1c3      	bne.n	80010fe <HAL_I2C_Mem_Write+0xbc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001176:	6823      	ldr	r3, [r4, #0]
 8001178:	2120      	movs	r1, #32
 800117a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001182:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001186:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800118a:	f022 0201 	bic.w	r2, r2, #1
 800118e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001190:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001194:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001198:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800119c:	e764      	b.n	8001068 <HAL_I2C_Mem_Write+0x26>
          hi2c->XferSize = hi2c->XferCount;
 800119e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011a0:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80011a2:	b292      	uxth	r2, r2
 80011a4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	e7d4      	b.n	8001158 <HAL_I2C_Mem_Write+0x116>
    return HAL_BUSY;
 80011ae:	2002      	movs	r0, #2
 80011b0:	e75a      	b.n	8001068 <HAL_I2C_Mem_Write+0x26>

080011b2 <HAL_I2C_Mem_Read>:
{
 80011b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011b6:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011b8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80011bc:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011be:	2b20      	cmp	r3, #32
{
 80011c0:	4604      	mov	r4, r0
 80011c2:	460f      	mov	r7, r1
 80011c4:	9203      	str	r2, [sp, #12]
 80011c6:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80011ca:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011ce:	f040 80ac 	bne.w	800132a <HAL_I2C_Mem_Read+0x178>
    if ((pData == NULL) || (Size == 0U))
 80011d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80011d4:	b91b      	cbnz	r3, 80011de <HAL_I2C_Mem_Read+0x2c>
      return  HAL_ERROR;
 80011d6:	2001      	movs	r0, #1
}
 80011d8:	b005      	add	sp, #20
 80011da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 80011de:	f1ba 0f00 	cmp.w	sl, #0
 80011e2:	d0f8      	beq.n	80011d6 <HAL_I2C_Mem_Read+0x24>
    __HAL_LOCK(hi2c);
 80011e4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	f000 809e 	beq.w	800132a <HAL_I2C_Mem_Read+0x178>
 80011ee:	2501      	movs	r5, #1
 80011f0:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80011f4:	f7ff fa2a 	bl	800064c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011f8:	2319      	movs	r3, #25
 80011fa:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80011fc:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011fe:	462a      	mov	r2, r5
 8001200:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001204:	4620      	mov	r0, r4
 8001206:	f7ff fc42 	bl	8000a8e <I2C_WaitOnFlagUntilTimeout>
 800120a:	4680      	mov	r8, r0
 800120c:	b9d0      	cbnz	r0, 8001244 <HAL_I2C_Mem_Read+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800120e:	2322      	movs	r3, #34	; 0x22
 8001210:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001214:	2340      	movs	r3, #64	; 0x40
 8001216:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800121a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800121c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800121e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8001220:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001222:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001226:	9601      	str	r6, [sp, #4]
 8001228:	f8cd 9000 	str.w	r9, [sp]
 800122c:	465b      	mov	r3, fp
 800122e:	9a03      	ldr	r2, [sp, #12]
 8001230:	4639      	mov	r1, r7
 8001232:	4620      	mov	r0, r4
 8001234:	f7ff fcec 	bl	8000c10 <I2C_RequestMemoryRead>
 8001238:	b130      	cbz	r0, 8001248 <HAL_I2C_Mem_Read+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800123a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800123c:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001240:	2b04      	cmp	r3, #4
 8001242:	d0c8      	beq.n	80011d6 <HAL_I2C_Mem_Read+0x24>
        return HAL_TIMEOUT;
 8001244:	2003      	movs	r0, #3
 8001246:	e7c7      	b.n	80011d8 <HAL_I2C_Mem_Read+0x26>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001248:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800124a:	b29b      	uxth	r3, r3
 800124c:	2bff      	cmp	r3, #255	; 0xff
 800124e:	d946      	bls.n	80012de <HAL_I2C_Mem_Read+0x12c>
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001250:	f44f 5310 	mov.w	r3, #9216	; 0x2400
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001254:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001256:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001258:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800125a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800125e:	4639      	mov	r1, r7
 8001260:	4620      	mov	r0, r4
 8001262:	f7ff fbff 	bl	8000a64 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001266:	9600      	str	r6, [sp, #0]
 8001268:	464b      	mov	r3, r9
 800126a:	2200      	movs	r2, #0
 800126c:	2104      	movs	r1, #4
 800126e:	4620      	mov	r0, r4
 8001270:	f7ff fc0d 	bl	8000a8e <I2C_WaitOnFlagUntilTimeout>
 8001274:	2800      	cmp	r0, #0
 8001276:	d1e5      	bne.n	8001244 <HAL_I2C_Mem_Read+0x92>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	6262      	str	r2, [r4, #36]	; 0x24
 800127e:	6822      	ldr	r2, [r4, #0]
 8001280:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001282:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8001284:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001286:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001288:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800128a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800128c:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800128e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001290:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001292:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001294:	b9ba      	cbnz	r2, 80012c6 <HAL_I2C_Mem_Read+0x114>
 8001296:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001298:	b29b      	uxth	r3, r3
 800129a:	b1a3      	cbz	r3, 80012c6 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800129c:	9600      	str	r6, [sp, #0]
 800129e:	464b      	mov	r3, r9
 80012a0:	2180      	movs	r1, #128	; 0x80
 80012a2:	4620      	mov	r0, r4
 80012a4:	f7ff fbf3 	bl	8000a8e <I2C_WaitOnFlagUntilTimeout>
 80012a8:	2800      	cmp	r0, #0
 80012aa:	d1cb      	bne.n	8001244 <HAL_I2C_Mem_Read+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	2bff      	cmp	r3, #255	; 0xff
 80012b2:	d91e      	bls.n	80012f2 <HAL_I2C_Mem_Read+0x140>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012b4:	22ff      	movs	r2, #255	; 0xff
 80012b6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80012b8:	9000      	str	r0, [sp, #0]
 80012ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80012be:	4639      	mov	r1, r7
 80012c0:	4620      	mov	r0, r4
 80012c2:	f7ff fbcf 	bl	8000a64 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80012c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1cb      	bne.n	8001266 <HAL_I2C_Mem_Read+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012ce:	4632      	mov	r2, r6
 80012d0:	4649      	mov	r1, r9
 80012d2:	4620      	mov	r0, r4
 80012d4:	f7ff fd0b 	bl	8000cee <I2C_WaitOnSTOPFlagUntilTimeout>
 80012d8:	b198      	cbz	r0, 8001302 <HAL_I2C_Mem_Read+0x150>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012dc:	e7b0      	b.n	8001240 <HAL_I2C_Mem_Read+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 80012de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80012e0:	f44f 5310 	mov.w	r3, #9216	; 0x2400
      hi2c->XferSize = hi2c->XferCount;
 80012e4:	b292      	uxth	r2, r2
 80012e6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012f0:	e7b5      	b.n	800125e <HAL_I2C_Mem_Read+0xac>
          hi2c->XferSize = hi2c->XferCount;
 80012f2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80012f4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80012f6:	b292      	uxth	r2, r2
 80012f8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80012fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	e7dd      	b.n	80012be <HAL_I2C_Mem_Read+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001302:	6823      	ldr	r3, [r4, #0]
 8001304:	2120      	movs	r1, #32
 8001306:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800130e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001312:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001316:	f022 0201 	bic.w	r2, r2, #1
 800131a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800131c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001320:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001324:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001328:	e756      	b.n	80011d8 <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 800132a:	2002      	movs	r0, #2
 800132c:	e754      	b.n	80011d8 <HAL_I2C_Mem_Read+0x26>

0800132e <HAL_I2C_IsDeviceReady>:
{
 800132e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001332:	461d      	mov	r5, r3
  __IO uint32_t I2C_Trials = 0U;
 8001334:	2300      	movs	r3, #0
 8001336:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001338:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800133c:	2b20      	cmp	r3, #32
{
 800133e:	4604      	mov	r4, r0
 8001340:	4690      	mov	r8, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001342:	d17c      	bne.n	800143e <HAL_I2C_IsDeviceReady+0x110>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001344:	6803      	ldr	r3, [r0, #0]
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 800134c:	d177      	bne.n	800143e <HAL_I2C_IsDeviceReady+0x110>
    __HAL_LOCK(hi2c);
 800134e:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8001352:	2a01      	cmp	r2, #1
 8001354:	d073      	beq.n	800143e <HAL_I2C_IsDeviceReady+0x110>
 8001356:	2201      	movs	r2, #1
 8001358:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 800135c:	f3c1 0609 	ubfx	r6, r1, #0, #10
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001360:	2224      	movs	r2, #36	; 0x24
 8001362:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001366:	f446 5920 	orr.w	r9, r6, #10240	; 0x2800
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800136a:	6443      	str	r3, [r0, #68]	; 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800136c:	68e3      	ldr	r3, [r4, #12]
 800136e:	6822      	ldr	r2, [r4, #0]
 8001370:	2b01      	cmp	r3, #1
 8001372:	bf06      	itte	eq
 8001374:	f046 7300 	orreq.w	r3, r6, #33554432	; 0x2000000
 8001378:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
 800137c:	464b      	movne	r3, r9
 800137e:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8001380:	f7ff f964 	bl	800064c <HAL_GetTick>
 8001384:	4607      	mov	r7, r0
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8001386:	6823      	ldr	r3, [r4, #0]
 8001388:	699a      	ldr	r2, [r3, #24]
 800138a:	0691      	lsls	r1, r2, #26
 800138c:	d512      	bpl.n	80013b4 <HAL_I2C_IsDeviceReady+0x86>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800138e:	699a      	ldr	r2, [r3, #24]
 8001390:	f012 0210 	ands.w	r2, r2, #16
 8001394:	d12a      	bne.n	80013ec <HAL_I2C_IsDeviceReady+0xbe>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001396:	9700      	str	r7, [sp, #0]
 8001398:	462b      	mov	r3, r5
 800139a:	2120      	movs	r1, #32
 800139c:	4620      	mov	r0, r4
 800139e:	f7ff fb76 	bl	8000a8e <I2C_WaitOnFlagUntilTimeout>
 80013a2:	b1c8      	cbz	r0, 80013d8 <HAL_I2C_IsDeviceReady+0xaa>
    return HAL_TIMEOUT;
 80013a4:	2003      	movs	r0, #3
 80013a6:	e01e      	b.n	80013e6 <HAL_I2C_IsDeviceReady+0xb8>
          if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80013a8:	f7ff f950 	bl	800064c <HAL_GetTick>
 80013ac:	1bc0      	subs	r0, r0, r7
 80013ae:	4285      	cmp	r5, r0
 80013b0:	d2e9      	bcs.n	8001386 <HAL_I2C_IsDeviceReady+0x58>
 80013b2:	e00a      	b.n	80013ca <HAL_I2C_IsDeviceReady+0x9c>
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 80013b4:	699a      	ldr	r2, [r3, #24]
 80013b6:	06d2      	lsls	r2, r2, #27
 80013b8:	d4e9      	bmi.n	800138e <HAL_I2C_IsDeviceReady+0x60>
 80013ba:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80013be:	2aa0      	cmp	r2, #160	; 0xa0
 80013c0:	d0e5      	beq.n	800138e <HAL_I2C_IsDeviceReady+0x60>
        if (Timeout != HAL_MAX_DELAY)
 80013c2:	1c68      	adds	r0, r5, #1
 80013c4:	d0e0      	beq.n	8001388 <HAL_I2C_IsDeviceReady+0x5a>
          if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80013c6:	2d00      	cmp	r5, #0
 80013c8:	d1ee      	bne.n	80013a8 <HAL_I2C_IsDeviceReady+0x7a>
    hi2c->State = HAL_I2C_STATE_READY;
 80013ca:	2320      	movs	r3, #32
 80013cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80013d0:	2300      	movs	r3, #0
 80013d2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80013d6:	e7e5      	b.n	80013a4 <HAL_I2C_IsDeviceReady+0x76>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013d8:	6822      	ldr	r2, [r4, #0]
 80013da:	2320      	movs	r3, #32
 80013dc:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 80013de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 80013e2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80013e6:	b004      	add	sp, #16
 80013e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80013ec:	2200      	movs	r2, #0
 80013ee:	9700      	str	r7, [sp, #0]
 80013f0:	462b      	mov	r3, r5
 80013f2:	2120      	movs	r1, #32
 80013f4:	4620      	mov	r0, r4
 80013f6:	f7ff fb4a 	bl	8000a8e <I2C_WaitOnFlagUntilTimeout>
 80013fa:	4602      	mov	r2, r0
 80013fc:	2800      	cmp	r0, #0
 80013fe:	d1d1      	bne.n	80013a4 <HAL_I2C_IsDeviceReady+0x76>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001400:	6823      	ldr	r3, [r4, #0]
 8001402:	2110      	movs	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001404:	f04f 0a20 	mov.w	sl, #32
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001408:	61d9      	str	r1, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800140a:	f8c3 a01c 	str.w	sl, [r3, #28]
      if (I2C_Trials++ == Trials)
 800140e:	9903      	ldr	r1, [sp, #12]
 8001410:	1c48      	adds	r0, r1, #1
 8001412:	4541      	cmp	r1, r8
 8001414:	9003      	str	r0, [sp, #12]
 8001416:	d10e      	bne.n	8001436 <HAL_I2C_IsDeviceReady+0x108>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001418:	6859      	ldr	r1, [r3, #4]
 800141a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800141e:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001420:	4620      	mov	r0, r4
 8001422:	9700      	str	r7, [sp, #0]
 8001424:	462b      	mov	r3, r5
 8001426:	4651      	mov	r1, sl
 8001428:	f7ff fb31 	bl	8000a8e <I2C_WaitOnFlagUntilTimeout>
 800142c:	2800      	cmp	r0, #0
 800142e:	d1b9      	bne.n	80013a4 <HAL_I2C_IsDeviceReady+0x76>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001430:	6823      	ldr	r3, [r4, #0]
 8001432:	f8c3 a01c 	str.w	sl, [r3, #28]
    while (I2C_Trials < Trials);
 8001436:	9b03      	ldr	r3, [sp, #12]
 8001438:	4598      	cmp	r8, r3
 800143a:	d897      	bhi.n	800136c <HAL_I2C_IsDeviceReady+0x3e>
 800143c:	e7c5      	b.n	80013ca <HAL_I2C_IsDeviceReady+0x9c>
    return HAL_BUSY;
 800143e:	2002      	movs	r0, #2
 8001440:	e7d1      	b.n	80013e6 <HAL_I2C_IsDeviceReady+0xb8>

08001442 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001442:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	2a20      	cmp	r2, #32
{
 800144a:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800144c:	d11d      	bne.n	800148a <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800144e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001452:	2b01      	cmp	r3, #1
 8001454:	d019      	beq.n	800148a <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001456:	2324      	movs	r3, #36	; 0x24
 8001458:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800145c:	6803      	ldr	r3, [r0, #0]
 800145e:	681c      	ldr	r4, [r3, #0]
 8001460:	f024 0401 	bic.w	r4, r4, #1
 8001464:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001466:	681c      	ldr	r4, [r3, #0]
 8001468:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800146c:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800146e:	681c      	ldr	r4, [r3, #0]
 8001470:	4321      	orrs	r1, r4
 8001472:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001474:	6819      	ldr	r1, [r3, #0]
 8001476:	f041 0101 	orr.w	r1, r1, #1
 800147a:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800147c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800147e:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001482:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001486:	4618      	mov	r0, r3
 8001488:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800148a:	2002      	movs	r0, #2
  }
}
 800148c:	bd10      	pop	{r4, pc}

0800148e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800148e:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001490:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8001494:	b2e4      	uxtb	r4, r4
 8001496:	2c20      	cmp	r4, #32
 8001498:	d11c      	bne.n	80014d4 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800149a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d018      	beq.n	80014d4 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014a2:	2324      	movs	r3, #36	; 0x24
 80014a4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014a8:	6803      	ldr	r3, [r0, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	f022 0201 	bic.w	r2, r2, #1
 80014b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80014b2:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80014b4:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80014b8:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80014bc:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	f042 0201 	orr.w	r2, r2, #1
 80014c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014c6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80014c8:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80014cc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80014d0:	4618      	mov	r0, r3
 80014d2:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80014d4:	2002      	movs	r0, #2
  }
}
 80014d6:	bd10      	pop	{r4, pc}

080014d8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d8:	6803      	ldr	r3, [r0, #0]
{
 80014da:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014de:	07df      	lsls	r7, r3, #31
{
 80014e0:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e2:	d411      	bmi.n	8001508 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e4:	682b      	ldr	r3, [r5, #0]
 80014e6:	079e      	lsls	r6, r3, #30
 80014e8:	f100 808b 	bmi.w	8001602 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ec:	682b      	ldr	r3, [r5, #0]
 80014ee:	071c      	lsls	r4, r3, #28
 80014f0:	f100 80fe 	bmi.w	80016f0 <HAL_RCC_OscConfig+0x218>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f4:	682b      	ldr	r3, [r5, #0]
 80014f6:	0758      	lsls	r0, r3, #29
 80014f8:	f100 8147 	bmi.w	800178a <HAL_RCC_OscConfig+0x2b2>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014fc:	69aa      	ldr	r2, [r5, #24]
 80014fe:	2a00      	cmp	r2, #0
 8001500:	f040 81db 	bne.w	80018ba <HAL_RCC_OscConfig+0x3e2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001504:	2000      	movs	r0, #0
 8001506:	e024      	b.n	8001552 <HAL_RCC_OscConfig+0x7a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001508:	4cbd      	ldr	r4, [pc, #756]	; (8001800 <HAL_RCC_OscConfig+0x328>)
 800150a:	6863      	ldr	r3, [r4, #4]
 800150c:	f003 030c 	and.w	r3, r3, #12
 8001510:	2b04      	cmp	r3, #4
 8001512:	d00a      	beq.n	800152a <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001514:	6863      	ldr	r3, [r4, #4]
 8001516:	f003 030c 	and.w	r3, r3, #12
 800151a:	2b08      	cmp	r3, #8
 800151c:	d11c      	bne.n	8001558 <HAL_RCC_OscConfig+0x80>
 800151e:	6863      	ldr	r3, [r4, #4]
 8001520:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001528:	d116      	bne.n	8001558 <HAL_RCC_OscConfig+0x80>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800152e:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001532:	6821      	ldr	r1, [r4, #0]
 8001534:	fa93 f3a3 	rbit	r3, r3
 8001538:	fab3 f383 	clz	r3, r3
 800153c:	f003 031f 	and.w	r3, r3, #31
 8001540:	2201      	movs	r2, #1
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	420b      	tst	r3, r1
 8001548:	d0cc      	beq.n	80014e4 <HAL_RCC_OscConfig+0xc>
 800154a:	686b      	ldr	r3, [r5, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1c9      	bne.n	80014e4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001550:	2001      	movs	r0, #1
}
 8001552:	b002      	add	sp, #8
 8001554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001558:	686b      	ldr	r3, [r5, #4]
 800155a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155e:	d11e      	bne.n	800159e <HAL_RCC_OscConfig+0xc6>
 8001560:	6823      	ldr	r3, [r4, #0]
 8001562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001566:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001568:	f7ff f870 	bl	800064c <HAL_GetTick>
 800156c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001570:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	2701      	movs	r7, #1
 8001574:	fa96 f3a6 	rbit	r3, r6
 8001578:	6822      	ldr	r2, [r4, #0]
 800157a:	fa96 f3a6 	rbit	r3, r6
 800157e:	fab3 f383 	clz	r3, r3
 8001582:	f003 031f 	and.w	r3, r3, #31
 8001586:	fa07 f303 	lsl.w	r3, r7, r3
 800158a:	4213      	tst	r3, r2
 800158c:	d1aa      	bne.n	80014e4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800158e:	f7ff f85d 	bl	800064c <HAL_GetTick>
 8001592:	eba0 0008 	sub.w	r0, r0, r8
 8001596:	2864      	cmp	r0, #100	; 0x64
 8001598:	d9ec      	bls.n	8001574 <HAL_RCC_OscConfig+0x9c>
            return HAL_TIMEOUT;
 800159a:	2003      	movs	r0, #3
 800159c:	e7d9      	b.n	8001552 <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159e:	bb0b      	cbnz	r3, 80015e4 <HAL_RCC_OscConfig+0x10c>
 80015a0:	6823      	ldr	r3, [r4, #0]
 80015a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a6:	6023      	str	r3, [r4, #0]
 80015a8:	6823      	ldr	r3, [r4, #0]
 80015aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80015b0:	f7ff f84c 	bl	800064c <HAL_GetTick>
 80015b4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80015b8:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ba:	2701      	movs	r7, #1
 80015bc:	fa96 f3a6 	rbit	r3, r6
 80015c0:	6822      	ldr	r2, [r4, #0]
 80015c2:	fa96 f3a6 	rbit	r3, r6
 80015c6:	fab3 f383 	clz	r3, r3
 80015ca:	f003 031f 	and.w	r3, r3, #31
 80015ce:	fa07 f303 	lsl.w	r3, r7, r3
 80015d2:	4213      	tst	r3, r2
 80015d4:	d086      	beq.n	80014e4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015d6:	f7ff f839 	bl	800064c <HAL_GetTick>
 80015da:	eba0 0008 	sub.w	r0, r0, r8
 80015de:	2864      	cmp	r0, #100	; 0x64
 80015e0:	d9ec      	bls.n	80015bc <HAL_RCC_OscConfig+0xe4>
 80015e2:	e7da      	b.n	800159a <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015e8:	6823      	ldr	r3, [r4, #0]
 80015ea:	d103      	bne.n	80015f4 <HAL_RCC_OscConfig+0x11c>
 80015ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f0:	6023      	str	r3, [r4, #0]
 80015f2:	e7b5      	b.n	8001560 <HAL_RCC_OscConfig+0x88>
 80015f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015f8:	6023      	str	r3, [r4, #0]
 80015fa:	6823      	ldr	r3, [r4, #0]
 80015fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001600:	e7b1      	b.n	8001566 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001602:	4c7f      	ldr	r4, [pc, #508]	; (8001800 <HAL_RCC_OscConfig+0x328>)
 8001604:	6863      	ldr	r3, [r4, #4]
 8001606:	f013 0f0c 	tst.w	r3, #12
 800160a:	d00a      	beq.n	8001622 <HAL_RCC_OscConfig+0x14a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800160c:	6863      	ldr	r3, [r4, #4]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	2b08      	cmp	r3, #8
 8001614:	d124      	bne.n	8001660 <HAL_RCC_OscConfig+0x188>
 8001616:	6863      	ldr	r3, [r4, #4]
 8001618:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800161c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001620:	d11e      	bne.n	8001660 <HAL_RCC_OscConfig+0x188>
 8001622:	2302      	movs	r3, #2
 8001624:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001628:	6821      	ldr	r1, [r4, #0]
 800162a:	fa93 f3a3 	rbit	r3, r3
 800162e:	fab3 f383 	clz	r3, r3
 8001632:	f003 031f 	and.w	r3, r3, #31
 8001636:	2201      	movs	r2, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	420b      	tst	r3, r1
 800163e:	d002      	beq.n	8001646 <HAL_RCC_OscConfig+0x16e>
 8001640:	68eb      	ldr	r3, [r5, #12]
 8001642:	4293      	cmp	r3, r2
 8001644:	d184      	bne.n	8001550 <HAL_RCC_OscConfig+0x78>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001646:	6821      	ldr	r1, [r4, #0]
 8001648:	23f8      	movs	r3, #248	; 0xf8
 800164a:	fa93 f3a3 	rbit	r3, r3
 800164e:	fab3 f283 	clz	r2, r3
 8001652:	692b      	ldr	r3, [r5, #16]
 8001654:	4093      	lsls	r3, r2
 8001656:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800165a:	4313      	orrs	r3, r2
 800165c:	6023      	str	r3, [r4, #0]
 800165e:	e745      	b.n	80014ec <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001660:	68ea      	ldr	r2, [r5, #12]
 8001662:	2601      	movs	r6, #1
 8001664:	b30a      	cbz	r2, 80016aa <HAL_RCC_OscConfig+0x1d2>
 8001666:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 800166a:	fab3 f383 	clz	r3, r3
 800166e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001672:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	2702      	movs	r7, #2
 800167a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800167c:	f7fe ffe6 	bl	800064c <HAL_GetTick>
 8001680:	4680      	mov	r8, r0
 8001682:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001686:	6822      	ldr	r2, [r4, #0]
 8001688:	fa97 f3a7 	rbit	r3, r7
 800168c:	fab3 f383 	clz	r3, r3
 8001690:	f003 031f 	and.w	r3, r3, #31
 8001694:	fa06 f303 	lsl.w	r3, r6, r3
 8001698:	4213      	tst	r3, r2
 800169a:	d1d4      	bne.n	8001646 <HAL_RCC_OscConfig+0x16e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800169c:	f7fe ffd6 	bl	800064c <HAL_GetTick>
 80016a0:	eba0 0008 	sub.w	r0, r0, r8
 80016a4:	2802      	cmp	r0, #2
 80016a6:	d9ec      	bls.n	8001682 <HAL_RCC_OscConfig+0x1aa>
 80016a8:	e777      	b.n	800159a <HAL_RCC_OscConfig+0xc2>
 80016aa:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80016ae:	fab3 f383 	clz	r3, r3
 80016b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	2702      	movs	r7, #2
 80016be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016c0:	f7fe ffc4 	bl	800064c <HAL_GetTick>
 80016c4:	4680      	mov	r8, r0
 80016c6:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ca:	6822      	ldr	r2, [r4, #0]
 80016cc:	fa97 f3a7 	rbit	r3, r7
 80016d0:	fab3 f383 	clz	r3, r3
 80016d4:	f003 031f 	and.w	r3, r3, #31
 80016d8:	fa06 f303 	lsl.w	r3, r6, r3
 80016dc:	4213      	tst	r3, r2
 80016de:	f43f af05 	beq.w	80014ec <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016e2:	f7fe ffb3 	bl	800064c <HAL_GetTick>
 80016e6:	eba0 0008 	sub.w	r0, r0, r8
 80016ea:	2802      	cmp	r0, #2
 80016ec:	d9eb      	bls.n	80016c6 <HAL_RCC_OscConfig+0x1ee>
 80016ee:	e754      	b.n	800159a <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016f0:	696a      	ldr	r2, [r5, #20]
 80016f2:	4e43      	ldr	r6, [pc, #268]	; (8001800 <HAL_RCC_OscConfig+0x328>)
 80016f4:	4943      	ldr	r1, [pc, #268]	; (8001804 <HAL_RCC_OscConfig+0x32c>)
 80016f6:	2401      	movs	r4, #1
 80016f8:	b31a      	cbz	r2, 8001742 <HAL_RCC_OscConfig+0x26a>
 80016fa:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80016fe:	fab3 f383 	clz	r3, r3
 8001702:	440b      	add	r3, r1
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	2702      	movs	r7, #2
 8001708:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 800170a:	f7fe ff9f 	bl	800064c <HAL_GetTick>
 800170e:	4680      	mov	r8, r0
 8001710:	fa97 f3a7 	rbit	r3, r7
 8001714:	fa97 f3a7 	rbit	r3, r7
 8001718:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800171e:	fa97 f3a7 	rbit	r3, r7
 8001722:	fab3 f383 	clz	r3, r3
 8001726:	f003 031f 	and.w	r3, r3, #31
 800172a:	fa04 f303 	lsl.w	r3, r4, r3
 800172e:	4213      	tst	r3, r2
 8001730:	f47f aee0 	bne.w	80014f4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001734:	f7fe ff8a 	bl	800064c <HAL_GetTick>
 8001738:	eba0 0008 	sub.w	r0, r0, r8
 800173c:	2802      	cmp	r0, #2
 800173e:	d9e7      	bls.n	8001710 <HAL_RCC_OscConfig+0x238>
 8001740:	e72b      	b.n	800159a <HAL_RCC_OscConfig+0xc2>
 8001742:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001746:	fab3 f383 	clz	r3, r3
 800174a:	440b      	add	r3, r1
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	2702      	movs	r7, #2
 8001750:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001752:	f7fe ff7b 	bl	800064c <HAL_GetTick>
 8001756:	4680      	mov	r8, r0
 8001758:	fa97 f3a7 	rbit	r3, r7
 800175c:	fa97 f3a7 	rbit	r3, r7
 8001760:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001764:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001766:	fa97 f3a7 	rbit	r3, r7
 800176a:	fab3 f383 	clz	r3, r3
 800176e:	f003 031f 	and.w	r3, r3, #31
 8001772:	fa04 f303 	lsl.w	r3, r4, r3
 8001776:	4213      	tst	r3, r2
 8001778:	f43f aebc 	beq.w	80014f4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800177c:	f7fe ff66 	bl	800064c <HAL_GetTick>
 8001780:	eba0 0008 	sub.w	r0, r0, r8
 8001784:	2802      	cmp	r0, #2
 8001786:	d9e7      	bls.n	8001758 <HAL_RCC_OscConfig+0x280>
 8001788:	e707      	b.n	800159a <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800178a:	4c1d      	ldr	r4, [pc, #116]	; (8001800 <HAL_RCC_OscConfig+0x328>)
 800178c:	69e3      	ldr	r3, [r4, #28]
 800178e:	00d9      	lsls	r1, r3, #3
 8001790:	d434      	bmi.n	80017fc <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	69e3      	ldr	r3, [r4, #28]
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001798:	61e3      	str	r3, [r4, #28]
 800179a:	69e3      	ldr	r3, [r4, #28]
 800179c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a0:	9301      	str	r3, [sp, #4]
 80017a2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80017a4:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a6:	4f18      	ldr	r7, [pc, #96]	; (8001808 <HAL_RCC_OscConfig+0x330>)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	05da      	lsls	r2, r3, #23
 80017ac:	d52e      	bpl.n	800180c <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ae:	68ab      	ldr	r3, [r5, #8]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d13c      	bne.n	800182e <HAL_RCC_OscConfig+0x356>
 80017b4:	6a23      	ldr	r3, [r4, #32]
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80017bc:	f7fe ff46 	bl	800064c <HAL_GetTick>
 80017c0:	2702      	movs	r7, #2
 80017c2:	4682      	mov	sl, r0
 80017c4:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c6:	f04f 0801 	mov.w	r8, #1
 80017ca:	fa97 f3a7 	rbit	r3, r7
 80017ce:	fa97 f3a7 	rbit	r3, r7
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d069      	beq.n	80018aa <HAL_RCC_OscConfig+0x3d2>
 80017d6:	6a22      	ldr	r2, [r4, #32]
 80017d8:	fa99 f3a9 	rbit	r3, r9
 80017dc:	fab3 f383 	clz	r3, r3
 80017e0:	f003 031f 	and.w	r3, r3, #31
 80017e4:	fa08 f303 	lsl.w	r3, r8, r3
 80017e8:	4213      	tst	r3, r2
 80017ea:	d056      	beq.n	800189a <HAL_RCC_OscConfig+0x3c2>
    if(pwrclkchanged == SET)
 80017ec:	2e00      	cmp	r6, #0
 80017ee:	f43f ae85 	beq.w	80014fc <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f2:	69e3      	ldr	r3, [r4, #28]
 80017f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f8:	61e3      	str	r3, [r4, #28]
 80017fa:	e67f      	b.n	80014fc <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80017fc:	2600      	movs	r6, #0
 80017fe:	e7d2      	b.n	80017a6 <HAL_RCC_OscConfig+0x2ce>
 8001800:	40021000 	.word	0x40021000
 8001804:	10908120 	.word	0x10908120
 8001808:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001812:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001814:	f7fe ff1a 	bl	800064c <HAL_GetTick>
 8001818:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	05db      	lsls	r3, r3, #23
 800181e:	d4c6      	bmi.n	80017ae <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001820:	f7fe ff14 	bl	800064c <HAL_GetTick>
 8001824:	eba0 0008 	sub.w	r0, r0, r8
 8001828:	2864      	cmp	r0, #100	; 0x64
 800182a:	d9f6      	bls.n	800181a <HAL_RCC_OscConfig+0x342>
 800182c:	e6b5      	b.n	800159a <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800182e:	bb33      	cbnz	r3, 800187e <HAL_RCC_OscConfig+0x3a6>
 8001830:	6a23      	ldr	r3, [r4, #32]
 8001832:	f023 0301 	bic.w	r3, r3, #1
 8001836:	6223      	str	r3, [r4, #32]
 8001838:	6a23      	ldr	r3, [r4, #32]
 800183a:	f023 0304 	bic.w	r3, r3, #4
 800183e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001840:	f7fe ff04 	bl	800064c <HAL_GetTick>
 8001844:	2702      	movs	r7, #2
 8001846:	4682      	mov	sl, r0
 8001848:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800184a:	f04f 0801 	mov.w	r8, #1
 800184e:	fa97 f3a7 	rbit	r3, r7
 8001852:	fa97 f3a7 	rbit	r3, r7
 8001856:	b363      	cbz	r3, 80018b2 <HAL_RCC_OscConfig+0x3da>
 8001858:	6a22      	ldr	r2, [r4, #32]
 800185a:	fa99 f3a9 	rbit	r3, r9
 800185e:	fab3 f383 	clz	r3, r3
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	fa08 f303 	lsl.w	r3, r8, r3
 800186a:	4213      	tst	r3, r2
 800186c:	d0be      	beq.n	80017ec <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800186e:	f7fe feed 	bl	800064c <HAL_GetTick>
 8001872:	eba0 000a 	sub.w	r0, r0, sl
 8001876:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800187a:	d9e8      	bls.n	800184e <HAL_RCC_OscConfig+0x376>
 800187c:	e68d      	b.n	800159a <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800187e:	2b05      	cmp	r3, #5
 8001880:	6a23      	ldr	r3, [r4, #32]
 8001882:	d103      	bne.n	800188c <HAL_RCC_OscConfig+0x3b4>
 8001884:	f043 0304 	orr.w	r3, r3, #4
 8001888:	6223      	str	r3, [r4, #32]
 800188a:	e793      	b.n	80017b4 <HAL_RCC_OscConfig+0x2dc>
 800188c:	f023 0301 	bic.w	r3, r3, #1
 8001890:	6223      	str	r3, [r4, #32]
 8001892:	6a23      	ldr	r3, [r4, #32]
 8001894:	f023 0304 	bic.w	r3, r3, #4
 8001898:	e78f      	b.n	80017ba <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800189a:	f7fe fed7 	bl	800064c <HAL_GetTick>
 800189e:	eba0 000a 	sub.w	r0, r0, sl
 80018a2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80018a6:	d990      	bls.n	80017ca <HAL_RCC_OscConfig+0x2f2>
 80018a8:	e677      	b.n	800159a <HAL_RCC_OscConfig+0xc2>
 80018aa:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80018b0:	e792      	b.n	80017d8 <HAL_RCC_OscConfig+0x300>
 80018b2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80018b8:	e7cf      	b.n	800185a <HAL_RCC_OscConfig+0x382>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ba:	4c44      	ldr	r4, [pc, #272]	; (80019cc <HAL_RCC_OscConfig+0x4f4>)
 80018bc:	6863      	ldr	r3, [r4, #4]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	f43f ae44 	beq.w	8001550 <HAL_RCC_OscConfig+0x78>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c8:	2a02      	cmp	r2, #2
 80018ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018ce:	d158      	bne.n	8001982 <HAL_RCC_OscConfig+0x4aa>
 80018d0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80018d4:	fab3 f383 	clz	r3, r3
 80018d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018e6:	f7fe feb1 	bl	800064c <HAL_GetTick>
 80018ea:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80018ee:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f0:	2601      	movs	r6, #1
 80018f2:	fa97 f3a7 	rbit	r3, r7
 80018f6:	6822      	ldr	r2, [r4, #0]
 80018f8:	fa97 f3a7 	rbit	r3, r7
 80018fc:	fab3 f383 	clz	r3, r3
 8001900:	f003 031f 	and.w	r3, r3, #31
 8001904:	fa06 f303 	lsl.w	r3, r6, r3
 8001908:	4213      	tst	r3, r2
 800190a:	d133      	bne.n	8001974 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800190c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800190e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001910:	f023 030f 	bic.w	r3, r3, #15
 8001914:	4313      	orrs	r3, r2
 8001916:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001918:	6862      	ldr	r2, [r4, #4]
 800191a:	6a2b      	ldr	r3, [r5, #32]
 800191c:	69e9      	ldr	r1, [r5, #28]
 800191e:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8001922:	430b      	orrs	r3, r1
 8001924:	4313      	orrs	r3, r2
 8001926:	6063      	str	r3, [r4, #4]
 8001928:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800192c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001930:	fab3 f383 	clz	r3, r3
 8001934:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001938:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001942:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001944:	f7fe fe82 	bl	800064c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001948:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800194a:	4607      	mov	r7, r0
 800194c:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001950:	6822      	ldr	r2, [r4, #0]
 8001952:	fa95 f3a5 	rbit	r3, r5
 8001956:	fab3 f383 	clz	r3, r3
 800195a:	f003 031f 	and.w	r3, r3, #31
 800195e:	fa06 f303 	lsl.w	r3, r6, r3
 8001962:	4213      	tst	r3, r2
 8001964:	f47f adce 	bne.w	8001504 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001968:	f7fe fe70 	bl	800064c <HAL_GetTick>
 800196c:	1bc0      	subs	r0, r0, r7
 800196e:	2802      	cmp	r0, #2
 8001970:	d9ec      	bls.n	800194c <HAL_RCC_OscConfig+0x474>
 8001972:	e612      	b.n	800159a <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001974:	f7fe fe6a 	bl	800064c <HAL_GetTick>
 8001978:	eba0 0008 	sub.w	r0, r0, r8
 800197c:	2802      	cmp	r0, #2
 800197e:	d9b8      	bls.n	80018f2 <HAL_RCC_OscConfig+0x41a>
 8001980:	e60b      	b.n	800159a <HAL_RCC_OscConfig+0xc2>
 8001982:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001986:	fab3 f383 	clz	r3, r3
 800198a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800198e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001998:	f7fe fe58 	bl	800064c <HAL_GetTick>
 800199c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80019a0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a2:	2601      	movs	r6, #1
 80019a4:	fa95 f3a5 	rbit	r3, r5
 80019a8:	6822      	ldr	r2, [r4, #0]
 80019aa:	fa95 f3a5 	rbit	r3, r5
 80019ae:	fab3 f383 	clz	r3, r3
 80019b2:	f003 031f 	and.w	r3, r3, #31
 80019b6:	fa06 f303 	lsl.w	r3, r6, r3
 80019ba:	4213      	tst	r3, r2
 80019bc:	f43f ada2 	beq.w	8001504 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c0:	f7fe fe44 	bl	800064c <HAL_GetTick>
 80019c4:	1bc0      	subs	r0, r0, r7
 80019c6:	2802      	cmp	r0, #2
 80019c8:	d9ec      	bls.n	80019a4 <HAL_RCC_OscConfig+0x4cc>
 80019ca:	e5e6      	b.n	800159a <HAL_RCC_OscConfig+0xc2>
 80019cc:	40021000 	.word	0x40021000

080019d0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80019d0:	4911      	ldr	r1, [pc, #68]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x48>)
 80019d2:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019d4:	f003 020c 	and.w	r2, r3, #12
 80019d8:	2a08      	cmp	r2, #8
 80019da:	d11a      	bne.n	8001a12 <HAL_RCC_GetSysClockFreq+0x42>
 80019dc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80019e0:	fa92 f2a2 	rbit	r2, r2
 80019e4:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80019e6:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80019ea:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80019ec:	fa90 f0a0 	rbit	r0, r0
 80019f0:	fab0 f080 	clz	r0, r0
 80019f4:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80019f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80019fc:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80019fe:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001a00:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001a02:	4807      	ldr	r0, [pc, #28]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x50>)
 8001a04:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001a06:	4807      	ldr	r0, [pc, #28]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x54>)
 8001a08:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001a0c:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001a0e:	4348      	muls	r0, r1
 8001a10:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001a12:	4804      	ldr	r0, [pc, #16]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	08008cf4 	.word	0x08008cf4
 8001a20:	08008d04 	.word	0x08008d04
 8001a24:	007a1200 	.word	0x007a1200

08001a28 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a28:	4a5c      	ldr	r2, [pc, #368]	; (8001b9c <HAL_RCC_ClockConfig+0x174>)
 8001a2a:	6813      	ldr	r3, [r2, #0]
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	428b      	cmp	r3, r1
{
 8001a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a36:	4606      	mov	r6, r0
 8001a38:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a3a:	d330      	bcc.n	8001a9e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a3c:	6832      	ldr	r2, [r6, #0]
 8001a3e:	0791      	lsls	r1, r2, #30
 8001a40:	d43a      	bmi.n	8001ab8 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a42:	07d2      	lsls	r2, r2, #31
 8001a44:	d440      	bmi.n	8001ac8 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a46:	4a55      	ldr	r2, [pc, #340]	; (8001b9c <HAL_RCC_ClockConfig+0x174>)
 8001a48:	6813      	ldr	r3, [r2, #0]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	429d      	cmp	r5, r3
 8001a50:	f0c0 8092 	bcc.w	8001b78 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a54:	6832      	ldr	r2, [r6, #0]
 8001a56:	4c52      	ldr	r4, [pc, #328]	; (8001ba0 <HAL_RCC_ClockConfig+0x178>)
 8001a58:	f012 0f04 	tst.w	r2, #4
 8001a5c:	f040 8097 	bne.w	8001b8e <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a60:	0713      	lsls	r3, r2, #28
 8001a62:	d506      	bpl.n	8001a72 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a64:	6863      	ldr	r3, [r4, #4]
 8001a66:	6932      	ldr	r2, [r6, #16]
 8001a68:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a6c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a70:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a72:	f7ff ffad 	bl	80019d0 <HAL_RCC_GetSysClockFreq>
 8001a76:	6863      	ldr	r3, [r4, #4]
 8001a78:	22f0      	movs	r2, #240	; 0xf0
 8001a7a:	fa92 f2a2 	rbit	r2, r2
 8001a7e:	fab2 f282 	clz	r2, r2
 8001a82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a86:	40d3      	lsrs	r3, r2
 8001a88:	4a46      	ldr	r2, [pc, #280]	; (8001ba4 <HAL_RCC_ClockConfig+0x17c>)
 8001a8a:	5cd3      	ldrb	r3, [r2, r3]
 8001a8c:	40d8      	lsrs	r0, r3
 8001a8e:	4b46      	ldr	r3, [pc, #280]	; (8001ba8 <HAL_RCC_ClockConfig+0x180>)
 8001a90:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a92:	2000      	movs	r0, #0
 8001a94:	f7fe fdac 	bl	80005f0 <HAL_InitTick>
  return HAL_OK;
 8001a98:	2000      	movs	r0, #0
}
 8001a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9e:	6813      	ldr	r3, [r2, #0]
 8001aa0:	f023 0307 	bic.w	r3, r3, #7
 8001aa4:	430b      	orrs	r3, r1
 8001aa6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001aa8:	6813      	ldr	r3, [r2, #0]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	4299      	cmp	r1, r3
 8001ab0:	d0c4      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab8:	4939      	ldr	r1, [pc, #228]	; (8001ba0 <HAL_RCC_ClockConfig+0x178>)
 8001aba:	68b0      	ldr	r0, [r6, #8]
 8001abc:	684b      	ldr	r3, [r1, #4]
 8001abe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ac2:	4303      	orrs	r3, r0
 8001ac4:	604b      	str	r3, [r1, #4]
 8001ac6:	e7bc      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac8:	6872      	ldr	r2, [r6, #4]
 8001aca:	4c35      	ldr	r4, [pc, #212]	; (8001ba0 <HAL_RCC_ClockConfig+0x178>)
 8001acc:	2a01      	cmp	r2, #1
 8001ace:	d128      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xfa>
 8001ad0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ad4:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad8:	6821      	ldr	r1, [r4, #0]
 8001ada:	fa93 f3a3 	rbit	r3, r3
 8001ade:	fab3 f383 	clz	r3, r3
 8001ae2:	f003 031f 	and.w	r3, r3, #31
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aec:	d0e1      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aee:	6863      	ldr	r3, [r4, #4]
 8001af0:	f023 0303 	bic.w	r3, r3, #3
 8001af4:	431a      	orrs	r2, r3
 8001af6:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8001af8:	f7fe fda8 	bl	800064c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001afc:	6873      	ldr	r3, [r6, #4]
 8001afe:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8001b00:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b02:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b06:	d11f      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b08:	6863      	ldr	r3, [r4, #4]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d099      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b12:	f7fe fd9b 	bl	800064c <HAL_GetTick>
 8001b16:	1bc0      	subs	r0, r0, r7
 8001b18:	4540      	cmp	r0, r8
 8001b1a:	d9f5      	bls.n	8001b08 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b22:	2a02      	cmp	r2, #2
 8001b24:	bf0c      	ite	eq
 8001b26:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001b2a:	2302      	movne	r3, #2
 8001b2c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b30:	6820      	ldr	r0, [r4, #0]
 8001b32:	fa93 f3a3 	rbit	r3, r3
 8001b36:	fab3 f383 	clz	r3, r3
 8001b3a:	f003 031f 	and.w	r3, r3, #31
 8001b3e:	2101      	movs	r1, #1
 8001b40:	fa01 f303 	lsl.w	r3, r1, r3
 8001b44:	4203      	tst	r3, r0
 8001b46:	e7d1      	b.n	8001aec <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d110      	bne.n	8001b6e <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b4c:	6863      	ldr	r3, [r4, #4]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	f43f af77 	beq.w	8001a46 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b58:	f7fe fd78 	bl	800064c <HAL_GetTick>
 8001b5c:	1bc0      	subs	r0, r0, r7
 8001b5e:	4540      	cmp	r0, r8
 8001b60:	d9f4      	bls.n	8001b4c <HAL_RCC_ClockConfig+0x124>
 8001b62:	e7db      	b.n	8001b1c <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b64:	f7fe fd72 	bl	800064c <HAL_GetTick>
 8001b68:	1bc0      	subs	r0, r0, r7
 8001b6a:	4540      	cmp	r0, r8
 8001b6c:	d8d6      	bhi.n	8001b1c <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b6e:	6863      	ldr	r3, [r4, #4]
 8001b70:	f013 0f0c 	tst.w	r3, #12
 8001b74:	d1f6      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x13c>
 8001b76:	e766      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b78:	6813      	ldr	r3, [r2, #0]
 8001b7a:	f023 0307 	bic.w	r3, r3, #7
 8001b7e:	432b      	orrs	r3, r5
 8001b80:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b82:	6813      	ldr	r3, [r2, #0]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	429d      	cmp	r5, r3
 8001b8a:	d192      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0x8a>
 8001b8c:	e762      	b.n	8001a54 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b8e:	6863      	ldr	r3, [r4, #4]
 8001b90:	68f1      	ldr	r1, [r6, #12]
 8001b92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b96:	430b      	orrs	r3, r1
 8001b98:	6063      	str	r3, [r4, #4]
 8001b9a:	e761      	b.n	8001a60 <HAL_RCC_ClockConfig+0x38>
 8001b9c:	40022000 	.word	0x40022000
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	0800900c 	.word	0x0800900c
 8001ba8:	20000078 	.word	0x20000078

08001bac <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001bac:	4b01      	ldr	r3, [pc, #4]	; (8001bb4 <HAL_RCC_GetHCLKFreq+0x8>)
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20000078 	.word	0x20000078

08001bb8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	fa92 f2a2 	rbit	r2, r2
 8001bc4:	fab2 f282 	clz	r2, r2
 8001bc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001bcc:	40d3      	lsrs	r3, r2
 8001bce:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bd0:	5cd3      	ldrb	r3, [r2, r3]
 8001bd2:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001bd4:	6810      	ldr	r0, [r2, #0]
}    
 8001bd6:	40d8      	lsrs	r0, r3
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	0800901c 	.word	0x0800901c
 8001be4:	20000078 	.word	0x20000078

08001be8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bea:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	fa92 f2a2 	rbit	r2, r2
 8001bf4:	fab2 f282 	clz	r2, r2
 8001bf8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001bfc:	40d3      	lsrs	r3, r2
 8001bfe:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c00:	5cd3      	ldrb	r3, [r2, r3]
 8001c02:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001c04:	6810      	ldr	r0, [r2, #0]
} 
 8001c06:	40d8      	lsrs	r0, r3
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	0800901c 	.word	0x0800901c
 8001c14:	20000078 	.word	0x20000078

08001c18 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c18:	6803      	ldr	r3, [r0, #0]
{
 8001c1a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c1e:	03df      	lsls	r7, r3, #15
{
 8001c20:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c22:	d523      	bpl.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c24:	4d9b      	ldr	r5, [pc, #620]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c26:	69eb      	ldr	r3, [r5, #28]
 8001c28:	00de      	lsls	r6, r3, #3
 8001c2a:	f100 80d7 	bmi.w	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	69eb      	ldr	r3, [r5, #28]
 8001c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c34:	61eb      	str	r3, [r5, #28]
 8001c36:	69eb      	ldr	r3, [r5, #28]
 8001c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	9301      	str	r3, [sp, #4]
 8001c3e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c40:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c42:	4f95      	ldr	r7, [pc, #596]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	05d8      	lsls	r0, r3, #23
 8001c48:	f140 80ca 	bpl.w	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c4c:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c4e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001c52:	f040 80da 	bne.w	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001c56:	6a2b      	ldr	r3, [r5, #32]
 8001c58:	6862      	ldr	r2, [r4, #4]
 8001c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c62:	b11e      	cbz	r6, 8001c6c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c64:	69eb      	ldr	r3, [r5, #28]
 8001c66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c6c:	6820      	ldr	r0, [r4, #0]
 8001c6e:	07c3      	lsls	r3, r0, #31
 8001c70:	d506      	bpl.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c72:	4a88      	ldr	r2, [pc, #544]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c74:	68a1      	ldr	r1, [r4, #8]
 8001c76:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c78:	f023 0303 	bic.w	r3, r3, #3
 8001c7c:	430b      	orrs	r3, r1
 8001c7e:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c80:	0787      	lsls	r7, r0, #30
 8001c82:	d506      	bpl.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c84:	4a83      	ldr	r2, [pc, #524]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c86:	68e1      	ldr	r1, [r4, #12]
 8001c88:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c8a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001c8e:	430b      	orrs	r3, r1
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001c92:	0746      	lsls	r6, r0, #29
 8001c94:	d506      	bpl.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001c96:	4a7f      	ldr	r2, [pc, #508]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c98:	6921      	ldr	r1, [r4, #16]
 8001c9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c9c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001ca0:	430b      	orrs	r3, r1
 8001ca2:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ca4:	0685      	lsls	r5, r0, #26
 8001ca6:	d506      	bpl.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ca8:	4a7a      	ldr	r2, [pc, #488]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001caa:	69e1      	ldr	r1, [r4, #28]
 8001cac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001cae:	f023 0310 	bic.w	r3, r3, #16
 8001cb2:	430b      	orrs	r3, r1
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001cb6:	0381      	lsls	r1, r0, #14
 8001cb8:	d506      	bpl.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001cba:	4a76      	ldr	r2, [pc, #472]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001cbc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001cbe:	6853      	ldr	r3, [r2, #4]
 8001cc0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001cc4:	430b      	orrs	r3, r1
 8001cc6:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001cc8:	0642      	lsls	r2, r0, #25
 8001cca:	d506      	bpl.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ccc:	4a71      	ldr	r2, [pc, #452]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001cce:	6a21      	ldr	r1, [r4, #32]
 8001cd0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001cd2:	f023 0320 	bic.w	r3, r3, #32
 8001cd6:	430b      	orrs	r3, r1
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001cda:	0343      	lsls	r3, r0, #13
 8001cdc:	d506      	bpl.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001cde:	4a6d      	ldr	r2, [pc, #436]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001ce0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001ce2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ce8:	430b      	orrs	r3, r1
 8001cea:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001cec:	0707      	lsls	r7, r0, #28
 8001cee:	d506      	bpl.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001cf0:	4a68      	ldr	r2, [pc, #416]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001cf2:	6961      	ldr	r1, [r4, #20]
 8001cf4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001cf6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001cfa:	430b      	orrs	r3, r1
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001cfe:	06c6      	lsls	r6, r0, #27
 8001d00:	d506      	bpl.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001d02:	4a64      	ldr	r2, [pc, #400]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d04:	69a1      	ldr	r1, [r4, #24]
 8001d06:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001d08:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001d0c:	430b      	orrs	r3, r1
 8001d0e:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001d10:	0585      	lsls	r5, r0, #22
 8001d12:	d506      	bpl.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d14:	4a5f      	ldr	r2, [pc, #380]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d16:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001d18:	6853      	ldr	r3, [r2, #4]
 8001d1a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d1e:	430b      	orrs	r3, r1
 8001d20:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001d22:	0601      	lsls	r1, r0, #24
 8001d24:	d506      	bpl.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001d26:	4a5b      	ldr	r2, [pc, #364]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d28:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001d2a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d2c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001d30:	430b      	orrs	r3, r1
 8001d32:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001d34:	05c2      	lsls	r2, r0, #23
 8001d36:	d506      	bpl.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001d38:	4a56      	ldr	r2, [pc, #344]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d3a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001d3c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d3e:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8001d42:	430b      	orrs	r3, r1
 8001d44:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001d46:	04c3      	lsls	r3, r0, #19
 8001d48:	d506      	bpl.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001d4a:	4a52      	ldr	r2, [pc, #328]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d4e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d54:	430b      	orrs	r3, r1
 8001d56:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001d58:	0487      	lsls	r7, r0, #18
 8001d5a:	d506      	bpl.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001d5c:	4a4d      	ldr	r2, [pc, #308]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d5e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001d60:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001d62:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d66:	430b      	orrs	r3, r1
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8001d6a:	02c6      	lsls	r6, r0, #11
 8001d6c:	d506      	bpl.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8001d6e:	4a49      	ldr	r2, [pc, #292]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d70:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001d72:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001d74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d78:	430b      	orrs	r3, r1
 8001d7a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8001d7c:	0285      	lsls	r5, r0, #10
 8001d7e:	d506      	bpl.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8001d80:	4a44      	ldr	r2, [pc, #272]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d82:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001d84:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001d86:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001d8a:	430b      	orrs	r3, r1
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001d8e:	0241      	lsls	r1, r0, #9
 8001d90:	d506      	bpl.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001d92:	4a40      	ldr	r2, [pc, #256]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d94:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001d96:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001d98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d9c:	430b      	orrs	r3, r1
 8001d9e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8001da0:	0202      	lsls	r2, r0, #8
 8001da2:	d506      	bpl.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8001da4:	4a3b      	ldr	r2, [pc, #236]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001da6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001da8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001daa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001dae:	430b      	orrs	r3, r1
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8001db2:	01c3      	lsls	r3, r0, #7
 8001db4:	d506      	bpl.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8001db6:	4a37      	ldr	r2, [pc, #220]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001db8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001dba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001dbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001dc0:	430b      	orrs	r3, r1
 8001dc2:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8001dc4:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8001dc8:	d01c      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8001dca:	4a32      	ldr	r2, [pc, #200]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001dcc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001dce:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001dd0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001dd4:	430b      	orrs	r3, r1
 8001dd6:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001dd8:	2000      	movs	r0, #0
 8001dda:	e013      	b.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 8001ddc:	2600      	movs	r6, #0
 8001dde:	e730      	b.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001de8:	f7fe fc30 	bl	800064c <HAL_GetTick>
 8001dec:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	05d9      	lsls	r1, r3, #23
 8001df2:	f53f af2b 	bmi.w	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df6:	f7fe fc29 	bl	800064c <HAL_GetTick>
 8001dfa:	eba0 0008 	sub.w	r0, r0, r8
 8001dfe:	2864      	cmp	r0, #100	; 0x64
 8001e00:	d9f5      	bls.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 8001e02:	2003      	movs	r0, #3
}
 8001e04:	b002      	add	sp, #8
 8001e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e0a:	6862      	ldr	r2, [r4, #4]
 8001e0c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001e10:	4293      	cmp	r3, r2
 8001e12:	f43f af20 	beq.w	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e16:	6a29      	ldr	r1, [r5, #32]
 8001e18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e1c:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8001e20:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e24:	f8df e074 	ldr.w	lr, [pc, #116]	; 8001e9c <HAL_RCCEx_PeriphCLKConfig+0x284>
 8001e28:	fab2 f282 	clz	r2, r2
 8001e2c:	4472      	add	r2, lr
 8001e2e:	0092      	lsls	r2, r2, #2
 8001e30:	2701      	movs	r7, #1
 8001e32:	6017      	str	r7, [r2, #0]
 8001e34:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e38:	fab3 f383 	clz	r3, r3
 8001e3c:	4473      	add	r3, lr
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e44:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8001e46:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e48:	f57f af05 	bpl.w	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8001e4c:	f7fe fbfe 	bl	800064c <HAL_GetTick>
 8001e50:	f04f 0802 	mov.w	r8, #2
 8001e54:	4682      	mov	sl, r0
 8001e56:	46c1      	mov	r9, r8
 8001e58:	fa98 f3a8 	rbit	r3, r8
 8001e5c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e60:	b19b      	cbz	r3, 8001e8a <HAL_RCCEx_PeriphCLKConfig+0x272>
 8001e62:	6a2a      	ldr	r2, [r5, #32]
 8001e64:	fa99 f3a9 	rbit	r3, r9
 8001e68:	fab3 f383 	clz	r3, r3
 8001e6c:	f003 031f 	and.w	r3, r3, #31
 8001e70:	fa07 f303 	lsl.w	r3, r7, r3
 8001e74:	4213      	tst	r3, r2
 8001e76:	f47f aeee 	bne.w	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7a:	f7fe fbe7 	bl	800064c <HAL_GetTick>
 8001e7e:	eba0 000a 	sub.w	r0, r0, sl
 8001e82:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001e86:	d9e7      	bls.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8001e88:	e7bb      	b.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8001e8a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001e90:	e7e8      	b.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8001e92:	bf00      	nop
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40007000 	.word	0x40007000
 8001e9c:	10908100 	.word	0x10908100

08001ea0 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001ea0:	6802      	ldr	r2, [r0, #0]
{
 8001ea2:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001ea4:	68d3      	ldr	r3, [r2, #12]
 8001ea6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001eaa:	60d3      	str	r3, [r2, #12]
{
 8001eac:	4604      	mov	r4, r0
  
  tickstart = HAL_GetTick();
 8001eae:	f7fe fbcd 	bl	800064c <HAL_GetTick>
 8001eb2:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	069b      	lsls	r3, r3, #26
 8001eba:	d501      	bpl.n	8001ec0 <HAL_RTC_WaitForSynchro+0x20>
    {       
      return HAL_TIMEOUT;
    } 
  }

  return HAL_OK;
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8001ec0:	f7fe fbc4 	bl	800064c <HAL_GetTick>
 8001ec4:	1b40      	subs	r0, r0, r5
 8001ec6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001eca:	d9f3      	bls.n	8001eb4 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8001ecc:	2003      	movs	r0, #3
}
 8001ece:	bd38      	pop	{r3, r4, r5, pc}

08001ed0 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout 
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001ed0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001ed2:	6803      	ldr	r3, [r0, #0]
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	0652      	lsls	r2, r2, #25
{
 8001ed8:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001eda:	d501      	bpl.n	8001ee0 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8001edc:	2000      	movs	r0, #0
 8001ede:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee4:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001ee6:	f7fe fbb1 	bl	800064c <HAL_GetTick>
 8001eea:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001eec:	6823      	ldr	r3, [r4, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	065b      	lsls	r3, r3, #25
 8001ef2:	d4f3      	bmi.n	8001edc <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8001ef4:	f7fe fbaa 	bl	800064c <HAL_GetTick>
 8001ef8:	1b40      	subs	r0, r0, r5
 8001efa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001efe:	d9f5      	bls.n	8001eec <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8001f00:	2003      	movs	r0, #3
}
 8001f02:	bd38      	pop	{r3, r4, r5, pc}

08001f04 <HAL_RTC_Init>:
{
 8001f04:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8001f06:	4604      	mov	r4, r0
 8001f08:	b1b8      	cbz	r0, 8001f3a <HAL_RTC_Init+0x36>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001f0a:	7f43      	ldrb	r3, [r0, #29]
 8001f0c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f10:	b913      	cbnz	r3, 8001f18 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8001f12:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8001f14:	f005 faba 	bl	800748c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001f18:	2302      	movs	r3, #2
 8001f1a:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f1c:	6823      	ldr	r3, [r4, #0]
 8001f1e:	22ca      	movs	r2, #202	; 0xca
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24
 8001f22:	2253      	movs	r2, #83	; 0x53
 8001f24:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001f26:	4620      	mov	r0, r4
 8001f28:	f7ff ffd2 	bl	8001ed0 <RTC_EnterInitMode>
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	4605      	mov	r5, r0
 8001f30:	b128      	cbz	r0, 8001f3e <HAL_RTC_Init+0x3a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f32:	22ff      	movs	r2, #255	; 0xff
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001f36:	2304      	movs	r3, #4
 8001f38:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8001f3a:	2501      	movs	r5, #1
 8001f3c:	e02e      	b.n	8001f9c <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001f3e:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001f40:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001f42:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8001f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f4a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001f4c:	6862      	ldr	r2, [r4, #4]
 8001f4e:	6899      	ldr	r1, [r3, #8]
 8001f50:	4302      	orrs	r2, r0
 8001f52:	6960      	ldr	r0, [r4, #20]
 8001f54:	4302      	orrs	r2, r0
 8001f56:	430a      	orrs	r2, r1
 8001f58:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001f5a:	68e2      	ldr	r2, [r4, #12]
 8001f5c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	68a1      	ldr	r1, [r4, #8]
 8001f62:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001f66:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f6e:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	069b      	lsls	r3, r3, #26
 8001f74:	d405      	bmi.n	8001f82 <HAL_RTC_Init+0x7e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001f76:	4620      	mov	r0, r4
 8001f78:	f7ff ff92 	bl	8001ea0 <HAL_RTC_WaitForSynchro>
 8001f7c:	b108      	cbz	r0, 8001f82 <HAL_RTC_Init+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f7e:	6823      	ldr	r3, [r4, #0]
 8001f80:	e7d7      	b.n	8001f32 <HAL_RTC_Init+0x2e>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001f82:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001f84:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001f86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f8c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f90:	430a      	orrs	r2, r1
 8001f92:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001f94:	22ff      	movs	r2, #255	; 0xff
 8001f96:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	7763      	strb	r3, [r4, #29]
}
 8001f9c:	4628      	mov	r0, r5
 8001f9e:	bd38      	pop	{r3, r4, r5, pc}

08001fa0 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8001fa0:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8001fa2:	2809      	cmp	r0, #9
 8001fa4:	d803      	bhi.n	8001fae <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8001fa6:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8001faa:	b2c0      	uxtb	r0, r0
 8001fac:	4770      	bx	lr
    Value -= 10U;
 8001fae:	380a      	subs	r0, #10
    bcdhigh++;
 8001fb0:	3301      	adds	r3, #1
    Value -= 10U;
 8001fb2:	b2c0      	uxtb	r0, r0
 8001fb4:	e7f5      	b.n	8001fa2 <RTC_ByteToBcd2+0x2>

08001fb6 <HAL_RTC_SetTime>:
{
 8001fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001fb8:	7f03      	ldrb	r3, [r0, #28]
 8001fba:	2b01      	cmp	r3, #1
{
 8001fbc:	4606      	mov	r6, r0
 8001fbe:	460f      	mov	r7, r1
 8001fc0:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hrtc);
 8001fc4:	d02f      	beq.n	8002026 <HAL_RTC_SetTime+0x70>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	7703      	strb	r3, [r0, #28]
 8001fca:	6803      	ldr	r3, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001fcc:	7745      	strb	r5, [r0, #29]
 8001fce:	7808      	ldrb	r0, [r1, #0]
 8001fd0:	784d      	ldrb	r5, [r1, #1]
 8001fd2:	788c      	ldrb	r4, [r1, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001fd4:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8001fd6:	bb42      	cbnz	r2, 800202a <HAL_RTC_SetTime+0x74>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001fd8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 8001fdc:	bf08      	it	eq
 8001fde:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001fe0:	f7ff ffde 	bl	8001fa0 <RTC_ByteToBcd2>
 8001fe4:	4601      	mov	r1, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001fe6:	4628      	mov	r0, r5
 8001fe8:	f7ff ffda 	bl	8001fa0 <RTC_ByteToBcd2>
 8001fec:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f7ff ffd6 	bl	8001fa0 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8001ff4:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001ff6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001ffa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001ffe:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002002:	6833      	ldr	r3, [r6, #0]
 8002004:	22ca      	movs	r2, #202	; 0xca
 8002006:	625a      	str	r2, [r3, #36]	; 0x24
 8002008:	2253      	movs	r2, #83	; 0x53
 800200a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800200c:	4630      	mov	r0, r6
 800200e:	f7ff ff5f 	bl	8001ed0 <RTC_EnterInitMode>
 8002012:	6833      	ldr	r3, [r6, #0]
 8002014:	4605      	mov	r5, r0
 8002016:	b1a8      	cbz	r0, 8002044 <HAL_RTC_SetTime+0x8e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002018:	22ff      	movs	r2, #255	; 0xff
 800201a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800201c:	2304      	movs	r3, #4
 800201e:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8002020:	2300      	movs	r3, #0
 8002022:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 8002024:	2501      	movs	r5, #1
}
 8002026:	4628      	mov	r0, r5
 8002028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800202a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800202e:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00U;
 8002032:	bf08      	it	eq
 8002034:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002036:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800203a:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 800203c:	78cc      	ldrb	r4, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800203e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8002042:	e7de      	b.n	8002002 <HAL_RTC_SetTime+0x4c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002044:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 8002048:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 800204c:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 800204e:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002050:	6938      	ldr	r0, [r7, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8002052:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002056:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	6899      	ldr	r1, [r3, #8]
 800205c:	4302      	orrs	r2, r0
 800205e:	430a      	orrs	r2, r1
 8002060:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002068:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	069b      	lsls	r3, r3, #26
 800206e:	d40a      	bmi.n	8002086 <HAL_RTC_SetTime+0xd0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002070:	4630      	mov	r0, r6
 8002072:	f7ff ff15 	bl	8001ea0 <HAL_RTC_WaitForSynchro>
 8002076:	b130      	cbz	r0, 8002086 <HAL_RTC_SetTime+0xd0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002078:	6833      	ldr	r3, [r6, #0]
 800207a:	22ff      	movs	r2, #255	; 0xff
 800207c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800207e:	2304      	movs	r3, #4
 8002080:	7773      	strb	r3, [r6, #29]
        __HAL_UNLOCK(hrtc);
 8002082:	7735      	strb	r5, [r6, #28]
 8002084:	e7ce      	b.n	8002024 <HAL_RTC_SetTime+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002086:	6833      	ldr	r3, [r6, #0]
 8002088:	22ff      	movs	r2, #255	; 0xff
 800208a:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 800208c:	2301      	movs	r3, #1
 800208e:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc); 
 8002090:	2300      	movs	r3, #0
 8002092:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 8002094:	e7c7      	b.n	8002026 <HAL_RTC_SetTime+0x70>

08002096 <HAL_RTC_SetDate>:
{
 8002096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8002098:	7f03      	ldrb	r3, [r0, #28]
 800209a:	2b01      	cmp	r3, #1
{
 800209c:	4605      	mov	r5, r0
 800209e:	f04f 0602 	mov.w	r6, #2
 __HAL_LOCK(hrtc);
 80020a2:	d030      	beq.n	8002106 <HAL_RTC_SetDate+0x70>
 80020a4:	2301      	movs	r3, #1
 80020a6:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80020a8:	7746      	strb	r6, [r0, #29]
 80020aa:	784b      	ldrb	r3, [r1, #1]
 80020ac:	78c8      	ldrb	r0, [r1, #3]
 80020ae:	788e      	ldrb	r6, [r1, #2]
 80020b0:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80020b2:	2a00      	cmp	r2, #0
 80020b4:	d148      	bne.n	8002148 <HAL_RTC_SetDate+0xb2>
 80020b6:	06da      	lsls	r2, r3, #27
 80020b8:	d503      	bpl.n	80020c2 <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80020ba:	f023 0310 	bic.w	r3, r3, #16
 80020be:	330a      	adds	r3, #10
 80020c0:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80020c2:	f7ff ff6d 	bl	8001fa0 <RTC_ByteToBcd2>
 80020c6:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80020c8:	7848      	ldrb	r0, [r1, #1]
 80020ca:	f7ff ff69 	bl	8001fa0 <RTC_ByteToBcd2>
 80020ce:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80020d0:	4630      	mov	r0, r6
 80020d2:	f7ff ff65 	bl	8001fa0 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80020d6:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 80020da:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80020de:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020e2:	682b      	ldr	r3, [r5, #0]
 80020e4:	22ca      	movs	r2, #202	; 0xca
 80020e6:	625a      	str	r2, [r3, #36]	; 0x24
 80020e8:	2253      	movs	r2, #83	; 0x53
 80020ea:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80020ec:	4628      	mov	r0, r5
 80020ee:	f7ff feef 	bl	8001ed0 <RTC_EnterInitMode>
 80020f2:	682b      	ldr	r3, [r5, #0]
 80020f4:	4606      	mov	r6, r0
 80020f6:	b140      	cbz	r0, 800210a <HAL_RTC_SetDate+0x74>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80020f8:	22ff      	movs	r2, #255	; 0xff
 80020fa:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80020fc:	2304      	movs	r3, #4
 80020fe:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8002100:	2300      	movs	r3, #0
 8002102:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 8002104:	2601      	movs	r6, #1
}
 8002106:	4630      	mov	r0, r6
 8002108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800210a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 800210e:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8002112:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800211a:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	069b      	lsls	r3, r3, #26
 8002120:	d40a      	bmi.n	8002138 <HAL_RTC_SetDate+0xa2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002122:	4628      	mov	r0, r5
 8002124:	f7ff febc 	bl	8001ea0 <HAL_RTC_WaitForSynchro>
 8002128:	b130      	cbz	r0, 8002138 <HAL_RTC_SetDate+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800212a:	682b      	ldr	r3, [r5, #0]
 800212c:	22ff      	movs	r2, #255	; 0xff
 800212e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002130:	2304      	movs	r3, #4
 8002132:	776b      	strb	r3, [r5, #29]
        __HAL_UNLOCK(hrtc);
 8002134:	772e      	strb	r6, [r5, #28]
 8002136:	e7e5      	b.n	8002104 <HAL_RTC_SetDate+0x6e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002138:	682b      	ldr	r3, [r5, #0]
 800213a:	22ff      	movs	r2, #255	; 0xff
 800213c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800213e:	2301      	movs	r3, #1
 8002140:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8002142:	2300      	movs	r3, #0
 8002144:	772b      	strb	r3, [r5, #28]
    return HAL_OK;    
 8002146:	e7de      	b.n	8002106 <HAL_RTC_SetDate+0x70>
                  (((uint32_t)sDate->Month) << 8U) | \
 8002148:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800214a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800214e:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002150:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 8002154:	e7c5      	b.n	80020e2 <HAL_RTC_SetDate+0x4c>

08002156 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002156:	6803      	ldr	r3, [r0, #0]
 8002158:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800215a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800215e:	4770      	bx	lr

08002160 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002160:	6803      	ldr	r3, [r0, #0]
 8002162:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002164:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8002168:	4770      	bx	lr

0800216a <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800216a:	6803      	ldr	r3, [r0, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002172:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002174:	6842      	ldr	r2, [r0, #4]
 8002176:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800217a:	d10a      	bne.n	8002192 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 800217c:	6882      	ldr	r2, [r0, #8]
 800217e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002182:	d002      	beq.n	800218a <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002184:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002188:	d103      	bne.n	8002192 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002190:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002192:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002194:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002198:	d107      	bne.n	80021aa <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021aa:	2301      	movs	r3, #1
 80021ac:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021b0:	2300      	movs	r3, #0
 80021b2:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 80021b6:	2003      	movs	r0, #3
 80021b8:	4770      	bx	lr

080021ba <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 80021ba:	b570      	push	{r4, r5, r6, lr}
 80021bc:	4605      	mov	r5, r0
 80021be:	460c      	mov	r4, r1
 80021c0:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021c2:	682b      	ldr	r3, [r5, #0]
 80021c4:	6898      	ldr	r0, [r3, #8]
 80021c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80021ca:	d00d      	beq.n	80021e8 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x2e>
    if (Timeout != HAL_MAX_DELAY)
 80021cc:	1c62      	adds	r2, r4, #1
 80021ce:	d0f9      	beq.n	80021c4 <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80021d0:	b924      	cbnz	r4, 80021dc <SPI_WaitFlagStateUntilTimeout.constprop.10+0x22>
 80021d2:	4628      	mov	r0, r5
}
 80021d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80021d8:	f7ff bfc7 	b.w	800216a <SPI_WaitFifoStateUntilTimeout.part.1>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80021dc:	f7fe fa36 	bl	800064c <HAL_GetTick>
 80021e0:	1b80      	subs	r0, r0, r6
 80021e2:	4284      	cmp	r4, r0
 80021e4:	d8ed      	bhi.n	80021c2 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 80021e6:	e7f4      	b.n	80021d2 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x18>
}
 80021e8:	bd70      	pop	{r4, r5, r6, pc}

080021ea <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80021ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021ec:	4606      	mov	r6, r0
 80021ee:	460c      	mov	r4, r1
 80021f0:	4615      	mov	r5, r2
 80021f2:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 80021f4:	6831      	ldr	r1, [r6, #0]
 80021f6:	6888      	ldr	r0, [r1, #8]
 80021f8:	4020      	ands	r0, r4
 80021fa:	d00e      	beq.n	800221a <SPI_WaitFifoStateUntilTimeout.constprop.11+0x30>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80021fc:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8002200:	bf01      	itttt	eq
 8002202:	7b0a      	ldrbeq	r2, [r1, #12]
 8002204:	b2d2      	uxtbeq	r2, r2
 8002206:	f88d 2007 	strbeq.w	r2, [sp, #7]
      UNUSED(tmpreg);
 800220a:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
    if (Timeout != HAL_MAX_DELAY)
 800220e:	1c6b      	adds	r3, r5, #1
 8002210:	d0f1      	beq.n	80021f6 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002212:	b925      	cbnz	r5, 800221e <SPI_WaitFifoStateUntilTimeout.constprop.11+0x34>
 8002214:	4630      	mov	r0, r6
 8002216:	f7ff ffa8 	bl	800216a <SPI_WaitFifoStateUntilTimeout.part.1>
}
 800221a:	b003      	add	sp, #12
 800221c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800221e:	f7fe fa15 	bl	800064c <HAL_GetTick>
 8002222:	1bc0      	subs	r0, r0, r7
 8002224:	4285      	cmp	r5, r0
 8002226:	d8e5      	bhi.n	80021f4 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 8002228:	e7f4      	b.n	8002214 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x2a>

0800222a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800222a:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800222c:	4613      	mov	r3, r2
{
 800222e:	460d      	mov	r5, r1
 8002230:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002232:	460a      	mov	r2, r1
 8002234:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8002238:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800223a:	f7ff ffd6 	bl	80021ea <SPI_WaitFifoStateUntilTimeout.constprop.11>
 800223e:	b128      	cbz	r0, 800224c <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002240:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002242:	f043 0320 	orr.w	r3, r3, #32
 8002246:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8002248:	2003      	movs	r0, #3
 800224a:	e00f      	b.n	800226c <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800224c:	4632      	mov	r2, r6
 800224e:	4629      	mov	r1, r5
 8002250:	4620      	mov	r0, r4
 8002252:	f7ff ffb2 	bl	80021ba <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8002256:	2800      	cmp	r0, #0
 8002258:	d1f2      	bne.n	8002240 <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800225a:	4633      	mov	r3, r6
 800225c:	462a      	mov	r2, r5
 800225e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002262:	4620      	mov	r0, r4
 8002264:	f7ff ffc1 	bl	80021ea <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8002268:	2800      	cmp	r0, #0
 800226a:	d1e9      	bne.n	8002240 <SPI_EndRxTxTransaction+0x16>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 800226c:	bd70      	pop	{r4, r5, r6, pc}

0800226e <HAL_SPI_Init>:
{
 800226e:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8002270:	4604      	mov	r4, r0
 8002272:	2800      	cmp	r0, #0
 8002274:	d04e      	beq.n	8002314 <HAL_SPI_Init+0xa6>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002276:	2300      	movs	r3, #0
 8002278:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800227a:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800227e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002282:	b91b      	cbnz	r3, 800228c <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8002284:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8002288:	f005 f914 	bl	80074b4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800228c:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800228e:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002290:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002294:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002296:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8002298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800229c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80022a0:	600b      	str	r3, [r1, #0]
 80022a2:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022a6:	d932      	bls.n	800230e <HAL_SPI_Init+0xa0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80022a8:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80022aa:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022ae:	bf18      	it	ne
 80022b0:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80022b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80022b4:	b92b      	cbnz	r3, 80022c2 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022b6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80022ba:	bf8c      	ite	hi
 80022bc:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80022be:	2301      	movls	r3, #1
 80022c0:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80022c2:	68a6      	ldr	r6, [r4, #8]
 80022c4:	6863      	ldr	r3, [r4, #4]
 80022c6:	69a5      	ldr	r5, [r4, #24]
 80022c8:	4333      	orrs	r3, r6
 80022ca:	6926      	ldr	r6, [r4, #16]
 80022cc:	4333      	orrs	r3, r6
 80022ce:	6966      	ldr	r6, [r4, #20]
 80022d0:	4333      	orrs	r3, r6
 80022d2:	69e6      	ldr	r6, [r4, #28]
 80022d4:	4333      	orrs	r3, r6
 80022d6:	6a26      	ldr	r6, [r4, #32]
 80022d8:	4333      	orrs	r3, r6
 80022da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80022dc:	4333      	orrs	r3, r6
 80022de:	f405 7600 	and.w	r6, r5, #512	; 0x200
 80022e2:	4333      	orrs	r3, r6
 80022e4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80022e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022e8:	431a      	orrs	r2, r3
 80022ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80022ec:	0c2d      	lsrs	r5, r5, #16
 80022ee:	431a      	orrs	r2, r3
 80022f0:	f005 0504 	and.w	r5, r5, #4
 80022f4:	432a      	orrs	r2, r5
 80022f6:	4302      	orrs	r2, r0
 80022f8:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022fa:	69cb      	ldr	r3, [r1, #28]
 80022fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002300:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002302:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002304:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002306:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002308:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 800230c:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800230e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002312:	e7cc      	b.n	80022ae <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8002314:	2001      	movs	r0, #1
}
 8002316:	bd70      	pop	{r4, r5, r6, pc}

08002318 <HAL_SPI_DeInit>:
{
 8002318:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800231a:	4604      	mov	r4, r0
 800231c:	b180      	cbz	r0, 8002340 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 800231e:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002320:	2302      	movs	r3, #2
 8002322:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002326:	6813      	ldr	r3, [r2, #0]
 8002328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800232c:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800232e:	f005 f8e5 	bl	80074fc <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002332:	2000      	movs	r0, #0
 8002334:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 8002336:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 800233a:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  return HAL_OK;
 800233e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002340:	2001      	movs	r0, #1
}
 8002342:	bd10      	pop	{r4, pc}

08002344 <HAL_SPI_TransmitReceive>:
{
 8002344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002348:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 800234a:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 800234e:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8002352:	2b01      	cmp	r3, #1
{
 8002354:	4604      	mov	r4, r0
 8002356:	460d      	mov	r5, r1
 8002358:	4616      	mov	r6, r2
  __HAL_LOCK(hspi);
 800235a:	f000 811c 	beq.w	8002596 <HAL_SPI_TransmitReceive+0x252>
 800235e:	2301      	movs	r3, #1
 8002360:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002364:	f7fe f972 	bl	800064c <HAL_GetTick>
  tmp  = hspi->State;
 8002368:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp1 = hspi->Init.Mode;
 800236c:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 800236e:	b2db      	uxtb	r3, r3
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8002370:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8002372:	4681      	mov	r9, r0
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8002374:	d00a      	beq.n	800238c <HAL_SPI_TransmitReceive+0x48>
 8002376:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800237a:	f040 8108 	bne.w	800258e <HAL_SPI_TransmitReceive+0x24a>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800237e:	68a2      	ldr	r2, [r4, #8]
 8002380:	2a00      	cmp	r2, #0
 8002382:	f040 8104 	bne.w	800258e <HAL_SPI_TransmitReceive+0x24a>
 8002386:	2b04      	cmp	r3, #4
 8002388:	f040 8101 	bne.w	800258e <HAL_SPI_TransmitReceive+0x24a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800238c:	2d00      	cmp	r5, #0
 800238e:	f000 8100 	beq.w	8002592 <HAL_SPI_TransmitReceive+0x24e>
 8002392:	2e00      	cmp	r6, #0
 8002394:	f000 80fd 	beq.w	8002592 <HAL_SPI_TransmitReceive+0x24e>
 8002398:	2f00      	cmp	r7, #0
 800239a:	f000 80fa 	beq.w	8002592 <HAL_SPI_TransmitReceive+0x24e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800239e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80023a2:	68e0      	ldr	r0, [r4, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023a4:	6426      	str	r6, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023a6:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023a8:	bf1c      	itt	ne
 80023aa:	2305      	movne	r3, #5
 80023ac:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023b0:	2300      	movs	r3, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80023b2:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023b6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 80023b8:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 80023ba:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 80023be:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 80023c0:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023c4:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80023c6:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80023c8:	87a7      	strh	r7, [r4, #60]	; 0x3c
 80023ca:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80023cc:	d804      	bhi.n	80023d8 <HAL_SPI_TransmitReceive+0x94>
 80023ce:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80023d2:	b292      	uxth	r2, r2
 80023d4:	2a01      	cmp	r2, #1
 80023d6:	d92e      	bls.n	8002436 <HAL_SPI_TransmitReceive+0xf2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023de:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80023e4:	bf5e      	ittt	pl
 80023e6:	681a      	ldrpl	r2, [r3, #0]
 80023e8:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80023ec:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023ee:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80023f2:	d958      	bls.n	80024a6 <HAL_SPI_TransmitReceive+0x162>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80023f4:	b119      	cbz	r1, 80023fe <HAL_SPI_TransmitReceive+0xba>
 80023f6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80023f8:	b292      	uxth	r2, r2
 80023fa:	2a01      	cmp	r2, #1
 80023fc:	d106      	bne.n	800240c <HAL_SPI_TransmitReceive+0xc8>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80023fe:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002402:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002404:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002406:	3b01      	subs	r3, #1
 8002408:	b29b      	uxth	r3, r3
 800240a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800240c:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800240e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002410:	b29b      	uxth	r3, r3
 8002412:	b9a3      	cbnz	r3, 800243e <HAL_SPI_TransmitReceive+0xfa>
 8002414:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002418:	b29b      	uxth	r3, r3
 800241a:	b983      	cbnz	r3, 800243e <HAL_SPI_TransmitReceive+0xfa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800241c:	464a      	mov	r2, r9
 800241e:	4641      	mov	r1, r8
 8002420:	4620      	mov	r0, r4
 8002422:	f7ff ff02 	bl	800222a <SPI_EndRxTxTransaction>
 8002426:	2800      	cmp	r0, #0
 8002428:	f040 80ae 	bne.w	8002588 <HAL_SPI_TransmitReceive+0x244>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800242c:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800242e:	3000      	adds	r0, #0
 8002430:	bf18      	it	ne
 8002432:	2001      	movne	r0, #1
 8002434:	e02f      	b.n	8002496 <HAL_SPI_TransmitReceive+0x152>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800243c:	e7cf      	b.n	80023de <HAL_SPI_TransmitReceive+0x9a>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800243e:	b177      	cbz	r7, 800245e <HAL_SPI_TransmitReceive+0x11a>
 8002440:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002442:	b29b      	uxth	r3, r3
 8002444:	b15b      	cbz	r3, 800245e <HAL_SPI_TransmitReceive+0x11a>
 8002446:	6823      	ldr	r3, [r4, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	0792      	lsls	r2, r2, #30
 800244c:	d507      	bpl.n	800245e <HAL_SPI_TransmitReceive+0x11a>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800244e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002452:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8002454:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002456:	3b01      	subs	r3, #1
 8002458:	b29b      	uxth	r3, r3
 800245a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800245c:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800245e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002462:	b29b      	uxth	r3, r3
 8002464:	b16b      	cbz	r3, 8002482 <HAL_SPI_TransmitReceive+0x13e>
 8002466:	6823      	ldr	r3, [r4, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	07d0      	lsls	r0, r2, #31
 800246c:	d509      	bpl.n	8002482 <HAL_SPI_TransmitReceive+0x13e>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8002474:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002478:	3b01      	subs	r3, #1
 800247a:	b29b      	uxth	r3, r3
 800247c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8002480:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8002482:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002486:	d0c2      	beq.n	800240e <HAL_SPI_TransmitReceive+0xca>
 8002488:	f7fe f8e0 	bl	800064c <HAL_GetTick>
 800248c:	eba0 0009 	sub.w	r0, r0, r9
 8002490:	4580      	cmp	r8, r0
 8002492:	d8bc      	bhi.n	800240e <HAL_SPI_TransmitReceive+0xca>
        errorcode = HAL_TIMEOUT;
 8002494:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002496:	2301      	movs	r3, #1
 8002498:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800249c:	2300      	movs	r3, #0
 800249e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80024a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80024a6:	b119      	cbz	r1, 80024b0 <HAL_SPI_TransmitReceive+0x16c>
 80024a8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80024aa:	b292      	uxth	r2, r2
 80024ac:	2a01      	cmp	r2, #1
 80024ae:	d10a      	bne.n	80024c6 <HAL_SPI_TransmitReceive+0x182>
      if (hspi->TxXferCount > 1U)
 80024b0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80024b2:	b292      	uxth	r2, r2
 80024b4:	2a01      	cmp	r2, #1
 80024b6:	d94d      	bls.n	8002554 <HAL_SPI_TransmitReceive+0x210>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80024b8:	f835 2b02 	ldrh.w	r2, [r5], #2
 80024bc:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 80024be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024c0:	3b02      	subs	r3, #2
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80024c6:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024c8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	b923      	cbnz	r3, 80024d8 <HAL_SPI_TransmitReceive+0x194>
 80024ce:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0a1      	beq.n	800241c <HAL_SPI_TransmitReceive+0xd8>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80024d8:	b197      	cbz	r7, 8002500 <HAL_SPI_TransmitReceive+0x1bc>
 80024da:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024dc:	b29b      	uxth	r3, r3
 80024de:	b17b      	cbz	r3, 8002500 <HAL_SPI_TransmitReceive+0x1bc>
 80024e0:	6823      	ldr	r3, [r4, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	0791      	lsls	r1, r2, #30
 80024e6:	d50b      	bpl.n	8002500 <HAL_SPI_TransmitReceive+0x1bc>
        if (hspi->TxXferCount > 1U)
 80024e8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80024ea:	b292      	uxth	r2, r2
 80024ec:	2a01      	cmp	r2, #1
 80024ee:	d939      	bls.n	8002564 <HAL_SPI_TransmitReceive+0x220>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 80024f0:	f835 2b02 	ldrh.w	r2, [r5], #2
 80024f4:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 80024f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024f8:	3b02      	subs	r3, #2
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80024fe:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002500:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002504:	b29b      	uxth	r3, r3
 8002506:	b1db      	cbz	r3, 8002540 <HAL_SPI_TransmitReceive+0x1fc>
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	07d2      	lsls	r2, r2, #31
 800250e:	d517      	bpl.n	8002540 <HAL_SPI_TransmitReceive+0x1fc>
        if (hspi->RxXferCount > 1U)
 8002510:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002514:	b292      	uxth	r2, r2
 8002516:	2a01      	cmp	r2, #1
 8002518:	d92c      	bls.n	8002574 <HAL_SPI_TransmitReceive+0x230>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	f826 2b02 	strh.w	r2, [r6], #2
          hspi->RxXferCount -= 2U;
 8002520:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002524:	3a02      	subs	r2, #2
 8002526:	b292      	uxth	r2, r2
 8002528:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800252c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002530:	b292      	uxth	r2, r2
 8002532:	2a01      	cmp	r2, #1
 8002534:	d803      	bhi.n	800253e <HAL_SPI_TransmitReceive+0x1fa>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800253c:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 800253e:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8002540:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002544:	d0c0      	beq.n	80024c8 <HAL_SPI_TransmitReceive+0x184>
 8002546:	f7fe f881 	bl	800064c <HAL_GetTick>
 800254a:	eba0 0009 	sub.w	r0, r0, r9
 800254e:	4580      	cmp	r8, r0
 8002550:	d8ba      	bhi.n	80024c8 <HAL_SPI_TransmitReceive+0x184>
 8002552:	e79f      	b.n	8002494 <HAL_SPI_TransmitReceive+0x150>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002554:	782a      	ldrb	r2, [r5, #0]
 8002556:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8002558:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800255a:	3b01      	subs	r3, #1
 800255c:	b29b      	uxth	r3, r3
 800255e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002560:	3501      	adds	r5, #1
 8002562:	e7b0      	b.n	80024c6 <HAL_SPI_TransmitReceive+0x182>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002564:	782a      	ldrb	r2, [r5, #0]
 8002566:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8002568:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800256a:	3b01      	subs	r3, #1
 800256c:	b29b      	uxth	r3, r3
 800256e:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002570:	3501      	adds	r5, #1
 8002572:	e7c4      	b.n	80024fe <HAL_SPI_TransmitReceive+0x1ba>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002574:	7b1b      	ldrb	r3, [r3, #12]
 8002576:	7033      	strb	r3, [r6, #0]
          hspi->RxXferCount--;
 8002578:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800257c:	3b01      	subs	r3, #1
 800257e:	b29b      	uxth	r3, r3
 8002580:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002584:	3601      	adds	r6, #1
 8002586:	e7da      	b.n	800253e <HAL_SPI_TransmitReceive+0x1fa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002588:	2320      	movs	r3, #32
 800258a:	6623      	str	r3, [r4, #96]	; 0x60
 800258c:	e74e      	b.n	800242c <HAL_SPI_TransmitReceive+0xe8>
    errorcode = HAL_BUSY;
 800258e:	2002      	movs	r0, #2
 8002590:	e781      	b.n	8002496 <HAL_SPI_TransmitReceive+0x152>
    errorcode = HAL_ERROR;
 8002592:	2001      	movs	r0, #1
 8002594:	e77f      	b.n	8002496 <HAL_SPI_TransmitReceive+0x152>
  __HAL_LOCK(hspi);
 8002596:	2002      	movs	r0, #2
}
 8002598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800259c <HAL_SPI_GetState>:
  return hspi->State;
 800259c:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 80025a0:	4770      	bx	lr

080025a2 <HAL_TIM_Base_Start>:
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80025a2:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80025a4:	2302      	movs	r3, #2
 80025a6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 80025aa:	6813      	ldr	r3, [r2, #0]
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6013      	str	r3, [r2, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80025b2:	2301      	movs	r3, #1
 80025b4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
}
 80025b8:	2000      	movs	r0, #0
 80025ba:	4770      	bx	lr

080025bc <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025bc:	6803      	ldr	r3, [r0, #0]
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	f042 0201 	orr.w	r2, r2, #1
 80025c4:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	f042 0201 	orr.w	r2, r2, #1
 80025cc:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 80025ce:	2000      	movs	r0, #0
 80025d0:	4770      	bx	lr

080025d2 <HAL_TIM_OC_MspInit>:
 80025d2:	4770      	bx	lr

080025d4 <HAL_TIM_OnePulse_MspInit>:
 80025d4:	4770      	bx	lr
	...

080025d8 <HAL_TIM_OnePulse_Start_IT>:
    
    No need to enable the counter, it's enabled automatically by hardware 
    (the counter starts in response to a stimulus and generate a pulse */
 
  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80025d8:	6803      	ldr	r3, [r0, #0]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	f042 0202 	orr.w	r2, r2, #2
 80025e0:	60da      	str	r2, [r3, #12]
  
  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	f042 0204 	orr.w	r2, r2, #4
 80025e8:	60da      	str	r2, [r3, #12]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025ea:	6a1a      	ldr	r2, [r3, #32]
 80025ec:	f022 0201 	bic.w	r2, r2, #1
 80025f0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80025f2:	6a1a      	ldr	r2, [r3, #32]
 80025f4:	f042 0201 	orr.w	r2, r2, #1
 80025f8:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 80025fa:	6a1a      	ldr	r2, [r3, #32]
 80025fc:	f022 0210 	bic.w	r2, r2, #16
 8002600:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002602:	6a1a      	ldr	r2, [r3, #32]
 8002604:	f042 0210 	orr.w	r2, r2, #16
 8002608:	621a      	str	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 800260a:	4a0e      	ldr	r2, [pc, #56]	; (8002644 <HAL_TIM_OnePulse_Start_IT+0x6c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d013      	beq.n	8002638 <HAL_TIM_OnePulse_Start_IT+0x60>
 8002610:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002614:	4293      	cmp	r3, r2
 8002616:	d00f      	beq.n	8002638 <HAL_TIM_OnePulse_Start_IT+0x60>
 8002618:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800261c:	4293      	cmp	r3, r2
 800261e:	d00b      	beq.n	8002638 <HAL_TIM_OnePulse_Start_IT+0x60>
 8002620:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002624:	4293      	cmp	r3, r2
 8002626:	d007      	beq.n	8002638 <HAL_TIM_OnePulse_Start_IT+0x60>
 8002628:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800262c:	4293      	cmp	r3, r2
 800262e:	d003      	beq.n	8002638 <HAL_TIM_OnePulse_Start_IT+0x60>
 8002630:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002634:	4293      	cmp	r3, r2
 8002636:	d103      	bne.n	8002640 <HAL_TIM_OnePulse_Start_IT+0x68>
    __HAL_TIM_MOE_ENABLE(htim);
 8002638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800263a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800263e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002640:	2000      	movs	r0, #0
 8002642:	4770      	bx	lr
 8002644:	40012c00 	.word	0x40012c00

08002648 <HAL_TIM_PeriodElapsedCallback>:
 8002648:	4770      	bx	lr

0800264a <HAL_TIM_IC_CaptureCallback>:
 800264a:	4770      	bx	lr

0800264c <HAL_TIM_PWM_PulseFinishedCallback>:
 800264c:	4770      	bx	lr

0800264e <HAL_TIM_TriggerCallback>:
 800264e:	4770      	bx	lr

08002650 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002650:	6803      	ldr	r3, [r0, #0]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	0791      	lsls	r1, r2, #30
{
 8002656:	b510      	push	{r4, lr}
 8002658:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800265a:	d50f      	bpl.n	800267c <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	0792      	lsls	r2, r2, #30
 8002660:	d50c      	bpl.n	800267c <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002662:	f06f 0202 	mvn.w	r2, #2
 8002666:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002668:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800266a:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800266c:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800266e:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002670:	f000 8085 	beq.w	800277e <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002674:	f7ff ffe9 	bl	800264a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002678:	2300      	movs	r3, #0
 800267a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800267c:	6823      	ldr	r3, [r4, #0]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	0752      	lsls	r2, r2, #29
 8002682:	d510      	bpl.n	80026a6 <HAL_TIM_IRQHandler+0x56>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	0750      	lsls	r0, r2, #29
 8002688:	d50d      	bpl.n	80026a6 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800268a:	f06f 0204 	mvn.w	r2, #4
 800268e:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002690:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002692:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002694:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002698:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800269a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800269c:	d075      	beq.n	800278a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800269e:	f7ff ffd4 	bl	800264a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a2:	2300      	movs	r3, #0
 80026a4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	691a      	ldr	r2, [r3, #16]
 80026aa:	0711      	lsls	r1, r2, #28
 80026ac:	d50f      	bpl.n	80026ce <HAL_TIM_IRQHandler+0x7e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	0712      	lsls	r2, r2, #28
 80026b2:	d50c      	bpl.n	80026ce <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80026b4:	f06f 0208 	mvn.w	r2, #8
 80026b8:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026ba:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026bc:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026be:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026c0:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80026c2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026c4:	d067      	beq.n	8002796 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80026c6:	f7ff ffc0 	bl	800264a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ca:	2300      	movs	r3, #0
 80026cc:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026ce:	6823      	ldr	r3, [r4, #0]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	06d0      	lsls	r0, r2, #27
 80026d4:	d510      	bpl.n	80026f8 <HAL_TIM_IRQHandler+0xa8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	06d1      	lsls	r1, r2, #27
 80026da:	d50d      	bpl.n	80026f8 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026dc:	f06f 0210 	mvn.w	r2, #16
 80026e0:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026e2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026e4:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026e6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ea:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80026ec:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026ee:	d058      	beq.n	80027a2 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80026f0:	f7ff ffab 	bl	800264a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f4:	2300      	movs	r3, #0
 80026f6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026f8:	6823      	ldr	r3, [r4, #0]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	07d2      	lsls	r2, r2, #31
 80026fe:	d508      	bpl.n	8002712 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	07d0      	lsls	r0, r2, #31
 8002704:	d505      	bpl.n	8002712 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002706:	f06f 0201 	mvn.w	r2, #1
 800270a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800270c:	4620      	mov	r0, r4
 800270e:	f7ff ff9b 	bl	8002648 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002712:	6823      	ldr	r3, [r4, #0]
 8002714:	691a      	ldr	r2, [r3, #16]
 8002716:	0611      	lsls	r1, r2, #24
 8002718:	d508      	bpl.n	800272c <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	0612      	lsls	r2, r2, #24
 800271e:	d505      	bpl.n	800272c <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002720:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002724:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002726:	4620      	mov	r0, r4
 8002728:	f000 fc03 	bl	8002f32 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800272c:	6823      	ldr	r3, [r4, #0]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	05d0      	lsls	r0, r2, #23
 8002732:	d508      	bpl.n	8002746 <HAL_TIM_IRQHandler+0xf6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	0611      	lsls	r1, r2, #24
 8002738:	d505      	bpl.n	8002746 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800273a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800273e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002740:	4620      	mov	r0, r4
 8002742:	f000 fbf7 	bl	8002f34 <HAL_TIMEx_Break2Callback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002746:	6823      	ldr	r3, [r4, #0]
 8002748:	691a      	ldr	r2, [r3, #16]
 800274a:	0652      	lsls	r2, r2, #25
 800274c:	d508      	bpl.n	8002760 <HAL_TIM_IRQHandler+0x110>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	0650      	lsls	r0, r2, #25
 8002752:	d505      	bpl.n	8002760 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002754:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002758:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800275a:	4620      	mov	r0, r4
 800275c:	f7ff ff77 	bl	800264e <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002760:	6823      	ldr	r3, [r4, #0]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	0691      	lsls	r1, r2, #26
 8002766:	d522      	bpl.n	80027ae <HAL_TIM_IRQHandler+0x15e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	0692      	lsls	r2, r2, #26
 800276c:	d51f      	bpl.n	80027ae <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800276e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002772:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002774:	611a      	str	r2, [r3, #16]
}
 8002776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800277a:	f000 bbd9 	b.w	8002f30 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800277e:	f003 fe9b 	bl	80064b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002782:	4620      	mov	r0, r4
 8002784:	f7ff ff62 	bl	800264c <HAL_TIM_PWM_PulseFinishedCallback>
 8002788:	e776      	b.n	8002678 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800278a:	f003 fe95 	bl	80064b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800278e:	4620      	mov	r0, r4
 8002790:	f7ff ff5c 	bl	800264c <HAL_TIM_PWM_PulseFinishedCallback>
 8002794:	e785      	b.n	80026a2 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002796:	f003 fe8f 	bl	80064b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800279a:	4620      	mov	r0, r4
 800279c:	f7ff ff56 	bl	800264c <HAL_TIM_PWM_PulseFinishedCallback>
 80027a0:	e793      	b.n	80026ca <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a2:	f003 fe89 	bl	80064b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a6:	4620      	mov	r0, r4
 80027a8:	f7ff ff50 	bl	800264c <HAL_TIM_PWM_PulseFinishedCallback>
 80027ac:	e7a2      	b.n	80026f4 <HAL_TIM_IRQHandler+0xa4>
 80027ae:	bd10      	pop	{r4, pc}

080027b0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027b0:	4a32      	ldr	r2, [pc, #200]	; (800287c <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 80027b2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027b4:	4290      	cmp	r0, r2
 80027b6:	d012      	beq.n	80027de <TIM_Base_SetConfig+0x2e>
 80027b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80027bc:	d00f      	beq.n	80027de <TIM_Base_SetConfig+0x2e>
 80027be:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80027c2:	4290      	cmp	r0, r2
 80027c4:	d00b      	beq.n	80027de <TIM_Base_SetConfig+0x2e>
 80027c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027ca:	4290      	cmp	r0, r2
 80027cc:	d007      	beq.n	80027de <TIM_Base_SetConfig+0x2e>
 80027ce:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80027d2:	4290      	cmp	r0, r2
 80027d4:	d003      	beq.n	80027de <TIM_Base_SetConfig+0x2e>
 80027d6:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80027da:	4290      	cmp	r0, r2
 80027dc:	d115      	bne.n	800280a <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= Structure->CounterMode;
 80027de:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80027e4:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027e6:	4a25      	ldr	r2, [pc, #148]	; (800287c <TIM_Base_SetConfig+0xcc>)
 80027e8:	4290      	cmp	r0, r2
 80027ea:	d01d      	beq.n	8002828 <TIM_Base_SetConfig+0x78>
 80027ec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80027f0:	d01a      	beq.n	8002828 <TIM_Base_SetConfig+0x78>
 80027f2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80027f6:	4290      	cmp	r0, r2
 80027f8:	d016      	beq.n	8002828 <TIM_Base_SetConfig+0x78>
 80027fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027fe:	4290      	cmp	r0, r2
 8002800:	d012      	beq.n	8002828 <TIM_Base_SetConfig+0x78>
 8002802:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8002806:	4290      	cmp	r0, r2
 8002808:	d00e      	beq.n	8002828 <TIM_Base_SetConfig+0x78>
 800280a:	4a1d      	ldr	r2, [pc, #116]	; (8002880 <TIM_Base_SetConfig+0xd0>)
 800280c:	4290      	cmp	r0, r2
 800280e:	d00b      	beq.n	8002828 <TIM_Base_SetConfig+0x78>
 8002810:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002814:	4290      	cmp	r0, r2
 8002816:	d007      	beq.n	8002828 <TIM_Base_SetConfig+0x78>
 8002818:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800281c:	4290      	cmp	r0, r2
 800281e:	d003      	beq.n	8002828 <TIM_Base_SetConfig+0x78>
 8002820:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002824:	4290      	cmp	r0, r2
 8002826:	d103      	bne.n	8002830 <TIM_Base_SetConfig+0x80>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002828:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800282a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800282e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002830:	694a      	ldr	r2, [r1, #20]
 8002832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002836:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002838:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800283a:	688b      	ldr	r3, [r1, #8]
 800283c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800283e:	680b      	ldr	r3, [r1, #0]
 8002840:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002842:	4b0e      	ldr	r3, [pc, #56]	; (800287c <TIM_Base_SetConfig+0xcc>)
 8002844:	4298      	cmp	r0, r3
 8002846:	d013      	beq.n	8002870 <TIM_Base_SetConfig+0xc0>
 8002848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800284c:	4298      	cmp	r0, r3
 800284e:	d00f      	beq.n	8002870 <TIM_Base_SetConfig+0xc0>
 8002850:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002854:	4298      	cmp	r0, r3
 8002856:	d00b      	beq.n	8002870 <TIM_Base_SetConfig+0xc0>
 8002858:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800285c:	4298      	cmp	r0, r3
 800285e:	d007      	beq.n	8002870 <TIM_Base_SetConfig+0xc0>
 8002860:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002864:	4298      	cmp	r0, r3
 8002866:	d003      	beq.n	8002870 <TIM_Base_SetConfig+0xc0>
 8002868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800286c:	4298      	cmp	r0, r3
 800286e:	d101      	bne.n	8002874 <TIM_Base_SetConfig+0xc4>
    TIMx->RCR = Structure->RepetitionCounter;
 8002870:	690b      	ldr	r3, [r1, #16]
 8002872:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002874:	2301      	movs	r3, #1
 8002876:	6143      	str	r3, [r0, #20]
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40012c00 	.word	0x40012c00
 8002880:	40014000 	.word	0x40014000

08002884 <HAL_TIM_Base_Init>:
{ 
 8002884:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002886:	4604      	mov	r4, r0
 8002888:	b1a0      	cbz	r0, 80028b4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800288a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800288e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002892:	b91b      	cbnz	r3, 800289c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002894:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002898:	f004 fe44 	bl	8007524 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800289c:	2302      	movs	r3, #2
 800289e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80028a2:	6820      	ldr	r0, [r4, #0]
 80028a4:	1d21      	adds	r1, r4, #4
 80028a6:	f7ff ff83 	bl	80027b0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80028aa:	2301      	movs	r3, #1
 80028ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80028b0:	2000      	movs	r0, #0
 80028b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80028b4:	2001      	movs	r0, #1
}
 80028b6:	bd10      	pop	{r4, pc}

080028b8 <HAL_TIM_OC_Init>:
{
 80028b8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80028ba:	4604      	mov	r4, r0
 80028bc:	b1a0      	cbz	r0, 80028e8 <HAL_TIM_OC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80028be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80028c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028c6:	b91b      	cbnz	r3, 80028d0 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80028c8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80028cc:	f7ff fe81 	bl	80025d2 <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80028d0:	2302      	movs	r3, #2
 80028d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 80028d6:	6820      	ldr	r0, [r4, #0]
 80028d8:	1d21      	adds	r1, r4, #4
 80028da:	f7ff ff69 	bl	80027b0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80028de:	2301      	movs	r3, #1
 80028e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80028e4:	2000      	movs	r0, #0
 80028e6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80028e8:	2001      	movs	r0, #1
}
 80028ea:	bd10      	pop	{r4, pc}

080028ec <HAL_TIM_OnePulse_Init>:
{
 80028ec:	b538      	push	{r3, r4, r5, lr}
 80028ee:	460d      	mov	r5, r1
  if(htim == NULL)
 80028f0:	4604      	mov	r4, r0
 80028f2:	b1e0      	cbz	r0, 800292e <HAL_TIM_OnePulse_Init+0x42>
  if(htim->State == HAL_TIM_STATE_RESET)
 80028f4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80028f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028fc:	b91b      	cbnz	r3, 8002906 <HAL_TIM_OnePulse_Init+0x1a>
    htim->Lock = HAL_UNLOCKED;
 80028fe:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 8002902:	f7ff fe67 	bl	80025d4 <HAL_TIM_OnePulse_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002906:	2302      	movs	r3, #2
 8002908:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800290c:	1d21      	adds	r1, r4, #4
 800290e:	6820      	ldr	r0, [r4, #0]
 8002910:	f7ff ff4e 	bl	80027b0 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002914:	6823      	ldr	r3, [r4, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	f022 0208 	bic.w	r2, r2, #8
 800291c:	601a      	str	r2, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 800291e:	6819      	ldr	r1, [r3, #0]
 8002920:	4329      	orrs	r1, r5
 8002922:	6019      	str	r1, [r3, #0]
  htim->State= HAL_TIM_STATE_READY;
 8002924:	2301      	movs	r3, #1
 8002926:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800292a:	2000      	movs	r0, #0
 800292c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800292e:	2001      	movs	r0, #1
}
 8002930:	bd38      	pop	{r3, r4, r5, pc}
	...

08002934 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002934:	6a03      	ldr	r3, [r0, #32]
 8002936:	f023 0301 	bic.w	r3, r3, #1
 800293a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800293c:	6a03      	ldr	r3, [r0, #32]
{
 800293e:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2; 
 8002940:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002942:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= OC_Config->OCMode;
 8002944:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002946:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800294a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800294e:	432a      	orrs	r2, r5
  tmpccer |= OC_Config->OCPolarity;
 8002950:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002952:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002956:	432b      	orrs	r3, r5
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002958:	4d1f      	ldr	r5, [pc, #124]	; (80029d8 <TIM_OC1_SetConfig+0xa4>)
 800295a:	42a8      	cmp	r0, r5
 800295c:	d013      	beq.n	8002986 <TIM_OC1_SetConfig+0x52>
 800295e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002962:	42a8      	cmp	r0, r5
 8002964:	d00f      	beq.n	8002986 <TIM_OC1_SetConfig+0x52>
 8002966:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800296a:	42a8      	cmp	r0, r5
 800296c:	d00b      	beq.n	8002986 <TIM_OC1_SetConfig+0x52>
 800296e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002972:	42a8      	cmp	r0, r5
 8002974:	d007      	beq.n	8002986 <TIM_OC1_SetConfig+0x52>
 8002976:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800297a:	42a8      	cmp	r0, r5
 800297c:	d003      	beq.n	8002986 <TIM_OC1_SetConfig+0x52>
 800297e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002982:	42a8      	cmp	r0, r5
 8002984:	d122      	bne.n	80029cc <TIM_OC1_SetConfig+0x98>
    tmpccer |= OC_Config->OCNPolarity;
 8002986:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002988:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800298c:	432b      	orrs	r3, r5
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800298e:	4d12      	ldr	r5, [pc, #72]	; (80029d8 <TIM_OC1_SetConfig+0xa4>)
 8002990:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8002992:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002996:	d013      	beq.n	80029c0 <TIM_OC1_SetConfig+0x8c>
 8002998:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800299c:	42a8      	cmp	r0, r5
 800299e:	d00f      	beq.n	80029c0 <TIM_OC1_SetConfig+0x8c>
 80029a0:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80029a4:	42a8      	cmp	r0, r5
 80029a6:	d00b      	beq.n	80029c0 <TIM_OC1_SetConfig+0x8c>
 80029a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80029ac:	42a8      	cmp	r0, r5
 80029ae:	d007      	beq.n	80029c0 <TIM_OC1_SetConfig+0x8c>
 80029b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80029b4:	42a8      	cmp	r0, r5
 80029b6:	d003      	beq.n	80029c0 <TIM_OC1_SetConfig+0x8c>
 80029b8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80029bc:	42a8      	cmp	r0, r5
 80029be:	d105      	bne.n	80029cc <TIM_OC1_SetConfig+0x98>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029c0:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80029c4:	698e      	ldr	r6, [r1, #24]
 80029c6:	694c      	ldr	r4, [r1, #20]
 80029c8:	4334      	orrs	r4, r6
 80029ca:	432c      	orrs	r4, r5
  TIMx->CR2 = tmpcr2;
 80029cc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80029ce:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80029d0:	684a      	ldr	r2, [r1, #4]
 80029d2:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 80029d4:	6203      	str	r3, [r0, #32]
 80029d6:	bd70      	pop	{r4, r5, r6, pc}
 80029d8:	40012c00 	.word	0x40012c00

080029dc <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029dc:	6a03      	ldr	r3, [r0, #32]
 80029de:	f023 0310 	bic.w	r3, r3, #16
 80029e2:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80029e4:	6a03      	ldr	r3, [r0, #32]
{
 80029e6:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2; 
 80029e8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80029ea:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029ec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029ee:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80029f2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029f6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029fa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80029fc:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a00:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a04:	4d1a      	ldr	r5, [pc, #104]	; (8002a70 <TIM_OC2_SetConfig+0x94>)
 8002a06:	42a8      	cmp	r0, r5
 8002a08:	d007      	beq.n	8002a1a <TIM_OC2_SetConfig+0x3e>
 8002a0a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002a0e:	42a8      	cmp	r0, r5
 8002a10:	d003      	beq.n	8002a1a <TIM_OC2_SetConfig+0x3e>
 8002a12:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8002a16:	42a8      	cmp	r0, r5
 8002a18:	d10d      	bne.n	8002a36 <TIM_OC2_SetConfig+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a1a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a20:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002a24:	4d12      	ldr	r5, [pc, #72]	; (8002a70 <TIM_OC2_SetConfig+0x94>)
 8002a26:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002a2c:	d012      	beq.n	8002a54 <TIM_OC2_SetConfig+0x78>
 8002a2e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002a32:	42a8      	cmp	r0, r5
 8002a34:	d00e      	beq.n	8002a54 <TIM_OC2_SetConfig+0x78>
 8002a36:	4d0f      	ldr	r5, [pc, #60]	; (8002a74 <TIM_OC2_SetConfig+0x98>)
 8002a38:	42a8      	cmp	r0, r5
 8002a3a:	d00b      	beq.n	8002a54 <TIM_OC2_SetConfig+0x78>
 8002a3c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a40:	42a8      	cmp	r0, r5
 8002a42:	d007      	beq.n	8002a54 <TIM_OC2_SetConfig+0x78>
 8002a44:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a48:	42a8      	cmp	r0, r5
 8002a4a:	d003      	beq.n	8002a54 <TIM_OC2_SetConfig+0x78>
 8002a4c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002a50:	42a8      	cmp	r0, r5
 8002a52:	d106      	bne.n	8002a62 <TIM_OC2_SetConfig+0x86>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a54:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a58:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a5a:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a5c:	4334      	orrs	r4, r6
 8002a5e:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8002a62:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002a64:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002a66:	684a      	ldr	r2, [r1, #4]
 8002a68:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;  
 8002a6a:	6203      	str	r3, [r0, #32]
 8002a6c:	bd70      	pop	{r4, r5, r6, pc}
 8002a6e:	bf00      	nop
 8002a70:	40012c00 	.word	0x40012c00
 8002a74:	40014000 	.word	0x40014000

08002a78 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a78:	6a03      	ldr	r3, [r0, #32]
 8002a7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a7e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002a80:	6a03      	ldr	r3, [r0, #32]
{
 8002a82:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2; 
 8002a84:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002a86:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx |= OC_Config->OCMode;
 8002a88:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002a8a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a8e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002a92:	432a      	orrs	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a94:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002a96:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a9a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a9e:	4d1a      	ldr	r5, [pc, #104]	; (8002b08 <TIM_OC3_SetConfig+0x90>)
 8002aa0:	42a8      	cmp	r0, r5
 8002aa2:	d007      	beq.n	8002ab4 <TIM_OC3_SetConfig+0x3c>
 8002aa4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002aa8:	42a8      	cmp	r0, r5
 8002aaa:	d003      	beq.n	8002ab4 <TIM_OC3_SetConfig+0x3c>
 8002aac:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8002ab0:	42a8      	cmp	r0, r5
 8002ab2:	d10d      	bne.n	8002ad0 <TIM_OC3_SetConfig+0x58>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ab4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ab6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002aba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002abe:	4d12      	ldr	r5, [pc, #72]	; (8002b08 <TIM_OC3_SetConfig+0x90>)
 8002ac0:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ac2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002ac6:	d012      	beq.n	8002aee <TIM_OC3_SetConfig+0x76>
 8002ac8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002acc:	42a8      	cmp	r0, r5
 8002ace:	d00e      	beq.n	8002aee <TIM_OC3_SetConfig+0x76>
 8002ad0:	4d0e      	ldr	r5, [pc, #56]	; (8002b0c <TIM_OC3_SetConfig+0x94>)
 8002ad2:	42a8      	cmp	r0, r5
 8002ad4:	d00b      	beq.n	8002aee <TIM_OC3_SetConfig+0x76>
 8002ad6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002ada:	42a8      	cmp	r0, r5
 8002adc:	d007      	beq.n	8002aee <TIM_OC3_SetConfig+0x76>
 8002ade:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002ae2:	42a8      	cmp	r0, r5
 8002ae4:	d003      	beq.n	8002aee <TIM_OC3_SetConfig+0x76>
 8002ae6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002aea:	42a8      	cmp	r0, r5
 8002aec:	d106      	bne.n	8002afc <TIM_OC3_SetConfig+0x84>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002aee:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002af2:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002af4:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002af6:	4334      	orrs	r4, r6
 8002af8:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  TIMx->CR2 = tmpcr2;
 8002afc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002afe:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002b00:	684a      	ldr	r2, [r1, #4]
 8002b02:	63c2      	str	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;  
 8002b04:	6203      	str	r3, [r0, #32]
 8002b06:	bd70      	pop	{r4, r5, r6, pc}
 8002b08:	40012c00 	.word	0x40012c00
 8002b0c:	40014000 	.word	0x40014000

08002b10 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b10:	6a03      	ldr	r3, [r0, #32]
 8002b12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b16:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002b18:	6a03      	ldr	r3, [r0, #32]
{
 8002b1a:	b530      	push	{r4, r5, lr}
  tmpcr2 =  TIMx->CR2; 
 8002b1c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002b1e:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b20:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b22:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002b26:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b2a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b2e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002b30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b34:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002b38:	4d10      	ldr	r5, [pc, #64]	; (8002b7c <TIM_OC4_SetConfig+0x6c>)
 8002b3a:	42a8      	cmp	r0, r5
 8002b3c:	d013      	beq.n	8002b66 <TIM_OC4_SetConfig+0x56>
 8002b3e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002b42:	42a8      	cmp	r0, r5
 8002b44:	d00f      	beq.n	8002b66 <TIM_OC4_SetConfig+0x56>
 8002b46:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8002b4a:	42a8      	cmp	r0, r5
 8002b4c:	d00b      	beq.n	8002b66 <TIM_OC4_SetConfig+0x56>
 8002b4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b52:	42a8      	cmp	r0, r5
 8002b54:	d007      	beq.n	8002b66 <TIM_OC4_SetConfig+0x56>
 8002b56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b5a:	42a8      	cmp	r0, r5
 8002b5c:	d003      	beq.n	8002b66 <TIM_OC4_SetConfig+0x56>
 8002b5e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002b62:	42a8      	cmp	r0, r5
 8002b64:	d104      	bne.n	8002b70 <TIM_OC4_SetConfig+0x60>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b66:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b68:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b6c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  TIMx->CR2 = tmpcr2;
 8002b70:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002b72:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002b74:	684a      	ldr	r2, [r1, #4]
 8002b76:	6402      	str	r2, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;  
 8002b78:	6203      	str	r3, [r0, #32]
 8002b7a:	bd30      	pop	{r4, r5, pc}
 8002b7c:	40012c00 	.word	0x40012c00

08002b80 <TIM_ETR_SetConfig>:
{
 8002b80:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 8002b82:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b84:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b86:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b8a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002b8e:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8002b90:	6083      	str	r3, [r0, #8]
 8002b92:	bd10      	pop	{r4, pc}

08002b94 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002b94:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002b98:	2b01      	cmp	r3, #1
{
 8002b9a:	b570      	push	{r4, r5, r6, lr}
 8002b9c:	4604      	mov	r4, r0
 8002b9e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002ba2:	d01a      	beq.n	8002bda <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002ba8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002baa:	2301      	movs	r3, #1
 8002bac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002bb0:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bb2:	4b52      	ldr	r3, [pc, #328]	; (8002cfc <HAL_TIM_ConfigClockSource+0x168>)
 8002bb4:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8002bb6:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002bb8:	680b      	ldr	r3, [r1, #0]
 8002bba:	2b40      	cmp	r3, #64	; 0x40
 8002bbc:	d075      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0x116>
 8002bbe:	d818      	bhi.n	8002bf2 <HAL_TIM_ConfigClockSource+0x5e>
 8002bc0:	2b10      	cmp	r3, #16
 8002bc2:	f000 808f 	beq.w	8002ce4 <HAL_TIM_ConfigClockSource+0x150>
 8002bc6:	d809      	bhi.n	8002bdc <HAL_TIM_ConfigClockSource+0x48>
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 8085 	beq.w	8002cd8 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 8002bce:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002bd0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002bd2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002bd6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002bda:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	f000 8087 	beq.w	8002cf0 <HAL_TIM_ConfigClockSource+0x15c>
 8002be2:	2b30      	cmp	r3, #48	; 0x30
 8002be4:	d1f3      	bne.n	8002bce <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 8002be6:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002bec:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8002bf0:	e033      	b.n	8002c5a <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8002bf2:	2b70      	cmp	r3, #112	; 0x70
 8002bf4:	d033      	beq.n	8002c5e <HAL_TIM_ConfigClockSource+0xca>
 8002bf6:	d81b      	bhi.n	8002c30 <HAL_TIM_ConfigClockSource+0x9c>
 8002bf8:	2b50      	cmp	r3, #80	; 0x50
 8002bfa:	d03f      	beq.n	8002c7c <HAL_TIM_ConfigClockSource+0xe8>
 8002bfc:	2b60      	cmp	r3, #96	; 0x60
 8002bfe:	d1e6      	bne.n	8002bce <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002c00:	684d      	ldr	r5, [r1, #4]
 8002c02:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c04:	6a01      	ldr	r1, [r0, #32]
 8002c06:	f021 0110 	bic.w	r1, r1, #16
 8002c0a:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c0c:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002c0e:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c10:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c18:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c1c:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002c20:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002c22:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8002c24:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002c2a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002c2e:	e014      	b.n	8002c5a <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8002c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c34:	d00c      	beq.n	8002c50 <HAL_TIM_ConfigClockSource+0xbc>
 8002c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c3a:	d1c8      	bne.n	8002bce <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8002c3c:	68cb      	ldr	r3, [r1, #12]
 8002c3e:	684a      	ldr	r2, [r1, #4]
 8002c40:	6889      	ldr	r1, [r1, #8]
 8002c42:	f7ff ff9d 	bl	8002b80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c46:	6822      	ldr	r2, [r4, #0]
 8002c48:	6893      	ldr	r3, [r2, #8]
 8002c4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c4e:	e013      	b.n	8002c78 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002c50:	6883      	ldr	r3, [r0, #8]
 8002c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c56:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8002c5a:	6083      	str	r3, [r0, #8]
 8002c5c:	e7b7      	b.n	8002bce <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8002c5e:	68cb      	ldr	r3, [r1, #12]
 8002c60:	684a      	ldr	r2, [r1, #4]
 8002c62:	6889      	ldr	r1, [r1, #8]
 8002c64:	f7ff ff8c 	bl	8002b80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c68:	6822      	ldr	r2, [r4, #0]
 8002c6a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c70:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c78:	6093      	str	r3, [r2, #8]
    break;
 8002c7a:	e7a8      	b.n	8002bce <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002c7c:	684a      	ldr	r2, [r1, #4]
 8002c7e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002c80:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c82:	6a05      	ldr	r5, [r0, #32]
 8002c84:	f025 0501 	bic.w	r5, r5, #1
 8002c88:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002c8a:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c8c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c94:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002c98:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002c9a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002c9c:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8002c9e:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002ca4:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8002ca8:	e7d7      	b.n	8002c5a <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002caa:	684a      	ldr	r2, [r1, #4]
 8002cac:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002cae:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cb0:	6a05      	ldr	r5, [r0, #32]
 8002cb2:	f025 0501 	bic.w	r5, r5, #1
 8002cb6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002cb8:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cba:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cc2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002cc6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002cc8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002cca:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8002ccc:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002cd2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002cd6:	e7c0      	b.n	8002c5a <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8002cd8:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002cde:	f043 0307 	orr.w	r3, r3, #7
 8002ce2:	e7ba      	b.n	8002c5a <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8002ce4:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002cea:	f043 0317 	orr.w	r3, r3, #23
 8002cee:	e7b4      	b.n	8002c5a <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8002cf0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002cf6:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8002cfa:	e7ae      	b.n	8002c5a <HAL_TIM_ConfigClockSource+0xc6>
 8002cfc:	fffe0088 	.word	0xfffe0088

08002d00 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002d00:	6a03      	ldr	r3, [r0, #32]
 8002d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d06:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d08:	6a03      	ldr	r3, [r0, #32]
{
 8002d0a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002d0c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d0e:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d10:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002d12:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8002d1a:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002d1c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8002d1e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002d22:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002d26:	4d11      	ldr	r5, [pc, #68]	; (8002d6c <TIM_OC5_SetConfig+0x6c>)
 8002d28:	42a8      	cmp	r0, r5
 8002d2a:	d013      	beq.n	8002d54 <TIM_OC5_SetConfig+0x54>
 8002d2c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002d30:	42a8      	cmp	r0, r5
 8002d32:	d00f      	beq.n	8002d54 <TIM_OC5_SetConfig+0x54>
 8002d34:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8002d38:	42a8      	cmp	r0, r5
 8002d3a:	d00b      	beq.n	8002d54 <TIM_OC5_SetConfig+0x54>
 8002d3c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d40:	42a8      	cmp	r0, r5
 8002d42:	d007      	beq.n	8002d54 <TIM_OC5_SetConfig+0x54>
 8002d44:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d48:	42a8      	cmp	r0, r5
 8002d4a:	d003      	beq.n	8002d54 <TIM_OC5_SetConfig+0x54>
 8002d4c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002d50:	42a8      	cmp	r0, r5
 8002d52:	d104      	bne.n	8002d5e <TIM_OC5_SetConfig+0x5e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002d54:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002d56:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002d5a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d5e:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d60:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002d62:	684a      	ldr	r2, [r1, #4]
 8002d64:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002d66:	6203      	str	r3, [r0, #32]
 8002d68:	bd30      	pop	{r4, r5, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40012c00 	.word	0x40012c00

08002d70 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002d70:	6a03      	ldr	r3, [r0, #32]
 8002d72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d76:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d78:	6a03      	ldr	r3, [r0, #32]
{
 8002d7a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002d7c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d7e:	6d42      	ldr	r2, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d80:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002d82:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002d86:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d8a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002d8e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002d90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002d94:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002d98:	4d10      	ldr	r5, [pc, #64]	; (8002ddc <TIM_OC6_SetConfig+0x6c>)
 8002d9a:	42a8      	cmp	r0, r5
 8002d9c:	d013      	beq.n	8002dc6 <TIM_OC6_SetConfig+0x56>
 8002d9e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002da2:	42a8      	cmp	r0, r5
 8002da4:	d00f      	beq.n	8002dc6 <TIM_OC6_SetConfig+0x56>
 8002da6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8002daa:	42a8      	cmp	r0, r5
 8002dac:	d00b      	beq.n	8002dc6 <TIM_OC6_SetConfig+0x56>
 8002dae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002db2:	42a8      	cmp	r0, r5
 8002db4:	d007      	beq.n	8002dc6 <TIM_OC6_SetConfig+0x56>
 8002db6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002dba:	42a8      	cmp	r0, r5
 8002dbc:	d003      	beq.n	8002dc6 <TIM_OC6_SetConfig+0x56>
 8002dbe:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002dc2:	42a8      	cmp	r0, r5
 8002dc4:	d104      	bne.n	8002dd0 <TIM_OC6_SetConfig+0x60>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002dc6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002dc8:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002dcc:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dd0:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002dd2:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002dd4:	684a      	ldr	r2, [r1, #4]
 8002dd6:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002dd8:	6203      	str	r3, [r0, #32]
 8002dda:	bd30      	pop	{r4, r5, pc}
 8002ddc:	40012c00 	.word	0x40012c00

08002de0 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim); 
 8002de0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002de4:	2b01      	cmp	r3, #1
{  
 8002de6:	b510      	push	{r4, lr}
 8002de8:	4604      	mov	r4, r0
 8002dea:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim); 
 8002dee:	d010      	beq.n	8002e12 <HAL_TIM_OC_ConfigChannel+0x32>
 8002df0:	2301      	movs	r3, #1
  switch (Channel)
 8002df2:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim); 
 8002df4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002df8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8002dfc:	d01c      	beq.n	8002e38 <HAL_TIM_OC_ConfigChannel+0x58>
 8002dfe:	d809      	bhi.n	8002e14 <HAL_TIM_OC_ConfigChannel+0x34>
 8002e00:	b192      	cbz	r2, 8002e28 <HAL_TIM_OC_ConfigChannel+0x48>
 8002e02:	2a04      	cmp	r2, #4
 8002e04:	d014      	beq.n	8002e30 <HAL_TIM_OC_ConfigChannel+0x50>
  htim->State = HAL_TIM_STATE_READY;
 8002e06:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim); 
 8002e08:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002e0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim); 
 8002e0e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002e12:	bd10      	pop	{r4, pc}
  switch (Channel)
 8002e14:	2a10      	cmp	r2, #16
 8002e16:	d013      	beq.n	8002e40 <HAL_TIM_OC_ConfigChannel+0x60>
 8002e18:	2a14      	cmp	r2, #20
 8002e1a:	d015      	beq.n	8002e48 <HAL_TIM_OC_ConfigChannel+0x68>
 8002e1c:	2a0c      	cmp	r2, #12
 8002e1e:	d1f2      	bne.n	8002e06 <HAL_TIM_OC_ConfigChannel+0x26>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e20:	6820      	ldr	r0, [r4, #0]
 8002e22:	f7ff fe75 	bl	8002b10 <TIM_OC4_SetConfig>
    break;
 8002e26:	e7ee      	b.n	8002e06 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e28:	6820      	ldr	r0, [r4, #0]
 8002e2a:	f7ff fd83 	bl	8002934 <TIM_OC1_SetConfig>
    break;
 8002e2e:	e7ea      	b.n	8002e06 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e30:	6820      	ldr	r0, [r4, #0]
 8002e32:	f7ff fdd3 	bl	80029dc <TIM_OC2_SetConfig>
    break;
 8002e36:	e7e6      	b.n	8002e06 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e38:	6820      	ldr	r0, [r4, #0]
 8002e3a:	f7ff fe1d 	bl	8002a78 <TIM_OC3_SetConfig>
    break;
 8002e3e:	e7e2      	b.n	8002e06 <HAL_TIM_OC_ConfigChannel+0x26>
       TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e40:	6820      	ldr	r0, [r4, #0]
 8002e42:	f7ff ff5d 	bl	8002d00 <TIM_OC5_SetConfig>
    break;
 8002e46:	e7de      	b.n	8002e06 <HAL_TIM_OC_ConfigChannel+0x26>
       TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e48:	6820      	ldr	r0, [r4, #0]
 8002e4a:	f7ff ff91 	bl	8002d70 <TIM_OC6_SetConfig>
    break;
 8002e4e:	e7da      	b.n	8002e06 <HAL_TIM_OC_ConfigChannel+0x26>

08002e50 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8002e50:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002e54:	2b01      	cmp	r3, #1
{
 8002e56:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002e58:	d020      	beq.n	8002e9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  tmpcr2 = htim->Instance->CR2;
 8002e5a:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e5c:	4d10      	ldr	r5, [pc, #64]	; (8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
  tmpcr2 = htim->Instance->CR2;
 8002e5e:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002e60:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e62:	42aa      	cmp	r2, r5
 8002e64:	d007      	beq.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8002e66:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002e6a:	42aa      	cmp	r2, r5
 8002e6c:	d003      	beq.n	8002e76 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8002e6e:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8002e72:	42aa      	cmp	r2, r5
 8002e74:	d103      	bne.n	8002e7e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e76:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e78:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e7c:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e7e:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e80:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e86:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002e88:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  htim->Instance->CR2 = tmpcr2;
 8002e8c:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e8e:	4321      	orrs	r1, r4
  __HAL_UNLOCK(htim);
 8002e90:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8002e92:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8002e94:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002e98:	4618      	mov	r0, r3
 8002e9a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8002e9c:	2002      	movs	r0, #2
} 
 8002e9e:	bd30      	pop	{r4, r5, pc}
 8002ea0:	40012c00 	.word	0x40012c00

08002ea4 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8002ea4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002ea8:	2b01      	cmp	r3, #1
{
 8002eaa:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002eac:	d03c      	beq.n	8002f28 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002eae:	68cb      	ldr	r3, [r1, #12]
 8002eb0:	688a      	ldr	r2, [r1, #8]
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002eb2:	4c1e      	ldr	r4, [pc, #120]	; (8002f2c <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eb8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002eba:	684a      	ldr	r2, [r1, #4]
 8002ebc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ec0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002ec2:	680a      	ldr	r2, [r1, #0]
 8002ec4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ec8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002eca:	690a      	ldr	r2, [r1, #16]
 8002ecc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ed0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002ed2:	694a      	ldr	r2, [r1, #20]
 8002ed4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ed8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002eda:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002edc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002ee0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8002ee2:	698a      	ldr	r2, [r1, #24]
 8002ee4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002ee8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002eec:	6802      	ldr	r2, [r0, #0]
 8002eee:	42a2      	cmp	r2, r4
 8002ef0:	d007      	beq.n	8002f02 <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 8002ef2:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8002ef6:	42a2      	cmp	r2, r4
 8002ef8:	d003      	beq.n	8002f02 <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 8002efa:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8002efe:	42a2      	cmp	r2, r4
 8002f00:	d10c      	bne.n	8002f1c <HAL_TIMEx_ConfigBreakDeadTime+0x78>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8002f02:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002f04:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002f08:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002f0c:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002f0e:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002f10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f14:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002f16:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002f1a:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8002f1c:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002f24:	4618      	mov	r0, r3
 8002f26:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8002f28:	2002      	movs	r0, #2
}
 8002f2a:	bd10      	pop	{r4, pc}
 8002f2c:	40012c00 	.word	0x40012c00

08002f30 <HAL_TIMEx_CommutationCallback>:
 8002f30:	4770      	bx	lr

08002f32 <HAL_TIMEx_BreakCallback>:
 8002f32:	4770      	bx	lr

08002f34 <HAL_TIMEx_Break2Callback>:
{
 8002f34:	4770      	bx	lr
	...

08002f38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f38:	b538      	push	{r3, r4, r5, lr}
 8002f3a:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002f3c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f3e:	6921      	ldr	r1, [r4, #16]
 8002f40:	68a2      	ldr	r2, [r4, #8]
 8002f42:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002f44:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f46:	430a      	orrs	r2, r1
 8002f48:	6961      	ldr	r1, [r4, #20]
 8002f4a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002f4c:	4977      	ldr	r1, [pc, #476]	; (800312c <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f4e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002f50:	4001      	ands	r1, r0
 8002f52:	430a      	orrs	r2, r1
 8002f54:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f56:	686a      	ldr	r2, [r5, #4]
 8002f58:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002f5a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f5c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002f60:	430a      	orrs	r2, r1
 8002f62:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002f64:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002f66:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002f68:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002f6c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f72:	4a6f      	ldr	r2, [pc, #444]	; (8003130 <UART_SetConfig+0x1f8>)
 8002f74:	4295      	cmp	r5, r2
 8002f76:	d112      	bne.n	8002f9e <UART_SetConfig+0x66>
 8002f78:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8002f7c:	496d      	ldr	r1, [pc, #436]	; (8003134 <UART_SetConfig+0x1fc>)
 8002f7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f80:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f88:	5c8a      	ldrb	r2, [r1, r2]
 8002f8a:	d066      	beq.n	800305a <UART_SetConfig+0x122>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8002f8c:	2a08      	cmp	r2, #8
 8002f8e:	d819      	bhi.n	8002fc4 <UART_SetConfig+0x8c>
 8002f90:	e8df f002 	tbb	[pc, r2]
 8002f94:	189e92c2 	.word	0x189e92c2
 8002f98:	181818a9 	.word	0x181818a9
 8002f9c:	ac          	.byte	0xac
 8002f9d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f9e:	4a66      	ldr	r2, [pc, #408]	; (8003138 <UART_SetConfig+0x200>)
 8002fa0:	4295      	cmp	r5, r2
 8002fa2:	d124      	bne.n	8002fee <UART_SetConfig+0xb6>
 8002fa4:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8002fa8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002faa:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002fae:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002fb2:	f000 80a0 	beq.w	80030f6 <UART_SetConfig+0x1be>
 8002fb6:	d807      	bhi.n	8002fc8 <UART_SetConfig+0x90>
 8002fb8:	2a00      	cmp	r2, #0
 8002fba:	f000 80aa 	beq.w	8003112 <UART_SetConfig+0x1da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fc2:	d076      	beq.n	80030b2 <UART_SetConfig+0x17a>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002fc4:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8002fc6:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fc8:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8002fcc:	f000 8099 	beq.w	8003102 <UART_SetConfig+0x1ca>
 8002fd0:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8002fd4:	d1f3      	bne.n	8002fbe <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fda:	d179      	bne.n	80030d0 <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002fdc:	6860      	ldr	r0, [r4, #4]
 8002fde:	0843      	lsrs	r3, r0, #1
 8002fe0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002fe4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002fe8:	fbb3 f3f0 	udiv	r3, r3, r0
 8002fec:	e054      	b.n	8003098 <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fee:	4a53      	ldr	r2, [pc, #332]	; (800313c <UART_SetConfig+0x204>)
 8002ff0:	4295      	cmp	r5, r2
 8002ff2:	d10e      	bne.n	8003012 <UART_SetConfig+0xda>
 8002ff4:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8002ff8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ffa:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8002ffe:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8003002:	d078      	beq.n	80030f6 <UART_SetConfig+0x1be>
 8003004:	d9d8      	bls.n	8002fb8 <UART_SetConfig+0x80>
 8003006:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 800300a:	d07a      	beq.n	8003102 <UART_SetConfig+0x1ca>
 800300c:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8003010:	e7e0      	b.n	8002fd4 <UART_SetConfig+0x9c>
 8003012:	4a4b      	ldr	r2, [pc, #300]	; (8003140 <UART_SetConfig+0x208>)
 8003014:	4295      	cmp	r5, r2
 8003016:	d10e      	bne.n	8003036 <UART_SetConfig+0xfe>
 8003018:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 800301c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800301e:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8003022:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003026:	d066      	beq.n	80030f6 <UART_SetConfig+0x1be>
 8003028:	d9c6      	bls.n	8002fb8 <UART_SetConfig+0x80>
 800302a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800302e:	d068      	beq.n	8003102 <UART_SetConfig+0x1ca>
 8003030:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8003034:	e7ce      	b.n	8002fd4 <UART_SetConfig+0x9c>
 8003036:	4a43      	ldr	r2, [pc, #268]	; (8003144 <UART_SetConfig+0x20c>)
 8003038:	4295      	cmp	r5, r2
 800303a:	d1c0      	bne.n	8002fbe <UART_SetConfig+0x86>
 800303c:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8003040:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003042:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8003046:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800304a:	d054      	beq.n	80030f6 <UART_SetConfig+0x1be>
 800304c:	d9b4      	bls.n	8002fb8 <UART_SetConfig+0x80>
 800304e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8003052:	d056      	beq.n	8003102 <UART_SetConfig+0x1ca>
 8003054:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8003058:	e7bc      	b.n	8002fd4 <UART_SetConfig+0x9c>
    switch (clocksource)
 800305a:	2a08      	cmp	r2, #8
 800305c:	d829      	bhi.n	80030b2 <UART_SetConfig+0x17a>
 800305e:	a301      	add	r3, pc, #4	; (adr r3, 8003064 <UART_SetConfig+0x12c>)
 8003060:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8003064:	08003089 	.word	0x08003089
 8003068:	080030ad 	.word	0x080030ad
 800306c:	08002fdd 	.word	0x08002fdd
 8003070:	080030b3 	.word	0x080030b3
 8003074:	080030fd 	.word	0x080030fd
 8003078:	080030b3 	.word	0x080030b3
 800307c:	080030b3 	.word	0x080030b3
 8003080:	080030b3 	.word	0x080030b3
 8003084:	08003109 	.word	0x08003109
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003088:	f7fe fd96 	bl	8001bb8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800308c:	6861      	ldr	r1, [r4, #4]
 800308e:	084a      	lsrs	r2, r1, #1
 8003090:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8003094:	fbb3 f3f1 	udiv	r3, r3, r1
 8003098:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800309a:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 800309c:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 80030a0:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030a2:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60cb      	str	r3, [r1, #12]
 80030aa:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80030ac:	f7fe fd9c 	bl	8001be8 <HAL_RCC_GetPCLK2Freq>
 80030b0:	e7ec      	b.n	800308c <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 80030b2:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	e7f1      	b.n	800309c <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80030b8:	f7fe fd96 	bl	8001be8 <HAL_RCC_GetPCLK2Freq>
 80030bc:	6863      	ldr	r3, [r4, #4]
 80030be:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80030c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80030c6:	4b1a      	ldr	r3, [pc, #104]	; (8003130 <UART_SetConfig+0x1f8>)
 80030c8:	b280      	uxth	r0, r0
 80030ca:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80030cc:	2000      	movs	r0, #0
        break;
 80030ce:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80030d0:	6862      	ldr	r2, [r4, #4]
 80030d2:	0853      	lsrs	r3, r2, #1
 80030d4:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80030d8:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80030dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	60eb      	str	r3, [r5, #12]
 80030e4:	e7f2      	b.n	80030cc <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80030e6:	f7fe fc73 	bl	80019d0 <HAL_RCC_GetSysClockFreq>
 80030ea:	e017      	b.n	800311c <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80030ec:	6862      	ldr	r2, [r4, #4]
 80030ee:	0853      	lsrs	r3, r2, #1
 80030f0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80030f4:	e7f2      	b.n	80030dc <UART_SetConfig+0x1a4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030fa:	d1f4      	bne.n	80030e6 <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80030fc:	f7fe fc68 	bl	80019d0 <HAL_RCC_GetSysClockFreq>
 8003100:	e7c4      	b.n	800308c <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003106:	d1f1      	bne.n	80030ec <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003108:	6860      	ldr	r0, [r4, #4]
 800310a:	0843      	lsrs	r3, r0, #1
 800310c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003110:	e76a      	b.n	8002fe8 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003116:	d0b7      	beq.n	8003088 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003118:	f7fe fd4e 	bl	8001bb8 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800311c:	6863      	ldr	r3, [r4, #4]
 800311e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003122:	fbb0 f0f3 	udiv	r0, r0, r3
 8003126:	b280      	uxth	r0, r0
 8003128:	60e8      	str	r0, [r5, #12]
 800312a:	e7cf      	b.n	80030cc <UART_SetConfig+0x194>
 800312c:	efff69f3 	.word	0xefff69f3
 8003130:	40013800 	.word	0x40013800
 8003134:	08008d14 	.word	0x08008d14
 8003138:	40004400 	.word	0x40004400
 800313c:	40004800 	.word	0x40004800
 8003140:	40004c00 	.word	0x40004c00
 8003144:	40005000 	.word	0x40005000

08003148 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003148:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800314a:	07da      	lsls	r2, r3, #31
{
 800314c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800314e:	d506      	bpl.n	800315e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003150:	6801      	ldr	r1, [r0, #0]
 8003152:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003154:	684a      	ldr	r2, [r1, #4]
 8003156:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800315a:	4322      	orrs	r2, r4
 800315c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800315e:	079c      	lsls	r4, r3, #30
 8003160:	d506      	bpl.n	8003170 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003162:	6801      	ldr	r1, [r0, #0]
 8003164:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003166:	684a      	ldr	r2, [r1, #4]
 8003168:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800316c:	4322      	orrs	r2, r4
 800316e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003170:	0759      	lsls	r1, r3, #29
 8003172:	d506      	bpl.n	8003182 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003174:	6801      	ldr	r1, [r0, #0]
 8003176:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003178:	684a      	ldr	r2, [r1, #4]
 800317a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800317e:	4322      	orrs	r2, r4
 8003180:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003182:	071a      	lsls	r2, r3, #28
 8003184:	d506      	bpl.n	8003194 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003186:	6801      	ldr	r1, [r0, #0]
 8003188:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800318a:	684a      	ldr	r2, [r1, #4]
 800318c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003190:	4322      	orrs	r2, r4
 8003192:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003194:	06dc      	lsls	r4, r3, #27
 8003196:	d506      	bpl.n	80031a6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003198:	6801      	ldr	r1, [r0, #0]
 800319a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800319c:	688a      	ldr	r2, [r1, #8]
 800319e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031a2:	4322      	orrs	r2, r4
 80031a4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031a6:	0699      	lsls	r1, r3, #26
 80031a8:	d506      	bpl.n	80031b8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031aa:	6801      	ldr	r1, [r0, #0]
 80031ac:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80031ae:	688a      	ldr	r2, [r1, #8]
 80031b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031b4:	4322      	orrs	r2, r4
 80031b6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031b8:	065a      	lsls	r2, r3, #25
 80031ba:	d50f      	bpl.n	80031dc <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031bc:	6801      	ldr	r1, [r0, #0]
 80031be:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80031c0:	684a      	ldr	r2, [r1, #4]
 80031c2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80031c6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031c8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031cc:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031ce:	d105      	bne.n	80031dc <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031d0:	684a      	ldr	r2, [r1, #4]
 80031d2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80031d4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80031d8:	4322      	orrs	r2, r4
 80031da:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031dc:	061b      	lsls	r3, r3, #24
 80031de:	d506      	bpl.n	80031ee <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031e0:	6802      	ldr	r2, [r0, #0]
 80031e2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80031e4:	6853      	ldr	r3, [r2, #4]
 80031e6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80031ea:	430b      	orrs	r3, r1
 80031ec:	6053      	str	r3, [r2, #4]
 80031ee:	bd10      	pop	{r4, pc}

080031f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80031f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031f4:	9d06      	ldr	r5, [sp, #24]
 80031f6:	4604      	mov	r4, r0
 80031f8:	460f      	mov	r7, r1
 80031fa:	4616      	mov	r6, r2
 80031fc:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031fe:	6821      	ldr	r1, [r4, #0]
 8003200:	69ca      	ldr	r2, [r1, #28]
 8003202:	ea37 0302 	bics.w	r3, r7, r2
 8003206:	bf0c      	ite	eq
 8003208:	2201      	moveq	r2, #1
 800320a:	2200      	movne	r2, #0
 800320c:	42b2      	cmp	r2, r6
 800320e:	d002      	beq.n	8003216 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003210:	2000      	movs	r0, #0
}
 8003212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8003216:	1c6b      	adds	r3, r5, #1
 8003218:	d0f2      	beq.n	8003200 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800321a:	b99d      	cbnz	r5, 8003244 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003224:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	f022 0201 	bic.w	r2, r2, #1
 800322c:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800322e:	2320      	movs	r3, #32
 8003230:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8003234:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8003238:	2300      	movs	r3, #0
 800323a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800323e:	2003      	movs	r0, #3
 8003240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003244:	f7fd fa02 	bl	800064c <HAL_GetTick>
 8003248:	eba0 0008 	sub.w	r0, r0, r8
 800324c:	4285      	cmp	r5, r0
 800324e:	d2d6      	bcs.n	80031fe <UART_WaitOnFlagUntilTimeout+0xe>
 8003250:	e7e4      	b.n	800321c <UART_WaitOnFlagUntilTimeout+0x2c>

08003252 <HAL_UART_Transmit>:
{
 8003252:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003256:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8003258:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800325c:	2b20      	cmp	r3, #32
{
 800325e:	4604      	mov	r4, r0
 8003260:	460d      	mov	r5, r1
 8003262:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8003264:	d14c      	bne.n	8003300 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8003266:	2900      	cmp	r1, #0
 8003268:	d048      	beq.n	80032fc <HAL_UART_Transmit+0xaa>
 800326a:	2a00      	cmp	r2, #0
 800326c:	d046      	beq.n	80032fc <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 800326e:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003272:	2b01      	cmp	r3, #1
 8003274:	d044      	beq.n	8003300 <HAL_UART_Transmit+0xae>
 8003276:	2301      	movs	r3, #1
 8003278:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800327c:	2300      	movs	r3, #0
 800327e:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003280:	2321      	movs	r3, #33	; 0x21
 8003282:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8003286:	f7fd f9e1 	bl	800064c <HAL_GetTick>
    huart->TxXferSize = Size;
 800328a:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 800328e:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8003290:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8003294:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8003298:	b292      	uxth	r2, r2
 800329a:	b962      	cbnz	r2, 80032b6 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800329c:	9700      	str	r7, [sp, #0]
 800329e:	4633      	mov	r3, r6
 80032a0:	2140      	movs	r1, #64	; 0x40
 80032a2:	4620      	mov	r0, r4
 80032a4:	f7ff ffa4 	bl	80031f0 <UART_WaitOnFlagUntilTimeout>
 80032a8:	b998      	cbnz	r0, 80032d2 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80032aa:	2320      	movs	r3, #32
 80032ac:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 80032b0:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 80032b4:	e00e      	b.n	80032d4 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 80032b6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032ba:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29b      	uxth	r3, r3
 80032c0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032c4:	2200      	movs	r2, #0
 80032c6:	4633      	mov	r3, r6
 80032c8:	2180      	movs	r1, #128	; 0x80
 80032ca:	4620      	mov	r0, r4
 80032cc:	f7ff ff90 	bl	80031f0 <UART_WaitOnFlagUntilTimeout>
 80032d0:	b118      	cbz	r0, 80032da <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 80032d2:	2003      	movs	r0, #3
}
 80032d4:	b002      	add	sp, #8
 80032d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032da:	68a3      	ldr	r3, [r4, #8]
 80032dc:	6822      	ldr	r2, [r4, #0]
 80032de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e2:	d107      	bne.n	80032f4 <HAL_UART_Transmit+0xa2>
 80032e4:	6923      	ldr	r3, [r4, #16]
 80032e6:	b92b      	cbnz	r3, 80032f4 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80032e8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80032ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f0:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 80032f2:	e7cf      	b.n	8003294 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80032f4:	782b      	ldrb	r3, [r5, #0]
 80032f6:	8513      	strh	r3, [r2, #40]	; 0x28
 80032f8:	3501      	adds	r5, #1
 80032fa:	e7cb      	b.n	8003294 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80032fc:	2001      	movs	r0, #1
 80032fe:	e7e9      	b.n	80032d4 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8003300:	2002      	movs	r0, #2
 8003302:	e7e7      	b.n	80032d4 <HAL_UART_Transmit+0x82>

08003304 <HAL_UART_Receive>:
{
 8003304:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003308:	4698      	mov	r8, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 800330a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800330e:	2b20      	cmp	r3, #32
{
 8003310:	4604      	mov	r4, r0
 8003312:	460d      	mov	r5, r1
 8003314:	4616      	mov	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8003316:	d160      	bne.n	80033da <HAL_UART_Receive+0xd6>
    if((pData == NULL ) || (Size == 0U))
 8003318:	2900      	cmp	r1, #0
 800331a:	d05c      	beq.n	80033d6 <HAL_UART_Receive+0xd2>
 800331c:	2a00      	cmp	r2, #0
 800331e:	d05a      	beq.n	80033d6 <HAL_UART_Receive+0xd2>
    __HAL_LOCK(huart);
 8003320:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003324:	2b01      	cmp	r3, #1
 8003326:	d058      	beq.n	80033da <HAL_UART_Receive+0xd6>
 8003328:	2301      	movs	r3, #1
 800332a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332e:	2300      	movs	r3, #0
 8003330:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003332:	2322      	movs	r3, #34	; 0x22
 8003334:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    tickstart = HAL_GetTick();
 8003338:	f7fd f988 	bl	800064c <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 800333c:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 800333e:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8003342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003346:	4607      	mov	r7, r0
    huart->RxXferCount = Size;
 8003348:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800334c:	d115      	bne.n	800337a <HAL_UART_Receive+0x76>
 800334e:	6923      	ldr	r3, [r4, #16]
 8003350:	b98b      	cbnz	r3, 8003376 <HAL_UART_Receive+0x72>
 8003352:	f240 13ff 	movw	r3, #511	; 0x1ff
 8003356:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 800335a:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 800335e:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8003362:	b280      	uxth	r0, r0
 8003364:	b9b8      	cbnz	r0, 8003396 <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 8003366:	2320      	movs	r3, #32
 8003368:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    __HAL_UNLOCK(huart);
 800336c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
}
 8003370:	b002      	add	sp, #8
 8003372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8003376:	23ff      	movs	r3, #255	; 0xff
 8003378:	e7ed      	b.n	8003356 <HAL_UART_Receive+0x52>
 800337a:	b923      	cbnz	r3, 8003386 <HAL_UART_Receive+0x82>
 800337c:	6923      	ldr	r3, [r4, #16]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0f9      	beq.n	8003376 <HAL_UART_Receive+0x72>
 8003382:	237f      	movs	r3, #127	; 0x7f
 8003384:	e7e7      	b.n	8003356 <HAL_UART_Receive+0x52>
 8003386:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800338a:	d1e6      	bne.n	800335a <HAL_UART_Receive+0x56>
 800338c:	6923      	ldr	r3, [r4, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f7      	beq.n	8003382 <HAL_UART_Receive+0x7e>
 8003392:	233f      	movs	r3, #63	; 0x3f
 8003394:	e7df      	b.n	8003356 <HAL_UART_Receive+0x52>
      huart->RxXferCount--;
 8003396:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800339a:	f8cd 8000 	str.w	r8, [sp]
      huart->RxXferCount--;
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80033a6:	2200      	movs	r2, #0
 80033a8:	463b      	mov	r3, r7
 80033aa:	2120      	movs	r1, #32
 80033ac:	4620      	mov	r0, r4
 80033ae:	f7ff ff1f 	bl	80031f0 <UART_WaitOnFlagUntilTimeout>
 80033b2:	b9a0      	cbnz	r0, 80033de <HAL_UART_Receive+0xda>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033b4:	68a3      	ldr	r3, [r4, #8]
 80033b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	d106      	bne.n	80033cc <HAL_UART_Receive+0xc8>
 80033be:	6922      	ldr	r2, [r4, #16]
 80033c0:	b922      	cbnz	r2, 80033cc <HAL_UART_Receive+0xc8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80033c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80033c4:	4033      	ands	r3, r6
 80033c6:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 80033ca:	e7c8      	b.n	800335e <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80033cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80033ce:	4033      	ands	r3, r6
 80033d0:	702b      	strb	r3, [r5, #0]
 80033d2:	3501      	adds	r5, #1
 80033d4:	e7c3      	b.n	800335e <HAL_UART_Receive+0x5a>
      return  HAL_ERROR;
 80033d6:	2001      	movs	r0, #1
 80033d8:	e7ca      	b.n	8003370 <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 80033da:	2002      	movs	r0, #2
 80033dc:	e7c8      	b.n	8003370 <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 80033de:	2003      	movs	r0, #3
 80033e0:	e7c6      	b.n	8003370 <HAL_UART_Receive+0x6c>

080033e2 <UART_CheckIdleState>:
{
 80033e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80033e4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e6:	2600      	movs	r6, #0
 80033e8:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80033ea:	f7fd f92f 	bl	800064c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80033f4:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033f6:	d417      	bmi.n	8003428 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	075b      	lsls	r3, r3, #29
 80033fe:	d50a      	bpl.n	8003416 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003400:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	2200      	movs	r2, #0
 8003408:	462b      	mov	r3, r5
 800340a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800340e:	4620      	mov	r0, r4
 8003410:	f7ff feee 	bl	80031f0 <UART_WaitOnFlagUntilTimeout>
 8003414:	b9a0      	cbnz	r0, 8003440 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8003416:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003418:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800341a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 800341e:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8003422:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8003426:	e00c      	b.n	8003442 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003428:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	4632      	mov	r2, r6
 8003430:	4603      	mov	r3, r0
 8003432:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003436:	4620      	mov	r0, r4
 8003438:	f7ff feda 	bl	80031f0 <UART_WaitOnFlagUntilTimeout>
 800343c:	2800      	cmp	r0, #0
 800343e:	d0db      	beq.n	80033f8 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8003440:	2003      	movs	r0, #3
}
 8003442:	b002      	add	sp, #8
 8003444:	bd70      	pop	{r4, r5, r6, pc}

08003446 <HAL_UART_Init>:
{
 8003446:	b510      	push	{r4, lr}
  if(huart == NULL)
 8003448:	4604      	mov	r4, r0
 800344a:	b360      	cbz	r0, 80034a6 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 800344c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003450:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003454:	b91b      	cbnz	r3, 800345e <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003456:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800345a:	f004 f897 	bl	800758c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800345e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003460:	2324      	movs	r3, #36	; 0x24
 8003462:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8003466:	6813      	ldr	r3, [r2, #0]
 8003468:	f023 0301 	bic.w	r3, r3, #1
 800346c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800346e:	4620      	mov	r0, r4
 8003470:	f7ff fd62 	bl	8002f38 <UART_SetConfig>
 8003474:	2801      	cmp	r0, #1
 8003476:	d016      	beq.n	80034a6 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003478:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800347a:	b113      	cbz	r3, 8003482 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 800347c:	4620      	mov	r0, r4
 800347e:	f7ff fe63 	bl	8003148 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003482:	6823      	ldr	r3, [r4, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800348a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003492:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800349a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800349c:	601a      	str	r2, [r3, #0]
}
 800349e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80034a2:	f7ff bf9e 	b.w	80033e2 <UART_CheckIdleState>
}
 80034a6:	2001      	movs	r0, #1
 80034a8:	bd10      	pop	{r4, pc}

080034aa <MPU9250_GetHandle>:
static void tap_cb(unsigned char direction, unsigned char count);


void MPU9250_GetHandle(MPU9250_t* mpu9250, I2C_HandleTypeDef* hi2cx)
{
	mpu9250->hi2c = hi2cx;
 80034aa:	6001      	str	r1, [r0, #0]
 80034ac:	4770      	bx	lr

080034ae <MPU9250_SetAddress>:
}

void MPU9250_SetAddress(MPU9250_t* mpu9250, MPU9250_Address_t Address)
{

	mpu9250->address = Address;
 80034ae:	7101      	strb	r1, [r0, #4]
 80034b0:	4770      	bx	lr

080034b2 <MPU9250_setLPF>:
	return 0;
}

inv_error_t MPU9250_setLPF(MPU9250_t * mpu9250, unsigned short lpf)
{
	return mpu_set_lpf(lpf);
 80034b2:	4608      	mov	r0, r1
 80034b4:	f000 bad8 	b.w	8003a68 <mpu_set_lpf>

080034b8 <MPU9250_setSampleRate>:
	return 0;
}

inv_error_t MPU9250_setSampleRate(MPU9250_t * mpu9250, unsigned short rate)
{
    return mpu_set_sample_rate(rate);
 80034b8:	4608      	mov	r0, r1
 80034ba:	f000 bc97 	b.w	8003dec <mpu_set_sample_rate>

080034be <MPU9250_setCompassSampleRate>:
	return 0;
}

inv_error_t MPU9250_setCompassSampleRate(MPU9250_t * mpu9250, unsigned short rate)
{
	return mpu_set_compass_sample_rate(rate);
 80034be:	4608      	mov	r0, r1
 80034c0:	f000 bb08 	b.w	8003ad4 <mpu_set_compass_sample_rate>

080034c4 <MPU9250_getGyroSens>:

	return 0;
}

float MPU9250_getGyroSens(MPU9250_t * mpu9250)
{
 80034c4:	b507      	push	{r0, r1, r2, lr}
	float sens;
	if (mpu_get_gyro_sens(&sens) == INV_SUCCESS)
 80034c6:	a801      	add	r0, sp, #4
 80034c8:	f000 fb2a 	bl	8003b20 <mpu_get_gyro_sens>
 80034cc:	b920      	cbnz	r0, 80034d8 <MPU9250_getGyroSens+0x14>
	{
		return sens;
 80034ce:	ed9d 0a01 	vldr	s0, [sp, #4]
	}
	return 0;
}
 80034d2:	b003      	add	sp, #12
 80034d4:	f85d fb04 	ldr.w	pc, [sp], #4
	return 0;
 80034d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80034e0 <MPU9250_getGyroSens+0x1c>
 80034dc:	e7f9      	b.n	80034d2 <MPU9250_getGyroSens+0xe>
 80034de:	bf00      	nop
 80034e0:	00000000 	.word	0x00000000

080034e4 <MPU9250_setGyroFSR>:
{
 80034e4:	b538      	push	{r3, r4, r5, lr}
 80034e6:	4605      	mov	r5, r0
	err = mpu_set_gyro_fsr(fsr);
 80034e8:	4608      	mov	r0, r1
 80034ea:	f000 fa51 	bl	8003990 <mpu_set_gyro_fsr>
	if (err == INV_SUCCESS)
 80034ee:	4604      	mov	r4, r0
 80034f0:	b920      	cbnz	r0, 80034fc <MPU9250_setGyroFSR+0x18>
		mpu9250->_gSense = MPU9250_getGyroSens(mpu9250);
 80034f2:	4628      	mov	r0, r5
 80034f4:	f7ff ffe6 	bl	80034c4 <MPU9250_getGyroSens>
 80034f8:	ed85 0a17 	vstr	s0, [r5, #92]	; 0x5c
}
 80034fc:	4620      	mov	r0, r4
 80034fe:	bd38      	pop	{r3, r4, r5, pc}

08003500 <MPU9250_getAccelSens>:

unsigned short MPU9250_getAccelSens(MPU9250_t * mpu9250)
{
 8003500:	b507      	push	{r0, r1, r2, lr}
	unsigned short sens;
	if (mpu_get_accel_sens(&sens) == INV_SUCCESS)
 8003502:	f10d 0006 	add.w	r0, sp, #6
 8003506:	f000 fb2b 	bl	8003b60 <mpu_get_accel_sens>
 800350a:	b920      	cbnz	r0, 8003516 <MPU9250_getAccelSens+0x16>
	{
		return sens;
 800350c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
	}
	return 0;
}
 8003510:	b003      	add	sp, #12
 8003512:	f85d fb04 	ldr.w	pc, [sp], #4
	return 0;
 8003516:	2000      	movs	r0, #0
 8003518:	e7fa      	b.n	8003510 <MPU9250_getAccelSens+0x10>

0800351a <MPU9250_setAccelFSR>:
{
 800351a:	b538      	push	{r3, r4, r5, lr}
 800351c:	4605      	mov	r5, r0
	err = mpu_set_accel_fsr(fsr);
 800351e:	4608      	mov	r0, r1
 8003520:	f000 fa6e 	bl	8003a00 <mpu_set_accel_fsr>
	if (err == INV_SUCCESS)
 8003524:	4604      	mov	r4, r0
 8003526:	b920      	cbnz	r0, 8003532 <MPU9250_setAccelFSR+0x18>
		mpu9250->_aSense = MPU9250_getAccelSens(mpu9250);
 8003528:	4628      	mov	r0, r5
 800352a:	f7ff ffe9 	bl	8003500 <MPU9250_getAccelSens>
 800352e:	f8a5 0058 	strh.w	r0, [r5, #88]	; 0x58
}
 8003532:	4620      	mov	r0, r4
 8003534:	bd38      	pop	{r3, r4, r5, pc}
	...

08003538 <MPU9250_begin>:
{
 8003538:	b537      	push	{r0, r1, r2, r4, r5, lr}
	result = mpu_init(&int_param, mpu9250->hi2c, mpu9250->address);
 800353a:	7902      	ldrb	r2, [r0, #4]
 800353c:	6801      	ldr	r1, [r0, #0]
{
 800353e:	4604      	mov	r4, r0
	result = mpu_init(&int_param, mpu9250->hi2c, mpu9250->address);
 8003540:	a801      	add	r0, sp, #4
 8003542:	f000 fd37 	bl	8003fb4 <mpu_init>
	if (result)
 8003546:	4605      	mov	r5, r0
 8003548:	b988      	cbnz	r0, 800356e <MPU9250_begin+0x36>
	mpu_set_bypass(1); // Place all slaves (including compass) on primary bus
 800354a:	2001      	movs	r0, #1
 800354c:	f000 fb50 	bl	8003bf0 <mpu_set_bypass>
	return INV_SUCCESS;
}

inv_error_t MPU9250_setSensors(MPU9250_t * mpu9250, unsigned char sensors)
{
	return mpu_set_sensors(sensors);
 8003550:	2079      	movs	r0, #121	; 0x79
 8003552:	f000 fc93 	bl	8003e7c <mpu_set_sensors>
	mpu9250->_mSense = 6.665f;
 8003556:	4b07      	ldr	r3, [pc, #28]	; (8003574 <MPU9250_begin+0x3c>)
 8003558:	6563      	str	r3, [r4, #84]	; 0x54
	mpu9250->_gSense = MPU9250_getGyroSens(mpu9250);
 800355a:	4620      	mov	r0, r4
 800355c:	f7ff ffb2 	bl	80034c4 <MPU9250_getGyroSens>
	mpu9250->_aSense = MPU9250_getAccelSens(mpu9250);
 8003560:	4620      	mov	r0, r4
	mpu9250->_gSense = MPU9250_getGyroSens(mpu9250);
 8003562:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
	mpu9250->_aSense = MPU9250_getAccelSens(mpu9250);
 8003566:	f7ff ffcb 	bl	8003500 <MPU9250_getAccelSens>
 800356a:	f8a4 0058 	strh.w	r0, [r4, #88]	; 0x58
}
 800356e:	4628      	mov	r0, r5
 8003570:	b003      	add	sp, #12
 8003572:	bd30      	pop	{r4, r5, pc}
 8003574:	40d547ae 	.word	0x40d547ae

08003578 <MPU9250_setSensors>:
	return mpu_set_sensors(sensors);
 8003578:	4608      	mov	r0, r1
 800357a:	f000 bc7f 	b.w	8003e7c <mpu_set_sensors>

0800357e <MPU9250_updateAccel>:

	return aErr | gErr | mErr | tErr;
}

int MPU9250_updateAccel(MPU9250_t * mpu9250)
{
 800357e:	b513      	push	{r0, r1, r4, lr}
 8003580:	4604      	mov	r4, r0
	short data[3];

	if (mpu_get_accel_reg(data, (unsigned long *)mpu9250->time))
 8003582:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003584:	4668      	mov	r0, sp
 8003586:	f000 f8dd 	bl	8003744 <mpu_get_accel_reg>
 800358a:	b950      	cbnz	r0, 80035a2 <MPU9250_updateAccel+0x24>
	{
		return INV_ERROR;
	}
	mpu9250->ax = data[X_AXIS];
 800358c:	f9bd 3000 	ldrsh.w	r3, [sp]
 8003590:	60a3      	str	r3, [r4, #8]
	mpu9250->ay = data[Y_AXIS];
 8003592:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8003596:	60e3      	str	r3, [r4, #12]
	mpu9250->az = data[Z_AXIS];
 8003598:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800359c:	6123      	str	r3, [r4, #16]
	return INV_SUCCESS;
}
 800359e:	b002      	add	sp, #8
 80035a0:	bd10      	pop	{r4, pc}
		return INV_ERROR;
 80035a2:	2020      	movs	r0, #32
 80035a4:	e7fb      	b.n	800359e <MPU9250_updateAccel+0x20>

080035a6 <MPU9250_updateGyro>:

int MPU9250_updateGyro(MPU9250_t * mpu9250)
{
 80035a6:	b513      	push	{r0, r1, r4, lr}
 80035a8:	4604      	mov	r4, r0
	short data[3];

	if (mpu_get_gyro_reg(data, (unsigned long *)mpu9250->time))
 80035aa:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80035ac:	4668      	mov	r0, sp
 80035ae:	f000 f893 	bl	80036d8 <mpu_get_gyro_reg>
 80035b2:	b950      	cbnz	r0, 80035ca <MPU9250_updateGyro+0x24>
	{
		return INV_ERROR;
	}
	mpu9250->gx = data[X_AXIS];
 80035b4:	f9bd 3000 	ldrsh.w	r3, [sp]
 80035b8:	6163      	str	r3, [r4, #20]
	mpu9250->gy = data[Y_AXIS];
 80035ba:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80035be:	61a3      	str	r3, [r4, #24]
	mpu9250->gz = data[Z_AXIS];
 80035c0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80035c4:	61e3      	str	r3, [r4, #28]
	return INV_SUCCESS;
}
 80035c6:	b002      	add	sp, #8
 80035c8:	bd10      	pop	{r4, pc}
		return INV_ERROR;
 80035ca:	2020      	movs	r0, #32
 80035cc:	e7fb      	b.n	80035c6 <MPU9250_updateGyro+0x20>

080035ce <MPU9250_updateCompass>:

int MPU9250_updateCompass(MPU9250_t * mpu9250)
{
 80035ce:	b513      	push	{r0, r1, r4, lr}
 80035d0:	4604      	mov	r4, r0
	short data[3];

	if (mpu_get_compass_reg(data, (unsigned long *)mpu9250->time))
 80035d2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80035d4:	4668      	mov	r0, sp
 80035d6:	f000 fe43 	bl	8004260 <mpu_get_compass_reg>
 80035da:	b950      	cbnz	r0, 80035f2 <MPU9250_updateCompass+0x24>
	{
		return INV_ERROR;
	}
	mpu9250->mx = data[X_AXIS];
 80035dc:	f9bd 3000 	ldrsh.w	r3, [sp]
 80035e0:	6223      	str	r3, [r4, #32]
	mpu9250->my = data[Y_AXIS];
 80035e2:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80035e6:	6263      	str	r3, [r4, #36]	; 0x24
	mpu9250->mz = data[Z_AXIS];
 80035e8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80035ec:	62a3      	str	r3, [r4, #40]	; 0x28
	return INV_SUCCESS;
}
 80035ee:	b002      	add	sp, #8
 80035f0:	bd10      	pop	{r4, pc}
		return INV_ERROR;
 80035f2:	2020      	movs	r0, #32
 80035f4:	e7fb      	b.n	80035ee <MPU9250_updateCompass+0x20>

080035f6 <MPU9250_updateTemperature>:

inv_error_t MPU9250_updateTemperature(MPU9250_t * mpu9250)
{
	return mpu_get_temperature((long *)mpu9250->temperature, (unsigned long *)mpu9250->time);
 80035f6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80035f8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80035fa:	f000 b8d7 	b.w	80037ac <mpu_get_temperature>

080035fe <MPU9250_update>:
{
 80035fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (sensors & UPDATE_ACCEL)
 8003602:	f011 0502 	ands.w	r5, r1, #2
{
 8003606:	4680      	mov	r8, r0
 8003608:	460c      	mov	r4, r1
	if (sensors & UPDATE_ACCEL)
 800360a:	d002      	beq.n	8003612 <MPU9250_update+0x14>
		aErr = MPU9250_updateAccel(mpu9250);
 800360c:	f7ff ffb7 	bl	800357e <MPU9250_updateAccel>
 8003610:	4605      	mov	r5, r0
	if (sensors & UPDATE_GYRO)
 8003612:	f014 0704 	ands.w	r7, r4, #4
 8003616:	d003      	beq.n	8003620 <MPU9250_update+0x22>
		gErr = MPU9250_updateGyro(mpu9250);
 8003618:	4640      	mov	r0, r8
 800361a:	f7ff ffc4 	bl	80035a6 <MPU9250_updateGyro>
 800361e:	4607      	mov	r7, r0
	if (sensors & UPDATE_COMPASS)
 8003620:	f014 0608 	ands.w	r6, r4, #8
 8003624:	d003      	beq.n	800362e <MPU9250_update+0x30>
		mErr = MPU9250_updateCompass(mpu9250);
 8003626:	4640      	mov	r0, r8
 8003628:	f7ff ffd1 	bl	80035ce <MPU9250_updateCompass>
 800362c:	4606      	mov	r6, r0
	if (sensors & UPDATE_TEMP)
 800362e:	f014 0010 	ands.w	r0, r4, #16
 8003632:	d002      	beq.n	800363a <MPU9250_update+0x3c>
		tErr = MPU9250_updateTemperature(mpu9250);
 8003634:	4640      	mov	r0, r8
 8003636:	f7ff ffde 	bl	80035f6 <MPU9250_updateTemperature>
	return aErr | gErr | mErr | tErr;
 800363a:	433d      	orrs	r5, r7
 800363c:	4335      	orrs	r5, r6
}
 800363e:	4328      	orrs	r0, r5
 8003640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003644 <MPU9250_calcAccel>:
	return dmp_set_pedometer_walk_time(time);
}

float MPU9250_calcAccel(MPU9250_t * mpu9250, int axis)
{
	return (float) axis / (float) mpu9250->_aSense;
 8003644:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8003648:	ee07 1a90 	vmov	s15, r1
 800364c:	ee00 3a10 	vmov	s0, r3
 8003650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003654:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 8003658:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800365c:	4770      	bx	lr

0800365e <MPU9250_calcGyro>:

float MPU9250_calcGyro(MPU9250_t * mpu9250, int axis)
{
	return (float) axis / (float) mpu9250->_gSense;
 800365e:	ee07 1a90 	vmov	s15, r1
 8003662:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003666:	edd0 7a17 	vldr	s15, [r0, #92]	; 0x5c
}
 800366a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800366e:	4770      	bx	lr

08003670 <MPU9250_calcMag>:

float MPU9250_calcMag(MPU9250_t * mpu9250, int axis)
{
	return (float) axis / (float) mpu9250->_mSense;
 8003670:	ee07 1a90 	vmov	s15, r1
 8003674:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003678:	edd0 7a15 	vldr	s15, [r0, #84]	; 0x54
}
 800367c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003680:	4770      	bx	lr
	...

08003684 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
int set_int_enable(unsigned char enable)
{
 8003684:	b513      	push	{r0, r1, r4, lr}
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8003686:	4c13      	ldr	r4, [pc, #76]	; (80036d4 <set_int_enable+0x50>)
 8003688:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800368c:	b193      	cbz	r3, 80036b4 <set_int_enable+0x30>
        if (enable)
 800368e:	b1c0      	cbz	r0, 80036c2 <set_int_enable+0x3e>
            tmp = BIT_DMP_INT_EN;
 8003690:	2302      	movs	r3, #2
        if (!st.chip_cfg.sensors)
            return -1;
        if (enable && st.chip_cfg.int_enable)
            return 0;
        if (enable)
            tmp = BIT_DATA_RDY_EN;
 8003692:	f88d 3007 	strb.w	r3, [sp, #7]
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8003696:	6821      	ldr	r1, [r4, #0]
 8003698:	6860      	ldr	r0, [r4, #4]
 800369a:	7c49      	ldrb	r1, [r1, #17]
 800369c:	7800      	ldrb	r0, [r0, #0]
 800369e:	f10d 0307 	add.w	r3, sp, #7
 80036a2:	2201      	movs	r2, #1
 80036a4:	f000 fe4e 	bl	8004344 <stm32_i2c_write>
 80036a8:	b970      	cbnz	r0, 80036c8 <set_int_enable+0x44>
            return -1;
        st.chip_cfg.int_enable = tmp;
 80036aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80036ae:	7463      	strb	r3, [r4, #17]
    }
    return 0;
}
 80036b0:	b002      	add	sp, #8
 80036b2:	bd10      	pop	{r4, pc}
        if (!st.chip_cfg.sensors)
 80036b4:	7aa2      	ldrb	r2, [r4, #10]
 80036b6:	b13a      	cbz	r2, 80036c8 <set_int_enable+0x44>
        if (enable && st.chip_cfg.int_enable)
 80036b8:	b118      	cbz	r0, 80036c2 <set_int_enable+0x3e>
 80036ba:	7c62      	ldrb	r2, [r4, #17]
 80036bc:	b93a      	cbnz	r2, 80036ce <set_int_enable+0x4a>
            tmp = BIT_DATA_RDY_EN;
 80036be:	2301      	movs	r3, #1
 80036c0:	e7e7      	b.n	8003692 <set_int_enable+0xe>
            tmp = 0x00;
 80036c2:	f88d 0007 	strb.w	r0, [sp, #7]
 80036c6:	e7e6      	b.n	8003696 <set_int_enable+0x12>
            return -1;
 80036c8:	f04f 30ff 	mov.w	r0, #4294967295
 80036cc:	e7f0      	b.n	80036b0 <set_int_enable+0x2c>
            return 0;
 80036ce:	4618      	mov	r0, r3
 80036d0:	e7ee      	b.n	80036b0 <set_int_enable+0x2c>
 80036d2:	bf00      	nop
 80036d4:	20000010 	.word	0x20000010

080036d8 <mpu_get_gyro_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_gyro_reg(short *data, unsigned long *timestamp)
{
 80036d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    unsigned char tmp[6];

    if (!(st.chip_cfg.sensors & INV_XYZ_GYRO))
 80036da:	4b19      	ldr	r3, [pc, #100]	; (8003740 <mpu_get_gyro_reg+0x68>)
 80036dc:	7a9a      	ldrb	r2, [r3, #10]
 80036de:	f012 0f70 	tst.w	r2, #112	; 0x70
{
 80036e2:	4605      	mov	r5, r0
 80036e4:	460e      	mov	r6, r1
    if (!(st.chip_cfg.sensors & INV_XYZ_GYRO))
 80036e6:	d104      	bne.n	80036f2 <mpu_get_gyro_reg+0x1a>
        return -1;
 80036e8:	f04f 34ff 	mov.w	r4, #4294967295
    data[1] = (tmp[2] << 8) | tmp[3];
    data[2] = (tmp[4] << 8) | tmp[5];
    if (timestamp)
        get_ms(timestamp);
    return 0;
}
 80036ec:	4620      	mov	r0, r4
 80036ee:	b002      	add	sp, #8
 80036f0:	bd70      	pop	{r4, r5, r6, pc}
    if (i2c_read(st.hw->addr, st.reg->raw_gyro, 6, tmp))
 80036f2:	6819      	ldr	r1, [r3, #0]
 80036f4:	6858      	ldr	r0, [r3, #4]
 80036f6:	7b89      	ldrb	r1, [r1, #14]
 80036f8:	7800      	ldrb	r0, [r0, #0]
 80036fa:	466b      	mov	r3, sp
 80036fc:	2206      	movs	r2, #6
 80036fe:	f000 fe33 	bl	8004368 <stm32_i2c_read>
 8003702:	4604      	mov	r4, r0
 8003704:	2800      	cmp	r0, #0
 8003706:	d1ef      	bne.n	80036e8 <mpu_get_gyro_reg+0x10>
    data[0] = (tmp[0] << 8) | tmp[1];
 8003708:	f89d 2000 	ldrb.w	r2, [sp]
 800370c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8003710:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003714:	802b      	strh	r3, [r5, #0]
    data[1] = (tmp[2] << 8) | tmp[3];
 8003716:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800371a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800371e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003722:	806b      	strh	r3, [r5, #2]
    data[2] = (tmp[4] << 8) | tmp[5];
 8003724:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003728:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800372c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003730:	80ab      	strh	r3, [r5, #4]
    if (timestamp)
 8003732:	2e00      	cmp	r6, #0
 8003734:	d0da      	beq.n	80036ec <mpu_get_gyro_reg+0x14>
        get_ms(timestamp);
 8003736:	4630      	mov	r0, r6
 8003738:	f000 fdf2 	bl	8004320 <stm32_get_clock_ms>
 800373c:	e7d6      	b.n	80036ec <mpu_get_gyro_reg+0x14>
 800373e:	bf00      	nop
 8003740:	20000010 	.word	0x20000010

08003744 <mpu_get_accel_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_accel_reg(short *data, unsigned long *timestamp)
{
 8003744:	b573      	push	{r0, r1, r4, r5, r6, lr}
    unsigned char tmp[6];

    if (!(st.chip_cfg.sensors & INV_XYZ_ACCEL))
 8003746:	4b18      	ldr	r3, [pc, #96]	; (80037a8 <mpu_get_accel_reg+0x64>)
 8003748:	7a9a      	ldrb	r2, [r3, #10]
 800374a:	0712      	lsls	r2, r2, #28
{
 800374c:	4605      	mov	r5, r0
 800374e:	460e      	mov	r6, r1
    if (!(st.chip_cfg.sensors & INV_XYZ_ACCEL))
 8003750:	d404      	bmi.n	800375c <mpu_get_accel_reg+0x18>
        return -1;
 8003752:	f04f 34ff 	mov.w	r4, #4294967295
    data[1] = (tmp[2] << 8) | tmp[3];
    data[2] = (tmp[4] << 8) | tmp[5];
    if (timestamp)
        get_ms(timestamp);
    return 0;
}
 8003756:	4620      	mov	r0, r4
 8003758:	b002      	add	sp, #8
 800375a:	bd70      	pop	{r4, r5, r6, pc}
    if (i2c_read(st.hw->addr, st.reg->raw_accel, 6, tmp))
 800375c:	6819      	ldr	r1, [r3, #0]
 800375e:	6858      	ldr	r0, [r3, #4]
 8003760:	7bc9      	ldrb	r1, [r1, #15]
 8003762:	7800      	ldrb	r0, [r0, #0]
 8003764:	466b      	mov	r3, sp
 8003766:	2206      	movs	r2, #6
 8003768:	f000 fdfe 	bl	8004368 <stm32_i2c_read>
 800376c:	4604      	mov	r4, r0
 800376e:	2800      	cmp	r0, #0
 8003770:	d1ef      	bne.n	8003752 <mpu_get_accel_reg+0xe>
    data[0] = (tmp[0] << 8) | tmp[1];
 8003772:	f89d 2000 	ldrb.w	r2, [sp]
 8003776:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800377a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800377e:	802b      	strh	r3, [r5, #0]
    data[1] = (tmp[2] << 8) | tmp[3];
 8003780:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8003784:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003788:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800378c:	806b      	strh	r3, [r5, #2]
    data[2] = (tmp[4] << 8) | tmp[5];
 800378e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8003792:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003796:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800379a:	80ab      	strh	r3, [r5, #4]
    if (timestamp)
 800379c:	2e00      	cmp	r6, #0
 800379e:	d0da      	beq.n	8003756 <mpu_get_accel_reg+0x12>
        get_ms(timestamp);
 80037a0:	4630      	mov	r0, r6
 80037a2:	f000 fdbd 	bl	8004320 <stm32_get_clock_ms>
 80037a6:	e7d6      	b.n	8003756 <mpu_get_accel_reg+0x12>
 80037a8:	20000010 	.word	0x20000010

080037ac <mpu_get_temperature>:
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
 80037ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
 80037b0:	4d1f      	ldr	r5, [pc, #124]	; (8003830 <mpu_get_temperature+0x84>)
 80037b2:	7aab      	ldrb	r3, [r5, #10]
{
 80037b4:	4606      	mov	r6, r0
 80037b6:	4688      	mov	r8, r1
    if (!(st.chip_cfg.sensors))
 80037b8:	b92b      	cbnz	r3, 80037c6 <mpu_get_temperature+0x1a>
        return -1;
 80037ba:	f04f 37ff 	mov.w	r7, #4294967295
    if (timestamp)
        get_ms(timestamp);

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
    return 0;
}
 80037be:	4638      	mov	r0, r7
 80037c0:	b002      	add	sp, #8
 80037c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
 80037c6:	6829      	ldr	r1, [r5, #0]
 80037c8:	6868      	ldr	r0, [r5, #4]
 80037ca:	7c09      	ldrb	r1, [r1, #16]
 80037cc:	7800      	ldrb	r0, [r0, #0]
 80037ce:	ab01      	add	r3, sp, #4
 80037d0:	2202      	movs	r2, #2
 80037d2:	f000 fdc9 	bl	8004368 <stm32_i2c_read>
 80037d6:	4607      	mov	r7, r0
 80037d8:	2800      	cmp	r0, #0
 80037da:	d1ee      	bne.n	80037ba <mpu_get_temperature+0xe>
    raw = (tmp[0] << 8) | tmp[1];
 80037dc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80037e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80037e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80037e8:	b21c      	sxth	r4, r3
    if (timestamp)
 80037ea:	f1b8 0f00 	cmp.w	r8, #0
 80037ee:	d002      	beq.n	80037f6 <mpu_get_temperature+0x4a>
        get_ms(timestamp);
 80037f0:	4640      	mov	r0, r8
 80037f2:	f000 fd95 	bl	8004320 <stm32_get_clock_ms>
    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
 80037f6:	686b      	ldr	r3, [r5, #4]
 80037f8:	ee07 4a90 	vmov	s15, r4
 80037fc:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8003800:	88db      	ldrh	r3, [r3, #6]
 8003802:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003806:	ee07 2a90 	vmov	s15, r2
 800380a:	ee06 3a90 	vmov	s13, r3
 800380e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003812:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003816:	ee77 7a67 	vsub.f32	s15, s14, s15
 800381a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800381e:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003834 <mpu_get_temperature+0x88>
 8003822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003826:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800382a:	edc6 7a00 	vstr	s15, [r6]
    return 0;
 800382e:	e7c6      	b.n	80037be <mpu_get_temperature+0x12>
 8003830:	20000010 	.word	0x20000010
 8003834:	420c0000 	.word	0x420c0000

08003838 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 8003838:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800383a:	4c53      	ldr	r4, [pc, #332]	; (8003988 <mpu_reset_fifo+0x150>)
 800383c:	7aa3      	ldrb	r3, [r4, #10]
 800383e:	b91b      	cbnz	r3, 8003848 <mpu_reset_fifo+0x10>
        return -1;
 8003840:	f04f 30ff 	mov.w	r0, #4294967295
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
 8003844:	b003      	add	sp, #12
 8003846:	bd30      	pop	{r4, r5, pc}
    data = 0;
 8003848:	ad02      	add	r5, sp, #8
 800384a:	2300      	movs	r3, #0
 800384c:	f805 3d01 	strb.w	r3, [r5, #-1]!
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8003850:	6821      	ldr	r1, [r4, #0]
 8003852:	6860      	ldr	r0, [r4, #4]
 8003854:	7c49      	ldrb	r1, [r1, #17]
 8003856:	7800      	ldrb	r0, [r0, #0]
 8003858:	462b      	mov	r3, r5
 800385a:	2201      	movs	r2, #1
 800385c:	f000 fd72 	bl	8004344 <stm32_i2c_write>
 8003860:	2800      	cmp	r0, #0
 8003862:	d1ed      	bne.n	8003840 <mpu_reset_fifo+0x8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8003864:	6821      	ldr	r1, [r4, #0]
 8003866:	6860      	ldr	r0, [r4, #4]
 8003868:	7949      	ldrb	r1, [r1, #5]
 800386a:	7800      	ldrb	r0, [r0, #0]
 800386c:	462b      	mov	r3, r5
 800386e:	2201      	movs	r2, #1
 8003870:	f000 fd68 	bl	8004344 <stm32_i2c_write>
 8003874:	2800      	cmp	r0, #0
 8003876:	d1e3      	bne.n	8003840 <mpu_reset_fifo+0x8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8003878:	6821      	ldr	r1, [r4, #0]
 800387a:	6860      	ldr	r0, [r4, #4]
 800387c:	7909      	ldrb	r1, [r1, #4]
 800387e:	7800      	ldrb	r0, [r0, #0]
 8003880:	462b      	mov	r3, r5
 8003882:	2201      	movs	r2, #1
 8003884:	f000 fd5e 	bl	8004344 <stm32_i2c_write>
 8003888:	2800      	cmp	r0, #0
 800388a:	d1d9      	bne.n	8003840 <mpu_reset_fifo+0x8>
    if (st.chip_cfg.dmp_on) {
 800388c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003890:	2b00      	cmp	r3, #0
 8003892:	d040      	beq.n	8003916 <mpu_reset_fifo+0xde>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8003894:	230c      	movs	r3, #12
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8003896:	6821      	ldr	r1, [r4, #0]
 8003898:	6860      	ldr	r0, [r4, #4]
        data = BIT_FIFO_RST | BIT_DMP_RST;
 800389a:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800389e:	2201      	movs	r2, #1
 80038a0:	462b      	mov	r3, r5
 80038a2:	7909      	ldrb	r1, [r1, #4]
 80038a4:	7800      	ldrb	r0, [r0, #0]
 80038a6:	f000 fd4d 	bl	8004344 <stm32_i2c_write>
 80038aa:	2800      	cmp	r0, #0
 80038ac:	d1c8      	bne.n	8003840 <mpu_reset_fifo+0x8>
        delay_ms(50);
 80038ae:	2032      	movs	r0, #50	; 0x32
 80038b0:	f7fc fed2 	bl	8000658 <HAL_Delay>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 80038b4:	23c0      	movs	r3, #192	; 0xc0
 80038b6:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80038ba:	7aa3      	ldrb	r3, [r4, #10]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80038bc:	6821      	ldr	r1, [r4, #0]
 80038be:	6860      	ldr	r0, [r4, #4]
 80038c0:	7909      	ldrb	r1, [r1, #4]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80038c2:	07da      	lsls	r2, r3, #31
            data |= BIT_AUX_IF_EN;
 80038c4:	bf44      	itt	mi
 80038c6:	23e0      	movmi	r3, #224	; 0xe0
 80038c8:	f88d 3007 	strbmi.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80038cc:	2201      	movs	r2, #1
 80038ce:	462b      	mov	r3, r5
 80038d0:	7800      	ldrb	r0, [r0, #0]
 80038d2:	f000 fd37 	bl	8004344 <stm32_i2c_write>
 80038d6:	2800      	cmp	r0, #0
 80038d8:	d1b2      	bne.n	8003840 <mpu_reset_fifo+0x8>
        if (st.chip_cfg.int_enable)
 80038da:	7c63      	ldrb	r3, [r4, #17]
 80038dc:	b103      	cbz	r3, 80038e0 <mpu_reset_fifo+0xa8>
            data = BIT_DMP_INT_EN;
 80038de:	2302      	movs	r3, #2
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80038e0:	6821      	ldr	r1, [r4, #0]
 80038e2:	6860      	ldr	r0, [r4, #4]
            data = 0;
 80038e4:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80038e8:	2201      	movs	r2, #1
 80038ea:	462b      	mov	r3, r5
 80038ec:	7c49      	ldrb	r1, [r1, #17]
 80038ee:	7800      	ldrb	r0, [r0, #0]
 80038f0:	f000 fd28 	bl	8004344 <stm32_i2c_write>
 80038f4:	2800      	cmp	r0, #0
 80038f6:	d1a3      	bne.n	8003840 <mpu_reset_fifo+0x8>
        data = 0;
 80038f8:	f88d 0007 	strb.w	r0, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 80038fc:	6821      	ldr	r1, [r4, #0]
 80038fe:	6860      	ldr	r0, [r4, #4]
 8003900:	462b      	mov	r3, r5
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8003902:	2201      	movs	r2, #1
 8003904:	7949      	ldrb	r1, [r1, #5]
 8003906:	7800      	ldrb	r0, [r0, #0]
 8003908:	f000 fd1c 	bl	8004344 <stm32_i2c_write>
 800390c:	3000      	adds	r0, #0
 800390e:	bf18      	it	ne
 8003910:	2001      	movne	r0, #1
 8003912:	4240      	negs	r0, r0
 8003914:	e796      	b.n	8003844 <mpu_reset_fifo+0xc>
        data = BIT_FIFO_RST;
 8003916:	2304      	movs	r3, #4
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8003918:	6821      	ldr	r1, [r4, #0]
 800391a:	6860      	ldr	r0, [r4, #4]
        data = BIT_FIFO_RST;
 800391c:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8003920:	2201      	movs	r2, #1
 8003922:	462b      	mov	r3, r5
 8003924:	7909      	ldrb	r1, [r1, #4]
 8003926:	7800      	ldrb	r0, [r0, #0]
 8003928:	f000 fd0c 	bl	8004344 <stm32_i2c_write>
 800392c:	2800      	cmp	r0, #0
 800392e:	d187      	bne.n	8003840 <mpu_reset_fifo+0x8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8003930:	7ca3      	ldrb	r3, [r4, #18]
 8003932:	b913      	cbnz	r3, 800393a <mpu_reset_fifo+0x102>
 8003934:	7aa3      	ldrb	r3, [r4, #10]
 8003936:	07db      	lsls	r3, r3, #31
 8003938:	d424      	bmi.n	8003984 <mpu_reset_fifo+0x14c>
            data = BIT_FIFO_EN;
 800393a:	2340      	movs	r3, #64	; 0x40
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800393c:	6821      	ldr	r1, [r4, #0]
 800393e:	6860      	ldr	r0, [r4, #4]
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8003940:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8003944:	2201      	movs	r2, #1
 8003946:	462b      	mov	r3, r5
 8003948:	7909      	ldrb	r1, [r1, #4]
 800394a:	7800      	ldrb	r0, [r0, #0]
 800394c:	f000 fcfa 	bl	8004344 <stm32_i2c_write>
 8003950:	2800      	cmp	r0, #0
 8003952:	f47f af75 	bne.w	8003840 <mpu_reset_fifo+0x8>
        delay_ms(50);
 8003956:	2032      	movs	r0, #50	; 0x32
 8003958:	f7fc fe7e 	bl	8000658 <HAL_Delay>
        if (st.chip_cfg.int_enable)
 800395c:	7c63      	ldrb	r3, [r4, #17]
 800395e:	b103      	cbz	r3, 8003962 <mpu_reset_fifo+0x12a>
            data = BIT_DATA_RDY_EN;
 8003960:	2301      	movs	r3, #1
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8003962:	6821      	ldr	r1, [r4, #0]
 8003964:	6860      	ldr	r0, [r4, #4]
            data = 0;
 8003966:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800396a:	2201      	movs	r2, #1
 800396c:	462b      	mov	r3, r5
 800396e:	7c49      	ldrb	r1, [r1, #17]
 8003970:	7800      	ldrb	r0, [r0, #0]
 8003972:	f000 fce7 	bl	8004344 <stm32_i2c_write>
 8003976:	2800      	cmp	r0, #0
 8003978:	f47f af62 	bne.w	8003840 <mpu_reset_fifo+0x8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 800397c:	6821      	ldr	r1, [r4, #0]
 800397e:	6860      	ldr	r0, [r4, #4]
 8003980:	4b02      	ldr	r3, [pc, #8]	; (800398c <mpu_reset_fifo+0x154>)
 8003982:	e7be      	b.n	8003902 <mpu_reset_fifo+0xca>
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8003984:	2360      	movs	r3, #96	; 0x60
 8003986:	e7d9      	b.n	800393c <mpu_reset_fifo+0x104>
 8003988:	20000010 	.word	0x20000010
 800398c:	20000020 	.word	0x20000020

08003990 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8003990:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8003992:	4c1a      	ldr	r4, [pc, #104]	; (80039fc <mpu_set_gyro_fsr+0x6c>)
 8003994:	7aa3      	ldrb	r3, [r4, #10]
 8003996:	b913      	cbnz	r3, 800399e <mpu_set_gyro_fsr+0xe>
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
        break;
    default:
        return -1;
 8003998:	f04f 30ff 	mov.w	r0, #4294967295
 800399c:	e01d      	b.n	80039da <mpu_set_gyro_fsr+0x4a>
    switch (fsr) {
 800399e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80039a2:	d024      	beq.n	80039ee <mpu_set_gyro_fsr+0x5e>
 80039a4:	d81b      	bhi.n	80039de <mpu_set_gyro_fsr+0x4e>
 80039a6:	28fa      	cmp	r0, #250	; 0xfa
 80039a8:	d1f6      	bne.n	8003998 <mpu_set_gyro_fsr+0x8>
        data = INV_FSR_250DPS << 3;
 80039aa:	2300      	movs	r3, #0
        data = INV_FSR_2000DPS << 3;
 80039ac:	f88d 3007 	strb.w	r3, [sp, #7]
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 80039b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80039b4:	7a23      	ldrb	r3, [r4, #8]
 80039b6:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 80039ba:	d01c      	beq.n	80039f6 <mpu_set_gyro_fsr+0x66>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 80039bc:	6821      	ldr	r1, [r4, #0]
 80039be:	6860      	ldr	r0, [r4, #4]
 80039c0:	7989      	ldrb	r1, [r1, #6]
 80039c2:	7800      	ldrb	r0, [r0, #0]
 80039c4:	f10d 0307 	add.w	r3, sp, #7
 80039c8:	2201      	movs	r2, #1
 80039ca:	f000 fcbb 	bl	8004344 <stm32_i2c_write>
 80039ce:	2800      	cmp	r0, #0
 80039d0:	d1e2      	bne.n	8003998 <mpu_set_gyro_fsr+0x8>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
 80039d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80039d6:	08db      	lsrs	r3, r3, #3
 80039d8:	7223      	strb	r3, [r4, #8]
    return 0;
}
 80039da:	b002      	add	sp, #8
 80039dc:	bd10      	pop	{r4, pc}
    switch (fsr) {
 80039de:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80039e2:	d006      	beq.n	80039f2 <mpu_set_gyro_fsr+0x62>
 80039e4:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80039e8:	d1d6      	bne.n	8003998 <mpu_set_gyro_fsr+0x8>
        data = INV_FSR_2000DPS << 3;
 80039ea:	2318      	movs	r3, #24
 80039ec:	e7de      	b.n	80039ac <mpu_set_gyro_fsr+0x1c>
        data = INV_FSR_500DPS << 3;
 80039ee:	2308      	movs	r3, #8
 80039f0:	e7dc      	b.n	80039ac <mpu_set_gyro_fsr+0x1c>
        data = INV_FSR_1000DPS << 3;
 80039f2:	2310      	movs	r3, #16
 80039f4:	e7da      	b.n	80039ac <mpu_set_gyro_fsr+0x1c>
        return 0;
 80039f6:	2000      	movs	r0, #0
 80039f8:	e7ef      	b.n	80039da <mpu_set_gyro_fsr+0x4a>
 80039fa:	bf00      	nop
 80039fc:	20000010 	.word	0x20000010

08003a00 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8003a00:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8003a02:	4c18      	ldr	r4, [pc, #96]	; (8003a64 <mpu_set_accel_fsr+0x64>)
 8003a04:	7aa3      	ldrb	r3, [r4, #10]
 8003a06:	b913      	cbnz	r3, 8003a0e <mpu_set_accel_fsr+0xe>
        break;
    case 16:
        data = INV_FSR_16G << 3;
        break;
    default:
        return -1;
 8003a08:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0c:	e01c      	b.n	8003a48 <mpu_set_accel_fsr+0x48>
    switch (fsr) {
 8003a0e:	2804      	cmp	r0, #4
 8003a10:	d022      	beq.n	8003a58 <mpu_set_accel_fsr+0x58>
 8003a12:	d81b      	bhi.n	8003a4c <mpu_set_accel_fsr+0x4c>
 8003a14:	2802      	cmp	r0, #2
 8003a16:	d1f7      	bne.n	8003a08 <mpu_set_accel_fsr+0x8>
        data = INV_FSR_2G << 3;
 8003a18:	2300      	movs	r3, #0
        data = INV_FSR_16G << 3;
 8003a1a:	f88d 3007 	strb.w	r3, [sp, #7]
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 8003a1e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003a22:	7a63      	ldrb	r3, [r4, #9]
 8003a24:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8003a28:	d01a      	beq.n	8003a60 <mpu_set_accel_fsr+0x60>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8003a2a:	6821      	ldr	r1, [r4, #0]
 8003a2c:	6860      	ldr	r0, [r4, #4]
 8003a2e:	79c9      	ldrb	r1, [r1, #7]
 8003a30:	7800      	ldrb	r0, [r0, #0]
 8003a32:	f10d 0307 	add.w	r3, sp, #7
 8003a36:	2201      	movs	r2, #1
 8003a38:	f000 fc84 	bl	8004344 <stm32_i2c_write>
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	d1e3      	bne.n	8003a08 <mpu_set_accel_fsr+0x8>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
 8003a40:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a44:	08db      	lsrs	r3, r3, #3
 8003a46:	7263      	strb	r3, [r4, #9]
    return 0;
}
 8003a48:	b002      	add	sp, #8
 8003a4a:	bd10      	pop	{r4, pc}
    switch (fsr) {
 8003a4c:	2808      	cmp	r0, #8
 8003a4e:	d005      	beq.n	8003a5c <mpu_set_accel_fsr+0x5c>
 8003a50:	2810      	cmp	r0, #16
 8003a52:	d1d9      	bne.n	8003a08 <mpu_set_accel_fsr+0x8>
        data = INV_FSR_16G << 3;
 8003a54:	2318      	movs	r3, #24
 8003a56:	e7e0      	b.n	8003a1a <mpu_set_accel_fsr+0x1a>
        data = INV_FSR_4G << 3;
 8003a58:	2308      	movs	r3, #8
 8003a5a:	e7de      	b.n	8003a1a <mpu_set_accel_fsr+0x1a>
        data = INV_FSR_8G << 3;
 8003a5c:	2310      	movs	r3, #16
 8003a5e:	e7dc      	b.n	8003a1a <mpu_set_accel_fsr+0x1a>
        return 0;
 8003a60:	2000      	movs	r0, #0
 8003a62:	e7f1      	b.n	8003a48 <mpu_set_accel_fsr+0x48>
 8003a64:	20000010 	.word	0x20000010

08003a68 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8003a68:	b513      	push	{r0, r1, r4, lr}
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8003a6a:	4c19      	ldr	r4, [pc, #100]	; (8003ad0 <mpu_set_lpf+0x68>)
 8003a6c:	7aa3      	ldrb	r3, [r4, #10]
 8003a6e:	b91b      	cbnz	r3, 8003a78 <mpu_set_lpf+0x10>
        return -1;
 8003a70:	f04f 30ff 	mov.w	r0, #4294967295
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
        return -1;
    st.chip_cfg.lpf = data;
    return 0;
}
 8003a74:	b002      	add	sp, #8
 8003a76:	bd10      	pop	{r4, pc}
    if (lpf >= 188)
 8003a78:	28bb      	cmp	r0, #187	; 0xbb
 8003a7a:	d916      	bls.n	8003aaa <mpu_set_lpf+0x42>
        data = INV_FILTER_188HZ;
 8003a7c:	2301      	movs	r3, #1
        data = INV_FILTER_5HZ;
 8003a7e:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.lpf == data)
 8003a82:	7ae2      	ldrb	r2, [r4, #11]
 8003a84:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d01f      	beq.n	8003acc <mpu_set_lpf+0x64>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8003a8c:	6821      	ldr	r1, [r4, #0]
 8003a8e:	6860      	ldr	r0, [r4, #4]
 8003a90:	7889      	ldrb	r1, [r1, #2]
 8003a92:	7800      	ldrb	r0, [r0, #0]
 8003a94:	f10d 0307 	add.w	r3, sp, #7
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f000 fc53 	bl	8004344 <stm32_i2c_write>
 8003a9e:	2800      	cmp	r0, #0
 8003aa0:	d1e6      	bne.n	8003a70 <mpu_set_lpf+0x8>
    st.chip_cfg.lpf = data;
 8003aa2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003aa6:	72e3      	strb	r3, [r4, #11]
    return 0;
 8003aa8:	e7e4      	b.n	8003a74 <mpu_set_lpf+0xc>
    else if (lpf >= 98)
 8003aaa:	2861      	cmp	r0, #97	; 0x61
 8003aac:	d901      	bls.n	8003ab2 <mpu_set_lpf+0x4a>
        data = INV_FILTER_98HZ;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e7e5      	b.n	8003a7e <mpu_set_lpf+0x16>
    else if (lpf >= 42)
 8003ab2:	2829      	cmp	r0, #41	; 0x29
 8003ab4:	d901      	bls.n	8003aba <mpu_set_lpf+0x52>
        data = INV_FILTER_42HZ;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e7e1      	b.n	8003a7e <mpu_set_lpf+0x16>
    else if (lpf >= 20)
 8003aba:	2813      	cmp	r0, #19
 8003abc:	d901      	bls.n	8003ac2 <mpu_set_lpf+0x5a>
        data = INV_FILTER_20HZ;
 8003abe:	2304      	movs	r3, #4
 8003ac0:	e7dd      	b.n	8003a7e <mpu_set_lpf+0x16>
    else if (lpf >= 10)
 8003ac2:	2809      	cmp	r0, #9
        data = INV_FILTER_10HZ;
 8003ac4:	bf8c      	ite	hi
 8003ac6:	2305      	movhi	r3, #5
        data = INV_FILTER_5HZ;
 8003ac8:	2306      	movls	r3, #6
 8003aca:	e7d8      	b.n	8003a7e <mpu_set_lpf+0x16>
        return 0;
 8003acc:	2000      	movs	r0, #0
 8003ace:	e7d1      	b.n	8003a74 <mpu_set_lpf+0xc>
 8003ad0:	20000010 	.word	0x20000010

08003ad4 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
 8003ad4:	b513      	push	{r0, r1, r4, lr}
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8003ad6:	b918      	cbnz	r0, 8003ae0 <mpu_set_compass_sample_rate+0xc>
        return -1;
 8003ad8:	f04f 30ff 	mov.w	r0, #4294967295
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
    return 0;
#else
    return -1;
#endif
}
 8003adc:	b002      	add	sp, #8
 8003ade:	bd10      	pop	{r4, pc}
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8003ae0:	4c0e      	ldr	r4, [pc, #56]	; (8003b1c <mpu_set_compass_sample_rate+0x48>)
 8003ae2:	89e3      	ldrh	r3, [r4, #14]
 8003ae4:	4298      	cmp	r0, r3
 8003ae6:	d8f7      	bhi.n	8003ad8 <mpu_set_compass_sample_rate+0x4>
 8003ae8:	2864      	cmp	r0, #100	; 0x64
 8003aea:	d8f5      	bhi.n	8003ad8 <mpu_set_compass_sample_rate+0x4>
    div = st.chip_cfg.sample_rate / rate - 1;
 8003aec:	fbb3 f0f0 	udiv	r0, r3, r0
 8003af0:	ab02      	add	r3, sp, #8
 8003af2:	3801      	subs	r0, #1
 8003af4:	f803 0d01 	strb.w	r0, [r3, #-1]!
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8003af8:	6821      	ldr	r1, [r4, #0]
 8003afa:	6860      	ldr	r0, [r4, #4]
 8003afc:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
 8003b00:	7800      	ldrb	r0, [r0, #0]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f000 fc1e 	bl	8004344 <stm32_i2c_write>
 8003b08:	2800      	cmp	r0, #0
 8003b0a:	d1e5      	bne.n	8003ad8 <mpu_set_compass_sample_rate+0x4>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 8003b0c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003b10:	89e3      	ldrh	r3, [r4, #14]
 8003b12:	3201      	adds	r2, #1
 8003b14:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b18:	8523      	strh	r3, [r4, #40]	; 0x28
    return 0;
 8003b1a:	e7df      	b.n	8003adc <mpu_set_compass_sample_rate+0x8>
 8003b1c:	20000010 	.word	0x20000010

08003b20 <mpu_get_gyro_sens>:
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
    switch (st.chip_cfg.gyro_fsr) {
 8003b20:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <mpu_get_gyro_sens+0x2c>)
 8003b22:	7a1b      	ldrb	r3, [r3, #8]
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	d80d      	bhi.n	8003b44 <mpu_get_gyro_sens+0x24>
 8003b28:	e8df f003 	tbb	[pc, r3]
 8003b2c:	0a080602 	.word	0x0a080602
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 8003b30:	4b07      	ldr	r3, [pc, #28]	; (8003b50 <mpu_get_gyro_sens+0x30>)
        break;
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
        break;
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 8003b32:	6003      	str	r3, [r0, #0]
        break;
    default:
        return -1;
    }
    return 0;
 8003b34:	2000      	movs	r0, #0
        break;
 8003b36:	4770      	bx	lr
        sens[0] = 65.5f;
 8003b38:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <mpu_get_gyro_sens+0x34>)
 8003b3a:	e7fa      	b.n	8003b32 <mpu_get_gyro_sens+0x12>
        sens[0] = 32.8f;
 8003b3c:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <mpu_get_gyro_sens+0x38>)
 8003b3e:	e7f8      	b.n	8003b32 <mpu_get_gyro_sens+0x12>
        sens[0] = 16.4f;
 8003b40:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <mpu_get_gyro_sens+0x3c>)
 8003b42:	e7f6      	b.n	8003b32 <mpu_get_gyro_sens+0x12>
        return -1;
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	20000010 	.word	0x20000010
 8003b50:	43030000 	.word	0x43030000
 8003b54:	42830000 	.word	0x42830000
 8003b58:	42033333 	.word	0x42033333
 8003b5c:	41833333 	.word	0x41833333

08003b60 <mpu_get_accel_sens>:
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
    switch (st.chip_cfg.accel_fsr) {
 8003b60:	4b0e      	ldr	r3, [pc, #56]	; (8003b9c <mpu_get_accel_sens+0x3c>)
 8003b62:	7a5a      	ldrb	r2, [r3, #9]
 8003b64:	2a03      	cmp	r2, #3
 8003b66:	d816      	bhi.n	8003b96 <mpu_get_accel_sens+0x36>
 8003b68:	e8df f002 	tbb	[pc, r2]
 8003b6c:	120f0c02 	.word	0x120f0c02
    case INV_FSR_2G:
        sens[0] = 16384;
 8003b70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
        break;
    case INV_FSR_8G:
        sens[0] = 4096;
        break;
    case INV_FSR_16G:
        sens[0] = 2048;
 8003b74:	8002      	strh	r2, [r0, #0]
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
 8003b76:	7cdb      	ldrb	r3, [r3, #19]
 8003b78:	b113      	cbz	r3, 8003b80 <mpu_get_accel_sens+0x20>
        sens[0] >>= 1;
 8003b7a:	8803      	ldrh	r3, [r0, #0]
 8003b7c:	085b      	lsrs	r3, r3, #1
 8003b7e:	8003      	strh	r3, [r0, #0]
    return 0;
 8003b80:	2000      	movs	r0, #0
 8003b82:	4770      	bx	lr
        sens[0] = 8192;
 8003b84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b88:	e7f4      	b.n	8003b74 <mpu_get_accel_sens+0x14>
        sens[0] = 4096;
 8003b8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b8e:	e7f1      	b.n	8003b74 <mpu_get_accel_sens+0x14>
        sens[0] = 2048;
 8003b90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b94:	e7ee      	b.n	8003b74 <mpu_get_accel_sens+0x14>
        return -1;
 8003b96:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9a:	4770      	bx	lr
 8003b9c:	20000010 	.word	0x20000010

08003ba0 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8003ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
 8003ba2:	4b12      	ldr	r3, [pc, #72]	; (8003bec <mpu_configure_fifo+0x4c>)
 8003ba4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8003ba8:	461e      	mov	r6, r3
 8003baa:	b9e2      	cbnz	r2, 8003be6 <mpu_configure_fifo+0x46>
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
 8003bac:	7a9c      	ldrb	r4, [r3, #10]
 8003bae:	b19c      	cbz	r4, 8003bd8 <mpu_configure_fifo+0x38>
    sensors &= ~INV_XYZ_COMPASS;
 8003bb0:	f000 05fe 	and.w	r5, r0, #254	; 0xfe
            return -1;
        prev = st.chip_cfg.fifo_enable;
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8003bb4:	402c      	ands	r4, r5
        prev = st.chip_cfg.fifo_enable;
 8003bb6:	7c1f      	ldrb	r7, [r3, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8003bb8:	741c      	strb	r4, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 8003bba:	1b2c      	subs	r4, r5, r4
 8003bbc:	bf18      	it	ne
 8003bbe:	f04f 34ff 	movne.w	r4, #4294967295
             * asleep.
             */
            result = -1;
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
 8003bc2:	b90d      	cbnz	r5, 8003bc8 <mpu_configure_fifo+0x28>
 8003bc4:	7d18      	ldrb	r0, [r3, #20]
 8003bc6:	b150      	cbz	r0, 8003bde <mpu_configure_fifo+0x3e>
            set_int_enable(1);
 8003bc8:	2001      	movs	r0, #1
 8003bca:	f7ff fd5b 	bl	8003684 <set_int_enable>
        else
            set_int_enable(0);
        if (sensors) {
 8003bce:	b145      	cbz	r5, 8003be2 <mpu_configure_fifo+0x42>
            if (mpu_reset_fifo()) {
 8003bd0:	f7ff fe32 	bl	8003838 <mpu_reset_fifo>
 8003bd4:	b128      	cbz	r0, 8003be2 <mpu_configure_fifo+0x42>
                st.chip_cfg.fifo_enable = prev;
 8003bd6:	7437      	strb	r7, [r6, #16]
            return -1;
 8003bd8:	f04f 34ff 	mov.w	r4, #4294967295
 8003bdc:	e001      	b.n	8003be2 <mpu_configure_fifo+0x42>
            set_int_enable(0);
 8003bde:	f7ff fd51 	bl	8003684 <set_int_enable>
            }
        }
    }

    return result;
}
 8003be2:	4620      	mov	r0, r4
 8003be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8003be6:	2400      	movs	r4, #0
 8003be8:	e7fb      	b.n	8003be2 <mpu_configure_fifo+0x42>
 8003bea:	bf00      	nop
 8003bec:	20000010 	.word	0x20000010

08003bf0 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 8003bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 8003bf2:	4c36      	ldr	r4, [pc, #216]	; (8003ccc <mpu_set_bypass+0xdc>)
 8003bf4:	7ca3      	ldrb	r3, [r4, #18]
 8003bf6:	4283      	cmp	r3, r0
{
 8003bf8:	4605      	mov	r5, r0
    if (st.chip_cfg.bypass_mode == bypass_on)
 8003bfa:	d041      	beq.n	8003c80 <mpu_set_bypass+0x90>
        return 0;

    if (bypass_on) {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8003bfc:	6821      	ldr	r1, [r4, #0]
 8003bfe:	6860      	ldr	r0, [r4, #4]
 8003c00:	7909      	ldrb	r1, [r1, #4]
 8003c02:	7800      	ldrb	r0, [r0, #0]
 8003c04:	f10d 0307 	add.w	r3, sp, #7
 8003c08:	2201      	movs	r2, #1
    if (bypass_on) {
 8003c0a:	2d00      	cmp	r5, #0
 8003c0c:	d03a      	beq.n	8003c84 <mpu_set_bypass+0x94>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8003c0e:	f000 fbab 	bl	8004368 <stm32_i2c_read>
 8003c12:	b118      	cbz	r0, 8003c1c <mpu_set_bypass+0x2c>
            return -1;
 8003c14:	f04f 30ff 	mov.w	r0, #4294967295
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
    return 0;
}
 8003c18:	b003      	add	sp, #12
 8003c1a:	bd30      	pop	{r4, r5, pc}
        tmp &= ~BIT_AUX_IF_EN;
 8003c1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8003c20:	6821      	ldr	r1, [r4, #0]
 8003c22:	6860      	ldr	r0, [r4, #4]
 8003c24:	7909      	ldrb	r1, [r1, #4]
        tmp &= ~BIT_AUX_IF_EN;
 8003c26:	f023 0320 	bic.w	r3, r3, #32
 8003c2a:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f10d 0307 	add.w	r3, sp, #7
 8003c34:	7800      	ldrb	r0, [r0, #0]
 8003c36:	f000 fb85 	bl	8004344 <stm32_i2c_write>
 8003c3a:	2800      	cmp	r0, #0
 8003c3c:	d1ea      	bne.n	8003c14 <mpu_set_bypass+0x24>
        delay_ms(3);
 8003c3e:	2003      	movs	r0, #3
 8003c40:	f7fc fd0a 	bl	8000658 <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 8003c44:	2302      	movs	r3, #2
 8003c46:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.active_low_int)
 8003c4a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8003c4e:	b113      	cbz	r3, 8003c56 <mpu_set_bypass+0x66>
            tmp |= BIT_ACTL;
 8003c50:	2382      	movs	r3, #130	; 0x82
            tmp = 0;
 8003c52:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.latched_int)
 8003c56:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8003c5a:	b12b      	cbz	r3, 8003c68 <mpu_set_bypass+0x78>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8003c5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003c60:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003c64:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8003c68:	6821      	ldr	r1, [r4, #0]
 8003c6a:	6860      	ldr	r0, [r4, #4]
 8003c6c:	7dc9      	ldrb	r1, [r1, #23]
 8003c6e:	7800      	ldrb	r0, [r0, #0]
 8003c70:	f10d 0307 	add.w	r3, sp, #7
 8003c74:	2201      	movs	r2, #1
 8003c76:	f000 fb65 	bl	8004344 <stm32_i2c_write>
 8003c7a:	2800      	cmp	r0, #0
 8003c7c:	d1ca      	bne.n	8003c14 <mpu_set_bypass+0x24>
    st.chip_cfg.bypass_mode = bypass_on;
 8003c7e:	74a5      	strb	r5, [r4, #18]
        return 0;
 8003c80:	2000      	movs	r0, #0
 8003c82:	e7c9      	b.n	8003c18 <mpu_set_bypass+0x28>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8003c84:	f000 fb70 	bl	8004368 <stm32_i2c_read>
 8003c88:	2800      	cmp	r0, #0
 8003c8a:	d1c3      	bne.n	8003c14 <mpu_set_bypass+0x24>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8003c8c:	7aa3      	ldrb	r3, [r4, #10]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8003c8e:	6821      	ldr	r1, [r4, #0]
 8003c90:	6860      	ldr	r0, [r4, #4]
 8003c92:	7909      	ldrb	r1, [r1, #4]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8003c94:	f013 0f01 	tst.w	r3, #1
 8003c98:	f89d 3007 	ldrb.w	r3, [sp, #7]
            tmp |= BIT_AUX_IF_EN;
 8003c9c:	bf14      	ite	ne
 8003c9e:	f043 0320 	orrne.w	r3, r3, #32
            tmp &= ~BIT_AUX_IF_EN;
 8003ca2:	f023 0320 	biceq.w	r3, r3, #32
 8003ca6:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8003caa:	2201      	movs	r2, #1
 8003cac:	f10d 0307 	add.w	r3, sp, #7
 8003cb0:	7800      	ldrb	r0, [r0, #0]
 8003cb2:	f000 fb47 	bl	8004344 <stm32_i2c_write>
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	d1ac      	bne.n	8003c14 <mpu_set_bypass+0x24>
        delay_ms(3);
 8003cba:	2003      	movs	r0, #3
 8003cbc:	f7fc fccc 	bl	8000658 <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 8003cc0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0c4      	beq.n	8003c52 <mpu_set_bypass+0x62>
            tmp = BIT_ACTL;
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	e7c2      	b.n	8003c52 <mpu_set_bypass+0x62>
 8003ccc:	20000010 	.word	0x20000010

08003cd0 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 8003cd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 8003cd2:	4c18      	ldr	r4, [pc, #96]	; (8003d34 <mpu_set_int_latched+0x64>)
 8003cd4:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8003cd8:	4283      	cmp	r3, r0
{
 8003cda:	4605      	mov	r5, r0
    if (st.chip_cfg.latched_int == enable)
 8003cdc:	d025      	beq.n	8003d2a <mpu_set_int_latched+0x5a>
        return 0;

    if (enable)
 8003cde:	b308      	cbz	r0, 8003d24 <mpu_set_int_latched+0x54>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8003ce0:	2330      	movs	r3, #48	; 0x30
 8003ce2:	f88d 3007 	strb.w	r3, [sp, #7]
    else
        tmp = 0;
    if (st.chip_cfg.bypass_mode)
 8003ce6:	7ca3      	ldrb	r3, [r4, #18]
 8003ce8:	b12b      	cbz	r3, 8003cf6 <mpu_set_int_latched+0x26>
        tmp |= BIT_BYPASS_EN;
 8003cea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003cee:	f043 0302 	orr.w	r3, r3, #2
 8003cf2:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.active_low_int)
 8003cf6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8003cfa:	b12b      	cbz	r3, 8003d08 <mpu_set_int_latched+0x38>
        tmp |= BIT_ACTL;
 8003cfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003d00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d04:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8003d08:	6821      	ldr	r1, [r4, #0]
 8003d0a:	6860      	ldr	r0, [r4, #4]
 8003d0c:	7dc9      	ldrb	r1, [r1, #23]
 8003d0e:	7800      	ldrb	r0, [r0, #0]
 8003d10:	f10d 0307 	add.w	r3, sp, #7
 8003d14:	2201      	movs	r2, #1
 8003d16:	f000 fb15 	bl	8004344 <stm32_i2c_write>
 8003d1a:	b940      	cbnz	r0, 8003d2e <mpu_set_int_latched+0x5e>
        return -1;
    st.chip_cfg.latched_int = enable;
 8003d1c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
    return 0;
}
 8003d20:	b003      	add	sp, #12
 8003d22:	bd30      	pop	{r4, r5, pc}
        tmp = 0;
 8003d24:	f88d 0007 	strb.w	r0, [sp, #7]
 8003d28:	e7dd      	b.n	8003ce6 <mpu_set_int_latched+0x16>
        return 0;
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	e7f8      	b.n	8003d20 <mpu_set_int_latched+0x50>
        return -1;
 8003d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d32:	e7f5      	b.n	8003d20 <mpu_set_int_latched+0x50>
 8003d34:	20000010 	.word	0x20000010

08003d38 <mpu_lp_accel_mode>:
    if (rate > 40)
 8003d38:	2828      	cmp	r0, #40	; 0x28
{
 8003d3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d3c:	4605      	mov	r5, r0
    if (rate > 40)
 8003d3e:	d902      	bls.n	8003d46 <mpu_lp_accel_mode+0xe>
        return -1;
 8003d40:	f04f 35ff 	mov.w	r5, #4294967295
 8003d44:	e014      	b.n	8003d70 <mpu_lp_accel_mode+0x38>
 8003d46:	4c28      	ldr	r4, [pc, #160]	; (8003de8 <mpu_lp_accel_mode+0xb0>)
    if (!rate) {
 8003d48:	b9a8      	cbnz	r0, 8003d76 <mpu_lp_accel_mode+0x3e>
        mpu_set_int_latched(0);
 8003d4a:	f7ff ffc1 	bl	8003cd0 <mpu_set_int_latched>
        tmp[1] = BIT_STBY_XYZG;
 8003d4e:	2307      	movs	r3, #7
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8003d50:	6821      	ldr	r1, [r4, #0]
 8003d52:	6860      	ldr	r0, [r4, #4]
        tmp[0] = 0;
 8003d54:	f88d 5004 	strb.w	r5, [sp, #4]
        tmp[1] = BIT_STBY_XYZG;
 8003d58:	f88d 3005 	strb.w	r3, [sp, #5]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	ab01      	add	r3, sp, #4
 8003d60:	7d49      	ldrb	r1, [r1, #21]
 8003d62:	7800      	ldrb	r0, [r0, #0]
 8003d64:	f000 faee 	bl	8004344 <stm32_i2c_write>
 8003d68:	4605      	mov	r5, r0
 8003d6a:	2800      	cmp	r0, #0
 8003d6c:	d1e8      	bne.n	8003d40 <mpu_lp_accel_mode+0x8>
        st.chip_cfg.lp_accel_mode = 0;
 8003d6e:	7520      	strb	r0, [r4, #20]
}
 8003d70:	4628      	mov	r0, r5
 8003d72:	b003      	add	sp, #12
 8003d74:	bd30      	pop	{r4, r5, pc}
    mpu_set_int_latched(1);
 8003d76:	2001      	movs	r0, #1
 8003d78:	f7ff ffaa 	bl	8003cd0 <mpu_set_int_latched>
    if (rate == 1)
 8003d7c:	2d01      	cmp	r5, #1
 8003d7e:	d122      	bne.n	8003dc6 <mpu_lp_accel_mode+0x8e>
        tmp[0] = INV_LPA_1_25HZ;
 8003d80:	2302      	movs	r3, #2
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 8003d82:	6821      	ldr	r1, [r4, #0]
 8003d84:	6860      	ldr	r0, [r4, #4]
        tmp[0] = INV_LPA_40HZ;
 8003d86:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	ab01      	add	r3, sp, #4
 8003d8e:	7a49      	ldrb	r1, [r1, #9]
 8003d90:	7800      	ldrb	r0, [r0, #0]
 8003d92:	f000 fad7 	bl	8004344 <stm32_i2c_write>
 8003d96:	2800      	cmp	r0, #0
 8003d98:	d1d2      	bne.n	8003d40 <mpu_lp_accel_mode+0x8>
    tmp[0] = BIT_LPA_CYCLE;
 8003d9a:	2320      	movs	r3, #32
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 8003d9c:	6821      	ldr	r1, [r4, #0]
 8003d9e:	6860      	ldr	r0, [r4, #4]
    tmp[0] = BIT_LPA_CYCLE;
 8003da0:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 8003da4:	2201      	movs	r2, #1
 8003da6:	ab01      	add	r3, sp, #4
 8003da8:	7d49      	ldrb	r1, [r1, #21]
 8003daa:	7800      	ldrb	r0, [r0, #0]
 8003dac:	f000 faca 	bl	8004344 <stm32_i2c_write>
 8003db0:	4605      	mov	r5, r0
 8003db2:	2800      	cmp	r0, #0
 8003db4:	d1c4      	bne.n	8003d40 <mpu_lp_accel_mode+0x8>
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8003db6:	2308      	movs	r3, #8
 8003db8:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.lp_accel_mode = 1;
 8003dba:	2301      	movs	r3, #1
    st.chip_cfg.clk_src = 0;
 8003dbc:	7320      	strb	r0, [r4, #12]
    st.chip_cfg.lp_accel_mode = 1;
 8003dbe:	7523      	strb	r3, [r4, #20]
    mpu_configure_fifo(0);
 8003dc0:	f7ff feee 	bl	8003ba0 <mpu_configure_fifo>
 8003dc4:	e7d4      	b.n	8003d70 <mpu_lp_accel_mode+0x38>
    else if (rate == 2)
 8003dc6:	2d02      	cmp	r5, #2
 8003dc8:	d101      	bne.n	8003dce <mpu_lp_accel_mode+0x96>
        tmp[0] = INV_LPA_2_5HZ;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e7d9      	b.n	8003d82 <mpu_lp_accel_mode+0x4a>
    else if (rate <= 5)
 8003dce:	2d05      	cmp	r5, #5
 8003dd0:	d801      	bhi.n	8003dd6 <mpu_lp_accel_mode+0x9e>
        tmp[0] = INV_LPA_5HZ;
 8003dd2:	2304      	movs	r3, #4
 8003dd4:	e7d5      	b.n	8003d82 <mpu_lp_accel_mode+0x4a>
    else if (rate <= 10)
 8003dd6:	2d0a      	cmp	r5, #10
 8003dd8:	d801      	bhi.n	8003dde <mpu_lp_accel_mode+0xa6>
        tmp[0] = INV_LPA_10HZ;
 8003dda:	2305      	movs	r3, #5
 8003ddc:	e7d1      	b.n	8003d82 <mpu_lp_accel_mode+0x4a>
    else if (rate <= 20)
 8003dde:	2d14      	cmp	r5, #20
        tmp[0] = INV_LPA_20HZ;
 8003de0:	bf94      	ite	ls
 8003de2:	2306      	movls	r3, #6
        tmp[0] = INV_LPA_40HZ;
 8003de4:	2307      	movhi	r3, #7
 8003de6:	e7cc      	b.n	8003d82 <mpu_lp_accel_mode+0x4a>
 8003de8:	20000010 	.word	0x20000010

08003dec <mpu_set_sample_rate>:
{
 8003dec:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!(st.chip_cfg.sensors))
 8003dee:	4b22      	ldr	r3, [pc, #136]	; (8003e78 <mpu_set_sample_rate+0x8c>)
 8003df0:	7a9a      	ldrb	r2, [r3, #10]
{
 8003df2:	4604      	mov	r4, r0
 8003df4:	461e      	mov	r6, r3
    if (!(st.chip_cfg.sensors))
 8003df6:	b922      	cbnz	r2, 8003e02 <mpu_set_sample_rate+0x16>
        return -1;
 8003df8:	f04f 34ff 	mov.w	r4, #4294967295
}
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	b002      	add	sp, #8
 8003e00:	bd70      	pop	{r4, r5, r6, pc}
    if (st.chip_cfg.dmp_on)
 8003e02:	f893 5024 	ldrb.w	r5, [r3, #36]	; 0x24
 8003e06:	2d00      	cmp	r5, #0
 8003e08:	d1f6      	bne.n	8003df8 <mpu_set_sample_rate+0xc>
        if (st.chip_cfg.lp_accel_mode) {
 8003e0a:	7d1b      	ldrb	r3, [r3, #20]
 8003e0c:	b14b      	cbz	r3, 8003e22 <mpu_set_sample_rate+0x36>
            if (rate && (rate <= 40)) {
 8003e0e:	1e43      	subs	r3, r0, #1
 8003e10:	2b27      	cmp	r3, #39	; 0x27
 8003e12:	d803      	bhi.n	8003e1c <mpu_set_sample_rate+0x30>
                mpu_lp_accel_mode(rate);
 8003e14:	f7ff ff90 	bl	8003d38 <mpu_lp_accel_mode>
                return 0;
 8003e18:	462c      	mov	r4, r5
 8003e1a:	e7ef      	b.n	8003dfc <mpu_set_sample_rate+0x10>
            mpu_lp_accel_mode(0);
 8003e1c:	4628      	mov	r0, r5
 8003e1e:	f7ff ff8b 	bl	8003d38 <mpu_lp_accel_mode>
 8003e22:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8003e26:	bf28      	it	cs
 8003e28:	f44f 747a 	movcs.w	r4, #1000	; 0x3e8
        data = 1000 / rate - 1;
 8003e2c:	2c04      	cmp	r4, #4
 8003e2e:	ab02      	add	r3, sp, #8
 8003e30:	bf38      	it	cc
 8003e32:	2404      	movcc	r4, #4
 8003e34:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8003e38:	fb95 f4f4 	sdiv	r4, r5, r4
 8003e3c:	3c01      	subs	r4, #1
 8003e3e:	f803 4d01 	strb.w	r4, [r3, #-1]!
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 8003e42:	6831      	ldr	r1, [r6, #0]
 8003e44:	6870      	ldr	r0, [r6, #4]
 8003e46:	7849      	ldrb	r1, [r1, #1]
 8003e48:	7800      	ldrb	r0, [r0, #0]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f000 fa7a 	bl	8004344 <stm32_i2c_write>
 8003e50:	4604      	mov	r4, r0
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d1d0      	bne.n	8003df8 <mpu_set_sample_rate+0xc>
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 8003e56:	8d30      	ldrh	r0, [r6, #40]	; 0x28
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8003e58:	f89d 3007 	ldrb.w	r3, [sp, #7]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 8003e5c:	2864      	cmp	r0, #100	; 0x64
 8003e5e:	bf28      	it	cs
 8003e60:	2064      	movcs	r0, #100	; 0x64
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8003e62:	3301      	adds	r3, #1
 8003e64:	fb95 f5f3 	sdiv	r5, r5, r3
 8003e68:	81f5      	strh	r5, [r6, #14]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 8003e6a:	f7ff fe33 	bl	8003ad4 <mpu_set_compass_sample_rate>
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8003e6e:	89f0      	ldrh	r0, [r6, #14]
 8003e70:	0840      	lsrs	r0, r0, #1
 8003e72:	f7ff fdf9 	bl	8003a68 <mpu_set_lpf>
        return 0;
 8003e76:	e7c1      	b.n	8003dfc <mpu_set_sample_rate+0x10>
 8003e78:	20000010 	.word	0x20000010

08003e7c <mpu_set_sensors>:
    if (sensors & INV_XYZ_GYRO)
 8003e7c:	f010 0370 	ands.w	r3, r0, #112	; 0x70
{
 8003e80:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e82:	4605      	mov	r5, r0
    if (sensors & INV_XYZ_GYRO)
 8003e84:	d014      	beq.n	8003eb0 <mpu_set_sensors+0x34>
        data = INV_CLK_PLL;
 8003e86:	2301      	movs	r3, #1
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8003e88:	4c49      	ldr	r4, [pc, #292]	; (8003fb0 <mpu_set_sensors+0x134>)
        data = BIT_SLEEP;
 8003e8a:	f88d 3006 	strb.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8003e8e:	6821      	ldr	r1, [r4, #0]
 8003e90:	6860      	ldr	r0, [r4, #4]
 8003e92:	7d49      	ldrb	r1, [r1, #21]
 8003e94:	7800      	ldrb	r0, [r0, #0]
 8003e96:	f10d 0306 	add.w	r3, sp, #6
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f000 fa52 	bl	8004344 <stm32_i2c_write>
 8003ea0:	b150      	cbz	r0, 8003eb8 <mpu_set_sensors+0x3c>
        st.chip_cfg.sensors = 0;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	72a3      	strb	r3, [r4, #10]
        return -1;
 8003ea6:	f04f 36ff 	mov.w	r6, #4294967295
}
 8003eaa:	4630      	mov	r0, r6
 8003eac:	b002      	add	sp, #8
 8003eae:	bd70      	pop	{r4, r5, r6, pc}
    else if (sensors)
 8003eb0:	2800      	cmp	r0, #0
 8003eb2:	d1e9      	bne.n	8003e88 <mpu_set_sensors+0xc>
        data = BIT_SLEEP;
 8003eb4:	2340      	movs	r3, #64	; 0x40
 8003eb6:	e7e7      	b.n	8003e88 <mpu_set_sensors+0xc>
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8003eb8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (!(sensors & INV_X_GYRO))
 8003ebc:	066e      	lsls	r6, r5, #25
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8003ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ec2:	7323      	strb	r3, [r4, #12]
        data |= BIT_STBY_XG;
 8003ec4:	bf5a      	itte	pl
 8003ec6:	2304      	movpl	r3, #4
 8003ec8:	f88d 3006 	strbpl.w	r3, [sp, #6]
    data = 0;
 8003ecc:	f88d 0006 	strbmi.w	r0, [sp, #6]
    if (!(sensors & INV_Y_GYRO))
 8003ed0:	06a9      	lsls	r1, r5, #26
        data |= BIT_STBY_YG;
 8003ed2:	bf58      	it	pl
 8003ed4:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8003ed8:	6821      	ldr	r1, [r4, #0]
 8003eda:	6860      	ldr	r0, [r4, #4]
 8003edc:	7d89      	ldrb	r1, [r1, #22]
        data |= BIT_STBY_YG;
 8003ede:	bf5c      	itt	pl
 8003ee0:	f043 0302 	orrpl.w	r3, r3, #2
 8003ee4:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (!(sensors & INV_Z_GYRO))
 8003ee8:	06ea      	lsls	r2, r5, #27
        data |= BIT_STBY_ZG;
 8003eea:	bf5e      	ittt	pl
 8003eec:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
 8003ef0:	f043 0301 	orrpl.w	r3, r3, #1
 8003ef4:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (!(sensors & INV_XYZ_ACCEL))
 8003ef8:	072b      	lsls	r3, r5, #28
        data |= BIT_STBY_XYZA;
 8003efa:	bf5e      	ittt	pl
 8003efc:	f89d 3006 	ldrbpl.w	r3, [sp, #6]
 8003f00:	f043 0338 	orrpl.w	r3, r3, #56	; 0x38
 8003f04:	f88d 3006 	strbpl.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f10d 0306 	add.w	r3, sp, #6
 8003f0e:	7800      	ldrb	r0, [r0, #0]
 8003f10:	f000 fa18 	bl	8004344 <stm32_i2c_write>
 8003f14:	2800      	cmp	r0, #0
 8003f16:	d1c4      	bne.n	8003ea2 <mpu_set_sensors+0x26>
    if (sensors && (sensors != INV_XYZ_ACCEL))
 8003f18:	f015 0ff7 	tst.w	r5, #247	; 0xf7
 8003f1c:	d001      	beq.n	8003f22 <mpu_set_sensors+0xa6>
        mpu_set_int_latched(0);
 8003f1e:	f7ff fed7 	bl	8003cd0 <mpu_set_int_latched>
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 8003f22:	6821      	ldr	r1, [r4, #0]
 8003f24:	6860      	ldr	r0, [r4, #4]
 8003f26:	7909      	ldrb	r1, [r1, #4]
 8003f28:	7800      	ldrb	r0, [r0, #0]
 8003f2a:	f10d 0307 	add.w	r3, sp, #7
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f000 fa1a 	bl	8004368 <stm32_i2c_read>
 8003f34:	2800      	cmp	r0, #0
 8003f36:	d1b6      	bne.n	8003ea6 <mpu_set_sensors+0x2a>
    if (sensors & INV_XYZ_COMPASS) {
 8003f38:	f015 0f01 	tst.w	r5, #1
 8003f3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
        data = AKM_SINGLE_MEASUREMENT;
 8003f40:	bf15      	itete	ne
 8003f42:	2211      	movne	r2, #17
        data = AKM_POWER_DOWN;
 8003f44:	2210      	moveq	r2, #16
        user_ctrl |= BIT_AUX_IF_EN;
 8003f46:	f043 0320 	orrne.w	r3, r3, #32
        user_ctrl &= ~BIT_AUX_IF_EN;
 8003f4a:	f023 0320 	biceq.w	r3, r3, #32
        data = AKM_SINGLE_MEASUREMENT;
 8003f4e:	bf14      	ite	ne
 8003f50:	f88d 2006 	strbne.w	r2, [sp, #6]
        data = AKM_POWER_DOWN;
 8003f54:	f88d 2006 	strbeq.w	r2, [sp, #6]
    if (st.chip_cfg.dmp_on)
 8003f58:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
        user_ctrl &= ~BIT_AUX_IF_EN;
 8003f5c:	f88d 3007 	strb.w	r3, [sp, #7]
 8003f60:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (st.chip_cfg.dmp_on)
 8003f64:	b30a      	cbz	r2, 8003faa <mpu_set_sensors+0x12e>
        user_ctrl |= BIT_DMP_EN;
 8003f66:	f063 037f 	orn	r3, r3, #127	; 0x7f
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 8003f6a:	6821      	ldr	r1, [r4, #0]
 8003f6c:	6860      	ldr	r0, [r4, #4]
        user_ctrl &= ~BIT_DMP_EN;
 8003f6e:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 8003f72:	2201      	movs	r2, #1
 8003f74:	f10d 0306 	add.w	r3, sp, #6
 8003f78:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 8003f7c:	7800      	ldrb	r0, [r0, #0]
 8003f7e:	f000 f9e1 	bl	8004344 <stm32_i2c_write>
 8003f82:	2800      	cmp	r0, #0
 8003f84:	d18f      	bne.n	8003ea6 <mpu_set_sensors+0x2a>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 8003f86:	6821      	ldr	r1, [r4, #0]
 8003f88:	6860      	ldr	r0, [r4, #4]
 8003f8a:	7909      	ldrb	r1, [r1, #4]
 8003f8c:	7800      	ldrb	r0, [r0, #0]
 8003f8e:	f10d 0307 	add.w	r3, sp, #7
 8003f92:	2201      	movs	r2, #1
 8003f94:	f000 f9d6 	bl	8004344 <stm32_i2c_write>
 8003f98:	4606      	mov	r6, r0
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	d183      	bne.n	8003ea6 <mpu_set_sensors+0x2a>
    st.chip_cfg.lp_accel_mode = 0;
 8003f9e:	7520      	strb	r0, [r4, #20]
    delay_ms(50);
 8003fa0:	2032      	movs	r0, #50	; 0x32
    st.chip_cfg.sensors = sensors;
 8003fa2:	72a5      	strb	r5, [r4, #10]
    delay_ms(50);
 8003fa4:	f7fc fb58 	bl	8000658 <HAL_Delay>
    return 0;
 8003fa8:	e77f      	b.n	8003eaa <mpu_set_sensors+0x2e>
        user_ctrl &= ~BIT_DMP_EN;
 8003faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fae:	e7dc      	b.n	8003f6a <mpu_set_sensors+0xee>
 8003fb0:	20000010 	.word	0x20000010

08003fb4 <mpu_init>:
{
 8003fb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    st.hw->addr = address;
 8003fb6:	4ca9      	ldr	r4, [pc, #676]	; (800425c <mpu_init+0x2a8>)
    stm32_i2c_init(hi2c);
 8003fb8:	4608      	mov	r0, r1
{
 8003fba:	4616      	mov	r6, r2
    stm32_i2c_init(hi2c);
 8003fbc:	f000 f9b8 	bl	8004330 <stm32_i2c_init>
    st.hw->addr = address;
 8003fc0:	6863      	ldr	r3, [r4, #4]
    data[0] = BIT_RESET;
 8003fc2:	ad04      	add	r5, sp, #16
    st.hw->addr = address;
 8003fc4:	701e      	strb	r6, [r3, #0]
    data[0] = BIT_RESET;
 8003fc6:	2380      	movs	r3, #128	; 0x80
 8003fc8:	f805 3d08 	strb.w	r3, [r5, #-8]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8003fcc:	6821      	ldr	r1, [r4, #0]
 8003fce:	4630      	mov	r0, r6
 8003fd0:	462b      	mov	r3, r5
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	7d49      	ldrb	r1, [r1, #21]
 8003fd6:	f000 f9b5 	bl	8004344 <stm32_i2c_write>
 8003fda:	4606      	mov	r6, r0
 8003fdc:	b120      	cbz	r0, 8003fe8 <mpu_init+0x34>
        return -1;
 8003fde:	f04f 34ff 	mov.w	r4, #4294967295
}
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	b004      	add	sp, #16
 8003fe6:	bd70      	pop	{r4, r5, r6, pc}
    delay_ms(100);
 8003fe8:	2064      	movs	r0, #100	; 0x64
 8003fea:	f7fc fb35 	bl	8000658 <HAL_Delay>
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8003fee:	6821      	ldr	r1, [r4, #0]
 8003ff0:	6860      	ldr	r0, [r4, #4]
    data[0] = 0x00;
 8003ff2:	f88d 6008 	strb.w	r6, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8003ff6:	462b      	mov	r3, r5
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	7d49      	ldrb	r1, [r1, #21]
 8003ffc:	7800      	ldrb	r0, [r0, #0]
 8003ffe:	f000 f9a1 	bl	8004344 <stm32_i2c_write>
 8004002:	2800      	cmp	r0, #0
 8004004:	d1eb      	bne.n	8003fde <mpu_init+0x2a>
   st.chip_cfg.accel_half = 0;
 8004006:	74e0      	strb	r0, [r4, #19]
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 8004008:	2348      	movs	r3, #72	; 0x48
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 800400a:	6821      	ldr	r1, [r4, #0]
 800400c:	6860      	ldr	r0, [r4, #4]
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 800400e:	f88d 3008 	strb.w	r3, [sp, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 8004012:	2201      	movs	r2, #1
 8004014:	462b      	mov	r3, r5
 8004016:	7a09      	ldrb	r1, [r1, #8]
 8004018:	7800      	ldrb	r0, [r0, #0]
 800401a:	f000 f993 	bl	8004344 <stm32_i2c_write>
 800401e:	2800      	cmp	r0, #0
 8004020:	d1dd      	bne.n	8003fde <mpu_init+0x2a>
    st.chip_cfg.sensors = 0xFF;
 8004022:	23ff      	movs	r3, #255	; 0xff
    st.chip_cfg.sample_rate = 0xFFFF;
 8004024:	f64f 72ff 	movw	r2, #65535	; 0xffff
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8004028:	2501      	movs	r5, #1
    st.chip_cfg.latched_int = 0;
 800402a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 800402e:	7560      	strb	r0, [r4, #21]
    st.chip_cfg.lp_accel_mode = 0;
 8004030:	7520      	strb	r0, [r4, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8004032:	f8c4 0016 	str.w	r0, [r4, #22]
 8004036:	f8c4 001a 	str.w	r0, [r4, #26]
 800403a:	f8c4 001e 	str.w	r0, [r4, #30]
    st.chip_cfg.dmp_on = 0;
 800403e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 8004042:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 8004046:	84e0      	strh	r0, [r4, #38]	; 0x26
    if (mpu_set_gyro_fsr(2000))
 8004048:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    st.chip_cfg.sensors = 0xFF;
 800404c:	72a3      	strb	r3, [r4, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 800404e:	7223      	strb	r3, [r4, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8004050:	7263      	strb	r3, [r4, #9]
    st.chip_cfg.lpf = 0xFF;
 8004052:	72e3      	strb	r3, [r4, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8004054:	81e2      	strh	r2, [r4, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 8004056:	7423      	strb	r3, [r4, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 8004058:	74a3      	strb	r3, [r4, #18]
    st.chip_cfg.compass_sample_rate = 0xFFFF;
 800405a:	8522      	strh	r2, [r4, #40]	; 0x28
    st.chip_cfg.clk_src = INV_CLK_PLL;
 800405c:	7325      	strb	r5, [r4, #12]
    st.chip_cfg.active_low_int = 1;
 800405e:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
    if (mpu_set_gyro_fsr(2000))
 8004062:	f7ff fc95 	bl	8003990 <mpu_set_gyro_fsr>
 8004066:	2800      	cmp	r0, #0
 8004068:	d1b9      	bne.n	8003fde <mpu_init+0x2a>
    if (mpu_set_accel_fsr(2))
 800406a:	2002      	movs	r0, #2
 800406c:	f7ff fcc8 	bl	8003a00 <mpu_set_accel_fsr>
 8004070:	2800      	cmp	r0, #0
 8004072:	d1b4      	bne.n	8003fde <mpu_init+0x2a>
    if (mpu_set_lpf(42))
 8004074:	202a      	movs	r0, #42	; 0x2a
 8004076:	f7ff fcf7 	bl	8003a68 <mpu_set_lpf>
 800407a:	2800      	cmp	r0, #0
 800407c:	d1af      	bne.n	8003fde <mpu_init+0x2a>
    if (mpu_set_sample_rate(50))
 800407e:	2032      	movs	r0, #50	; 0x32
 8004080:	f7ff feb4 	bl	8003dec <mpu_set_sample_rate>
 8004084:	2800      	cmp	r0, #0
 8004086:	d1aa      	bne.n	8003fde <mpu_init+0x2a>
    if (mpu_configure_fifo(0))
 8004088:	f7ff fd8a 	bl	8003ba0 <mpu_configure_fifo>
 800408c:	2800      	cmp	r0, #0
 800408e:	d1a6      	bne.n	8003fde <mpu_init+0x2a>
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
 8004090:	4628      	mov	r0, r5
 8004092:	f7ff fdad 	bl	8003bf0 <mpu_set_bypass>

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8004096:	250c      	movs	r5, #12
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
 8004098:	ab01      	add	r3, sp, #4
 800409a:	2201      	movs	r2, #1
 800409c:	2100      	movs	r1, #0
 800409e:	4628      	mov	r0, r5
 80040a0:	f000 f962 	bl	8004368 <stm32_i2c_read>
        if (!result && (data[0] == AKM_WHOAMI))
 80040a4:	b918      	cbnz	r0, 80040ae <mpu_init+0xfa>
 80040a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80040aa:	2b48      	cmp	r3, #72	; 0x48
 80040ac:	d00c      	beq.n	80040c8 <mpu_init+0x114>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 80040ae:	3501      	adds	r5, #1
 80040b0:	b2ed      	uxtb	r5, r5
 80040b2:	2d10      	cmp	r5, #16
 80040b4:	d1f0      	bne.n	8004098 <mpu_init+0xe4>
    if (mpu_set_compass_sample_rate(10))
 80040b6:	200a      	movs	r0, #10
 80040b8:	f7ff fd0c 	bl	8003ad4 <mpu_set_compass_sample_rate>
 80040bc:	4604      	mov	r4, r0
 80040be:	2800      	cmp	r0, #0
 80040c0:	d18d      	bne.n	8003fde <mpu_init+0x2a>
    mpu_set_sensors(0);
 80040c2:	f7ff fedb 	bl	8003e7c <mpu_set_sensors>
    return 0;
 80040c6:	e78c      	b.n	8003fe2 <mpu_init+0x2e>
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;

    data[0] = AKM_POWER_DOWN;
 80040c8:	2610      	movs	r6, #16
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80040ca:	ab01      	add	r3, sp, #4
 80040cc:	2201      	movs	r2, #1
 80040ce:	210a      	movs	r1, #10
 80040d0:	4628      	mov	r0, r5
    st.chip_cfg.compass_addr = akm_addr;
 80040d2:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
    data[0] = AKM_POWER_DOWN;
 80040d6:	f88d 6004 	strb.w	r6, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80040da:	f000 f933 	bl	8004344 <stm32_i2c_write>
 80040de:	2800      	cmp	r0, #0
 80040e0:	d1e9      	bne.n	80040b6 <mpu_init+0x102>
        return -1;
    delay_ms(1);
 80040e2:	2001      	movs	r0, #1
 80040e4:	f7fc fab8 	bl	8000658 <HAL_Delay>

    data[0] = AKM_FUSE_ROM_ACCESS;
 80040e8:	231f      	movs	r3, #31
 80040ea:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80040ee:	2201      	movs	r2, #1
 80040f0:	ab01      	add	r3, sp, #4
 80040f2:	210a      	movs	r1, #10
 80040f4:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 80040f8:	f000 f924 	bl	8004344 <stm32_i2c_write>
 80040fc:	2800      	cmp	r0, #0
 80040fe:	d1da      	bne.n	80040b6 <mpu_init+0x102>
        return -1;
    delay_ms(1);
 8004100:	2001      	movs	r0, #1
 8004102:	f7fc faa9 	bl	8000658 <HAL_Delay>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
 8004106:	ab01      	add	r3, sp, #4
 8004108:	2203      	movs	r2, #3
 800410a:	4631      	mov	r1, r6
 800410c:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8004110:	f000 f92a 	bl	8004368 <stm32_i2c_read>
 8004114:	2800      	cmp	r0, #0
 8004116:	d1ce      	bne.n	80040b6 <mpu_init+0x102>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8004118:	f89d 3004 	ldrb.w	r3, [sp, #4]
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;

    data[0] = AKM_POWER_DOWN;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800411c:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    data[0] = AKM_POWER_DOWN;
 8004120:	f88d 6004 	strb.w	r6, [sp, #4]
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8004124:	3380      	adds	r3, #128	; 0x80
 8004126:	85a3      	strh	r3, [r4, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 8004128:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800412c:	3380      	adds	r3, #128	; 0x80
 800412e:	85e3      	strh	r3, [r4, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 8004130:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004134:	3380      	adds	r3, #128	; 0x80
 8004136:	8623      	strh	r3, [r4, #48]	; 0x30
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8004138:	2201      	movs	r2, #1
 800413a:	ab01      	add	r3, sp, #4
 800413c:	210a      	movs	r1, #10
 800413e:	f000 f901 	bl	8004344 <stm32_i2c_write>
 8004142:	4605      	mov	r5, r0
 8004144:	2800      	cmp	r0, #0
 8004146:	d1b6      	bne.n	80040b6 <mpu_init+0x102>
        return -1;
    delay_ms(1);
 8004148:	2001      	movs	r0, #1
 800414a:	f7fc fa85 	bl	8000658 <HAL_Delay>

    mpu_set_bypass(0);
 800414e:	4628      	mov	r0, r5
 8004150:	f7ff fd4e 	bl	8003bf0 <mpu_set_bypass>

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
 8004154:	2340      	movs	r3, #64	; 0x40
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8004156:	6821      	ldr	r1, [r4, #0]
 8004158:	6860      	ldr	r0, [r4, #4]
    data[0] = 0x40;
 800415a:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 800415e:	2201      	movs	r2, #1
 8004160:	ab01      	add	r3, sp, #4
 8004162:	7e89      	ldrb	r1, [r1, #26]
 8004164:	7800      	ldrb	r0, [r0, #0]
 8004166:	f000 f8ed 	bl	8004344 <stm32_i2c_write>
 800416a:	2800      	cmp	r0, #0
 800416c:	d1a3      	bne.n	80040b6 <mpu_init+0x102>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 800416e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 8004172:	6821      	ldr	r1, [r4, #0]
 8004174:	6860      	ldr	r0, [r4, #4]
 8004176:	7f89      	ldrb	r1, [r1, #30]
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 8004178:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800417c:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 8004180:	2201      	movs	r2, #1
 8004182:	ab01      	add	r3, sp, #4
 8004184:	7800      	ldrb	r0, [r0, #0]
 8004186:	f000 f8dd 	bl	8004344 <stm32_i2c_write>
 800418a:	2800      	cmp	r0, #0
 800418c:	d193      	bne.n	80040b6 <mpu_init+0x102>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
 800418e:	2302      	movs	r3, #2
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 8004190:	6821      	ldr	r1, [r4, #0]
 8004192:	6860      	ldr	r0, [r4, #4]
    data[0] = AKM_REG_ST1;
 8004194:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 8004198:	2201      	movs	r2, #1
 800419a:	ab01      	add	r3, sp, #4
 800419c:	7fc9      	ldrb	r1, [r1, #31]
 800419e:	7800      	ldrb	r0, [r0, #0]
 80041a0:	f000 f8d0 	bl	8004344 <stm32_i2c_write>
 80041a4:	2800      	cmp	r0, #0
 80041a6:	d186      	bne.n	80040b6 <mpu_init+0x102>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
 80041a8:	2388      	movs	r3, #136	; 0x88
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 80041aa:	6821      	ldr	r1, [r4, #0]
 80041ac:	6860      	ldr	r0, [r4, #4]
    data[0] = BIT_SLAVE_EN | 8;
 80041ae:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 80041b2:	2201      	movs	r2, #1
 80041b4:	ab01      	add	r3, sp, #4
 80041b6:	f891 1020 	ldrb.w	r1, [r1, #32]
 80041ba:	7800      	ldrb	r0, [r0, #0]
 80041bc:	f000 f8c2 	bl	8004344 <stm32_i2c_write>
 80041c0:	2800      	cmp	r0, #0
 80041c2:	f47f af78 	bne.w	80040b6 <mpu_init+0x102>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
 80041c6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 80041ca:	6821      	ldr	r1, [r4, #0]
 80041cc:	6860      	ldr	r0, [r4, #4]
    data[0] = st.chip_cfg.compass_addr;
 80041ce:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 80041d2:	2201      	movs	r2, #1
 80041d4:	ab01      	add	r3, sp, #4
 80041d6:	f891 1021 	ldrb.w	r1, [r1, #33]	; 0x21
 80041da:	7800      	ldrb	r0, [r0, #0]
 80041dc:	f000 f8b2 	bl	8004344 <stm32_i2c_write>
 80041e0:	2800      	cmp	r0, #0
 80041e2:	f47f af68 	bne.w	80040b6 <mpu_init+0x102>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
 80041e6:	230a      	movs	r3, #10
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 80041e8:	6821      	ldr	r1, [r4, #0]
 80041ea:	6860      	ldr	r0, [r4, #4]
    data[0] = AKM_REG_CNTL;
 80041ec:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 80041f0:	2201      	movs	r2, #1
 80041f2:	ab01      	add	r3, sp, #4
 80041f4:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 80041f8:	7800      	ldrb	r0, [r0, #0]
 80041fa:	f000 f8a3 	bl	8004344 <stm32_i2c_write>
 80041fe:	2800      	cmp	r0, #0
 8004200:	f47f af59 	bne.w	80040b6 <mpu_init+0x102>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
 8004204:	2381      	movs	r3, #129	; 0x81
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8004206:	6821      	ldr	r1, [r4, #0]
 8004208:	6860      	ldr	r0, [r4, #4]
    data[0] = BIT_SLAVE_EN | 1;
 800420a:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 800420e:	2201      	movs	r2, #1
 8004210:	ab01      	add	r3, sp, #4
 8004212:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
 8004216:	7800      	ldrb	r0, [r0, #0]
 8004218:	f000 f894 	bl	8004344 <stm32_i2c_write>
 800421c:	2800      	cmp	r0, #0
 800421e:	f47f af4a 	bne.w	80040b6 <mpu_init+0x102>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
 8004222:	2311      	movs	r3, #17
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 8004224:	6821      	ldr	r1, [r4, #0]
 8004226:	6860      	ldr	r0, [r4, #4]
    data[0] = AKM_SINGLE_MEASUREMENT;
 8004228:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 800422c:	2201      	movs	r2, #1
 800422e:	ab01      	add	r3, sp, #4
 8004230:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 8004234:	7800      	ldrb	r0, [r0, #0]
 8004236:	f000 f885 	bl	8004344 <stm32_i2c_write>
 800423a:	2800      	cmp	r0, #0
 800423c:	f47f af3b 	bne.w	80040b6 <mpu_init+0x102>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
 8004240:	2303      	movs	r3, #3
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 8004242:	6821      	ldr	r1, [r4, #0]
 8004244:	6860      	ldr	r0, [r4, #4]
    data[0] = 0x03;
 8004246:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 800424a:	2201      	movs	r2, #1
 800424c:	ab01      	add	r3, sp, #4
 800424e:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 8004252:	7800      	ldrb	r0, [r0, #0]
 8004254:	f000 f876 	bl	8004344 <stm32_i2c_write>
 8004258:	e72d      	b.n	80040b6 <mpu_init+0x102>
 800425a:	bf00      	nop
 800425c:	20000010 	.word	0x20000010

08004260 <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
 8004260:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8004262:	4d2a      	ldr	r5, [pc, #168]	; (800430c <mpu_get_compass_reg+0xac>)
 8004264:	7aab      	ldrb	r3, [r5, #10]
 8004266:	07db      	lsls	r3, r3, #31
{
 8004268:	b085      	sub	sp, #20
 800426a:	4604      	mov	r4, r0
 800426c:	460e      	mov	r6, r1
    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 800426e:	d404      	bmi.n	800427a <mpu_get_compass_reg+0x1a>
        return -1;
 8004270:	f04f 37ff 	mov.w	r7, #4294967295
        get_ms(timestamp);
    return 0;
#else
    return -1;
#endif
}
 8004274:	4638      	mov	r0, r7
 8004276:	b005      	add	sp, #20
 8004278:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
 800427a:	6829      	ldr	r1, [r5, #0]
 800427c:	6868      	ldr	r0, [r5, #4]
 800427e:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8004282:	7800      	ldrb	r0, [r0, #0]
 8004284:	ab01      	add	r3, sp, #4
 8004286:	2208      	movs	r2, #8
 8004288:	f000 f86e 	bl	8004368 <stm32_i2c_read>
 800428c:	4607      	mov	r7, r0
 800428e:	2800      	cmp	r0, #0
 8004290:	d1ee      	bne.n	8004270 <mpu_get_compass_reg+0x10>
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
 8004292:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	2b01      	cmp	r3, #1
 800429c:	d130      	bne.n	8004300 <mpu_get_compass_reg+0xa0>
    if (tmp[7] & AKM_OVERFLOW)
 800429e:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	db2f      	blt.n	8004306 <mpu_get_compass_reg+0xa6>
    data[0] = (tmp[2] << 8) | tmp[1];
 80042a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80042aa:	f89d 1005 	ldrb.w	r1, [sp, #5]
    data[1] = (tmp[4] << 8) | tmp[3];
 80042ae:	f89d 2007 	ldrb.w	r2, [sp, #7]
    data[2] = (tmp[6] << 8) | tmp[5];
 80042b2:	f89d 000a 	ldrb.w	r0, [sp, #10]
    data[0] = (tmp[2] << 8) | tmp[1];
 80042b6:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
    data[1] = (tmp[4] << 8) | tmp[3];
 80042ba:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80042be:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    data[2] = (tmp[6] << 8) | tmp[5];
 80042c2:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80042c6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    data[0] = (tmp[2] << 8) | tmp[1];
 80042ca:	b209      	sxth	r1, r1
    data[1] = (tmp[4] << 8) | tmp[3];
 80042cc:	b212      	sxth	r2, r2
    data[2] = (tmp[6] << 8) | tmp[5];
 80042ce:	b21b      	sxth	r3, r3
    data[0] = (tmp[2] << 8) | tmp[1];
 80042d0:	8021      	strh	r1, [r4, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
 80042d2:	8062      	strh	r2, [r4, #2]
    data[2] = (tmp[6] << 8) | tmp[5];
 80042d4:	80a3      	strh	r3, [r4, #4]
    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
 80042d6:	8da8      	ldrh	r0, [r5, #44]	; 0x2c
 80042d8:	fb10 f101 	smulbb	r1, r0, r1
 80042dc:	1209      	asrs	r1, r1, #8
 80042de:	8021      	strh	r1, [r4, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
 80042e0:	8de9      	ldrh	r1, [r5, #46]	; 0x2e
 80042e2:	fb11 f202 	smulbb	r2, r1, r2
 80042e6:	1212      	asrs	r2, r2, #8
 80042e8:	8062      	strh	r2, [r4, #2]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
 80042ea:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 80042ec:	fb12 f303 	smulbb	r3, r2, r3
 80042f0:	121b      	asrs	r3, r3, #8
 80042f2:	80a3      	strh	r3, [r4, #4]
    if (timestamp)
 80042f4:	2e00      	cmp	r6, #0
 80042f6:	d0bd      	beq.n	8004274 <mpu_get_compass_reg+0x14>
        get_ms(timestamp);
 80042f8:	4630      	mov	r0, r6
 80042fa:	f000 f811 	bl	8004320 <stm32_get_clock_ms>
 80042fe:	e7b9      	b.n	8004274 <mpu_get_compass_reg+0x14>
        return -2;
 8004300:	f06f 0701 	mvn.w	r7, #1
 8004304:	e7b6      	b.n	8004274 <mpu_get_compass_reg+0x14>
        return -3;
 8004306:	f06f 0702 	mvn.w	r7, #2
 800430a:	e7b3      	b.n	8004274 <mpu_get_compass_reg+0x14>
 800430c:	20000010 	.word	0x20000010

08004310 <HAL_SYSTICK_Callback>:

volatile uint32_t counter = 0;

void HAL_SYSTICK_Callback()
{
	counter++;
 8004310:	4a02      	ldr	r2, [pc, #8]	; (800431c <HAL_SYSTICK_Callback+0xc>)
 8004312:	6813      	ldr	r3, [r2, #0]
 8004314:	3301      	adds	r3, #1
 8004316:	6013      	str	r3, [r2, #0]
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	20000268 	.word	0x20000268

08004320 <stm32_get_clock_ms>:
}

int stm32_get_clock_ms(unsigned long *count)
{
	*count = counter;
 8004320:	4b02      	ldr	r3, [pc, #8]	; (800432c <stm32_get_clock_ms+0xc>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6003      	str	r3, [r0, #0]
	return 0;
}
 8004326:	2000      	movs	r0, #0
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	20000268 	.word	0x20000268

08004330 <stm32_i2c_init>:
#include "stm32_mpu9250_i2c.h"

I2C_HandleTypeDef hi2c;

void stm32_i2c_init(I2C_HandleTypeDef *hi2cx)
{
 8004330:	b508      	push	{r3, lr}
	hi2c = *hi2cx;
 8004332:	4601      	mov	r1, r0
 8004334:	224c      	movs	r2, #76	; 0x4c
 8004336:	4802      	ldr	r0, [pc, #8]	; (8004340 <stm32_i2c_init+0x10>)
 8004338:	f003 fbfc 	bl	8007b34 <memcpy>
 800433c:	bd08      	pop	{r3, pc}
 800433e:	bf00      	nop
 8004340:	20000314 	.word	0x20000314

08004344 <stm32_i2c_write>:

}
int stm32_i2c_write(unsigned char slave_addr, unsigned char reg_addr,
                       unsigned char length, unsigned char * data)
{
 8004344:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Write(&hi2c, slave_addr << 1, reg_addr, 1, data, length, 0xFFFF);
 8004346:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	2301      	movs	r3, #1
 800434e:	9201      	str	r2, [sp, #4]
 8004350:	9402      	str	r4, [sp, #8]
 8004352:	460a      	mov	r2, r1
 8004354:	fa00 f103 	lsl.w	r1, r0, r3
 8004358:	4802      	ldr	r0, [pc, #8]	; (8004364 <stm32_i2c_write+0x20>)
 800435a:	f7fc fe72 	bl	8001042 <HAL_I2C_Mem_Write>

	return 0;
}
 800435e:	2000      	movs	r0, #0
 8004360:	b004      	add	sp, #16
 8004362:	bd10      	pop	{r4, pc}
 8004364:	20000314 	.word	0x20000314

08004368 <stm32_i2c_read>:
int stm32_i2c_read(unsigned char slave_addr, unsigned char reg_addr,
                       unsigned char length, unsigned char * data)
{
 8004368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Read(&hi2c, slave_addr << 1, reg_addr, 1, data, length, 0xFFFF);
 800436a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	2301      	movs	r3, #1
 8004372:	9201      	str	r2, [sp, #4]
 8004374:	9402      	str	r4, [sp, #8]
 8004376:	460a      	mov	r2, r1
 8004378:	fa00 f103 	lsl.w	r1, r0, r3
 800437c:	4802      	ldr	r0, [pc, #8]	; (8004388 <stm32_i2c_read+0x20>)
 800437e:	f7fc ff18 	bl	80011b2 <HAL_I2C_Mem_Read>

	return 0;
}
 8004382:	2000      	movs	r0, #0
 8004384:	b004      	add	sp, #16
 8004386:	bd10      	pop	{r4, pc}
 8004388:	20000314 	.word	0x20000314

0800438c <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800438c:	4b03      	ldr	r3, [pc, #12]	; (800439c <disk_status+0x10>)
 800438e:	181a      	adds	r2, r3, r0
 8004390:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004394:	7a10      	ldrb	r0, [r2, #8]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4718      	bx	r3
 800439c:	2000028c 	.word	0x2000028c

080043a0 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 80043a0:	4b06      	ldr	r3, [pc, #24]	; (80043bc <disk_initialize+0x1c>)
 80043a2:	5c1a      	ldrb	r2, [r3, r0]
 80043a4:	b942      	cbnz	r2, 80043b8 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 80043a6:	2201      	movs	r2, #1
 80043a8:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80043aa:	181a      	adds	r2, r3, r0
 80043ac:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80043b0:	7a10      	ldrb	r0, [r2, #8]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4718      	bx	r3
  }
  return stat;
}
 80043b8:	2000      	movs	r0, #0
 80043ba:	4770      	bx	lr
 80043bc:	2000028c 	.word	0x2000028c

080043c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80043c0:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80043c2:	4c05      	ldr	r4, [pc, #20]	; (80043d8 <disk_read+0x18>)
 80043c4:	1825      	adds	r5, r4, r0
 80043c6:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80043ca:	6860      	ldr	r0, [r4, #4]
 80043cc:	6884      	ldr	r4, [r0, #8]
 80043ce:	7a28      	ldrb	r0, [r5, #8]
 80043d0:	46a4      	mov	ip, r4
  return res;
}
 80043d2:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80043d4:	4760      	bx	ip
 80043d6:	bf00      	nop
 80043d8:	2000028c 	.word	0x2000028c

080043dc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80043dc:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80043de:	4c05      	ldr	r4, [pc, #20]	; (80043f4 <disk_write+0x18>)
 80043e0:	1825      	adds	r5, r4, r0
 80043e2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80043e6:	6860      	ldr	r0, [r4, #4]
 80043e8:	68c4      	ldr	r4, [r0, #12]
 80043ea:	7a28      	ldrb	r0, [r5, #8]
 80043ec:	46a4      	mov	ip, r4
  return res;
}
 80043ee:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80043f0:	4760      	bx	ip
 80043f2:	bf00      	nop
 80043f4:	2000028c 	.word	0x2000028c

080043f8 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <disk_ioctl+0x18>)
{
 80043fa:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80043fc:	181c      	adds	r4, r3, r0
 80043fe:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004402:	7a20      	ldrb	r0, [r4, #8]
 8004404:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8004406:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	4718      	bx	r3
 800440e:	bf00      	nop
 8004410:	2000028c 	.word	0x2000028c

08004414 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004414:	3801      	subs	r0, #1
 8004416:	440a      	add	r2, r1
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8004418:	4291      	cmp	r1, r2
 800441a:	d100      	bne.n	800441e <mem_cpy+0xa>
		*d++ = *s++;
}
 800441c:	4770      	bx	lr
		*d++ = *s++;
 800441e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004422:	f800 3f01 	strb.w	r3, [r0, #1]!
 8004426:	e7f7      	b.n	8004418 <mem_cpy+0x4>

08004428 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004428:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 800442a:	4290      	cmp	r0, r2
 800442c:	d100      	bne.n	8004430 <mem_set+0x8>
		*d++ = (BYTE)val;
}
 800442e:	4770      	bx	lr
		*d++ = (BYTE)val;
 8004430:	f800 1b01 	strb.w	r1, [r0], #1
 8004434:	e7f9      	b.n	800442a <mem_set+0x2>
	...

08004438 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004438:	4a17      	ldr	r2, [pc, #92]	; (8004498 <chk_lock+0x60>)
 800443a:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800443c:	2400      	movs	r4, #0
 800443e:	4623      	mov	r3, r4
 8004440:	4616      	mov	r6, r2
		if (Files[i].fs) {	/* Existing entry */
 8004442:	6815      	ldr	r5, [r2, #0]
 8004444:	b1c5      	cbz	r5, 8004478 <chk_lock+0x40>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004446:	f8d0 7200 	ldr.w	r7, [r0, #512]	; 0x200
 800444a:	42bd      	cmp	r5, r7
 800444c:	d115      	bne.n	800447a <chk_lock+0x42>
 800444e:	6857      	ldr	r7, [r2, #4]
 8004450:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 8004454:	42af      	cmp	r7, r5
 8004456:	d110      	bne.n	800447a <chk_lock+0x42>
				Files[i].clu == dp->sclust &&
 8004458:	8917      	ldrh	r7, [r2, #8]
 800445a:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 800445e:	42af      	cmp	r7, r5
 8004460:	d10b      	bne.n	800447a <chk_lock+0x42>
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004462:	b9b9      	cbnz	r1, 8004494 <chk_lock+0x5c>
 8004464:	220c      	movs	r2, #12
 8004466:	fb02 6303 	mla	r3, r2, r3, r6
 800446a:	895b      	ldrh	r3, [r3, #10]
 800446c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004470:	bf14      	ite	ne
 8004472:	2000      	movne	r0, #0
 8004474:	2010      	moveq	r0, #16
 8004476:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8004478:	2401      	movs	r4, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 800447a:	3301      	adds	r3, #1
 800447c:	2b02      	cmp	r3, #2
 800447e:	f102 020c 	add.w	r2, r2, #12
 8004482:	d1de      	bne.n	8004442 <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004484:	b10c      	cbz	r4, 800448a <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004486:	2000      	movs	r0, #0
 8004488:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800448a:	2902      	cmp	r1, #2
 800448c:	bf0c      	ite	eq
 800448e:	2000      	moveq	r0, #0
 8004490:	2012      	movne	r0, #18
 8004492:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004494:	2010      	movs	r0, #16
 8004496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004498:	20000270 	.word	0x20000270

0800449c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800449c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800449e:	4c20      	ldr	r4, [pc, #128]	; (8004520 <inc_lock+0x84>)
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 80044a0:	f8d0 6200 	ldr.w	r6, [r0, #512]	; 0x200
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80044a4:	2300      	movs	r3, #0
 80044a6:	4622      	mov	r2, r4
		if (Files[i].fs == dp->fs &&
 80044a8:	6825      	ldr	r5, [r4, #0]
 80044aa:	42b5      	cmp	r5, r6
 80044ac:	d109      	bne.n	80044c2 <inc_lock+0x26>
 80044ae:	6867      	ldr	r7, [r4, #4]
 80044b0:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 80044b4:	42af      	cmp	r7, r5
 80044b6:	d104      	bne.n	80044c2 <inc_lock+0x26>
			Files[i].clu == dp->sclust &&
 80044b8:	8927      	ldrh	r7, [r4, #8]
 80044ba:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 80044be:	42af      	cmp	r7, r5
 80044c0:	d022      	beq.n	8004508 <inc_lock+0x6c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80044c2:	3301      	adds	r3, #1
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	f104 040c 	add.w	r4, r4, #12
 80044ca:	d1ed      	bne.n	80044a8 <inc_lock+0xc>
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80044cc:	6813      	ldr	r3, [r2, #0]
 80044ce:	b113      	cbz	r3, 80044d6 <inc_lock+0x3a>
 80044d0:	68d3      	ldr	r3, [r2, #12]
 80044d2:	bb1b      	cbnz	r3, 800451c <inc_lock+0x80>
 80044d4:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->fs;
 80044d6:	240c      	movs	r4, #12
 80044d8:	435c      	muls	r4, r3
 80044da:	1915      	adds	r5, r2, r4
 80044dc:	5116      	str	r6, [r2, r4]
		Files[i].clu = dp->sclust;
 80044de:	f8d0 4208 	ldr.w	r4, [r0, #520]	; 0x208
		Files[i].idx = dp->index;
 80044e2:	f8b0 0206 	ldrh.w	r0, [r0, #518]	; 0x206
 80044e6:	8128      	strh	r0, [r5, #8]
		Files[i].ctr = 0;
 80044e8:	2000      	movs	r0, #0
		Files[i].clu = dp->sclust;
 80044ea:	606c      	str	r4, [r5, #4]
		Files[i].ctr = 0;
 80044ec:	8168      	strh	r0, [r5, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80044ee:	b991      	cbnz	r1, 8004516 <inc_lock+0x7a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80044f0:	210c      	movs	r1, #12
 80044f2:	fb01 2103 	mla	r1, r1, r3, r2
 80044f6:	8949      	ldrh	r1, [r1, #10]
 80044f8:	3101      	adds	r1, #1
 80044fa:	b289      	uxth	r1, r1
 80044fc:	200c      	movs	r0, #12
 80044fe:	fb00 2203 	mla	r2, r0, r3, r2

	return i + 1;
 8004502:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004504:	8151      	strh	r1, [r2, #10]
	return i + 1;
 8004506:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004508:	2900      	cmp	r1, #0
 800450a:	d0f1      	beq.n	80044f0 <inc_lock+0x54>
 800450c:	210c      	movs	r1, #12
 800450e:	fb01 2103 	mla	r1, r1, r3, r2
 8004512:	8949      	ldrh	r1, [r1, #10]
 8004514:	b911      	cbnz	r1, 800451c <inc_lock+0x80>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004516:	f44f 7180 	mov.w	r1, #256	; 0x100
 800451a:	e7ef      	b.n	80044fc <inc_lock+0x60>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800451c:	2000      	movs	r0, #0
 800451e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004520:	20000270 	.word	0x20000270

08004524 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004524:	b530      	push	{r4, r5, lr}
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004526:	1e45      	subs	r5, r0, #1
 8004528:	2d01      	cmp	r5, #1
 800452a:	d811      	bhi.n	8004550 <dec_lock+0x2c>
		n = Files[i].ctr;
 800452c:	490a      	ldr	r1, [pc, #40]	; (8004558 <dec_lock+0x34>)
 800452e:	220c      	movs	r2, #12
 8004530:	fb02 1305 	mla	r3, r2, r5, r1
 8004534:	895c      	ldrh	r4, [r3, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n) n--;					/* Decrement read mode open count */
 8004536:	f424 7380 	bic.w	r3, r4, #256	; 0x100
 800453a:	b298      	uxth	r0, r3
 800453c:	b108      	cbz	r0, 8004542 <dec_lock+0x1e>
 800453e:	3c01      	subs	r4, #1
 8004540:	b2a0      	uxth	r0, r4
		Files[i].ctr = n;
 8004542:	fb02 f305 	mul.w	r3, r2, r5
 8004546:	18ca      	adds	r2, r1, r3
 8004548:	8150      	strh	r0, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800454a:	b918      	cbnz	r0, 8004554 <dec_lock+0x30>
 800454c:	50c8      	str	r0, [r1, r3]
 800454e:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004550:	2002      	movs	r0, #2
 8004552:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
 8004554:	2000      	movs	r0, #0
	}
	return res;
}
 8004556:	bd30      	pop	{r4, r5, pc}
 8004558:	20000270 	.word	0x20000270

0800455c <clmt_clust>:
)
{
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800455c:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004560:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004564:	3304      	adds	r3, #4
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004566:	0a49      	lsrs	r1, r1, #9
 8004568:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800456c:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004570:	6818      	ldr	r0, [r3, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 8004572:	b130      	cbz	r0, 8004582 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004574:	4281      	cmp	r1, r0
 8004576:	d302      	bcc.n	800457e <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8004578:	1a09      	subs	r1, r1, r0
 800457a:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800457c:	e7f8      	b.n	8004570 <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 800457e:	6858      	ldr	r0, [r3, #4]
 8004580:	4408      	add	r0, r1
}
 8004582:	4770      	bx	lr

08004584 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004584:	6802      	ldr	r2, [r0, #0]
{
 8004586:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8004588:	b152      	cbz	r2, 80045a0 <get_ldnumber+0x1c>
 800458a:	4611      	mov	r1, r2
 800458c:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800458e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004592:	2c20      	cmp	r4, #32
 8004594:	d90c      	bls.n	80045b0 <get_ldnumber+0x2c>
 8004596:	2c3a      	cmp	r4, #58	; 0x3a
 8004598:	d1f8      	bne.n	800458c <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 800459a:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800459c:	428b      	cmp	r3, r1
 800459e:	d002      	beq.n	80045a6 <get_ldnumber+0x22>
	int vol = -1;
 80045a0:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 80045a4:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80045a6:	7812      	ldrb	r2, [r2, #0]
 80045a8:	2a30      	cmp	r2, #48	; 0x30
 80045aa:	d1f9      	bne.n	80045a0 <get_ldnumber+0x1c>
					*path = ++tt;
 80045ac:	3301      	adds	r3, #1
 80045ae:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 80045b0:	2000      	movs	r0, #0
 80045b2:	bd10      	pop	{r4, pc}

080045b4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80045b4:	b508      	push	{r3, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80045b6:	b190      	cbz	r0, 80045de <validate+0x2a>
 80045b8:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 80045bc:	b17b      	cbz	r3, 80045de <validate+0x2a>
 80045be:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 80045c2:	b162      	cbz	r2, 80045de <validate+0x2a>
 80045c4:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 80045c8:	f8b0 2204 	ldrh.w	r2, [r0, #516]	; 0x204
 80045cc:	4291      	cmp	r1, r2
 80045ce:	d106      	bne.n	80045de <validate+0x2a>
 80045d0:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80045d4:	f7ff feda 	bl	800438c <disk_status>
 80045d8:	f010 0001 	ands.w	r0, r0, #1
 80045dc:	d000      	beq.n	80045e0 <validate+0x2c>
		return FR_INVALID_OBJECT;
 80045de:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 80045e0:	bd08      	pop	{r3, pc}

080045e2 <ld_clust.isra.0>:
	cl = LD_WORD(dir + DIR_FstClusLO);
 80045e2:	7eca      	ldrb	r2, [r1, #27]
 80045e4:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32)
 80045e6:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 80045e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80045ec:	bf01      	itttt	eq
 80045ee:	7d48      	ldrbeq	r0, [r1, #21]
 80045f0:	7d0a      	ldrbeq	r2, [r1, #20]
 80045f2:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 80045f6:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	4770      	bx	lr

080045fe <sync_window.part.2>:
FRESULT sync_window (
 80045fe:	b570      	push	{r4, r5, r6, lr}
		wsect = fs->winsect;	/* Current sector number */
 8004600:	f8d0 522c 	ldr.w	r5, [r0, #556]	; 0x22c
FRESULT sync_window (
 8004604:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8004606:	4601      	mov	r1, r0
 8004608:	2301      	movs	r3, #1
 800460a:	462a      	mov	r2, r5
 800460c:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8004610:	f7ff fee4 	bl	80043dc <disk_write>
 8004614:	b9d0      	cbnz	r0, 800464c <sync_window.part.2+0x4e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004616:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 800461a:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
			fs->wflag = 0;
 800461e:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004622:	1aeb      	subs	r3, r5, r3
 8004624:	4293      	cmp	r3, r2
 8004626:	d301      	bcc.n	800462c <sync_window.part.2+0x2e>
	FRESULT res = FR_OK;
 8004628:	2000      	movs	r0, #0
 800462a:	bd70      	pop	{r4, r5, r6, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800462c:	f894 6203 	ldrb.w	r6, [r4, #515]	; 0x203
 8004630:	2e01      	cmp	r6, #1
 8004632:	d9f9      	bls.n	8004628 <sync_window.part.2+0x2a>
					wsect += fs->fsize;
 8004634:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004638:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
					wsect += fs->fsize;
 800463c:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800463e:	462a      	mov	r2, r5
 8004640:	2301      	movs	r3, #1
 8004642:	4621      	mov	r1, r4
 8004644:	f7ff feca 	bl	80043dc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004648:	3e01      	subs	r6, #1
 800464a:	e7f1      	b.n	8004630 <sync_window.part.2+0x32>
			res = FR_DISK_ERR;
 800464c:	2001      	movs	r0, #1
}
 800464e:	bd70      	pop	{r4, r5, r6, pc}

08004650 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004650:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 8004654:	b10b      	cbz	r3, 800465a <sync_window+0xa>
 8004656:	f7ff bfd2 	b.w	80045fe <sync_window.part.2>
}
 800465a:	4618      	mov	r0, r3
 800465c:	4770      	bx	lr

0800465e <sync_fs>:
{
 800465e:	b538      	push	{r3, r4, r5, lr}
 8004660:	4604      	mov	r4, r0
	res = sync_window(fs);
 8004662:	f7ff fff5 	bl	8004650 <sync_window>
 8004666:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8004668:	2800      	cmp	r0, #0
 800466a:	d154      	bne.n	8004716 <sync_fs+0xb8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800466c:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8004670:	2b03      	cmp	r3, #3
 8004672:	d147      	bne.n	8004704 <sync_fs+0xa6>
 8004674:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 8004678:	2b01      	cmp	r3, #1
 800467a:	d143      	bne.n	8004704 <sync_fs+0xa6>
			mem_set(fs->win.d8, 0, SS(fs));
 800467c:	4601      	mov	r1, r0
 800467e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004682:	4620      	mov	r0, r4
 8004684:	f7ff fed0 	bl	8004428 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8004688:	2255      	movs	r2, #85	; 0x55
 800468a:	f884 21fe 	strb.w	r2, [r4, #510]	; 0x1fe
 800468e:	22aa      	movs	r2, #170	; 0xaa
 8004690:	f884 21ff 	strb.w	r2, [r4, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8004694:	2252      	movs	r2, #82	; 0x52
 8004696:	7022      	strb	r2, [r4, #0]
 8004698:	7062      	strb	r2, [r4, #1]
 800469a:	2261      	movs	r2, #97	; 0x61
 800469c:	70a2      	strb	r2, [r4, #2]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800469e:	f884 21e7 	strb.w	r2, [r4, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80046a2:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 80046a6:	f884 21e8 	strb.w	r2, [r4, #488]	; 0x1e8
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80046aa:	2141      	movs	r1, #65	; 0x41
 80046ac:	70e1      	strb	r1, [r4, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80046ae:	f884 11e6 	strb.w	r1, [r4, #486]	; 0x1e6
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80046b2:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80046b6:	f884 11e9 	strb.w	r1, [r4, #489]	; 0x1e9
 80046ba:	0c11      	lsrs	r1, r2, #16
 80046bc:	0e12      	lsrs	r2, r2, #24
 80046be:	f884 21eb 	strb.w	r2, [r4, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80046c2:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80046c6:	f884 11ea 	strb.w	r1, [r4, #490]	; 0x1ea
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80046ca:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80046ce:	f884 21ec 	strb.w	r2, [r4, #492]	; 0x1ec
 80046d2:	f884 11ed 	strb.w	r1, [r4, #493]	; 0x1ed
 80046d6:	0c11      	lsrs	r1, r2, #16
 80046d8:	0e12      	lsrs	r2, r2, #24
 80046da:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
			fs->winsect = fs->volbase + 1;
 80046de:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80046e2:	f884 11ee 	strb.w	r1, [r4, #494]	; 0x1ee
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80046e6:	2072      	movs	r0, #114	; 0x72
			fs->winsect = fs->volbase + 1;
 80046e8:	3201      	adds	r2, #1
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80046ea:	f884 01e4 	strb.w	r0, [r4, #484]	; 0x1e4
 80046ee:	f884 01e5 	strb.w	r0, [r4, #485]	; 0x1e5
			fs->winsect = fs->volbase + 1;
 80046f2:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80046f6:	4621      	mov	r1, r4
 80046f8:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 80046fc:	f7ff fe6e 	bl	80043dc <disk_write>
			fs->fsi_flag = 0;
 8004700:	f884 5205 	strb.w	r5, [r4, #517]	; 0x205
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8004704:	2200      	movs	r2, #0
 8004706:	4611      	mov	r1, r2
 8004708:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 800470c:	f7ff fe74 	bl	80043f8 <disk_ioctl>
 8004710:	3000      	adds	r0, #0
 8004712:	bf18      	it	ne
 8004714:	2001      	movne	r0, #1
}
 8004716:	bd38      	pop	{r3, r4, r5, pc}

08004718 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004718:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 800471c:	428b      	cmp	r3, r1
{
 800471e:	b570      	push	{r4, r5, r6, lr}
 8004720:	4606      	mov	r6, r0
 8004722:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004724:	d013      	beq.n	800474e <move_window+0x36>
		res = sync_window(fs);		/* Write-back changes */
 8004726:	f7ff ff93 	bl	8004650 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800472a:	4604      	mov	r4, r0
 800472c:	b968      	cbnz	r0, 800474a <move_window+0x32>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800472e:	462a      	mov	r2, r5
 8004730:	2301      	movs	r3, #1
 8004732:	4631      	mov	r1, r6
 8004734:	f896 0201 	ldrb.w	r0, [r6, #513]	; 0x201
 8004738:	f7ff fe42 	bl	80043c0 <disk_read>
 800473c:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 800473e:	bf1c      	itt	ne
 8004740:	f04f 35ff 	movne.w	r5, #4294967295
 8004744:	2401      	movne	r4, #1
			fs->winsect = sector;
 8004746:	f8c6 522c 	str.w	r5, [r6, #556]	; 0x22c
}
 800474a:	4620      	mov	r0, r4
 800474c:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 800474e:	2400      	movs	r4, #0
 8004750:	e7fb      	b.n	800474a <move_window+0x32>
	...

08004754 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8004754:	2300      	movs	r3, #0
{
 8004756:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8004758:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 800475c:	f04f 33ff 	mov.w	r3, #4294967295
 8004760:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
{
 8004764:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8004766:	f7ff ffd7 	bl	8004718 <move_window>
 800476a:	b9c0      	cbnz	r0, 800479e <check_fs+0x4a>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800476c:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8004770:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8004774:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004778:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800477c:	4293      	cmp	r3, r2
 800477e:	d110      	bne.n	80047a2 <check_fs+0x4e>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8004780:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 8004784:	4a08      	ldr	r2, [pc, #32]	; (80047a8 <check_fs+0x54>)
 8004786:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800478a:	4293      	cmp	r3, r2
 800478c:	d00a      	beq.n	80047a4 <check_fs+0x50>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800478e:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 8004792:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 8004796:	1a80      	subs	r0, r0, r2
 8004798:	bf18      	it	ne
 800479a:	2001      	movne	r0, #1
 800479c:	bd10      	pop	{r4, pc}
 800479e:	2003      	movs	r0, #3
 80047a0:	bd10      	pop	{r4, pc}
		return 2;
 80047a2:	2002      	movs	r0, #2
}
 80047a4:	bd10      	pop	{r4, pc}
 80047a6:	bf00      	nop
 80047a8:	00544146 	.word	0x00544146

080047ac <find_volume>:
{
 80047ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 80047ae:	2300      	movs	r3, #0
 80047b0:	6003      	str	r3, [r0, #0]
{
 80047b2:	b085      	sub	sp, #20
 80047b4:	4607      	mov	r7, r0
	vol = get_ldnumber(path);
 80047b6:	4608      	mov	r0, r1
{
 80047b8:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 80047ba:	f7ff fee3 	bl	8004584 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80047be:	1e06      	subs	r6, r0, #0
 80047c0:	f2c0 8123 	blt.w	8004a0a <find_volume+0x25e>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80047c4:	4b95      	ldr	r3, [pc, #596]	; (8004a1c <find_volume+0x270>)
 80047c6:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80047ca:	2c00      	cmp	r4, #0
 80047cc:	f000 811f 	beq.w	8004a0e <find_volume+0x262>
	*rfs = fs;							/* Return pointer to the file system object */
 80047d0:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80047d2:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80047d6:	b173      	cbz	r3, 80047f6 <find_volume+0x4a>
		stat = disk_status(fs->drv);
 80047d8:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 80047dc:	f7ff fdd6 	bl	800438c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80047e0:	07c7      	lsls	r7, r0, #31
 80047e2:	d408      	bmi.n	80047f6 <find_volume+0x4a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80047e4:	2d00      	cmp	r5, #0
 80047e6:	f000 8114 	beq.w	8004a12 <find_volume+0x266>
 80047ea:	f010 0004 	ands.w	r0, r0, #4
 80047ee:	d000      	beq.n	80047f2 <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 80047f0:	200a      	movs	r0, #10
}
 80047f2:	b005      	add	sp, #20
 80047f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 80047f6:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80047f8:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 80047fa:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80047fe:	f884 0201 	strb.w	r0, [r4, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004802:	f7ff fdcd 	bl	80043a0 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8004806:	07c1      	lsls	r1, r0, #31
 8004808:	f100 8105 	bmi.w	8004a16 <find_volume+0x26a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800480c:	b10d      	cbz	r5, 8004812 <find_volume+0x66>
 800480e:	0742      	lsls	r2, r0, #29
 8004810:	d4ee      	bmi.n	80047f0 <find_volume+0x44>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8004812:	2100      	movs	r1, #0
 8004814:	4620      	mov	r0, r4
 8004816:	f7ff ff9d 	bl	8004754 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800481a:	2801      	cmp	r0, #1
 800481c:	f040 80dc 	bne.w	80049d8 <find_volume+0x22c>
 8004820:	f504 71e3 	add.w	r1, r4, #454	; 0x1c6
 8004824:	2200      	movs	r2, #0
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8004826:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 800482a:	b103      	cbz	r3, 800482e <find_volume+0x82>
 800482c:	680b      	ldr	r3, [r1, #0]
 800482e:	f84d 3022 	str.w	r3, [sp, r2, lsl #2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004832:	3201      	adds	r2, #1
 8004834:	2a04      	cmp	r2, #4
 8004836:	f101 0110 	add.w	r1, r1, #16
 800483a:	d1f4      	bne.n	8004826 <find_volume+0x7a>
 800483c:	2600      	movs	r6, #0
			bsect = br[i];
 800483e:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8004842:	2d00      	cmp	r5, #0
 8004844:	f000 80bf 	beq.w	80049c6 <find_volume+0x21a>
 8004848:	4629      	mov	r1, r5
 800484a:	4620      	mov	r0, r4
 800484c:	f7ff ff82 	bl	8004754 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8004850:	2800      	cmp	r0, #0
 8004852:	f040 80b9 	bne.w	80049c8 <find_volume+0x21c>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004856:	7b22      	ldrb	r2, [r4, #12]
 8004858:	7ae3      	ldrb	r3, [r4, #11]
 800485a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800485e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004862:	f040 80bc 	bne.w	80049de <find_volume+0x232>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8004866:	7de3      	ldrb	r3, [r4, #23]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8004868:	7c20      	ldrb	r0, [r4, #16]
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800486a:	7da1      	ldrb	r1, [r4, #22]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800486c:	f884 0203 	strb.w	r0, [r4, #515]	; 0x203
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8004870:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8004874:	f100 33ff 	add.w	r3, r0, #4294967295
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8004878:	bf08      	it	eq
 800487a:	6a61      	ldreq	r1, [r4, #36]	; 0x24
	fs->fsize = fasize;
 800487c:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8004880:	2b01      	cmp	r3, #1
 8004882:	f200 80ac 	bhi.w	80049de <find_volume+0x232>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8004886:	7b66      	ldrb	r6, [r4, #13]
 8004888:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800488c:	2e00      	cmp	r6, #0
 800488e:	f000 80a6 	beq.w	80049de <find_volume+0x232>
 8004892:	1e73      	subs	r3, r6, #1
 8004894:	4233      	tst	r3, r6
 8004896:	f040 80a2 	bne.w	80049de <find_volume+0x232>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800489a:	7ca3      	ldrb	r3, [r4, #18]
 800489c:	7c67      	ldrb	r7, [r4, #17]
 800489e:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80048a2:	073b      	lsls	r3, r7, #28
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80048a4:	f8a4 7208 	strh.w	r7, [r4, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80048a8:	f040 8099 	bne.w	80049de <find_volume+0x232>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80048ac:	7d22      	ldrb	r2, [r4, #20]
 80048ae:	7ce3      	ldrb	r3, [r4, #19]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80048b0:	f894 e00f 	ldrb.w	lr, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80048b4:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80048b8:	7ba2      	ldrb	r2, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80048ba:	bf08      	it	eq
 80048bc:	6a23      	ldreq	r3, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80048be:	ea52 220e 	orrs.w	r2, r2, lr, lsl #8
 80048c2:	f000 808c 	beq.w	80049de <find_volume+0x232>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80048c6:	fb01 fe00 	mul.w	lr, r1, r0
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80048ca:	eb02 1017 	add.w	r0, r2, r7, lsr #4
 80048ce:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80048d0:	4283      	cmp	r3, r0
 80048d2:	f0c0 8084 	bcc.w	80049de <find_volume+0x232>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80048d6:	1a1b      	subs	r3, r3, r0
 80048d8:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d07e      	beq.n	80049de <find_volume+0x232>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80048e0:	f640 76f5 	movw	r6, #4085	; 0xff5
 80048e4:	42b3      	cmp	r3, r6
 80048e6:	d97e      	bls.n	80049e6 <find_volume+0x23a>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80048e8:	f64f 76f5 	movw	r6, #65525	; 0xfff5
 80048ec:	42b3      	cmp	r3, r6
 80048ee:	bf94      	ite	ls
 80048f0:	2602      	movls	r6, #2
 80048f2:	2603      	movhi	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80048f4:	3302      	adds	r3, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80048f6:	442a      	add	r2, r5
	fs->database = bsect + sysect;						/* Data start sector */
 80048f8:	4428      	add	r0, r5
	if (fmt == FS_FAT32) {
 80048fa:	2e03      	cmp	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80048fc:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8004900:	f8c4 521c 	str.w	r5, [r4, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004904:	f8c4 2220 	str.w	r2, [r4, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8004908:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800490c:	d16d      	bne.n	80049ea <find_volume+0x23e>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800490e:	2f00      	cmp	r7, #0
 8004910:	d165      	bne.n	80049de <find_volume+0x232>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8004912:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004914:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8004918:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800491a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800491e:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 8004922:	d35c      	bcc.n	80049de <find_volume+0x232>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8004924:	f04f 33ff 	mov.w	r3, #4294967295
 8004928:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 800492c:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8004930:	2e03      	cmp	r6, #3
	fs->fsi_flag = 0x80;
 8004932:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004936:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800493a:	d12d      	bne.n	8004998 <find_volume+0x1ec>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800493c:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8004940:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8004944:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004948:	2b01      	cmp	r3, #1
 800494a:	d125      	bne.n	8004998 <find_volume+0x1ec>
		&& move_window(fs, bsect + 1) == FR_OK)
 800494c:	1c69      	adds	r1, r5, #1
 800494e:	4620      	mov	r0, r4
 8004950:	f7ff fee2 	bl	8004718 <move_window>
 8004954:	bb00      	cbnz	r0, 8004998 <find_volume+0x1ec>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004956:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 800495a:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
		fs->fsi_flag = 0;
 800495e:	f884 0205 	strb.w	r0, [r4, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004962:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004966:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800496a:	4293      	cmp	r3, r2
 800496c:	d114      	bne.n	8004998 <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800496e:	6822      	ldr	r2, [r4, #0]
 8004970:	4b2b      	ldr	r3, [pc, #172]	; (8004a20 <find_volume+0x274>)
 8004972:	429a      	cmp	r2, r3
 8004974:	d110      	bne.n	8004998 <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8004976:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 800497a:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 800497e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004982:	3320      	adds	r3, #32
 8004984:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8004986:	bf01      	itttt	eq
 8004988:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	; 0x1e8
 800498c:	f8c4 3210 	streq.w	r3, [r4, #528]	; 0x210
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8004990:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	; 0x1ec
 8004994:	f8c4 320c 	streq.w	r3, [r4, #524]	; 0x20c
	fs->id = ++Fsid;	/* File system mount ID */
 8004998:	4a22      	ldr	r2, [pc, #136]	; (8004a24 <find_volume+0x278>)
	fs->fs_type = fmt;	/* FAT sub-type */
 800499a:	f884 6200 	strb.w	r6, [r4, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800499e:	8813      	ldrh	r3, [r2, #0]
 80049a0:	3301      	adds	r3, #1
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	8013      	strh	r3, [r2, #0]
 80049a6:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
		if (Files[i].fs == fs) Files[i].fs = 0;
 80049aa:	4b1f      	ldr	r3, [pc, #124]	; (8004a28 <find_volume+0x27c>)
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	4294      	cmp	r4, r2
 80049b0:	bf04      	itt	eq
 80049b2:	2200      	moveq	r2, #0
 80049b4:	601a      	streq	r2, [r3, #0]
 80049b6:	68da      	ldr	r2, [r3, #12]
 80049b8:	4294      	cmp	r4, r2
 80049ba:	f04f 0000 	mov.w	r0, #0
 80049be:	f47f af18 	bne.w	80047f2 <find_volume+0x46>
 80049c2:	60d8      	str	r0, [r3, #12]
 80049c4:	e715      	b.n	80047f2 <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80049c6:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80049c8:	3601      	adds	r6, #1
 80049ca:	2e04      	cmp	r6, #4
 80049cc:	f47f af37 	bne.w	800483e <find_volume+0x92>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80049d0:	2803      	cmp	r0, #3
 80049d2:	d104      	bne.n	80049de <find_volume+0x232>
 80049d4:	2001      	movs	r0, #1
 80049d6:	e70c      	b.n	80047f2 <find_volume+0x46>
 80049d8:	2803      	cmp	r0, #3
 80049da:	d0fb      	beq.n	80049d4 <find_volume+0x228>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80049dc:	b108      	cbz	r0, 80049e2 <find_volume+0x236>
 80049de:	200d      	movs	r0, #13
 80049e0:	e707      	b.n	80047f2 <find_volume+0x46>
	bsect = 0;
 80049e2:	4605      	mov	r5, r0
 80049e4:	e737      	b.n	8004856 <find_volume+0xaa>
	fmt = FS_FAT12;
 80049e6:	2601      	movs	r6, #1
 80049e8:	e784      	b.n	80048f4 <find_volume+0x148>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80049ea:	2f00      	cmp	r7, #0
 80049ec:	d0f7      	beq.n	80049de <find_volume+0x232>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80049ee:	4472      	add	r2, lr
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80049f0:	2e02      	cmp	r6, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80049f2:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
 80049f6:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80049fa:	bf1b      	ittet	ne
 80049fc:	18d2      	addne	r2, r2, r3
 80049fe:	f003 0301 	andne.w	r3, r3, #1
 8004a02:	4613      	moveq	r3, r2
 8004a04:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 8004a08:	e787      	b.n	800491a <find_volume+0x16e>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004a0a:	200b      	movs	r0, #11
 8004a0c:	e6f1      	b.n	80047f2 <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004a0e:	200c      	movs	r0, #12
 8004a10:	e6ef      	b.n	80047f2 <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 8004a12:	4628      	mov	r0, r5
 8004a14:	e6ed      	b.n	80047f2 <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004a16:	2003      	movs	r0, #3
 8004a18:	e6eb      	b.n	80047f2 <find_volume+0x46>
 8004a1a:	bf00      	nop
 8004a1c:	2000026c 	.word	0x2000026c
 8004a20:	41615252 	.word	0x41615252
 8004a24:	20000288 	.word	0x20000288
 8004a28:	20000270 	.word	0x20000270

08004a2c <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004a2c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
	clst -= 2;
 8004a30:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004a32:	3b02      	subs	r3, #2
 8004a34:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 8004a36:	bf3d      	ittte	cc
 8004a38:	f890 3202 	ldrbcc.w	r3, [r0, #514]	; 0x202
 8004a3c:	f8d0 0228 	ldrcc.w	r0, [r0, #552]	; 0x228
 8004a40:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004a44:	2000      	movcs	r0, #0
}
 8004a46:	4770      	bx	lr

08004a48 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004a48:	2901      	cmp	r1, #1
{
 8004a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4c:	4606      	mov	r6, r0
 8004a4e:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004a50:	d959      	bls.n	8004b06 <get_fat+0xbe>
 8004a52:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004a56:	4299      	cmp	r1, r3
 8004a58:	d255      	bcs.n	8004b06 <get_fat+0xbe>
		switch (fs->fs_type) {
 8004a5a:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d027      	beq.n	8004ab2 <get_fat+0x6a>
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d036      	beq.n	8004ad4 <get_fat+0x8c>
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d14d      	bne.n	8004b06 <get_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;
 8004a6a:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a6e:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8004a72:	eb01 2154 	add.w	r1, r1, r4, lsr #9
 8004a76:	f7ff fe4f 	bl	8004718 <move_window>
 8004a7a:	b110      	cbz	r0, 8004a82 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a82:	f8d6 1220 	ldr.w	r1, [r6, #544]	; 0x220
			wc = fs->win.d8[bc++ % SS(fs)];
 8004a86:	1c67      	adds	r7, r4, #1
 8004a88:	f3c4 0408 	ubfx	r4, r4, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a8c:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8004a90:	4630      	mov	r0, r6
			wc = fs->win.d8[bc++ % SS(fs)];
 8004a92:	5d34      	ldrb	r4, [r6, r4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a94:	f7ff fe40 	bl	8004718 <move_window>
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	d1ef      	bne.n	8004a7c <get_fat+0x34>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8004a9c:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8004aa0:	07eb      	lsls	r3, r5, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8004aa2:	5df0      	ldrb	r0, [r6, r7]
 8004aa4:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8004aa8:	bf4c      	ite	mi
 8004aaa:	0900      	lsrmi	r0, r0, #4
 8004aac:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8004ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004ab2:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8004ab6:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8004aba:	f7ff fe2d 	bl	8004718 <move_window>
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	d1dc      	bne.n	8004a7c <get_fat+0x34>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004ac2:	006d      	lsls	r5, r5, #1
 8004ac4:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			val = LD_WORD(p);
 8004ac8:	1973      	adds	r3, r6, r5
 8004aca:	5d70      	ldrb	r0, [r6, r5]
 8004acc:	785b      	ldrb	r3, [r3, #1]
 8004ace:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8004ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004ad4:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8004ad8:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 8004adc:	f7ff fe1c 	bl	8004718 <move_window>
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	d1cb      	bne.n	8004a7c <get_fat+0x34>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004ae4:	00ad      	lsls	r5, r5, #2
 8004ae6:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 8004aea:	1973      	adds	r3, r6, r5
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8004aec:	7898      	ldrb	r0, [r3, #2]
 8004aee:	78da      	ldrb	r2, [r3, #3]
 8004af0:	785b      	ldrb	r3, [r3, #1]
 8004af2:	0400      	lsls	r0, r0, #16
 8004af4:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8004af8:	5d72      	ldrb	r2, [r6, r5]
 8004afa:	4310      	orrs	r0, r2
 8004afc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8004b00:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8004b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 8004b06:	2001      	movs	r0, #1
}
 8004b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b0a <dir_sdi>:
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8004b0a:	f8d0 2208 	ldr.w	r2, [r0, #520]	; 0x208
{
 8004b0e:	b570      	push	{r4, r5, r6, lr}
 8004b10:	4604      	mov	r4, r0
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004b12:	2a01      	cmp	r2, #1
{
 8004b14:	460d      	mov	r5, r1
	dp->index = (WORD)idx;	/* Current index */
 8004b16:	f8a4 1206 	strh.w	r1, [r4, #518]	; 0x206
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004b1a:	d101      	bne.n	8004b20 <dir_sdi+0x16>
		return FR_INT_ERR;
 8004b1c:	2002      	movs	r0, #2
 8004b1e:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004b20:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8004b24:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8004b28:	428a      	cmp	r2, r1
 8004b2a:	d2f7      	bcs.n	8004b1c <dir_sdi+0x12>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004b2c:	b9f2      	cbnz	r2, 8004b6c <dir_sdi+0x62>
 8004b2e:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 8004b32:	2903      	cmp	r1, #3
 8004b34:	d102      	bne.n	8004b3c <dir_sdi+0x32>
		clst = dp->fs->dirbase;
 8004b36:	f8d3 1224 	ldr.w	r1, [r3, #548]	; 0x224
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004b3a:	b9c1      	cbnz	r1, 8004b6e <dir_sdi+0x64>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004b3c:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 8004b40:	428d      	cmp	r5, r1
 8004b42:	d2eb      	bcs.n	8004b1c <dir_sdi+0x12>
		sect = dp->fs->dirbase;
 8004b44:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
	dp->clust = clst;	/* Current cluster# */
 8004b48:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	d0e5      	beq.n	8004b1c <dir_sdi+0x12>
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004b50:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8004b54:	eb00 1015 	add.w	r0, r0, r5, lsr #4
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004b58:	f005 050f 	and.w	r5, r5, #15
 8004b5c:	eb03 1545 	add.w	r5, r3, r5, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8004b60:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004b64:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
	return FR_OK;
 8004b68:	2000      	movs	r0, #0
 8004b6a:	bd70      	pop	{r4, r5, r6, pc}
 8004b6c:	4611      	mov	r1, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004b6e:	f893 6202 	ldrb.w	r6, [r3, #514]	; 0x202
		while (idx >= ic) {	/* Follow cluster chain */
 8004b72:	460a      	mov	r2, r1
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004b74:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 8004b76:	42b5      	cmp	r5, r6
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8004b78:	4611      	mov	r1, r2
 8004b7a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
		while (idx >= ic) {	/* Follow cluster chain */
 8004b7e:	d202      	bcs.n	8004b86 <dir_sdi+0x7c>
		sect = clust2sect(dp->fs, clst);
 8004b80:	f7ff ff54 	bl	8004a2c <clust2sect>
 8004b84:	e7e0      	b.n	8004b48 <dir_sdi+0x3e>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8004b86:	f7ff ff5f 	bl	8004a48 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004b8a:	1c43      	adds	r3, r0, #1
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8004b8c:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004b8e:	d009      	beq.n	8004ba4 <dir_sdi+0x9a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8004b90:	2801      	cmp	r0, #1
 8004b92:	d9c3      	bls.n	8004b1c <dir_sdi+0x12>
 8004b94:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8004b98:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b9c:	4298      	cmp	r0, r3
 8004b9e:	d2bd      	bcs.n	8004b1c <dir_sdi+0x12>
			idx -= ic;
 8004ba0:	1bad      	subs	r5, r5, r6
 8004ba2:	e7e8      	b.n	8004b76 <dir_sdi+0x6c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004ba4:	2001      	movs	r0, #1
}
 8004ba6:	bd70      	pop	{r4, r5, r6, pc}

08004ba8 <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004ba8:	2901      	cmp	r1, #1
{
 8004baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bae:	4605      	mov	r5, r0
 8004bb0:	460c      	mov	r4, r1
 8004bb2:	4616      	mov	r6, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004bb4:	d96f      	bls.n	8004c96 <put_fat+0xee>
 8004bb6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004bba:	4299      	cmp	r1, r3
 8004bbc:	d26b      	bcs.n	8004c96 <put_fat+0xee>
		switch (fs->fs_type) {
 8004bbe:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d03d      	beq.n	8004c42 <put_fat+0x9a>
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d04b      	beq.n	8004c62 <put_fat+0xba>
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d163      	bne.n	8004c96 <put_fat+0xee>
			bc = (UINT)clst; bc += bc / 2;
 8004bce:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004bd2:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8004bd6:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8004bda:	f7ff fd9d 	bl	8004718 <move_window>
			if (res != FR_OK) break;
 8004bde:	2800      	cmp	r0, #0
 8004be0:	d15a      	bne.n	8004c98 <put_fat+0xf0>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004be2:	f107 0801 	add.w	r8, r7, #1
 8004be6:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004bea:	f014 0401 	ands.w	r4, r4, #1
 8004bee:	bf1f      	itttt	ne
 8004bf0:	5deb      	ldrbne	r3, [r5, r7]
 8004bf2:	f003 020f 	andne.w	r2, r3, #15
 8004bf6:	0133      	lslne	r3, r6, #4
 8004bf8:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8004bfc:	bf14      	ite	ne
 8004bfe:	4313      	orrne	r3, r2
 8004c00:	b2f3      	uxtbeq	r3, r6
 8004c02:	55eb      	strb	r3, [r5, r7]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c04:	f8d5 1220 	ldr.w	r1, [r5, #544]	; 0x220
			fs->wflag = 1;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c0e:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8004c12:	4628      	mov	r0, r5
 8004c14:	f7ff fd80 	bl	8004718 <move_window>
			if (res != FR_OK) break;
 8004c18:	bbf0      	cbnz	r0, 8004c98 <put_fat+0xf0>
			p = &fs->win.d8[bc % SS(fs)];
 8004c1a:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004c1e:	b144      	cbz	r4, 8004c32 <put_fat+0x8a>
 8004c20:	f3c6 1207 	ubfx	r2, r6, #4, #8
 8004c24:	f805 2008 	strb.w	r2, [r5, r8]
			fs->wflag = 1;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
 8004c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004c32:	f815 2008 	ldrb.w	r2, [r5, r8]
 8004c36:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8004c3a:	f022 020f 	bic.w	r2, r2, #15
 8004c3e:	4332      	orrs	r2, r6
 8004c40:	e7f0      	b.n	8004c24 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004c42:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8004c46:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8004c4a:	f7ff fd65 	bl	8004718 <move_window>
			if (res != FR_OK) break;
 8004c4e:	bb18      	cbnz	r0, 8004c98 <put_fat+0xf0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004c50:	0064      	lsls	r4, r4, #1
 8004c52:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 8004c56:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8004c5a:	552e      	strb	r6, [r5, r4]
 8004c5c:	442c      	add	r4, r5
 8004c5e:	7062      	strb	r2, [r4, #1]
 8004c60:	e7e2      	b.n	8004c28 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004c62:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8004c66:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8004c6a:	f7ff fd55 	bl	8004718 <move_window>
			if (res != FR_OK) break;
 8004c6e:	b998      	cbnz	r0, 8004c98 <put_fat+0xf0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004c70:	00a4      	lsls	r4, r4, #2
 8004c72:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8004c76:	1929      	adds	r1, r5, r4
			val |= LD_DWORD(p) & 0xF0000000;
 8004c78:	78cb      	ldrb	r3, [r1, #3]
 8004c7a:	061b      	lsls	r3, r3, #24
 8004c7c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004c80:	ea43 0206 	orr.w	r2, r3, r6
			ST_DWORD(p, val);
 8004c84:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8004c88:	552a      	strb	r2, [r5, r4]
 8004c8a:	704b      	strb	r3, [r1, #1]
 8004c8c:	0c13      	lsrs	r3, r2, #16
 8004c8e:	0e12      	lsrs	r2, r2, #24
 8004c90:	708b      	strb	r3, [r1, #2]
 8004c92:	70ca      	strb	r2, [r1, #3]
 8004c94:	e7c8      	b.n	8004c28 <put_fat+0x80>
			res = FR_INT_ERR;
 8004c96:	2002      	movs	r0, #2
}
 8004c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004c9c <create_chain>:
{
 8004c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9e:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 8004ca0:	460f      	mov	r7, r1
 8004ca2:	b989      	cbnz	r1, 8004cc8 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 8004ca4:	f8d0 620c 	ldr.w	r6, [r0, #524]	; 0x20c
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004ca8:	b1fe      	cbz	r6, 8004cea <create_chain+0x4e>
 8004caa:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004cae:	429e      	cmp	r6, r3
 8004cb0:	bf28      	it	cs
 8004cb2:	2601      	movcs	r6, #1
 8004cb4:	4634      	mov	r4, r6
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8004cb6:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
		ncl++;							/* Next cluster */
 8004cba:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8004cbc:	429c      	cmp	r4, r3
 8004cbe:	d317      	bcc.n	8004cf0 <create_chain+0x54>
			if (ncl > scl) return 0;	/* No free cluster */
 8004cc0:	2e01      	cmp	r6, #1
 8004cc2:	d814      	bhi.n	8004cee <create_chain+0x52>
 8004cc4:	2400      	movs	r4, #0
 8004cc6:	e008      	b.n	8004cda <create_chain+0x3e>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004cc8:	f7ff febe 	bl	8004a48 <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 8004ccc:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004cce:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 8004cd0:	d93b      	bls.n	8004d4a <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004cd2:	3001      	adds	r0, #1
 8004cd4:	d103      	bne.n	8004cde <create_chain+0x42>
			ncl = 2;
 8004cd6:	f04f 34ff 	mov.w	r4, #4294967295
}
 8004cda:	4620      	mov	r0, r4
 8004cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004cde:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8004ce2:	429c      	cmp	r4, r3
 8004ce4:	d3f9      	bcc.n	8004cda <create_chain+0x3e>
 8004ce6:	463e      	mov	r6, r7
 8004ce8:	e7e4      	b.n	8004cb4 <create_chain+0x18>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004cea:	2601      	movs	r6, #1
 8004cec:	e7e2      	b.n	8004cb4 <create_chain+0x18>
			ncl = 2;
 8004cee:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004cf0:	4621      	mov	r1, r4
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	f7ff fea8 	bl	8004a48 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 8004cf8:	b130      	cbz	r0, 8004d08 <create_chain+0x6c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004cfa:	1c41      	adds	r1, r0, #1
 8004cfc:	d0eb      	beq.n	8004cd6 <create_chain+0x3a>
 8004cfe:	2801      	cmp	r0, #1
 8004d00:	d023      	beq.n	8004d4a <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
 8004d02:	42b4      	cmp	r4, r6
 8004d04:	d1d7      	bne.n	8004cb6 <create_chain+0x1a>
 8004d06:	e7dd      	b.n	8004cc4 <create_chain+0x28>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004d08:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	4628      	mov	r0, r5
 8004d10:	f7ff ff4a 	bl	8004ba8 <put_fat>
	if (res == FR_OK && clst != 0) {
 8004d14:	b9b8      	cbnz	r0, 8004d46 <create_chain+0xaa>
 8004d16:	b97f      	cbnz	r7, 8004d38 <create_chain+0x9c>
		if (fs->free_clust != 0xFFFFFFFF) {
 8004d18:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
		fs->last_clust = ncl;			/* Update FSINFO */
 8004d1c:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	d0da      	beq.n	8004cda <create_chain+0x3e>
			fs->free_clust--;
 8004d24:	3b01      	subs	r3, #1
 8004d26:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			fs->fsi_flag |= 1;
 8004d2a:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 8004d2e:	f043 0301 	orr.w	r3, r3, #1
 8004d32:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
 8004d36:	e7d0      	b.n	8004cda <create_chain+0x3e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004d38:	4622      	mov	r2, r4
 8004d3a:	4639      	mov	r1, r7
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	f7ff ff33 	bl	8004ba8 <put_fat>
	if (res == FR_OK) {
 8004d42:	2800      	cmp	r0, #0
 8004d44:	d0e8      	beq.n	8004d18 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8004d46:	2801      	cmp	r0, #1
 8004d48:	d0c5      	beq.n	8004cd6 <create_chain+0x3a>
 8004d4a:	2401      	movs	r4, #1
 8004d4c:	e7c5      	b.n	8004cda <create_chain+0x3e>

08004d4e <dir_next>:
{
 8004d4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	i = dp->index + 1;
 8004d52:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
 8004d56:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004d58:	b2b3      	uxth	r3, r6
{
 8004d5a:	4604      	mov	r4, r0
 8004d5c:	4689      	mov	r9, r1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004d5e:	b913      	cbnz	r3, 8004d66 <dir_next+0x18>
		return FR_NO_FILE;
 8004d60:	2004      	movs	r0, #4
 8004d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004d66:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0f8      	beq.n	8004d60 <dir_next+0x12>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8004d6e:	f016 080f 	ands.w	r8, r6, #15
 8004d72:	d10b      	bne.n	8004d8c <dir_next+0x3e>
		if (!dp->clust) {		/* Static table */
 8004d74:	f8d0 120c 	ldr.w	r1, [r0, #524]	; 0x20c
		dp->sect++;					/* Next sector */
 8004d78:	3301      	adds	r3, #1
 8004d7a:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
 8004d7e:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
		if (!dp->clust) {		/* Static table */
 8004d82:	b971      	cbnz	r1, 8004da2 <dir_next+0x54>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8004d84:	f8b0 3208 	ldrh.w	r3, [r0, #520]	; 0x208
 8004d88:	429e      	cmp	r6, r3
 8004d8a:	d2e9      	bcs.n	8004d60 <dir_next+0x12>
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8004d8c:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->index = (WORD)i;	/* Current index */
 8004d90:	f8a4 6206 	strh.w	r6, [r4, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8004d94:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8004d98:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	return FR_OK;
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8004da2:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 8004da6:	3f01      	subs	r7, #1
 8004da8:	ea17 1716 	ands.w	r7, r7, r6, lsr #4
 8004dac:	d1ee      	bne.n	8004d8c <dir_next+0x3e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8004dae:	f7ff fe4b 	bl	8004a48 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 8004db2:	2801      	cmp	r0, #1
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8004db4:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 8004db6:	d802      	bhi.n	8004dbe <dir_next+0x70>
 8004db8:	2002      	movs	r0, #2
 8004dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004dbe:	1c42      	adds	r2, r0, #1
 8004dc0:	d102      	bne.n	8004dc8 <dir_next+0x7a>
 8004dc2:	2001      	movs	r0, #1
 8004dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8004dc8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8004dcc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004dd0:	429d      	cmp	r5, r3
 8004dd2:	d32f      	bcc.n	8004e34 <dir_next+0xe6>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8004dd4:	f1b9 0f00 	cmp.w	r9, #0
 8004dd8:	d0c2      	beq.n	8004d60 <dir_next+0x12>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8004dda:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 8004dde:	f7ff ff5d 	bl	8004c9c <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004de2:	4605      	mov	r5, r0
 8004de4:	2800      	cmp	r0, #0
 8004de6:	d03e      	beq.n	8004e66 <dir_next+0x118>
					if (clst == 1) return FR_INT_ERR;
 8004de8:	2801      	cmp	r0, #1
 8004dea:	d0e5      	beq.n	8004db8 <dir_next+0x6a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004dec:	1c43      	adds	r3, r0, #1
 8004dee:	d0e8      	beq.n	8004dc2 <dir_next+0x74>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8004df0:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8004df4:	f7ff fc2c 	bl	8004650 <sync_window>
 8004df8:	4601      	mov	r1, r0
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	d1e1      	bne.n	8004dc2 <dir_next+0x74>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8004dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e02:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8004e06:	f7ff fb0f 	bl	8004428 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8004e0a:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 8004e0e:	4629      	mov	r1, r5
 8004e10:	4610      	mov	r0, r2
 8004e12:	f7ff fe0b 	bl	8004a2c <clust2sect>
						dp->fs->wflag = 1;
 8004e16:	f04f 0901 	mov.w	r9, #1
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8004e1a:	f8c2 022c 	str.w	r0, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004e1e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8004e22:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 8004e26:	429f      	cmp	r7, r3
 8004e28:	d30e      	bcc.n	8004e48 <dir_next+0xfa>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8004e2a:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 8004e2e:	1bdf      	subs	r7, r3, r7
 8004e30:	f8c0 722c 	str.w	r7, [r0, #556]	; 0x22c
				dp->clust = clst;				/* Initialize data for new cluster */
 8004e34:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8004e38:	4629      	mov	r1, r5
 8004e3a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8004e3e:	f7ff fdf5 	bl	8004a2c <clust2sect>
 8004e42:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
 8004e46:	e7a1      	b.n	8004d8c <dir_next+0x3e>
						dp->fs->wflag = 1;
 8004e48:	f880 9204 	strb.w	r9, [r0, #516]	; 0x204
 8004e4c:	f7ff fbd7 	bl	80045fe <sync_window.part.2>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8004e50:	2800      	cmp	r0, #0
 8004e52:	d1b6      	bne.n	8004dc2 <dir_next+0x74>
						dp->fs->winsect++;
 8004e54:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 8004e58:	f8d2 322c 	ldr.w	r3, [r2, #556]	; 0x22c
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004e62:	3701      	adds	r7, #1
 8004e64:	e7db      	b.n	8004e1e <dir_next+0xd0>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004e66:	2007      	movs	r0, #7
}
 8004e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004e6c <follow_path>:
{
 8004e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8004e70:	780b      	ldrb	r3, [r1, #0]
 8004e72:	2b2f      	cmp	r3, #47	; 0x2f
{
 8004e74:	4604      	mov	r4, r0
 8004e76:	460d      	mov	r5, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8004e78:	d001      	beq.n	8004e7e <follow_path+0x12>
 8004e7a:	2b5c      	cmp	r3, #92	; 0x5c
 8004e7c:	d100      	bne.n	8004e80 <follow_path+0x14>
		path++;
 8004e7e:	3501      	adds	r5, #1
	dp->sclust = 0;							/* Always start from the root directory */
 8004e80:	2600      	movs	r6, #0
 8004e82:	f8c4 6208 	str.w	r6, [r4, #520]	; 0x208
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004e86:	782b      	ldrb	r3, [r5, #0]
 8004e88:	2b1f      	cmp	r3, #31
 8004e8a:	d936      	bls.n	8004efa <follow_path+0x8e>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004e8c:	4e5f      	ldr	r6, [pc, #380]	; (800500c <follow_path+0x1a0>)
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8004e8e:	782b      	ldrb	r3, [r5, #0]
 8004e90:	2b2f      	cmp	r3, #47	; 0x2f
 8004e92:	46a8      	mov	r8, r5
 8004e94:	f105 0501 	add.w	r5, r5, #1
 8004e98:	d0f9      	beq.n	8004e8e <follow_path+0x22>
 8004e9a:	2b5c      	cmp	r3, #92	; 0x5c
 8004e9c:	d0f7      	beq.n	8004e8e <follow_path+0x22>
	sfn = dp->fn;
 8004e9e:	f8d4 7218 	ldr.w	r7, [r4, #536]	; 0x218
	mem_set(sfn, ' ', 11);
 8004ea2:	220b      	movs	r2, #11
 8004ea4:	2120      	movs	r1, #32
 8004ea6:	4638      	mov	r0, r7
 8004ea8:	f7ff fabe 	bl	8004428 <mem_set>
	si = i = b = 0; ni = 8;
 8004eac:	f04f 0e00 	mov.w	lr, #0
 8004eb0:	f108 39ff 	add.w	r9, r8, #4294967295
 8004eb4:	46f4      	mov	ip, lr
 8004eb6:	2108      	movs	r1, #8
 8004eb8:	4672      	mov	r2, lr
		c = (BYTE)p[si++];
 8004eba:	f819 3f01 	ldrb.w	r3, [r9, #1]!
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8004ebe:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 8004ec0:	f10c 0c01 	add.w	ip, ip, #1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8004ec4:	d928      	bls.n	8004f18 <follow_path+0xac>
 8004ec6:	2b2f      	cmp	r3, #47	; 0x2f
 8004ec8:	d026      	beq.n	8004f18 <follow_path+0xac>
 8004eca:	2b5c      	cmp	r3, #92	; 0x5c
 8004ecc:	d024      	beq.n	8004f18 <follow_path+0xac>
		if (c == '.' || i >= ni) {
 8004ece:	2b2e      	cmp	r3, #46	; 0x2e
 8004ed0:	f000 8085 	beq.w	8004fde <follow_path+0x172>
 8004ed4:	4571      	cmp	r1, lr
 8004ed6:	d90d      	bls.n	8004ef4 <follow_path+0x88>
		if (c >= 0x80) {				/* Extended character? */
 8004ed8:	0618      	lsls	r0, r3, #24
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004eda:	bf48      	it	mi
 8004edc:	3b80      	submi	r3, #128	; 0x80
 8004ede:	4d4c      	ldr	r5, [pc, #304]	; (8005010 <follow_path+0x1a4>)
 8004ee0:	bf44      	itt	mi
 8004ee2:	5cf3      	ldrbmi	r3, [r6, r3]
			b |= 3;						/* Eliminate NT flag */
 8004ee4:	f042 0203 	orrmi.w	r2, r2, #3
	while (*str && *str != chr) str++;
 8004ee8:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8004eec:	2800      	cmp	r0, #0
 8004eee:	d07d      	beq.n	8004fec <follow_path+0x180>
 8004ef0:	4283      	cmp	r3, r0
 8004ef2:	d1f9      	bne.n	8004ee8 <follow_path+0x7c>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8004ef4:	2006      	movs	r0, #6
	return res;
 8004ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		res = dir_sdi(dp, 0);
 8004efa:	4631      	mov	r1, r6
 8004efc:	4620      	mov	r0, r4
 8004efe:	f7ff fe04 	bl	8004b0a <dir_sdi>
		dp->dir = 0;
 8004f02:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
 8004f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				b |= 2;
 8004f0a:	f042 0202 	orr.w	r2, r2, #2
			sfn[i++] = c;
 8004f0e:	f807 300e 	strb.w	r3, [r7, lr]
 8004f12:	f10e 0e01 	add.w	lr, lr, #1
 8004f16:	e7d0      	b.n	8004eba <follow_path+0x4e>
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8004f18:	2b21      	cmp	r3, #33	; 0x21
	*path = &p[si];						/* Return pointer to the next segment */
 8004f1a:	eb08 050c 	add.w	r5, r8, ip
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8004f1e:	bf34      	ite	cc
 8004f20:	2304      	movcc	r3, #4
 8004f22:	2300      	movcs	r3, #0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8004f24:	f1be 0f00 	cmp.w	lr, #0
 8004f28:	d0e4      	beq.n	8004ef4 <follow_path+0x88>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8004f2a:	7838      	ldrb	r0, [r7, #0]
 8004f2c:	28e5      	cmp	r0, #229	; 0xe5
 8004f2e:	bf04      	itt	eq
 8004f30:	2005      	moveq	r0, #5
 8004f32:	7038      	strbeq	r0, [r7, #0]
	if (ni == 8) b <<= 2;
 8004f34:	2908      	cmp	r1, #8
 8004f36:	bf04      	itt	eq
 8004f38:	0092      	lsleq	r2, r2, #2
 8004f3a:	b2d2      	uxtbeq	r2, r2
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8004f3c:	f002 0103 	and.w	r1, r2, #3
 8004f40:	2901      	cmp	r1, #1
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8004f42:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8004f46:	bf08      	it	eq
 8004f48:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8004f4c:	2a04      	cmp	r2, #4
 8004f4e:	bf08      	it	eq
 8004f50:	f043 0308 	orreq.w	r3, r3, #8
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8004f54:	72fb      	strb	r3, [r7, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004f56:	2100      	movs	r1, #0
 8004f58:	4620      	mov	r0, r4
 8004f5a:	f7ff fdd6 	bl	8004b0a <dir_sdi>
	if (res != FR_OK) return res;
 8004f5e:	b9f8      	cbnz	r0, 8004fa0 <follow_path+0x134>
		res = move_window(dp->fs, dp->sect);
 8004f60:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8004f64:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8004f68:	f7ff fbd6 	bl	8004718 <move_window>
		if (res != FR_OK) break;
 8004f6c:	b9c0      	cbnz	r0, 8004fa0 <follow_path+0x134>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8004f6e:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004f72:	7813      	ldrb	r3, [r2, #0]
 8004f74:	b19b      	cbz	r3, 8004f9e <follow_path+0x132>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8004f76:	7ad3      	ldrb	r3, [r2, #11]
 8004f78:	0719      	lsls	r1, r3, #28
 8004f7a:	d40b      	bmi.n	8004f94 <follow_path+0x128>
 8004f7c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8004f80:	f103 0e0b 	add.w	lr, r3, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004f84:	4573      	cmp	r3, lr
 8004f86:	d00b      	beq.n	8004fa0 <follow_path+0x134>
 8004f88:	f812 7b01 	ldrb.w	r7, [r2], #1
 8004f8c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004f90:	428f      	cmp	r7, r1
 8004f92:	d0f7      	beq.n	8004f84 <follow_path+0x118>
		res = dir_next(dp, 0);		/* Next entry */
 8004f94:	2100      	movs	r1, #0
 8004f96:	4620      	mov	r0, r4
 8004f98:	f7ff fed9 	bl	8004d4e <dir_next>
 8004f9c:	e7df      	b.n	8004f5e <follow_path+0xf2>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004f9e:	2004      	movs	r0, #4
			ns = dp->fn[NSFLAG];
 8004fa0:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8004fa4:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004fa6:	b138      	cbz	r0, 8004fb8 <follow_path+0x14c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004fa8:	2804      	cmp	r0, #4
 8004faa:	d12c      	bne.n	8005006 <follow_path+0x19a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004fac:	f013 0f04 	tst.w	r3, #4
 8004fb0:	bf08      	it	eq
 8004fb2:	2005      	moveq	r0, #5
 8004fb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004fb8:	075a      	lsls	r2, r3, #29
 8004fba:	d424      	bmi.n	8005006 <follow_path+0x19a>
			dir = dp->dir;						/* Follow the sub-directory */
 8004fbc:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8004fc0:	7acb      	ldrb	r3, [r1, #11]
 8004fc2:	06db      	lsls	r3, r3, #27
 8004fc4:	d508      	bpl.n	8004fd8 <follow_path+0x16c>
			dp->sclust = ld_clust(dp->fs, dir);
 8004fc6:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8004fca:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8004fce:	f7ff fb08 	bl	80045e2 <ld_clust.isra.0>
 8004fd2:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004fd6:	e75a      	b.n	8004e8e <follow_path+0x22>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004fd8:	2005      	movs	r0, #5
 8004fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8004fde:	2908      	cmp	r1, #8
 8004fe0:	d188      	bne.n	8004ef4 <follow_path+0x88>
			b <<= 2; continue;
 8004fe2:	0092      	lsls	r2, r2, #2
			i = 8; ni = 11;
 8004fe4:	468e      	mov	lr, r1
			b <<= 2; continue;
 8004fe6:	b2d2      	uxtb	r2, r2
			i = 8; ni = 11;
 8004fe8:	210b      	movs	r1, #11
 8004fea:	e766      	b.n	8004eba <follow_path+0x4e>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8004fec:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 8004ff0:	2819      	cmp	r0, #25
 8004ff2:	d98a      	bls.n	8004f0a <follow_path+0x9e>
				if (IsLower(c)) {		/* ASCII small capital? */
 8004ff4:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
 8004ff8:	2819      	cmp	r0, #25
					b |= 1; c -= 0x20;
 8004ffa:	bf9e      	ittt	ls
 8004ffc:	3b20      	subls	r3, #32
 8004ffe:	f042 0201 	orrls.w	r2, r2, #1
 8005002:	b2db      	uxtbls	r3, r3
 8005004:	e783      	b.n	8004f0e <follow_path+0xa2>
}
 8005006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800500a:	bf00      	nop
 800500c:	08008d74 	.word	0x08008d74
 8005010:	08008df3 	.word	0x08008df3

08005014 <dir_register>:
{
 8005014:	b538      	push	{r3, r4, r5, lr}
	res = dir_sdi(dp, 0);
 8005016:	2100      	movs	r1, #0
{
 8005018:	4605      	mov	r5, r0
	res = dir_sdi(dp, 0);
 800501a:	f7ff fd76 	bl	8004b0a <dir_sdi>
	if (res == FR_OK) {
 800501e:	4604      	mov	r4, r0
 8005020:	bb78      	cbnz	r0, 8005082 <dir_register+0x6e>
			res = move_window(dp->fs, dp->sect);
 8005022:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 8005026:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 800502a:	f7ff fb75 	bl	8004718 <move_window>
			if (res != FR_OK) break;
 800502e:	4604      	mov	r4, r0
 8005030:	bb38      	cbnz	r0, 8005082 <dir_register+0x6e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8005032:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2be5      	cmp	r3, #229	; 0xe5
 800503a:	d11b      	bne.n	8005074 <dir_register+0x60>
		res = move_window(dp->fs, dp->sect);
 800503c:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 8005040:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 8005044:	f7ff fb68 	bl	8004718 <move_window>
		if (res == FR_OK) {
 8005048:	4604      	mov	r4, r0
 800504a:	b988      	cbnz	r0, 8005070 <dir_register+0x5c>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800504c:	4601      	mov	r1, r0
 800504e:	2220      	movs	r2, #32
 8005050:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 8005054:	f7ff f9e8 	bl	8004428 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8005058:	220b      	movs	r2, #11
 800505a:	f8d5 1218 	ldr.w	r1, [r5, #536]	; 0x218
 800505e:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
 8005062:	f7ff f9d7 	bl	8004414 <mem_cpy>
			dp->fs->wflag = 1;
 8005066:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
}
 8005070:	4620      	mov	r0, r4
 8005072:	bd38      	pop	{r3, r4, r5, pc}
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0e1      	beq.n	800503c <dir_register+0x28>
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8005078:	2101      	movs	r1, #1
 800507a:	4628      	mov	r0, r5
 800507c:	f7ff fe67 	bl	8004d4e <dir_next>
 8005080:	e7cd      	b.n	800501e <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005082:	2c04      	cmp	r4, #4
 8005084:	bf08      	it	eq
 8005086:	2407      	moveq	r4, #7
 8005088:	e7f2      	b.n	8005070 <dir_register+0x5c>

0800508a <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800508a:	2901      	cmp	r1, #1
{
 800508c:	b570      	push	{r4, r5, r6, lr}
 800508e:	4604      	mov	r4, r0
 8005090:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005092:	d801      	bhi.n	8005098 <remove_chain+0xe>
		res = FR_INT_ERR;
 8005094:	2002      	movs	r0, #2
 8005096:	bd70      	pop	{r4, r5, r6, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005098:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800509c:	4299      	cmp	r1, r3
 800509e:	d2f9      	bcs.n	8005094 <remove_chain+0xa>
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80050a0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80050a4:	429d      	cmp	r5, r3
 80050a6:	d205      	bcs.n	80050b4 <remove_chain+0x2a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80050a8:	4629      	mov	r1, r5
 80050aa:	4620      	mov	r0, r4
 80050ac:	f7ff fccc 	bl	8004a48 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 80050b0:	4606      	mov	r6, r0
 80050b2:	b908      	cbnz	r0, 80050b8 <remove_chain+0x2e>
		res = FR_INT_ERR;
 80050b4:	2000      	movs	r0, #0
 80050b6:	bd70      	pop	{r4, r5, r6, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80050b8:	2801      	cmp	r0, #1
 80050ba:	d0eb      	beq.n	8005094 <remove_chain+0xa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80050bc:	1c41      	adds	r1, r0, #1
 80050be:	d014      	beq.n	80050ea <remove_chain+0x60>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80050c0:	2200      	movs	r2, #0
 80050c2:	4629      	mov	r1, r5
 80050c4:	4620      	mov	r0, r4
 80050c6:	f7ff fd6f 	bl	8004ba8 <put_fat>
			if (res != FR_OK) break;
 80050ca:	b978      	cbnz	r0, 80050ec <remove_chain+0x62>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80050cc:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 80050d0:	1c5a      	adds	r2, r3, #1
 80050d2:	d008      	beq.n	80050e6 <remove_chain+0x5c>
				fs->free_clust++;
 80050d4:	3301      	adds	r3, #1
 80050d6:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
				fs->fsi_flag |= 1;
 80050da:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 80050de:	f043 0301 	orr.w	r3, r3, #1
 80050e2:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
{
 80050e6:	4635      	mov	r5, r6
 80050e8:	e7da      	b.n	80050a0 <remove_chain+0x16>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80050ea:	2001      	movs	r0, #1
}
 80050ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080050f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80050f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80050f2:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80050f4:	a804      	add	r0, sp, #16
{
 80050f6:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 80050f8:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 80050fc:	4616      	mov	r6, r2


	vol = get_ldnumber(&rp);
 80050fe:	f7ff fa41 	bl	8004584 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005102:	1e05      	subs	r5, r0, #0
 8005104:	db21      	blt.n	800514a <f_mount+0x5a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005106:	4913      	ldr	r1, [pc, #76]	; (8005154 <f_mount+0x64>)
 8005108:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 800510c:	b164      	cbz	r4, 8005128 <f_mount+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800510e:	4b12      	ldr	r3, [pc, #72]	; (8005158 <f_mount+0x68>)
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	4294      	cmp	r4, r2
 8005114:	bf04      	itt	eq
 8005116:	2200      	moveq	r2, #0
 8005118:	601a      	streq	r2, [r3, #0]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	2000      	movs	r0, #0
 800511e:	4294      	cmp	r4, r2
 8005120:	bf08      	it	eq
 8005122:	60d8      	streq	r0, [r3, #12]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005124:	f884 0200 	strb.w	r0, [r4, #512]	; 0x200
	}

	if (fs) {
 8005128:	9801      	ldr	r0, [sp, #4]
 800512a:	b110      	cbz	r0, 8005132 <f_mount+0x42>
		fs->fs_type = 0;				/* Clear new fs object */
 800512c:	2300      	movs	r3, #0
 800512e:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005132:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005136:	b130      	cbz	r0, 8005146 <f_mount+0x56>
 8005138:	2e01      	cmp	r6, #1
 800513a:	d108      	bne.n	800514e <f_mount+0x5e>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800513c:	2200      	movs	r2, #0
 800513e:	4669      	mov	r1, sp
 8005140:	a801      	add	r0, sp, #4
 8005142:	f7ff fb33 	bl	80047ac <find_volume>
	LEAVE_FF(fs, res);
}
 8005146:	b004      	add	sp, #16
 8005148:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800514a:	200b      	movs	r0, #11
 800514c:	e7fb      	b.n	8005146 <f_mount+0x56>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800514e:	2000      	movs	r0, #0
 8005150:	e7f9      	b.n	8005146 <f_mount+0x56>
 8005152:	bf00      	nop
 8005154:	2000026c 	.word	0x2000026c
 8005158:	20000270 	.word	0x20000270

0800515c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800515c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005160:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8005164:	4690      	mov	r8, r2
 8005166:	9101      	str	r1, [sp, #4]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8005168:	4605      	mov	r5, r0
 800516a:	2800      	cmp	r0, #0
 800516c:	f000 80a6 	beq.w	80052bc <f_open+0x160>
	fp->fs = 0;			/* Clear file object */
 8005170:	2300      	movs	r3, #0
 8005172:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8005176:	f002 021e 	and.w	r2, r2, #30
 800517a:	a901      	add	r1, sp, #4
 800517c:	a886      	add	r0, sp, #536	; 0x218
 800517e:	f7ff fb15 	bl	80047ac <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8005182:	4606      	mov	r6, r0
 8005184:	2800      	cmp	r0, #0
 8005186:	f040 8094 	bne.w	80052b2 <f_open+0x156>
		INIT_BUF(dj);
 800518a:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 800518c:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 800518e:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 8005190:	a806      	add	r0, sp, #24
 8005192:	f7ff fe6b 	bl	8004e6c <follow_path>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8005196:	f008 071f 	and.w	r7, r8, #31
		dir = dj.dir;
 800519a:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800519c:	b948      	cbnz	r0, 80051b2 <f_open+0x56>
			if (!dir)	/* Default directory itself */
 800519e:	2c00      	cmp	r4, #0
 80051a0:	d05b      	beq.n	800525a <f_open+0xfe>
				res = FR_INVALID_NAME;
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80051a2:	f017 0f1e 	tst.w	r7, #30
 80051a6:	bf14      	ite	ne
 80051a8:	2101      	movne	r1, #1
 80051aa:	2100      	moveq	r1, #0
 80051ac:	a806      	add	r0, sp, #24
 80051ae:	f7ff f943 	bl	8004438 <chk_lock>
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80051b2:	f018 0f1c 	tst.w	r8, #28
 80051b6:	d05b      	beq.n	8005270 <f_open+0x114>
			if (res != FR_OK) {					/* No file, create new */
 80051b8:	2800      	cmp	r0, #0
 80051ba:	d050      	beq.n	800525e <f_open+0x102>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80051bc:	2804      	cmp	r0, #4
 80051be:	d14a      	bne.n	8005256 <f_open+0xfa>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80051c0:	4b51      	ldr	r3, [pc, #324]	; (8005308 <f_open+0x1ac>)
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	b11a      	cbz	r2, 80051ce <f_open+0x72>
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f040 809b 	bne.w	8005304 <f_open+0x1a8>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80051ce:	a806      	add	r0, sp, #24
 80051d0:	f7ff ff20 	bl	8005014 <dir_register>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80051d4:	2800      	cmp	r0, #0
 80051d6:	d13e      	bne.n	8005256 <f_open+0xfa>
				dir = dj.dir;					/* New entry */
 80051d8:	9c8b      	ldr	r4, [sp, #556]	; 0x22c
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80051da:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80051de:	073b      	lsls	r3, r7, #28
 80051e0:	d550      	bpl.n	8005284 <f_open+0x128>
				dw = GET_FATTIME();				/* Created time */
 80051e2:	f000 ff95 	bl	8006110 <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
 80051e6:	f3c0 2307 	ubfx	r3, r0, #8, #8
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80051ea:	f04f 0800 	mov.w	r8, #0
				ST_DWORD(dir + DIR_CrtTime, dw);
 80051ee:	73a0      	strb	r0, [r4, #14]
 80051f0:	73e3      	strb	r3, [r4, #15]
 80051f2:	0c03      	lsrs	r3, r0, #16
 80051f4:	0e00      	lsrs	r0, r0, #24
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80051f6:	f884 800b 	strb.w	r8, [r4, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80051fa:	f884 801c 	strb.w	r8, [r4, #28]
 80051fe:	f884 801d 	strb.w	r8, [r4, #29]
 8005202:	f884 801e 	strb.w	r8, [r4, #30]
 8005206:	f884 801f 	strb.w	r8, [r4, #31]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800520a:	7423      	strb	r3, [r4, #16]
 800520c:	7460      	strb	r0, [r4, #17]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800520e:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8005210:	4621      	mov	r1, r4
 8005212:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8005216:	f7ff f9e4 	bl	80045e2 <ld_clust.isra.0>
	ST_WORD(dir + DIR_FstClusLO, cl);
 800521a:	f884 801a 	strb.w	r8, [r4, #26]
 800521e:	f884 801b 	strb.w	r8, [r4, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005222:	f884 8014 	strb.w	r8, [r4, #20]
 8005226:	f884 8015 	strb.w	r8, [r4, #21]
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
 800522a:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8005232:	4680      	mov	r8, r0
 8005234:	b330      	cbz	r0, 8005284 <f_open+0x128>
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
 8005236:	4601      	mov	r1, r0
 8005238:	4618      	mov	r0, r3
					dw = dj.fs->winsect;
 800523a:	f8d3 922c 	ldr.w	r9, [r3, #556]	; 0x22c
					res = remove_chain(dj.fs, cl);
 800523e:	f7ff ff24 	bl	800508a <remove_chain>
					if (res == FR_OK) {
 8005242:	b940      	cbnz	r0, 8005256 <f_open+0xfa>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8005244:	9886      	ldr	r0, [sp, #536]	; 0x218
 8005246:	f108 33ff 	add.w	r3, r8, #4294967295
 800524a:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800524e:	4649      	mov	r1, r9
 8005250:	f7ff fa62 	bl	8004718 <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
 8005254:	b1b0      	cbz	r0, 8005284 <f_open+0x128>
					res = FR_DENIED;
 8005256:	4606      	mov	r6, r0
 8005258:	e02b      	b.n	80052b2 <f_open+0x156>
				res = FR_INVALID_NAME;
 800525a:	2006      	movs	r0, #6
 800525c:	e7a9      	b.n	80051b2 <f_open+0x56>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800525e:	7ae3      	ldrb	r3, [r4, #11]
 8005260:	f013 0f11 	tst.w	r3, #17
 8005264:	d12e      	bne.n	80052c4 <f_open+0x168>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8005266:	f018 0f04 	tst.w	r8, #4
 800526a:	d0b8      	beq.n	80051de <f_open+0x82>
						res = FR_EXIST;
 800526c:	2608      	movs	r6, #8
 800526e:	e020      	b.n	80052b2 <f_open+0x156>
			if (res == FR_OK) {					/* Follow succeeded */
 8005270:	2800      	cmp	r0, #0
 8005272:	d1f0      	bne.n	8005256 <f_open+0xfa>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8005274:	7ae3      	ldrb	r3, [r4, #11]
 8005276:	06d8      	lsls	r0, r3, #27
 8005278:	d422      	bmi.n	80052c0 <f_open+0x164>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800527a:	f018 0f02 	tst.w	r8, #2
 800527e:	d001      	beq.n	8005284 <f_open+0x128>
 8005280:	07da      	lsls	r2, r3, #31
 8005282:	d41f      	bmi.n	80052c4 <f_open+0x168>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005284:	073b      	lsls	r3, r7, #28
				mode |= FA__WRITTEN;
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8005286:	9b86      	ldr	r3, [sp, #536]	; 0x218
				mode |= FA__WRITTEN;
 8005288:	bf48      	it	mi
 800528a:	f047 0720 	orrmi.w	r7, r7, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800528e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005292:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
			fp->dir_ptr = dir;
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005296:	f017 0ffe 	tst.w	r7, #254	; 0xfe
			fp->dir_ptr = dir;
 800529a:	f8c5 4220 	str.w	r4, [r5, #544]	; 0x220
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800529e:	bf14      	ite	ne
 80052a0:	2101      	movne	r1, #1
 80052a2:	2100      	moveq	r1, #0
 80052a4:	a806      	add	r0, sp, #24
 80052a6:	f7ff f8f9 	bl	800449c <inc_lock>
 80052aa:	f8c5 0228 	str.w	r0, [r5, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 80052ae:	b958      	cbnz	r0, 80052c8 <f_open+0x16c>
 80052b0:	2602      	movs	r6, #2
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 80052b2:	4630      	mov	r0, r6
 80052b4:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80052b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!fp) return FR_INVALID_OBJECT;
 80052bc:	2609      	movs	r6, #9
 80052be:	e7f8      	b.n	80052b2 <f_open+0x156>
					res = FR_NO_FILE;
 80052c0:	2604      	movs	r6, #4
 80052c2:	e7f6      	b.n	80052b2 <f_open+0x156>
					res = FR_DENIED;
 80052c4:	2607      	movs	r6, #7
 80052c6:	e7f4      	b.n	80052b2 <f_open+0x156>
			fp->flag = mode;					/* File access mode */
 80052c8:	f885 7206 	strb.w	r7, [r5, #518]	; 0x206
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80052cc:	f8dd 8218 	ldr.w	r8, [sp, #536]	; 0x218
			fp->err = 0;						/* Clear error flag */
 80052d0:	2700      	movs	r7, #0
 80052d2:	f885 7207 	strb.w	r7, [r5, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80052d6:	f898 0200 	ldrb.w	r0, [r8, #512]	; 0x200
 80052da:	4621      	mov	r1, r4
 80052dc:	f7ff f981 	bl	80045e2 <ld_clust.isra.0>
 80052e0:	f8c5 0210 	str.w	r0, [r5, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80052e4:	69e3      	ldr	r3, [r4, #28]
 80052e6:	f8c5 320c 	str.w	r3, [r5, #524]	; 0x20c
			fp->id = fp->fs->id;
 80052ea:	f8b8 3206 	ldrh.w	r3, [r8, #518]	; 0x206
			fp->fptr = 0;						/* File pointer */
 80052ee:	f8c5 7208 	str.w	r7, [r5, #520]	; 0x208
			fp->dsect = 0;
 80052f2:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
			fp->cltbl = 0;						/* Normal seek mode */
 80052f6:	f8c5 7224 	str.w	r7, [r5, #548]	; 0x224
			fp->fs = dj.fs;	 					/* Validate file object */
 80052fa:	f8c5 8200 	str.w	r8, [r5, #512]	; 0x200
			fp->id = fp->fs->id;
 80052fe:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
 8005302:	e7d6      	b.n	80052b2 <f_open+0x156>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005304:	2012      	movs	r0, #18
 8005306:	e7a6      	b.n	8005256 <f_open+0xfa>
 8005308:	20000270 	.word	0x20000270

0800530c <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800530c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005310:	469b      	mov	fp, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8005312:	2300      	movs	r3, #0
 8005314:	f8cb 3000 	str.w	r3, [fp]
{
 8005318:	4604      	mov	r4, r0
 800531a:	4689      	mov	r9, r1
 800531c:	4615      	mov	r5, r2

	res = validate(fp);							/* Check validity */
 800531e:	f7ff f949 	bl	80045b4 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005322:	4606      	mov	r6, r0
 8005324:	bb60      	cbnz	r0, 8005380 <f_read+0x74>
	if (fp->err)								/* Check error */
 8005326:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 800532a:	2b00      	cmp	r3, #0
 800532c:	f040 80ae 	bne.w	800548c <f_read+0x180>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8005330:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8005334:	07d8      	lsls	r0, r3, #31
 8005336:	f140 80ab 	bpl.w	8005490 <f_read+0x184>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 800533a:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800533e:	f8d4 7208 	ldr.w	r7, [r4, #520]	; 0x208
 8005342:	1bdf      	subs	r7, r3, r7
 8005344:	42af      	cmp	r7, r5
 8005346:	bf28      	it	cs
 8005348:	462f      	movcs	r7, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 800534a:	b1cf      	cbz	r7, 8005380 <f_read+0x74>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800534c:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 8005350:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8005354:	2b00      	cmp	r3, #0
 8005356:	f040 808a 	bne.w	800546e <f_read+0x162>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800535a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800535e:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 8005362:	3b01      	subs	r3, #1
 8005364:	ea03 2351 	and.w	r3, r3, r1, lsr #9
			if (!csect) {						/* On the cluster boundary? */
 8005368:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800536c:	9301      	str	r3, [sp, #4]
 800536e:	d11d      	bne.n	80053ac <f_read+0xa0>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005370:	b951      	cbnz	r1, 8005388 <f_read+0x7c>
					clst = fp->sclust;			/* Follow from the origin */
 8005372:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8005376:	2801      	cmp	r0, #1
 8005378:	d812      	bhi.n	80053a0 <f_read+0x94>
 800537a:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800537c:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
 8005380:	4630      	mov	r0, r6
 8005382:	b003      	add	sp, #12
 8005384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl)
 8005388:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 800538c:	b11b      	cbz	r3, 8005396 <f_read+0x8a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800538e:	4620      	mov	r0, r4
 8005390:	f7ff f8e4 	bl	800455c <clmt_clust>
 8005394:	e7ef      	b.n	8005376 <f_read+0x6a>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8005396:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 800539a:	f7ff fb55 	bl	8004a48 <get_fat>
 800539e:	e7ea      	b.n	8005376 <f_read+0x6a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80053a0:	1c41      	adds	r1, r0, #1
 80053a2:	d101      	bne.n	80053a8 <f_read+0x9c>
 80053a4:	2601      	movs	r6, #1
 80053a6:	e7e9      	b.n	800537c <f_read+0x70>
				fp->clust = clst;				/* Update current cluster */
 80053a8:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80053ac:	f8d4 a200 	ldr.w	sl, [r4, #512]	; 0x200
 80053b0:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 80053b4:	4650      	mov	r0, sl
 80053b6:	f7ff fb39 	bl	8004a2c <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80053ba:	2800      	cmp	r0, #0
 80053bc:	d0dd      	beq.n	800537a <f_read+0x6e>
			sect += csect;
 80053be:	9b01      	ldr	r3, [sp, #4]
			if (cc) {							/* Read maximum contiguous sectors directly */
 80053c0:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 80053c2:	eb00 0803 	add.w	r8, r0, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
 80053c6:	d02f      	beq.n	8005428 <f_read+0x11c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80053c8:	9a01      	ldr	r2, [sp, #4]
 80053ca:	f89a 3202 	ldrb.w	r3, [sl, #514]	; 0x202
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80053ce:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80053d2:	442a      	add	r2, r5
 80053d4:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 80053d6:	bf84      	itt	hi
 80053d8:	9a01      	ldrhi	r2, [sp, #4]
 80053da:	1a9d      	subhi	r5, r3, r2
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80053dc:	462b      	mov	r3, r5
 80053de:	4642      	mov	r2, r8
 80053e0:	4649      	mov	r1, r9
 80053e2:	f7fe ffed 	bl	80043c0 <disk_read>
 80053e6:	2800      	cmp	r0, #0
 80053e8:	d1dc      	bne.n	80053a4 <f_read+0x98>
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80053ea:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80053ee:	065a      	lsls	r2, r3, #25
 80053f0:	d50c      	bpl.n	800540c <f_read+0x100>
 80053f2:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 80053f6:	eba0 0008 	sub.w	r0, r0, r8
 80053fa:	4285      	cmp	r5, r0
 80053fc:	d906      	bls.n	800540c <f_read+0x100>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80053fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005402:	4621      	mov	r1, r4
 8005404:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 8005408:	f7ff f804 	bl	8004414 <mem_cpy>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800540c:	026d      	lsls	r5, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800540e:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8005412:	442b      	add	r3, r5
 8005414:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 8005418:	f8db 3000 	ldr.w	r3, [fp]
 800541c:	442b      	add	r3, r5
 800541e:	44a9      	add	r9, r5
 8005420:	f8cb 3000 	str.w	r3, [fp]
 8005424:	1b7f      	subs	r7, r7, r5
 8005426:	e790      	b.n	800534a <f_read+0x3e>
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8005428:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 800542c:	4590      	cmp	r8, r2
 800542e:	d01c      	beq.n	800546a <f_read+0x15e>
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8005430:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8005434:	065b      	lsls	r3, r3, #25
 8005436:	d50d      	bpl.n	8005454 <f_read+0x148>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005438:	2301      	movs	r3, #1
 800543a:	4621      	mov	r1, r4
 800543c:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 8005440:	f7fe ffcc 	bl	80043dc <disk_write>
 8005444:	2800      	cmp	r0, #0
 8005446:	d1ad      	bne.n	80053a4 <f_read+0x98>
					fp->flag &= ~FA__DIRTY;
 8005448:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800544c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005450:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8005454:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005458:	2301      	movs	r3, #1
 800545a:	4642      	mov	r2, r8
 800545c:	4621      	mov	r1, r4
 800545e:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8005462:	f7fe ffad 	bl	80043c0 <disk_read>
 8005466:	2800      	cmp	r0, #0
 8005468:	d19c      	bne.n	80053a4 <f_read+0x98>
			fp->dsect = sect;
 800546a:	f8c4 8218 	str.w	r8, [r4, #536]	; 0x218
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800546e:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 8005472:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005476:	f5c1 7500 	rsb	r5, r1, #512	; 0x200
 800547a:	42bd      	cmp	r5, r7
 800547c:	bf28      	it	cs
 800547e:	463d      	movcs	r5, r7
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8005480:	462a      	mov	r2, r5
 8005482:	4421      	add	r1, r4
 8005484:	4648      	mov	r0, r9
 8005486:	f7fe ffc5 	bl	8004414 <mem_cpy>
 800548a:	e7c0      	b.n	800540e <f_read+0x102>
 800548c:	461e      	mov	r6, r3
 800548e:	e777      	b.n	8005380 <f_read+0x74>
		LEAVE_FF(fp->fs, FR_DENIED);
 8005490:	2607      	movs	r6, #7
 8005492:	e775      	b.n	8005380 <f_read+0x74>

08005494 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005498:	469b      	mov	fp, r3
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800549a:	2300      	movs	r3, #0
 800549c:	f8cb 3000 	str.w	r3, [fp]
{
 80054a0:	4604      	mov	r4, r0
 80054a2:	4689      	mov	r9, r1
 80054a4:	4617      	mov	r7, r2

	res = validate(fp);						/* Check validity */
 80054a6:	f7ff f885 	bl	80045b4 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80054aa:	4606      	mov	r6, r0
 80054ac:	bb50      	cbnz	r0, 8005504 <f_write+0x70>
	if (fp->err)							/* Check error */
 80054ae:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f040 80d9 	bne.w	800566a <f_write+0x1d6>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80054b8:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80054bc:	0799      	lsls	r1, r3, #30
 80054be:	f140 80d6 	bpl.w	800566e <f_write+0x1da>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80054c2:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 80054c6:	42df      	cmn	r7, r3
 80054c8:	f0c0 8083 	bcc.w	80055d2 <f_write+0x13e>
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80054cc:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 80054d0:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 80054d4:	4293      	cmp	r3, r2
 80054d6:	f200 80c5 	bhi.w	8005664 <f_write+0x1d0>
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80054da:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80054de:	f043 0320 	orr.w	r3, r3, #32
 80054e2:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 80054e6:	e00d      	b.n	8005504 <f_write+0x70>
					if (fp->cltbl)
 80054e8:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 80054ec:	b173      	cbz	r3, 800550c <f_write+0x78>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80054ee:	4620      	mov	r0, r4
 80054f0:	f7ff f834 	bl	800455c <clmt_clust>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80054f4:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80054f6:	2800      	cmp	r0, #0
 80054f8:	d0e8      	beq.n	80054cc <f_write+0x38>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80054fa:	2901      	cmp	r1, #1
 80054fc:	d109      	bne.n	8005512 <f_write+0x7e>
 80054fe:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005500:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207

	LEAVE_FF(fp->fs, FR_OK);
}
 8005504:	4630      	mov	r0, r6
 8005506:	b003      	add	sp, #12
 8005508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800550c:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8005510:	e07a      	b.n	8005608 <f_write+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005512:	1c4a      	adds	r2, r1, #1
 8005514:	d101      	bne.n	800551a <f_write+0x86>
 8005516:	2601      	movs	r6, #1
 8005518:	e7f2      	b.n	8005500 <f_write+0x6c>
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800551a:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
				fp->clust = clst;			/* Update current cluster */
 800551e:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8005522:	b90b      	cbnz	r3, 8005528 <f_write+0x94>
 8005524:	f8c4 1210 	str.w	r1, [r4, #528]	; 0x210
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8005528:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800552c:	065b      	lsls	r3, r3, #25
 800552e:	d511      	bpl.n	8005554 <f_write+0xc0>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005530:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005534:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8005538:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800553c:	2301      	movs	r3, #1
 800553e:	4621      	mov	r1, r4
 8005540:	f7fe ff4c 	bl	80043dc <disk_write>
 8005544:	2800      	cmp	r0, #0
 8005546:	d1e6      	bne.n	8005516 <f_write+0x82>
				fp->flag &= ~FA__DIRTY;
 8005548:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800554c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005550:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005554:	f8d4 a200 	ldr.w	sl, [r4, #512]	; 0x200
 8005558:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 800555c:	4650      	mov	r0, sl
 800555e:	f7ff fa65 	bl	8004a2c <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005562:	2800      	cmp	r0, #0
 8005564:	d0cb      	beq.n	80054fe <f_write+0x6a>
			sect += csect;
 8005566:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005568:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 800556a:	eb00 0803 	add.w	r8, r0, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
 800556e:	d04e      	beq.n	800560e <f_write+0x17a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005570:	9a01      	ldr	r2, [sp, #4]
 8005572:	f89a 3202 	ldrb.w	r3, [sl, #514]	; 0x202
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8005576:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800557a:	442a      	add	r2, r5
 800557c:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 800557e:	bf84      	itt	hi
 8005580:	9a01      	ldrhi	r2, [sp, #4]
 8005582:	1a9d      	subhi	r5, r3, r2
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8005584:	462b      	mov	r3, r5
 8005586:	4642      	mov	r2, r8
 8005588:	4649      	mov	r1, r9
 800558a:	f7fe ff27 	bl	80043dc <disk_write>
 800558e:	2800      	cmp	r0, #0
 8005590:	d1c1      	bne.n	8005516 <f_write+0x82>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005592:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 8005596:	eba1 0108 	sub.w	r1, r1, r8
 800559a:	428d      	cmp	r5, r1
 800559c:	d90c      	bls.n	80055b8 <f_write+0x124>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800559e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055a2:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 80055a6:	4620      	mov	r0, r4
 80055a8:	f7fe ff34 	bl	8004414 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80055ac:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80055b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055b4:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80055b8:	026d      	lsls	r5, r5, #9
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80055ba:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 80055be:	442b      	add	r3, r5
 80055c0:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 80055c4:	f8db 3000 	ldr.w	r3, [fp]
 80055c8:	442b      	add	r3, r5
 80055ca:	44a9      	add	r9, r5
 80055cc:	f8cb 3000 	str.w	r3, [fp]
 80055d0:	1b7f      	subs	r7, r7, r5
	for ( ;  btw;							/* Repeat until all data written */
 80055d2:	2f00      	cmp	r7, #0
 80055d4:	f43f af7a 	beq.w	80054cc <f_write+0x38>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80055d8:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 80055dc:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80055e0:	bb5b      	cbnz	r3, 800563a <f_write+0x1a6>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80055e2:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80055e6:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 80055ea:	3b01      	subs	r3, #1
 80055ec:	ea03 2351 	and.w	r3, r3, r1, lsr #9
			if (!csect) {					/* On the cluster boundary? */
 80055f0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80055f4:	9301      	str	r3, [sp, #4]
 80055f6:	d197      	bne.n	8005528 <f_write+0x94>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80055f8:	2900      	cmp	r1, #0
 80055fa:	f47f af75 	bne.w	80054e8 <f_write+0x54>
					clst = fp->sclust;		/* Follow from the origin */
 80055fe:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
					if (clst == 0)			/* When no cluster is allocated, */
 8005602:	2900      	cmp	r1, #0
 8005604:	f47f af79 	bne.w	80054fa <f_write+0x66>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005608:	f7ff fb48 	bl	8004c9c <create_chain>
 800560c:	e772      	b.n	80054f4 <f_write+0x60>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800560e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8005612:	4598      	cmp	r8, r3
 8005614:	d00f      	beq.n	8005636 <f_write+0x1a2>
				if (fp->fptr < fp->fsize &&
 8005616:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
 800561a:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800561e:	429a      	cmp	r2, r3
 8005620:	d209      	bcs.n	8005636 <f_write+0x1a2>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8005622:	2301      	movs	r3, #1
 8005624:	4642      	mov	r2, r8
 8005626:	4621      	mov	r1, r4
 8005628:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 800562c:	f7fe fec8 	bl	80043c0 <disk_read>
				if (fp->fptr < fp->fsize &&
 8005630:	2800      	cmp	r0, #0
 8005632:	f47f af70 	bne.w	8005516 <f_write+0x82>
			fp->dsect = sect;
 8005636:	f8c4 8218 	str.w	r8, [r4, #536]	; 0x218
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800563a:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
 800563e:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8005642:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 8005646:	42bd      	cmp	r5, r7
 8005648:	bf28      	it	cs
 800564a:	463d      	movcs	r5, r7
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800564c:	462a      	mov	r2, r5
 800564e:	4649      	mov	r1, r9
 8005650:	4420      	add	r0, r4
 8005652:	f7fe fedf 	bl	8004414 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8005656:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800565a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800565e:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8005662:	e7aa      	b.n	80055ba <f_write+0x126>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8005664:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 8005668:	e737      	b.n	80054da <f_write+0x46>
 800566a:	461e      	mov	r6, r3
 800566c:	e74a      	b.n	8005504 <f_write+0x70>
		LEAVE_FF(fp->fs, FR_DENIED);
 800566e:	2607      	movs	r6, #7
 8005670:	e748      	b.n	8005504 <f_write+0x70>

08005672 <putc_bfd>:
{
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8005672:	290a      	cmp	r1, #10
{
 8005674:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005676:	4604      	mov	r4, r0
 8005678:	460e      	mov	r6, r1
	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800567a:	d102      	bne.n	8005682 <putc_bfd+0x10>
		putc_bfd(pb, '\r');
 800567c:	210d      	movs	r1, #13
 800567e:	f7ff fff8 	bl	8005672 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8005682:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 8005684:	2b00      	cmp	r3, #0
 8005686:	db14      	blt.n	80056b2 <putc_bfd+0x40>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8005688:	1c5d      	adds	r5, r3, #1
 800568a:	4423      	add	r3, r4
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800568c:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 800568e:	731e      	strb	r6, [r3, #12]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8005690:	dd0b      	ble.n	80056aa <putc_bfd+0x38>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8005692:	ab01      	add	r3, sp, #4
 8005694:	462a      	mov	r2, r5
 8005696:	f104 010c 	add.w	r1, r4, #12
 800569a:	6820      	ldr	r0, [r4, #0]
 800569c:	f7ff fefa 	bl	8005494 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80056a0:	9b01      	ldr	r3, [sp, #4]
 80056a2:	1b5d      	subs	r5, r3, r5
 80056a4:	bf18      	it	ne
 80056a6:	f04f 35ff 	movne.w	r5, #4294967295
	}
	pb->idx = i;
	pb->nchr++;
 80056aa:	68a3      	ldr	r3, [r4, #8]
	pb->idx = i;
 80056ac:	6065      	str	r5, [r4, #4]
	pb->nchr++;
 80056ae:	3301      	adds	r3, #1
 80056b0:	60a3      	str	r3, [r4, #8]
}
 80056b2:	b002      	add	sp, #8
 80056b4:	bd70      	pop	{r4, r5, r6, pc}

080056b6 <f_sync>:
{
 80056b6:	b570      	push	{r4, r5, r6, lr}
 80056b8:	4604      	mov	r4, r0
	res = validate(fp);					/* Check validity of the object */
 80056ba:	f7fe ff7b 	bl	80045b4 <validate>
	if (res == FR_OK) {
 80056be:	2800      	cmp	r0, #0
 80056c0:	d158      	bne.n	8005774 <f_sync+0xbe>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80056c2:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80056c6:	069a      	lsls	r2, r3, #26
 80056c8:	d554      	bpl.n	8005774 <f_sync+0xbe>
			if (fp->flag & FA__DIRTY) {
 80056ca:	065b      	lsls	r3, r3, #25
 80056cc:	d511      	bpl.n	80056f2 <f_sync+0x3c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80056ce:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80056d2:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 80056d6:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 80056da:	2301      	movs	r3, #1
 80056dc:	4621      	mov	r1, r4
 80056de:	f7fe fe7d 	bl	80043dc <disk_write>
 80056e2:	2800      	cmp	r0, #0
 80056e4:	d145      	bne.n	8005772 <f_sync+0xbc>
				fp->flag &= ~FA__DIRTY;
 80056e6:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80056ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ee:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			res = move_window(fp->fs, fp->dir_sect);
 80056f2:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 80056f6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80056fa:	f7ff f80d 	bl	8004718 <move_window>
 80056fe:	4606      	mov	r6, r0
			if (res == FR_OK) {
 8005700:	bbc0      	cbnz	r0, 8005774 <f_sync+0xbe>
				dir = fp->dir_ptr;
 8005702:	f8d4 5220 	ldr.w	r5, [r4, #544]	; 0x220
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8005706:	7aeb      	ldrb	r3, [r5, #11]
 8005708:	f043 0320 	orr.w	r3, r3, #32
 800570c:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800570e:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8005712:	772b      	strb	r3, [r5, #28]
 8005714:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 8005718:	0a1b      	lsrs	r3, r3, #8
 800571a:	776b      	strb	r3, [r5, #29]
 800571c:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8005720:	77ab      	strb	r3, [r5, #30]
 8005722:	f894 320f 	ldrb.w	r3, [r4, #527]	; 0x20f
 8005726:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8005728:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
	ST_WORD(dir + DIR_FstClusLO, cl);
 800572c:	76ab      	strb	r3, [r5, #26]
 800572e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005732:	0c1b      	lsrs	r3, r3, #16
 8005734:	752b      	strb	r3, [r5, #20]
 8005736:	0a1b      	lsrs	r3, r3, #8
 8005738:	756b      	strb	r3, [r5, #21]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800573a:	76ea      	strb	r2, [r5, #27]
				tm = GET_FATTIME();							/* Update updated time */
 800573c:	f000 fce8 	bl	8006110 <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 8005740:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8005744:	75a8      	strb	r0, [r5, #22]
 8005746:	75eb      	strb	r3, [r5, #23]
 8005748:	0c03      	lsrs	r3, r0, #16
 800574a:	0e00      	lsrs	r0, r0, #24
 800574c:	762b      	strb	r3, [r5, #24]
 800574e:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8005750:	74ae      	strb	r6, [r5, #18]
 8005752:	74ee      	strb	r6, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 8005754:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 8005758:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
				fp->flag &= ~FA__WRITTEN;
 800575c:	f023 0320 	bic.w	r3, r3, #32
 8005760:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 8005764:	2301      	movs	r3, #1
 8005766:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
}
 800576a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				res = sync_fs(fp->fs);
 800576e:	f7fe bf76 	b.w	800465e <sync_fs>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8005772:	2001      	movs	r0, #1
}
 8005774:	bd70      	pop	{r4, r5, r6, pc}

08005776 <f_close>:
{
 8005776:	b510      	push	{r4, lr}
 8005778:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 800577a:	f7ff ff9c 	bl	80056b6 <f_sync>
	if (res == FR_OK)
 800577e:	b950      	cbnz	r0, 8005796 <f_close+0x20>
		res = validate(fp);				/* Lock volume */
 8005780:	4620      	mov	r0, r4
 8005782:	f7fe ff17 	bl	80045b4 <validate>
		if (res == FR_OK) {
 8005786:	b930      	cbnz	r0, 8005796 <f_close+0x20>
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8005788:	f8d4 0228 	ldr.w	r0, [r4, #552]	; 0x228
 800578c:	f7fe feca 	bl	8004524 <dec_lock>
			if (res == FR_OK)
 8005790:	b908      	cbnz	r0, 8005796 <f_close+0x20>
				fp->fs = 0;				/* Invalidate file object */
 8005792:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
}
 8005796:	bd10      	pop	{r4, pc}

08005798 <f_lseek>:
{
 8005798:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800579c:	4604      	mov	r4, r0
 800579e:	460d      	mov	r5, r1
	res = validate(fp);					/* Check validity of the object */
 80057a0:	f7fe ff08 	bl	80045b4 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80057a4:	4606      	mov	r6, r0
 80057a6:	bb10      	cbnz	r0, 80057ee <f_lseek+0x56>
	if (fp->err)						/* Check error */
 80057a8:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f040 813e 	bne.w	8005a2e <f_lseek+0x296>
	if (fp->cltbl) {	/* Fast seek */
 80057b2:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 8087 	beq.w	80058ca <f_lseek+0x132>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80057bc:	1c6a      	adds	r2, r5, #1
 80057be:	d13d      	bne.n	800583c <f_lseek+0xa4>
			cl = fp->sclust;			/* Top of the chain */
 80057c0:	f8d4 7210 	ldr.w	r7, [r4, #528]	; 0x210
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80057c4:	f8d3 b000 	ldr.w	fp, [r3]
 80057c8:	f103 0a04 	add.w	sl, r3, #4
 80057cc:	2502      	movs	r5, #2
			if (cl) {
 80057ce:	b35f      	cbz	r7, 8005828 <f_lseek+0x90>
 80057d0:	46b8      	mov	r8, r7
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80057d2:	f04f 0900 	mov.w	r9, #0
						cl = get_fat(fp->fs, cl);
 80057d6:	4641      	mov	r1, r8
 80057d8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80057dc:	f7ff f934 	bl	8004a48 <get_fat>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 80057e0:	2801      	cmp	r0, #1
						pcl = cl; ncl++;
 80057e2:	f109 0901 	add.w	r9, r9, #1
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 80057e6:	d807      	bhi.n	80057f8 <f_lseek+0x60>
 80057e8:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80057ea:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207
}
 80057ee:	4630      	mov	r0, r6
 80057f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057f4:	4607      	mov	r7, r0
 80057f6:	e7eb      	b.n	80057d0 <f_lseek+0x38>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80057f8:	1c43      	adds	r3, r0, #1
 80057fa:	d101      	bne.n	8005800 <f_lseek+0x68>
 80057fc:	2601      	movs	r6, #1
 80057fe:	e7f4      	b.n	80057ea <f_lseek+0x52>
					} while (cl == pcl + 1);
 8005800:	f108 0301 	add.w	r3, r8, #1
 8005804:	4298      	cmp	r0, r3
 8005806:	4680      	mov	r8, r0
 8005808:	d0e5      	beq.n	80057d6 <f_lseek+0x3e>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800580a:	3502      	adds	r5, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800580c:	45ab      	cmp	fp, r5
						*tbl++ = ncl; *tbl++ = tcl;
 800580e:	bf21      	itttt	cs
 8005810:	4653      	movcs	r3, sl
 8005812:	f843 9b08 	strcs.w	r9, [r3], #8
 8005816:	f8ca 7004 	strcs.w	r7, [sl, #4]
 800581a:	469a      	movcs	sl, r3
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800581c:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8005820:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005824:	4298      	cmp	r0, r3
 8005826:	d3e5      	bcc.n	80057f4 <f_lseek+0x5c>
			*fp->cltbl = ulen;	/* Number of items used */
 8005828:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
			if (ulen <= tlen)
 800582c:	455d      	cmp	r5, fp
			*fp->cltbl = ulen;	/* Number of items used */
 800582e:	601d      	str	r5, [r3, #0]
			if (ulen <= tlen)
 8005830:	f200 80ff 	bhi.w	8005a32 <f_lseek+0x29a>
				*tbl = 0;		/* Terminate table */
 8005834:	2300      	movs	r3, #0
 8005836:	f8ca 3000 	str.w	r3, [sl]
 800583a:	e7d8      	b.n	80057ee <f_lseek+0x56>
 800583c:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
 8005840:	4285      	cmp	r5, r0
 8005842:	bf28      	it	cs
 8005844:	4605      	movcs	r5, r0
			fp->fptr = ofs;				/* Set file pointer */
 8005846:	f8c4 5208 	str.w	r5, [r4, #520]	; 0x208
			if (ofs) {
 800584a:	2d00      	cmp	r5, #0
 800584c:	d0cf      	beq.n	80057ee <f_lseek+0x56>
				fp->clust = clmt_clust(fp, ofs - 1);
 800584e:	f105 38ff 	add.w	r8, r5, #4294967295
 8005852:	4641      	mov	r1, r8
 8005854:	4620      	mov	r0, r4
 8005856:	f7fe fe81 	bl	800455c <clmt_clust>
				dsc = clust2sect(fp->fs, fp->clust);
 800585a:	f8d4 7200 	ldr.w	r7, [r4, #512]	; 0x200
				fp->clust = clmt_clust(fp, ofs - 1);
 800585e:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
 8005862:	4601      	mov	r1, r0
				dsc = clust2sect(fp->fs, fp->clust);
 8005864:	4638      	mov	r0, r7
 8005866:	f7ff f8e1 	bl	8004a2c <clust2sect>
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800586a:	2800      	cmp	r0, #0
 800586c:	d0bc      	beq.n	80057e8 <f_lseek+0x50>
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800586e:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8005872:	2d00      	cmp	r5, #0
 8005874:	d0bb      	beq.n	80057ee <f_lseek+0x56>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8005876:	f897 5202 	ldrb.w	r5, [r7, #514]	; 0x202
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800587a:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800587e:	3d01      	subs	r5, #1
 8005880:	ea05 2558 	and.w	r5, r5, r8, lsr #9
 8005884:	4405      	add	r5, r0
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8005886:	4295      	cmp	r5, r2
 8005888:	d0b1      	beq.n	80057ee <f_lseek+0x56>
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800588a:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800588e:	0659      	lsls	r1, r3, #25
 8005890:	d50d      	bpl.n	80058ae <f_lseek+0x116>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005892:	2301      	movs	r3, #1
 8005894:	4621      	mov	r1, r4
 8005896:	f897 0201 	ldrb.w	r0, [r7, #513]	; 0x201
 800589a:	f7fe fd9f 	bl	80043dc <disk_write>
 800589e:	2800      	cmp	r0, #0
 80058a0:	d1ac      	bne.n	80057fc <f_lseek+0x64>
						fp->flag &= ~FA__DIRTY;
 80058a2:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 80058a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058aa:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 80058ae:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80058b2:	2301      	movs	r3, #1
 80058b4:	462a      	mov	r2, r5
 80058b6:	4621      	mov	r1, r4
 80058b8:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 80058bc:	f7fe fd80 	bl	80043c0 <disk_read>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d19b      	bne.n	80057fc <f_lseek+0x64>
					fp->dsect = dsc;
 80058c4:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 80058c8:	e791      	b.n	80057ee <f_lseek+0x56>
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 80058ca:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 80058ce:	429d      	cmp	r5, r3
 80058d0:	d905      	bls.n	80058de <f_lseek+0x146>
			 && !(fp->flag & FA_WRITE)
 80058d2:	f894 2206 	ldrb.w	r2, [r4, #518]	; 0x206
 80058d6:	f012 0f02 	tst.w	r2, #2
 80058da:	bf08      	it	eq
 80058dc:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 80058de:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 80058e0:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
		fp->fptr = nsect = 0;
 80058e4:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
		if (ofs) {
 80058e8:	2d00      	cmp	r5, #0
 80058ea:	d13e      	bne.n	800596a <f_lseek+0x1d2>
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 80058ec:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 80058f0:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 80058f4:	4293      	cmp	r3, r2
 80058f6:	f67f af7a 	bls.w	80057ee <f_lseek+0x56>
			fp->fsize = fp->fptr;
 80058fa:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 80058fe:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8005902:	f043 0320 	orr.w	r3, r3, #32
 8005906:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 800590a:	e770      	b.n	80057ee <f_lseek+0x56>
		fp->fptr = nsect = 0;
 800590c:	2500      	movs	r5, #0
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800590e:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8005912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0e8      	beq.n	80058ec <f_lseek+0x154>
 800591a:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 800591e:	4295      	cmp	r5, r2
 8005920:	d0e4      	beq.n	80058ec <f_lseek+0x154>
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8005922:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8005926:	065b      	lsls	r3, r3, #25
 8005928:	d510      	bpl.n	800594c <f_lseek+0x1b4>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800592a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800592e:	2301      	movs	r3, #1
 8005930:	4621      	mov	r1, r4
 8005932:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8005936:	f7fe fd51 	bl	80043dc <disk_write>
 800593a:	2800      	cmp	r0, #0
 800593c:	f47f af5e 	bne.w	80057fc <f_lseek+0x64>
				fp->flag &= ~FA__DIRTY;
 8005940:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8005944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005948:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800594c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005950:	2301      	movs	r3, #1
 8005952:	462a      	mov	r2, r5
 8005954:	4621      	mov	r1, r4
 8005956:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800595a:	f7fe fd31 	bl	80043c0 <disk_read>
 800595e:	2800      	cmp	r0, #0
 8005960:	f47f af4c 	bne.w	80057fc <f_lseek+0x64>
			fp->dsect = nsect;
 8005964:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 8005968:	e7c0      	b.n	80058ec <f_lseek+0x154>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800596a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800596e:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 8005972:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 8005974:	b32b      	cbz	r3, 80059c2 <f_lseek+0x22a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8005976:	3b01      	subs	r3, #1
 8005978:	1e6a      	subs	r2, r5, #1
 800597a:	fbb3 f1f7 	udiv	r1, r3, r7
 800597e:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 8005982:	428a      	cmp	r2, r1
 8005984:	d31d      	bcc.n	80059c2 <f_lseek+0x22a>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8005986:	427a      	negs	r2, r7
 8005988:	4013      	ands	r3, r2
				clst = fp->clust;
 800598a:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800598e:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				ofs -= fp->fptr;
 8005992:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 8005994:	2900      	cmp	r1, #0
 8005996:	d0b9      	beq.n	800590c <f_lseek+0x174>
				while (ofs > bcs) {						/* Cluster following loop */
 8005998:	42bd      	cmp	r5, r7
 800599a:	d823      	bhi.n	80059e4 <f_lseek+0x24c>
				fp->fptr += ofs;
 800599c:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 80059a0:	442b      	add	r3, r5
 80059a2:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 80059a6:	f3c5 0308 	ubfx	r3, r5, #0, #9
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d0ae      	beq.n	800590c <f_lseek+0x174>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 80059ae:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80059b2:	f7ff f83b 	bl	8004a2c <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 80059b6:	2800      	cmp	r0, #0
 80059b8:	f43f af16 	beq.w	80057e8 <f_lseek+0x50>
					nsect += ofs / SS(fp->fs);
 80059bc:	eb00 2555 	add.w	r5, r0, r5, lsr #9
 80059c0:	e7a5      	b.n	800590e <f_lseek+0x176>
				clst = fp->sclust;						/* start from the first cluster */
 80059c2:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80059c6:	b951      	cbnz	r1, 80059de <f_lseek+0x246>
					clst = create_chain(fp->fs, 0);
 80059c8:	f7ff f968 	bl	8004c9c <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80059cc:	2801      	cmp	r0, #1
					clst = create_chain(fp->fs, 0);
 80059ce:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80059d0:	f43f af0a 	beq.w	80057e8 <f_lseek+0x50>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80059d4:	1c42      	adds	r2, r0, #1
 80059d6:	f43f af11 	beq.w	80057fc <f_lseek+0x64>
					fp->sclust = clst;
 80059da:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
				fp->clust = clst;
 80059de:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
 80059e2:	e7d7      	b.n	8005994 <f_lseek+0x1fc>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80059e4:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 80059e8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80059ec:	079b      	lsls	r3, r3, #30
 80059ee:	d505      	bpl.n	80059fc <f_lseek+0x264>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 80059f0:	f7ff f954 	bl	8004c9c <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 80059f4:	4601      	mov	r1, r0
 80059f6:	b920      	cbnz	r0, 8005a02 <f_lseek+0x26a>
 80059f8:	463d      	mov	r5, r7
 80059fa:	e7cf      	b.n	800599c <f_lseek+0x204>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 80059fc:	f7ff f824 	bl	8004a48 <get_fat>
 8005a00:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005a02:	1c4a      	adds	r2, r1, #1
 8005a04:	f43f aefa 	beq.w	80057fc <f_lseek+0x64>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8005a08:	2901      	cmp	r1, #1
 8005a0a:	f67f aeed 	bls.w	80057e8 <f_lseek+0x50>
 8005a0e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8005a12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a16:	4299      	cmp	r1, r3
 8005a18:	f4bf aee6 	bcs.w	80057e8 <f_lseek+0x50>
					fp->fptr += bcs;
 8005a1c:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
					fp->clust = clst;
 8005a20:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
					fp->fptr += bcs;
 8005a24:	443b      	add	r3, r7
 8005a26:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
					ofs -= bcs;
 8005a2a:	1bed      	subs	r5, r5, r7
 8005a2c:	e7b4      	b.n	8005998 <f_lseek+0x200>
 8005a2e:	461e      	mov	r6, r3
 8005a30:	e6dd      	b.n	80057ee <f_lseek+0x56>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8005a32:	2611      	movs	r6, #17
 8005a34:	e6db      	b.n	80057ee <f_lseek+0x56>

08005a36 <f_mkdir>:
{
 8005a36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a3a:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
 8005a3e:	9007      	str	r0, [sp, #28]
	DWORD dsc, dcl, pcl, tm = GET_FATTIME();
 8005a40:	f000 fb66 	bl	8006110 <get_fattime>
	res = find_volume(&dj.fs, &path, 1);
 8005a44:	2201      	movs	r2, #1
	DWORD dsc, dcl, pcl, tm = GET_FATTIME();
 8005a46:	4607      	mov	r7, r0
	res = find_volume(&dj.fs, &path, 1);
 8005a48:	a907      	add	r1, sp, #28
 8005a4a:	a88c      	add	r0, sp, #560	; 0x230
 8005a4c:	f7fe feae 	bl	80047ac <find_volume>
 8005a50:	4605      	mov	r5, r0
 8005a52:	4604      	mov	r4, r0
	if (res == FR_OK) {
 8005a54:	2800      	cmp	r0, #0
 8005a56:	f040 80cd 	bne.w	8005bf4 <f_mkdir+0x1be>
		INIT_BUF(dj);
 8005a5a:	ab09      	add	r3, sp, #36	; 0x24
		res = follow_path(&dj, path);			/* Follow the file path */
 8005a5c:	9907      	ldr	r1, [sp, #28]
		INIT_BUF(dj);
 8005a5e:	9392      	str	r3, [sp, #584]	; 0x248
		res = follow_path(&dj, path);			/* Follow the file path */
 8005a60:	a80c      	add	r0, sp, #48	; 0x30
 8005a62:	f7ff fa03 	bl	8004e6c <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8005a66:	4605      	mov	r5, r0
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	f000 80cc 	beq.w	8005c06 <f_mkdir+0x1d0>
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8005a6e:	2804      	cmp	r0, #4
 8005a70:	f040 80c0 	bne.w	8005bf4 <f_mkdir+0x1be>
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
 8005a74:	4621      	mov	r1, r4
 8005a76:	988c      	ldr	r0, [sp, #560]	; 0x230
 8005a78:	f7ff f910 	bl	8004c9c <create_chain>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8005a7c:	4606      	mov	r6, r0
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	f000 80b3 	beq.w	8005bea <f_mkdir+0x1b4>
			if (dcl == 1) res = FR_INT_ERR;
 8005a84:	2801      	cmp	r0, #1
 8005a86:	f000 80ba 	beq.w	8005bfe <f_mkdir+0x1c8>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005a8a:	1c43      	adds	r3, r0, #1
 8005a8c:	f000 80b9 	beq.w	8005c02 <f_mkdir+0x1cc>
				res = sync_window(dj.fs);
 8005a90:	988c      	ldr	r0, [sp, #560]	; 0x230
 8005a92:	f7fe fddd 	bl	8004650 <sync_window>
			if (res == FR_OK) {					/* Initialize the new directory table */
 8005a96:	4605      	mov	r5, r0
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	f040 80a7 	bne.w	8005bec <f_mkdir+0x1b6>
				dsc = clust2sect(dj.fs, dcl);
 8005a9e:	9c8c      	ldr	r4, [sp, #560]	; 0x230
 8005aa0:	4631      	mov	r1, r6
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	f7fe ffc2 	bl	8004a2c <clust2sect>
				mem_set(dir, 0, SS(dj.fs));
 8005aa8:	4629      	mov	r1, r5
				dsc = clust2sect(dj.fs, dcl);
 8005aaa:	9006      	str	r0, [sp, #24]
				mem_set(dir, 0, SS(dj.fs));
 8005aac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f7fe fcb9 	bl	8004428 <mem_set>
				mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8005ab6:	220b      	movs	r2, #11
 8005ab8:	2120      	movs	r1, #32
 8005aba:	4620      	mov	r0, r4
 8005abc:	f7fe fcb4 	bl	8004428 <mem_set>
				ST_DWORD(dir + DIR_WrtTime, tm);
 8005ac0:	b2fb      	uxtb	r3, r7
 8005ac2:	9301      	str	r3, [sp, #4]
 8005ac4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005ac8:	75a3      	strb	r3, [r4, #22]
 8005aca:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8005ace:	9302      	str	r3, [sp, #8]
 8005ad0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005ad4:	75e3      	strb	r3, [r4, #23]
 8005ad6:	f3c7 4307 	ubfx	r3, r7, #16, #8
 8005ada:	9303      	str	r3, [sp, #12]
 8005adc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005ae0:	7623      	strb	r3, [r4, #24]
 8005ae2:	0e3b      	lsrs	r3, r7, #24
 8005ae4:	9304      	str	r3, [sp, #16]
 8005ae6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8005aea:	7663      	strb	r3, [r4, #25]
				dir[DIR_Attr] = AM_DIR;
 8005aec:	2210      	movs	r2, #16
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005aee:	b2f3      	uxtb	r3, r6
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005af0:	fa26 f802 	lsr.w	r8, r6, r2
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005af4:	9305      	str	r3, [sp, #20]
 8005af6:	f89d 3014 	ldrb.w	r3, [sp, #20]
				dir[DIR_Attr] = AM_DIR;
 8005afa:	72e2      	strb	r2, [r4, #11]
				dir[DIR_Name] = '.';
 8005afc:	252e      	movs	r5, #46	; 0x2e
				mem_cpy(dir + SZ_DIRE, dir, SZ_DIRE); 	/* Create ".." entry */
 8005afe:	2220      	movs	r2, #32
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005b00:	fa5f fb88 	uxtb.w	fp, r8
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005b04:	f3c6 2a07 	ubfx	sl, r6, #8, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005b08:	ea4f 2818 	mov.w	r8, r8, lsr #8
				mem_cpy(dir + SZ_DIRE, dir, SZ_DIRE); 	/* Create ".." entry */
 8005b0c:	18a0      	adds	r0, r4, r2
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005b0e:	76a3      	strb	r3, [r4, #26]
				mem_cpy(dir + SZ_DIRE, dir, SZ_DIRE); 	/* Create ".." entry */
 8005b10:	4621      	mov	r1, r4
				dir[DIR_Name] = '.';
 8005b12:	7025      	strb	r5, [r4, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005b14:	f884 a01b 	strb.w	sl, [r4, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005b18:	f884 b014 	strb.w	fp, [r4, #20]
 8005b1c:	f884 8015 	strb.w	r8, [r4, #21]
				mem_cpy(dir + SZ_DIRE, dir, SZ_DIRE); 	/* Create ".." entry */
 8005b20:	f7fe fc78 	bl	8004414 <mem_cpy>
				dir[SZ_DIRE + 1] = '.'; pcl = dj.sclust;
 8005b24:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 8005b28:	998c      	ldr	r1, [sp, #560]	; 0x230
				dir[SZ_DIRE + 1] = '.'; pcl = dj.sclust;
 8005b2a:	9a8e      	ldr	r2, [sp, #568]	; 0x238
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 8005b2c:	f891 0200 	ldrb.w	r0, [r1, #512]	; 0x200
 8005b30:	9b06      	ldr	r3, [sp, #24]
 8005b32:	2803      	cmp	r0, #3
 8005b34:	d104      	bne.n	8005b40 <f_mkdir+0x10a>
 8005b36:	f8d1 1224 	ldr.w	r1, [r1, #548]	; 0x224
					pcl = 0;
 8005b3a:	428a      	cmp	r2, r1
 8005b3c:	bf08      	it	eq
 8005b3e:	2200      	moveq	r2, #0
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005b40:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8005b44:	f3c2 2107 	ubfx	r1, r2, #8, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005b48:	0c12      	lsrs	r2, r2, #16
 8005b4a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8005b4e:	af0c      	add	r7, sp, #48	; 0x30
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005b50:	0a12      	lsrs	r2, r2, #8
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005b52:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005b56:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8005b5a:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8005b5e:	f892 9202 	ldrb.w	r9, [r2, #514]	; 0x202
 8005b62:	f1b9 0f00 	cmp.w	r9, #0
 8005b66:	d126      	bne.n	8005bb6 <f_mkdir+0x180>
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
 8005b68:	4638      	mov	r0, r7
 8005b6a:	f7ff fa53 	bl	8005014 <dir_register>
			if (res != FR_OK) {
 8005b6e:	4605      	mov	r5, r0
 8005b70:	bbe0      	cbnz	r0, 8005bec <f_mkdir+0x1b6>
				dir = dj.dir;
 8005b72:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8005b76:	2210      	movs	r2, #16
 8005b78:	72da      	strb	r2, [r3, #11]
				ST_DWORD(dir + DIR_WrtTime, tm);	/* Created time */
 8005b7a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005b7e:	759a      	strb	r2, [r3, #22]
 8005b80:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8005b84:	75da      	strb	r2, [r3, #23]
 8005b86:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8005b8a:	761a      	strb	r2, [r3, #24]
 8005b8c:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8005b90:	765a      	strb	r2, [r3, #25]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005b92:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8005b96:	769a      	strb	r2, [r3, #26]
 8005b98:	f883 a01b 	strb.w	sl, [r3, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005b9c:	f883 b014 	strb.w	fp, [r3, #20]
 8005ba0:	f883 8015 	strb.w	r8, [r3, #21]
				dj.fs->wflag = 1;
 8005ba4:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
 8005ba8:	2301      	movs	r3, #1
 8005baa:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
				res = sync_fs(dj.fs);
 8005bae:	f7fe fd56 	bl	800465e <sync_fs>
 8005bb2:	4605      	mov	r5, r0
 8005bb4:	e01e      	b.n	8005bf4 <f_mkdir+0x1be>
					dj.fs->winsect = dsc++;
 8005bb6:	f8d7 0200 	ldr.w	r0, [r7, #512]	; 0x200
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
					dj.fs->wflag = 1;
 8005bc0:	f04f 0301 	mov.w	r3, #1
 8005bc4:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
					dj.fs->winsect = dsc++;
 8005bc8:	9206      	str	r2, [sp, #24]
 8005bca:	f7fe fd18 	bl	80045fe <sync_window.part.2>
					if (res != FR_OK) break;
 8005bce:	4605      	mov	r5, r0
 8005bd0:	b960      	cbnz	r0, 8005bec <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(dj.fs));
 8005bd2:	4601      	mov	r1, r0
 8005bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bd8:	4620      	mov	r0, r4
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8005bda:	f109 39ff 	add.w	r9, r9, #4294967295
					mem_set(dir, 0, SS(dj.fs));
 8005bde:	f7fe fc23 	bl	8004428 <mem_set>
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8005be2:	fa5f f989 	uxtb.w	r9, r9
					dj.fs->winsect = dsc++;
 8005be6:	9b06      	ldr	r3, [sp, #24]
 8005be8:	e7bb      	b.n	8005b62 <f_mkdir+0x12c>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8005bea:	2507      	movs	r5, #7
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
 8005bec:	4631      	mov	r1, r6
 8005bee:	988c      	ldr	r0, [sp, #560]	; 0x230
 8005bf0:	f7ff fa4b 	bl	800508a <remove_chain>
}
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
 8005bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (dcl == 1) res = FR_INT_ERR;
 8005bfe:	2502      	movs	r5, #2
 8005c00:	e7f4      	b.n	8005bec <f_mkdir+0x1b6>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005c02:	2501      	movs	r5, #1
 8005c04:	e7f2      	b.n	8005bec <f_mkdir+0x1b6>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8005c06:	2508      	movs	r5, #8
	LEAVE_FF(dj.fs, res);
 8005c08:	e7f4      	b.n	8005bf4 <f_mkdir+0x1be>

08005c0a <f_gets>:
{
 8005c0a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005c0e:	4606      	mov	r6, r0
 8005c10:	4690      	mov	r8, r2
	TCHAR c, *p = buff;
 8005c12:	4605      	mov	r5, r0
	int n = 0;
 8005c14:	2400      	movs	r4, #0
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005c16:	1e4f      	subs	r7, r1, #1
 8005c18:	42bc      	cmp	r4, r7
 8005c1a:	da12      	bge.n	8005c42 <f_gets+0x38>
		f_read(fp, s, 1, &rc);
 8005c1c:	ab01      	add	r3, sp, #4
 8005c1e:	2201      	movs	r2, #1
 8005c20:	4669      	mov	r1, sp
 8005c22:	4640      	mov	r0, r8
 8005c24:	f7ff fb72 	bl	800530c <f_read>
		if (rc != 1) break;
 8005c28:	9b01      	ldr	r3, [sp, #4]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d109      	bne.n	8005c42 <f_gets+0x38>
		c = s[0];
 8005c2e:	f89d 3000 	ldrb.w	r3, [sp]
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005c32:	2b0d      	cmp	r3, #13
 8005c34:	d0f0      	beq.n	8005c18 <f_gets+0xe>
		if (c == '\n') break;		/* Break on EOL */
 8005c36:	2b0a      	cmp	r3, #10
		*p++ = c;
 8005c38:	f805 3b01 	strb.w	r3, [r5], #1
		n++;
 8005c3c:	f104 0401 	add.w	r4, r4, #1
		if (c == '\n') break;		/* Break on EOL */
 8005c40:	d1ea      	bne.n	8005c18 <f_gets+0xe>
	*p = 0;
 8005c42:	2300      	movs	r3, #0
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8005c44:	429c      	cmp	r4, r3
}
 8005c46:	bf14      	ite	ne
 8005c48:	4630      	movne	r0, r6
 8005c4a:	4618      	moveq	r0, r3
	*p = 0;
 8005c4c:	702b      	strb	r3, [r5, #0]
}
 8005c4e:	b002      	add	sp, #8
 8005c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005c54 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8005c54:	b510      	push	{r4, lr}
 8005c56:	b094      	sub	sp, #80	; 0x50
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
	pb.nchr = pb.idx = 0;
 8005c58:	2300      	movs	r3, #0
	pb.fp = fp;				/* Initialize output buffer */
 8005c5a:	9101      	str	r1, [sp, #4]
	pb.nchr = pb.idx = 0;
 8005c5c:	9302      	str	r3, [sp, #8]
 8005c5e:	9303      	str	r3, [sp, #12]
 8005c60:	1e44      	subs	r4, r0, #1

	while (*str)			/* Put the string */
 8005c62:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8005c66:	b931      	cbnz	r1, 8005c76 <f_puts+0x22>
		putc_bfd(&pb, *str++);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8005c68:	9a02      	ldr	r2, [sp, #8]
 8005c6a:	2a00      	cmp	r2, #0
 8005c6c:	da07      	bge.n	8005c7e <f_puts+0x2a>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
		&& (UINT)pb.idx == nw) return pb.nchr;
	return EOF;
 8005c6e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005c72:	b014      	add	sp, #80	; 0x50
 8005c74:	bd10      	pop	{r4, pc}
		putc_bfd(&pb, *str++);
 8005c76:	a801      	add	r0, sp, #4
 8005c78:	f7ff fcfb 	bl	8005672 <putc_bfd>
 8005c7c:	e7f1      	b.n	8005c62 <f_puts+0xe>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8005c7e:	466b      	mov	r3, sp
 8005c80:	a904      	add	r1, sp, #16
 8005c82:	9801      	ldr	r0, [sp, #4]
 8005c84:	f7ff fc06 	bl	8005494 <f_write>
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	d1f0      	bne.n	8005c6e <f_puts+0x1a>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8005c8c:	9b00      	ldr	r3, [sp, #0]
 8005c8e:	9a02      	ldr	r2, [sp, #8]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d1ec      	bne.n	8005c6e <f_puts+0x1a>
 8005c94:	9803      	ldr	r0, [sp, #12]
 8005c96:	e7ec      	b.n	8005c72 <f_puts+0x1e>

08005c98 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8005c98:	b40e      	push	{r1, r2, r3}
 8005c9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c9e:	b09b      	sub	sp, #108	; 0x6c
 8005ca0:	aa23      	add	r2, sp, #140	; 0x8c
	TCHAR c, d, s[16], *p;
	putbuff pb;


	pb.fp = fp;				/* Initialize output buffer */
	pb.nchr = pb.idx = 0;
 8005ca2:	2100      	movs	r1, #0
{
 8005ca4:	f852 3b04 	ldr.w	r3, [r2], #4
	pb.fp = fp;				/* Initialize output buffer */
 8005ca8:	9007      	str	r0, [sp, #28]
	pb.nchr = pb.idx = 0;
 8005caa:	9108      	str	r1, [sp, #32]
 8005cac:	9109      	str	r1, [sp, #36]	; 0x24

	va_start(arp, fmt);
 8005cae:	9201      	str	r2, [sp, #4]
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
 8005cb0:	ae03      	add	r6, sp, #12
		c = *fmt++;
 8005cb2:	7819      	ldrb	r1, [r3, #0]
		if (c == 0) break;			/* End of string */
 8005cb4:	2900      	cmp	r1, #0
 8005cb6:	f000 80e0 	beq.w	8005e7a <f_printf+0x1e2>
		if (c != '%') {				/* Non escape character */
 8005cba:	2925      	cmp	r1, #37	; 0x25
 8005cbc:	d004      	beq.n	8005cc8 <f_printf+0x30>
		c = *fmt++;
 8005cbe:	1c5d      	adds	r5, r3, #1
			putc_bfd(&pb, c); continue;
 8005cc0:	a807      	add	r0, sp, #28
 8005cc2:	f7ff fcd6 	bl	8005672 <putc_bfd>
 8005cc6:	e05d      	b.n	8005d84 <f_printf+0xec>
		c = *fmt++;
 8005cc8:	7859      	ldrb	r1, [r3, #1]
		if (c == '0') {				/* Flag: '0' padding */
 8005cca:	2930      	cmp	r1, #48	; 0x30
 8005ccc:	d129      	bne.n	8005d22 <f_printf+0x8a>
			f = 1; c = *fmt++;
 8005cce:	7899      	ldrb	r1, [r3, #2]
 8005cd0:	1cdd      	adds	r5, r3, #3
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	2700      	movs	r7, #0
			w = w * 10 + c - '0';
 8005cd6:	200a      	movs	r0, #10
		while (IsDigit(c)) {		/* Precision */
 8005cd8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005cdc:	2b09      	cmp	r3, #9
 8005cde:	d929      	bls.n	8005d34 <f_printf+0x9c>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8005ce0:	f001 03df 	and.w	r3, r1, #223	; 0xdf
 8005ce4:	2b4c      	cmp	r3, #76	; 0x4c
			f |= 4; c = *fmt++;
 8005ce6:	bf02      	ittt	eq
 8005ce8:	7829      	ldrbeq	r1, [r5, #0]
 8005cea:	f042 0204 	orreq.w	r2, r2, #4
 8005cee:	3501      	addeq	r5, #1
		if (!c) break;
 8005cf0:	2900      	cmp	r1, #0
 8005cf2:	f000 80c2 	beq.w	8005e7a <f_printf+0x1e2>
		if (IsLower(d)) d -= 0x20;
 8005cf6:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8005cfa:	2b19      	cmp	r3, #25
 8005cfc:	bf9a      	itte	ls
 8005cfe:	f1a1 0320 	subls.w	r3, r1, #32
 8005d02:	b2db      	uxtbls	r3, r3
 8005d04:	460b      	movhi	r3, r1
		switch (d) {				/* Type is... */
 8005d06:	2b4f      	cmp	r3, #79	; 0x4f
 8005d08:	d03e      	beq.n	8005d88 <f_printf+0xf0>
 8005d0a:	d819      	bhi.n	8005d40 <f_printf+0xa8>
 8005d0c:	2b43      	cmp	r3, #67	; 0x43
 8005d0e:	f000 8096 	beq.w	8005e3e <f_printf+0x1a6>
 8005d12:	2b44      	cmp	r3, #68	; 0x44
 8005d14:	f000 809b 	beq.w	8005e4e <f_printf+0x1b6>
 8005d18:	2b42      	cmp	r3, #66	; 0x42
 8005d1a:	d1d1      	bne.n	8005cc0 <f_printf+0x28>
			r = 2; break;
 8005d1c:	f04f 0e02 	mov.w	lr, #2
 8005d20:	e034      	b.n	8005d8c <f_printf+0xf4>
			if (c == '-') {			/* Flag: left justified */
 8005d22:	292d      	cmp	r1, #45	; 0x2d
		c = *fmt++;
 8005d24:	bf19      	ittee	ne
 8005d26:	1c9d      	addne	r5, r3, #2
		w = f = 0;
 8005d28:	2200      	movne	r2, #0
				f = 2; c = *fmt++;
 8005d2a:	1cdd      	addeq	r5, r3, #3
 8005d2c:	7899      	ldrbeq	r1, [r3, #2]
 8005d2e:	bf08      	it	eq
 8005d30:	2202      	moveq	r2, #2
 8005d32:	e7cf      	b.n	8005cd4 <f_printf+0x3c>
			w = w * 10 + c - '0';
 8005d34:	fb00 1707 	mla	r7, r0, r7, r1
 8005d38:	3f30      	subs	r7, #48	; 0x30
			c = *fmt++;
 8005d3a:	f815 1b01 	ldrb.w	r1, [r5], #1
 8005d3e:	e7cb      	b.n	8005cd8 <f_printf+0x40>
		switch (d) {				/* Type is... */
 8005d40:	2b55      	cmp	r3, #85	; 0x55
 8005d42:	f000 8084 	beq.w	8005e4e <f_printf+0x1b6>
 8005d46:	2b58      	cmp	r3, #88	; 0x58
 8005d48:	d07e      	beq.n	8005e48 <f_printf+0x1b0>
 8005d4a:	2b53      	cmp	r3, #83	; 0x53
 8005d4c:	d1b8      	bne.n	8005cc0 <f_printf+0x28>
			p = va_arg(arp, TCHAR*);
 8005d4e:	9b01      	ldr	r3, [sp, #4]
 8005d50:	f8d3 8000 	ldr.w	r8, [r3]
 8005d54:	1d19      	adds	r1, r3, #4
 8005d56:	9101      	str	r1, [sp, #4]
			for (j = 0; p[j]; j++) ;
 8005d58:	4643      	mov	r3, r8
 8005d5a:	eba3 0408 	sub.w	r4, r3, r8
 8005d5e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005d62:	2900      	cmp	r1, #0
 8005d64:	d1f9      	bne.n	8005d5a <f_printf+0xc2>
			if (!(f & 2)) {
 8005d66:	0793      	lsls	r3, r2, #30
 8005d68:	d404      	bmi.n	8005d74 <f_printf+0xdc>
				while (j++ < w) putc_bfd(&pb, ' ');
 8005d6a:	4623      	mov	r3, r4
 8005d6c:	42bb      	cmp	r3, r7
 8005d6e:	f104 0401 	add.w	r4, r4, #1
 8005d72:	d355      	bcc.n	8005e20 <f_printf+0x188>
 8005d74:	f108 38ff 	add.w	r8, r8, #4294967295
			while (*p) putc_bfd(&pb, *p++);
 8005d78:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8005d7c:	2900      	cmp	r1, #0
 8005d7e:	d154      	bne.n	8005e2a <f_printf+0x192>
			while (j++ < w) putc_bfd(&pb, ' ');
 8005d80:	42a7      	cmp	r7, r4
 8005d82:	d856      	bhi.n	8005e32 <f_printf+0x19a>
{
 8005d84:	462b      	mov	r3, r5
 8005d86:	e794      	b.n	8005cb2 <f_printf+0x1a>
			r = 8; break;
 8005d88:	f04f 0e08 	mov.w	lr, #8
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8005d8c:	f012 0f04 	tst.w	r2, #4
 8005d90:	9801      	ldr	r0, [sp, #4]
 8005d92:	d05f      	beq.n	8005e54 <f_printf+0x1bc>
 8005d94:	1d04      	adds	r4, r0, #4
 8005d96:	6800      	ldr	r0, [r0, #0]
 8005d98:	9401      	str	r4, [sp, #4]
		if (d == 'D' && (v & 0x80000000)) {
 8005d9a:	2b44      	cmp	r3, #68	; 0x44
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8005d9c:	d104      	bne.n	8005da8 <f_printf+0x110>
		if (d == 'D' && (v & 0x80000000)) {
 8005d9e:	2800      	cmp	r0, #0
			v = 0 - v;
 8005da0:	bfbc      	itt	lt
 8005da2:	4240      	neglt	r0, r0
			f |= 8;
 8005da4:	f042 0208 	orrlt.w	r2, r2, #8
 8005da8:	2978      	cmp	r1, #120	; 0x78
 8005daa:	bf0c      	ite	eq
 8005dac:	f04f 0827 	moveq.w	r8, #39	; 0x27
 8005db0:	f04f 0807 	movne.w	r8, #7
		i = 0;
 8005db4:	2100      	movs	r1, #0
			d = (TCHAR)(v % r); v /= r;
 8005db6:	fbb0 fcfe 	udiv	ip, r0, lr
 8005dba:	fb0e 041c 	mls	r4, lr, ip, r0
 8005dbe:	b2e3      	uxtb	r3, r4
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8005dc0:	2c09      	cmp	r4, #9
 8005dc2:	bf84      	itt	hi
 8005dc4:	4443      	addhi	r3, r8
 8005dc6:	b2db      	uxtbhi	r3, r3
			s[i++] = d + '0';
 8005dc8:	3330      	adds	r3, #48	; 0x30
			d = (TCHAR)(v % r); v /= r;
 8005dca:	4660      	mov	r0, ip
			s[i++] = d + '0';
 8005dcc:	1c4c      	adds	r4, r1, #1
 8005dce:	5473      	strb	r3, [r6, r1]
		} while (v && i < sizeof s / sizeof s[0]);
 8005dd0:	f1bc 0f00 	cmp.w	ip, #0
 8005dd4:	d002      	beq.n	8005ddc <f_printf+0x144>
 8005dd6:	2c10      	cmp	r4, #16
 8005dd8:	d142      	bne.n	8005e60 <f_printf+0x1c8>
 8005dda:	210f      	movs	r1, #15
		if (f & 8) s[i++] = '-';
 8005ddc:	0710      	lsls	r0, r2, #28
 8005dde:	d505      	bpl.n	8005dec <f_printf+0x154>
 8005de0:	ab1a      	add	r3, sp, #104	; 0x68
 8005de2:	441c      	add	r4, r3
 8005de4:	232d      	movs	r3, #45	; 0x2d
 8005de6:	f804 3c5c 	strb.w	r3, [r4, #-92]
 8005dea:	1c8c      	adds	r4, r1, #2
		j = i; d = (f & 1) ? '0' : ' ';
 8005dec:	f012 0f01 	tst.w	r2, #1
 8005df0:	bf14      	ite	ne
 8005df2:	f04f 0930 	movne.w	r9, #48	; 0x30
 8005df6:	f04f 0920 	moveq.w	r9, #32
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8005dfa:	0793      	lsls	r3, r2, #30
		j = i; d = (f & 1) ? '0' : ' ';
 8005dfc:	46a0      	mov	r8, r4
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8005dfe:	d536      	bpl.n	8005e6e <f_printf+0x1d6>
		do putc_bfd(&pb, s[--i]); while (i);
 8005e00:	3c01      	subs	r4, #1
 8005e02:	a807      	add	r0, sp, #28
 8005e04:	5d31      	ldrb	r1, [r6, r4]
 8005e06:	f7ff fc34 	bl	8005672 <putc_bfd>
 8005e0a:	2c00      	cmp	r4, #0
 8005e0c:	d1f8      	bne.n	8005e00 <f_printf+0x168>
		while (j++ < w) putc_bfd(&pb, d);
 8005e0e:	4547      	cmp	r7, r8
 8005e10:	d9b8      	bls.n	8005d84 <f_printf+0xec>
 8005e12:	4649      	mov	r1, r9
 8005e14:	a807      	add	r0, sp, #28
 8005e16:	f7ff fc2c 	bl	8005672 <putc_bfd>
 8005e1a:	f108 0801 	add.w	r8, r8, #1
 8005e1e:	e7f6      	b.n	8005e0e <f_printf+0x176>
				while (j++ < w) putc_bfd(&pb, ' ');
 8005e20:	2120      	movs	r1, #32
 8005e22:	a807      	add	r0, sp, #28
 8005e24:	f7ff fc25 	bl	8005672 <putc_bfd>
 8005e28:	e79f      	b.n	8005d6a <f_printf+0xd2>
			while (*p) putc_bfd(&pb, *p++);
 8005e2a:	a807      	add	r0, sp, #28
 8005e2c:	f7ff fc21 	bl	8005672 <putc_bfd>
 8005e30:	e7a2      	b.n	8005d78 <f_printf+0xe0>
			while (j++ < w) putc_bfd(&pb, ' ');
 8005e32:	2120      	movs	r1, #32
 8005e34:	a807      	add	r0, sp, #28
 8005e36:	f7ff fc1c 	bl	8005672 <putc_bfd>
 8005e3a:	3401      	adds	r4, #1
 8005e3c:	e7a0      	b.n	8005d80 <f_printf+0xe8>
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8005e3e:	9b01      	ldr	r3, [sp, #4]
 8005e40:	1d1a      	adds	r2, r3, #4
 8005e42:	9201      	str	r2, [sp, #4]
 8005e44:	7819      	ldrb	r1, [r3, #0]
 8005e46:	e73b      	b.n	8005cc0 <f_printf+0x28>
			r = 16; break;
 8005e48:	f04f 0e10 	mov.w	lr, #16
 8005e4c:	e79e      	b.n	8005d8c <f_printf+0xf4>
			r = 10; break;
 8005e4e:	f04f 0e0a 	mov.w	lr, #10
 8005e52:	e79b      	b.n	8005d8c <f_printf+0xf4>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8005e54:	2b44      	cmp	r3, #68	; 0x44
 8005e56:	f100 0304 	add.w	r3, r0, #4
 8005e5a:	9301      	str	r3, [sp, #4]
 8005e5c:	6800      	ldr	r0, [r0, #0]
 8005e5e:	e79d      	b.n	8005d9c <f_printf+0x104>
 8005e60:	4621      	mov	r1, r4
 8005e62:	e7a8      	b.n	8005db6 <f_printf+0x11e>
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8005e64:	4649      	mov	r1, r9
 8005e66:	a807      	add	r0, sp, #28
 8005e68:	f7ff fc03 	bl	8005672 <putc_bfd>
 8005e6c:	46d0      	mov	r8, sl
 8005e6e:	45b8      	cmp	r8, r7
 8005e70:	f108 0a01 	add.w	sl, r8, #1
 8005e74:	d3f6      	bcc.n	8005e64 <f_printf+0x1cc>
 8005e76:	46d0      	mov	r8, sl
 8005e78:	e7c2      	b.n	8005e00 <f_printf+0x168>
	}

	va_end(arp);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8005e7a:	9a08      	ldr	r2, [sp, #32]
 8005e7c:	2a00      	cmp	r2, #0
 8005e7e:	da06      	bge.n	8005e8e <f_printf+0x1f6>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
		&& (UINT)pb.idx == nw) return pb.nchr;
	return EOF;
 8005e80:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005e84:	b01b      	add	sp, #108	; 0x6c
 8005e86:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e8a:	b003      	add	sp, #12
 8005e8c:	4770      	bx	lr
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8005e8e:	ab02      	add	r3, sp, #8
 8005e90:	a90a      	add	r1, sp, #40	; 0x28
 8005e92:	9807      	ldr	r0, [sp, #28]
 8005e94:	f7ff fafe 	bl	8005494 <f_write>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d1f1      	bne.n	8005e80 <f_printf+0x1e8>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8005e9c:	9b02      	ldr	r3, [sp, #8]
 8005e9e:	9a08      	ldr	r2, [sp, #32]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d1ed      	bne.n	8005e80 <f_printf+0x1e8>
 8005ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ea6:	e7ed      	b.n	8005e84 <f_printf+0x1ec>

08005ea8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005ea8:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 8005eaa:	4b0f      	ldr	r3, [pc, #60]	; (8005ee8 <FATFS_LinkDriverEx+0x40>)
 8005eac:	7a5c      	ldrb	r4, [r3, #9]
 8005eae:	2c01      	cmp	r4, #1
 8005eb0:	d818      	bhi.n	8005ee4 <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005eb2:	7a5d      	ldrb	r5, [r3, #9]
 8005eb4:	b2ed      	uxtb	r5, r5
 8005eb6:	2400      	movs	r4, #0
 8005eb8:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 8005eba:	7a5d      	ldrb	r5, [r3, #9]
 8005ebc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005ec0:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 8005ec2:	7a58      	ldrb	r0, [r3, #9]
 8005ec4:	4418      	add	r0, r3
 8005ec6:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8005ec8:	7a5a      	ldrb	r2, [r3, #9]
 8005eca:	b2d2      	uxtb	r2, r2
 8005ecc:	1c50      	adds	r0, r2, #1
 8005ece:	b2c0      	uxtb	r0, r0
 8005ed0:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8005ed2:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8005ed4:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8005ed6:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8005ed8:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8005eda:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8005edc:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8005ede:	70cc      	strb	r4, [r1, #3]
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8005ee4:	2001      	movs	r0, #1
    ret = 0;
  }
  
  return ret;
}
 8005ee6:	bd30      	pop	{r4, r5, pc}
 8005ee8:	2000028c 	.word	0x2000028c

08005eec <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8005eec:	2200      	movs	r2, #0
 8005eee:	f7ff bfdb 	b.w	8005ea8 <FATFS_LinkDriverEx>

08005ef2 <LPS22HB_GetHandle>:
/* Includes ------------------------------------------------------------------*/
#include "LPS22HB.h"

void LPS22HB_GetHandle(LPS22HB_t* LPS22HB, I2C_HandleTypeDef* hi2cx)
{
	LPS22HB->hi2c = hi2cx;
 8005ef2:	6001      	str	r1, [r0, #0]
 8005ef4:	4770      	bx	lr

08005ef6 <LPS22HB_SetAddress>:
}

void LPS22HB_SetAddress(LPS22HB_t* LPS22HB, LPS22HB_Address_t Address)
{
	LPS22HB->address = Address;
 8005ef6:	7101      	strb	r1, [r0, #4]
 8005ef8:	4770      	bx	lr
	...

08005efc <LPS22HB_GetData>:

    return LPS22HB_Result_Ok;
}

LPS22HB_Result_t LPS22HB_GetData(LPS22HB_t* LPS22HB)
{
 8005efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005efe:	b087      	sub	sp, #28
	HAL_StatusTypeDef res[2];
	uint8_t dt[3];

	// 	get pressure data
	res[0] = HAL_I2C_Mem_Read(LPS22HB->hi2c, LPS22HB->address, LPS22HB_PRESS_POUT_XL | 0x80, 1, dt, 3, 0xFFFF);
 8005f00:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8005f04:	2303      	movs	r3, #3
 8005f06:	ac05      	add	r4, sp, #20
 8005f08:	7901      	ldrb	r1, [r0, #4]
 8005f0a:	9702      	str	r7, [sp, #8]
 8005f0c:	9301      	str	r3, [sp, #4]
 8005f0e:	9400      	str	r4, [sp, #0]
{
 8005f10:	4605      	mov	r5, r0
	res[0] = HAL_I2C_Mem_Read(LPS22HB->hi2c, LPS22HB->address, LPS22HB_PRESS_POUT_XL | 0x80, 1, dt, 3, 0xFFFF);
 8005f12:	2301      	movs	r3, #1
 8005f14:	22a8      	movs	r2, #168	; 0xa8
 8005f16:	6800      	ldr	r0, [r0, #0]
 8005f18:	f7fb f94b 	bl	80011b2 <HAL_I2C_Mem_Read>
	LPS22HB->pressure_raw = dt[2] << 16 | dt[1] << 8 | dt[0];
 8005f1c:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8005f20:	f89d 2016 	ldrb.w	r2, [sp, #22]
	LPS22HB->pressure = (float)LPS22HB->pressure_raw / 4096.0f;

	res[1] = HAL_I2C_Mem_Read(LPS22HB->hi2c, LPS22HB->address, LPS22HB_TEMP_OUT_L | 0x80, 1, dt, 2, 0xFFFF);
 8005f24:	9702      	str	r7, [sp, #8]
	LPS22HB->pressure_raw = dt[2] << 16 | dt[1] << 8 | dt[0];
 8005f26:	021b      	lsls	r3, r3, #8
 8005f28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f2c:	f89d 2014 	ldrb.w	r2, [sp, #20]
	res[1] = HAL_I2C_Mem_Read(LPS22HB->hi2c, LPS22HB->address, LPS22HB_TEMP_OUT_L | 0x80, 1, dt, 2, 0xFFFF);
 8005f30:	7929      	ldrb	r1, [r5, #4]
	LPS22HB->pressure_raw = dt[2] << 16 | dt[1] << 8 | dt[0];
 8005f32:	4313      	orrs	r3, r2
	LPS22HB->pressure = (float)LPS22HB->pressure_raw / 4096.0f;
 8005f34:	ee07 3a90 	vmov	s15, r3
 8005f38:	eefa 7aca 	vcvt.f32.s32	s15, s15, #12
	res[1] = HAL_I2C_Mem_Read(LPS22HB->hi2c, LPS22HB->address, LPS22HB_TEMP_OUT_L | 0x80, 1, dt, 2, 0xFFFF);
 8005f3c:	2702      	movs	r7, #2
	LPS22HB->pressure_raw = dt[2] << 16 | dt[1] << 8 | dt[0];
 8005f3e:	60eb      	str	r3, [r5, #12]
	LPS22HB->pressure = (float)LPS22HB->pressure_raw / 4096.0f;
 8005f40:	edc5 7a02 	vstr	s15, [r5, #8]
	res[1] = HAL_I2C_Mem_Read(LPS22HB->hi2c, LPS22HB->address, LPS22HB_TEMP_OUT_L | 0x80, 1, dt, 2, 0xFFFF);
 8005f44:	2301      	movs	r3, #1
 8005f46:	22ab      	movs	r2, #171	; 0xab
	res[0] = HAL_I2C_Mem_Read(LPS22HB->hi2c, LPS22HB->address, LPS22HB_PRESS_POUT_XL | 0x80, 1, dt, 3, 0xFFFF);
 8005f48:	4606      	mov	r6, r0
	res[1] = HAL_I2C_Mem_Read(LPS22HB->hi2c, LPS22HB->address, LPS22HB_TEMP_OUT_L | 0x80, 1, dt, 2, 0xFFFF);
 8005f4a:	e88d 0090 	stmia.w	sp, {r4, r7}
 8005f4e:	6828      	ldr	r0, [r5, #0]
 8005f50:	f7fb f92f 	bl	80011b2 <HAL_I2C_Mem_Read>
	LPS22HB->temperature_raw = dt[1] << 8 | dt[0];
 8005f54:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8005f58:	f89d 3014 	ldrb.w	r3, [sp, #20]
	LPS22HB->temperature = (float)LPS22HB->temperature_raw / 100.0f;
 8005f5c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8005f8c <LPS22HB_GetData+0x90>
	LPS22HB->temperature_raw = dt[1] << 8 | dt[0];
 8005f60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005f64:	b21b      	sxth	r3, r3
	LPS22HB->temperature = (float)LPS22HB->temperature_raw / 100.0f;
 8005f66:	ee07 3a90 	vmov	s15, r3
 8005f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	LPS22HB->temperature_raw = dt[1] << 8 | dt[0];
 8005f6e:	82ab      	strh	r3, [r5, #20]
	LPS22HB->temperature = (float)LPS22HB->temperature_raw / 100.0f;
 8005f70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005f74:	ed85 7a04 	vstr	s14, [r5, #16]

	if( res[0] != HAL_OK || res[1] != HAL_OK ) {
 8005f78:	b92e      	cbnz	r6, 8005f86 <LPS22HB_GetData+0x8a>
 8005f7a:	2800      	cmp	r0, #0
		return LPS22HB_Result_Fail;
 8005f7c:	bf0c      	ite	eq
 8005f7e:	2000      	moveq	r0, #0
 8005f80:	4638      	movne	r0, r7
	}

	return LPS22HB_Result_Ok;
}
 8005f82:	b007      	add	sp, #28
 8005f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return LPS22HB_Result_Fail;
 8005f86:	4638      	mov	r0, r7
 8005f88:	e7fb      	b.n	8005f82 <LPS22HB_GetData+0x86>
 8005f8a:	bf00      	nop
 8005f8c:	42c80000 	.word	0x42c80000

08005f90 <LPS22HB_Pressure>:

float LPS22HB_Pressure(LPS22HB_t* LPS22HB)
{
	return LPS22HB->pressure;
}
 8005f90:	ed90 0a02 	vldr	s0, [r0, #8]
 8005f94:	4770      	bx	lr

08005f96 <LPS22HB_PressureRaw>:

uint32_t LPS22HB_PressureRaw(LPS22HB_t* LPS22HB)
{
	return LPS22HB->pressure_raw;
}
 8005f96:	68c0      	ldr	r0, [r0, #12]
 8005f98:	4770      	bx	lr

08005f9a <LPS22HB_Temperature>:

float LPS22HB_Temperature(LPS22HB_t* LPS22HB)
{
	return LPS22HB->temperature;
}
 8005f9a:	ed90 0a04 	vldr	s0, [r0, #16]
 8005f9e:	4770      	bx	lr

08005fa0 <LPS22HB_SetODR>:
{
	return LPS22HB->temperature_raw;
}

LPS22HB_Result_t LPS22HB_SetODR(LPS22HB_t* LPS22HB, LPS22HB_ODR_t ODRConfig)
{
 8005fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	HAL_StatusTypeDef res[3];
	uint8_t dt[2];

	dt[0] = LPS22HB_CTRL_REG1;
 8005fa4:	f04f 0810 	mov.w	r8, #16
 8005fa8:	eb0d 0508 	add.w	r5, sp, r8
	res[0] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, sizeof(dt), 0xFFFF);
 8005fac:	f64f 76ff 	movw	r6, #65535	; 0xffff
	dt[0] = LPS22HB_CTRL_REG1;
 8005fb0:	f805 8d04 	strb.w	r8, [r5, #-4]!
{
 8005fb4:	460f      	mov	r7, r1
	res[0] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, sizeof(dt), 0xFFFF);
 8005fb6:	7901      	ldrb	r1, [r0, #4]
 8005fb8:	9600      	str	r6, [sp, #0]
{
 8005fba:	4604      	mov	r4, r0
	res[0] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, sizeof(dt), 0xFFFF);
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	462a      	mov	r2, r5
 8005fc0:	6800      	ldr	r0, [r0, #0]
 8005fc2:	f7fa ff0c 	bl	8000dde <HAL_I2C_Master_Transmit>
	res[1] = HAL_I2C_Master_Receive(LPS22HB->hi2c, LPS22HB->address, dt, sizeof(dt), 0xFFFF);
 8005fc6:	7921      	ldrb	r1, [r4, #4]
 8005fc8:	9600      	str	r6, [sp, #0]
	res[0] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, sizeof(dt), 0xFFFF);
 8005fca:	4682      	mov	sl, r0
	res[1] = HAL_I2C_Master_Receive(LPS22HB->hi2c, LPS22HB->address, dt, sizeof(dt), 0xFFFF);
 8005fcc:	2302      	movs	r3, #2
 8005fce:	462a      	mov	r2, r5
 8005fd0:	6820      	ldr	r0, [r4, #0]
 8005fd2:	f7fa ff9d 	bl	8000f10 <HAL_I2C_Master_Receive>

	dt[1] = dt[0];
	dt[1] &= 0xff ^ 0x70;
 8005fd6:	f89d 300c 	ldrb.w	r3, [sp, #12]
	dt[1] |= ODRConfig;
	dt[0] =LPS22HB_CTRL_REG1;

	res[2] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, sizeof(dt), 0xFFFF);
 8005fda:	7921      	ldrb	r1, [r4, #4]
 8005fdc:	9600      	str	r6, [sp, #0]
	dt[1] &= 0xff ^ 0x70;
 8005fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	dt[1] |= ODRConfig;
 8005fe2:	431f      	orrs	r7, r3
	res[1] = HAL_I2C_Master_Receive(LPS22HB->hi2c, LPS22HB->address, dt, sizeof(dt), 0xFFFF);
 8005fe4:	4681      	mov	r9, r0
	res[2] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, sizeof(dt), 0xFFFF);
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	462a      	mov	r2, r5
 8005fea:	6820      	ldr	r0, [r4, #0]
	dt[1] |= ODRConfig;
 8005fec:	f88d 700d 	strb.w	r7, [sp, #13]
	dt[0] =LPS22HB_CTRL_REG1;
 8005ff0:	f88d 800c 	strb.w	r8, [sp, #12]
	res[2] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, sizeof(dt), 0xFFFF);
 8005ff4:	f7fa fef3 	bl	8000dde <HAL_I2C_Master_Transmit>

	if( res[0] != HAL_OK || res[1] != HAL_OK || res[2] != HAL_OK ) {
 8005ff8:	f1ba 0f00 	cmp.w	sl, #0
 8005ffc:	d109      	bne.n	8006012 <LPS22HB_SetODR+0x72>
 8005ffe:	f1b9 0f00 	cmp.w	r9, #0
 8006002:	d106      	bne.n	8006012 <LPS22HB_SetODR+0x72>
 8006004:	2800      	cmp	r0, #0
		return LPS22HB_Result_Fail;
	}

	return LPS22HB_Result_Ok;
 8006006:	bf14      	ite	ne
 8006008:	2002      	movne	r0, #2
 800600a:	2000      	moveq	r0, #0
}
 800600c:	b004      	add	sp, #16
 800600e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return LPS22HB_Result_Fail;
 8006012:	2002      	movs	r0, #2
 8006014:	e7fa      	b.n	800600c <LPS22HB_SetODR+0x6c>

08006016 <LPS22HB_Init>:
{
 8006016:	b530      	push	{r4, r5, lr}
	if ( HAL_I2C_IsDeviceReady(LPS22HB->hi2c, LPS22HB->address, 3, 0xFFFF) != HAL_OK ) {
 8006018:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 800601c:	b087      	sub	sp, #28
 800601e:	4604      	mov	r4, r0
 8006020:	460d      	mov	r5, r1
	if ( HAL_I2C_IsDeviceReady(LPS22HB->hi2c, LPS22HB->address, 3, 0xFFFF) != HAL_OK ) {
 8006022:	2203      	movs	r2, #3
 8006024:	7901      	ldrb	r1, [r0, #4]
 8006026:	6800      	ldr	r0, [r0, #0]
 8006028:	f7fb f981 	bl	800132e <HAL_I2C_IsDeviceReady>
 800602c:	b9d0      	cbnz	r0, 8006064 <LPS22HB_Init+0x4e>
	HAL_I2C_Mem_Read(LPS22HB->hi2c, LPS22HB->address, LPS22HB_WHO_AM_I, 1, dt, 1, 0xFFFF);
 800602e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006032:	9302      	str	r3, [sp, #8]
 8006034:	aa05      	add	r2, sp, #20
 8006036:	2301      	movs	r3, #1
 8006038:	9301      	str	r3, [sp, #4]
 800603a:	9200      	str	r2, [sp, #0]
 800603c:	7921      	ldrb	r1, [r4, #4]
 800603e:	6820      	ldr	r0, [r4, #0]
 8006040:	220f      	movs	r2, #15
 8006042:	f7fb f8b6 	bl	80011b2 <HAL_I2C_Mem_Read>
    if (dt[0] != I_AM_LPS22HB) {
 8006046:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800604a:	2bb1      	cmp	r3, #177	; 0xb1
 800604c:	d002      	beq.n	8006054 <LPS22HB_Init+0x3e>
    	return LPS22HB_Result_Fail;
 800604e:	2002      	movs	r0, #2
}
 8006050:	b007      	add	sp, #28
 8006052:	bd30      	pop	{r4, r5, pc}
    if ( LPS22HB_SetODR(LPS22HB, ODR) != LPS22HB_Result_Ok ) {
 8006054:	4629      	mov	r1, r5
 8006056:	4620      	mov	r0, r4
 8006058:	f7ff ffa2 	bl	8005fa0 <LPS22HB_SetODR>
 800605c:	2800      	cmp	r0, #0
 800605e:	d1f6      	bne.n	800604e <LPS22HB_Init+0x38>
    LPS22HB->odr = ODR;
 8006060:	75a5      	strb	r5, [r4, #22]
    return LPS22HB_Result_Ok;
 8006062:	e7f5      	b.n	8006050 <LPS22HB_Init+0x3a>
		return LPS22HB_Result_DeviceNotConnected;
 8006064:	2001      	movs	r0, #1
 8006066:	e7f3      	b.n	8006050 <LPS22HB_Init+0x3a>

08006068 <LPS22HB_SetLPF>:

LPS22HB_Result_t LPS22HB_SetLPF(LPS22HB_t* LPS22HB, LPS22HB_LPF_t LPFConfig)
{
 8006068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	HAL_StatusTypeDef res[3];
	uint8_t dt[2];

	dt[0] = LPS22HB_CTRL_REG1;
 800606c:	f04f 0810 	mov.w	r8, #16
 8006070:	eb0d 0508 	add.w	r5, sp, r8
	res[0] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, 1, 0xFFFF);
 8006074:	f64f 76ff 	movw	r6, #65535	; 0xffff
	dt[0] = LPS22HB_CTRL_REG1;
 8006078:	f805 8d04 	strb.w	r8, [r5, #-4]!
{
 800607c:	460f      	mov	r7, r1
	res[0] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, 1, 0xFFFF);
 800607e:	7901      	ldrb	r1, [r0, #4]
 8006080:	9600      	str	r6, [sp, #0]
{
 8006082:	4604      	mov	r4, r0
	res[0] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, 1, 0xFFFF);
 8006084:	2301      	movs	r3, #1
 8006086:	462a      	mov	r2, r5
 8006088:	6800      	ldr	r0, [r0, #0]
 800608a:	f7fa fea8 	bl	8000dde <HAL_I2C_Master_Transmit>
	res[1] = HAL_I2C_Master_Receive(LPS22HB->hi2c, LPS22HB->address, dt, 1, 0xFFFF);
 800608e:	7921      	ldrb	r1, [r4, #4]
 8006090:	9600      	str	r6, [sp, #0]
	res[0] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, 1, 0xFFFF);
 8006092:	4682      	mov	sl, r0
	res[1] = HAL_I2C_Master_Receive(LPS22HB->hi2c, LPS22HB->address, dt, 1, 0xFFFF);
 8006094:	2301      	movs	r3, #1
 8006096:	462a      	mov	r2, r5
 8006098:	6820      	ldr	r0, [r4, #0]
 800609a:	f7fa ff39 	bl	8000f10 <HAL_I2C_Master_Receive>

	dt[1] = dt[0];
	dt[1] &= 0xff ^ 0x0c;
 800609e:	f89d 300c 	ldrb.w	r3, [sp, #12]
	dt[1] |= LPFConfig;
	dt[0] = LPS22HB_CTRL_REG1;

	res[2] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, 2, 0xFFFF);
 80060a2:	7921      	ldrb	r1, [r4, #4]
 80060a4:	9600      	str	r6, [sp, #0]
	dt[1] &= 0xff ^ 0x0c;
 80060a6:	f023 030c 	bic.w	r3, r3, #12
	dt[1] |= LPFConfig;
 80060aa:	431f      	orrs	r7, r3
	res[1] = HAL_I2C_Master_Receive(LPS22HB->hi2c, LPS22HB->address, dt, 1, 0xFFFF);
 80060ac:	4681      	mov	r9, r0
	res[2] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, 2, 0xFFFF);
 80060ae:	2302      	movs	r3, #2
 80060b0:	462a      	mov	r2, r5
 80060b2:	6820      	ldr	r0, [r4, #0]
	dt[1] |= LPFConfig;
 80060b4:	f88d 700d 	strb.w	r7, [sp, #13]
	dt[0] = LPS22HB_CTRL_REG1;
 80060b8:	f88d 800c 	strb.w	r8, [sp, #12]
	res[2] = HAL_I2C_Master_Transmit(LPS22HB->hi2c, LPS22HB->address, dt, 2, 0xFFFF);
 80060bc:	f7fa fe8f 	bl	8000dde <HAL_I2C_Master_Transmit>

	if( res[0] != HAL_OK || res[1] != HAL_OK || res[2] != HAL_OK ) {
 80060c0:	f1ba 0f00 	cmp.w	sl, #0
 80060c4:	d109      	bne.n	80060da <LPS22HB_SetLPF+0x72>
 80060c6:	f1b9 0f00 	cmp.w	r9, #0
 80060ca:	d106      	bne.n	80060da <LPS22HB_SetLPF+0x72>
 80060cc:	2800      	cmp	r0, #0
		return LPS22HB_Result_Fail;
	}

	return LPS22HB_Result_Ok;
 80060ce:	bf14      	ite	ne
 80060d0:	2002      	movne	r0, #2
 80060d2:	2000      	moveq	r0, #0
}
 80060d4:	b004      	add	sp, #16
 80060d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return LPS22HB_Result_Fail;
 80060da:	2002      	movs	r0, #2
 80060dc:	e7fa      	b.n	80060d4 <LPS22HB_SetLPF+0x6c>
	...

080060e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */
FATFS SDFatFs;
/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80060e0:	b510      	push	{r4, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&SD_Driver, USERPath);
 80060e2:	4c07      	ldr	r4, [pc, #28]	; (8006100 <MX_FATFS_Init+0x20>)
 80060e4:	4807      	ldr	r0, [pc, #28]	; (8006104 <MX_FATFS_Init+0x24>)
 80060e6:	4621      	mov	r1, r4
 80060e8:	f7ff ff00 	bl	8005eec <FATFS_LinkDriver>
 80060ec:	4b06      	ldr	r3, [pc, #24]	; (8006108 <MX_FATFS_Init+0x28>)
 80060ee:	7018      	strb	r0, [r3, #0]

  // If you regenerate codes, you should replace "USER_Driver" to "SD_Driver".


  //FRESULT res;
  f_mount(&SDFatFs, (TCHAR const*)USERPath, 0);
 80060f0:	4621      	mov	r1, r4
 80060f2:	2200      	movs	r2, #0
 80060f4:	4805      	ldr	r0, [pc, #20]	; (800610c <MX_FATFS_Init+0x2c>)
  //xprintf("f_mount() res=%d\n", (int)res);
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80060f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  f_mount(&SDFatFs, (TCHAR const*)USERPath, 0);
 80060fa:	f7fe bff9 	b.w	80050f0 <f_mount>
 80060fe:	bf00      	nop
 8006100:	20000360 	.word	0x20000360
 8006104:	08008ff8 	.word	0x08008ff8
 8006108:	20000364 	.word	0x20000364
 800610c:	20000368 	.word	0x20000368

08006110 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8006110:	2000      	movs	r0, #0
 8006112:	4770      	bx	lr

08006114 <uart_getc>:

/**
 * UART Wrapper
 */
uint8_t uart_getc(void)
{
 8006114:	b507      	push	{r0, r1, r2, lr}
	uint8_t c = 0;
	char buf[1];
	HAL_UART_Receive(&huart4, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 8006116:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800611a:	2201      	movs	r2, #1
 800611c:	a901      	add	r1, sp, #4
 800611e:	4804      	ldr	r0, [pc, #16]	; (8006130 <uart_getc+0x1c>)
 8006120:	f7fd f8f0 	bl	8003304 <HAL_UART_Receive>
	c = buf[0];
	return c;
}
 8006124:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8006128:	b003      	add	sp, #12
 800612a:	f85d fb04 	ldr.w	pc, [sp], #4
 800612e:	bf00      	nop
 8006130:	200021ac 	.word	0x200021ac

08006134 <uart_putc>:
void uart_putc(uint8_t c)
{
 8006134:	b507      	push	{r0, r1, r2, lr}
	char buf[1];
	buf[0] = c;
 8006136:	a902      	add	r1, sp, #8
	HAL_UART_Transmit(&huart4, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 8006138:	f64f 73ff 	movw	r3, #65535	; 0xffff
	buf[0] = c;
 800613c:	f801 0d04 	strb.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart4, (uint8_t *)buf, sizeof(buf), 0xFFFF);
 8006140:	2201      	movs	r2, #1
 8006142:	4803      	ldr	r0, [pc, #12]	; (8006150 <uart_putc+0x1c>)
 8006144:	f7fd f885 	bl	8003252 <HAL_UART_Transmit>
}
 8006148:	b003      	add	sp, #12
 800614a:	f85d fb04 	ldr.w	pc, [sp], #4
 800614e:	bf00      	nop
 8006150:	200021ac 	.word	0x200021ac

08006154 <SystemClock_Config>:
{
 8006154:	b510      	push	{r4, lr}
 8006156:	b0a6      	sub	sp, #152	; 0x98
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8006158:	230a      	movs	r3, #10
 800615a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800615c:	2301      	movs	r3, #1
 800615e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006160:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006166:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006168:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800616c:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800616e:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006170:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006172:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8006174:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8006176:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006178:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800617a:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800617c:	f7fb f9ac 	bl	80014d8 <HAL_RCC_OscConfig>
 8006180:	b100      	cbz	r0, 8006184 <SystemClock_Config+0x30>
 8006182:	e7fe      	b.n	8006182 <SystemClock_Config+0x2e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006184:	230f      	movs	r3, #15
 8006186:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006188:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800618a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800618e:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006190:	4621      	mov	r1, r4
 8006192:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006194:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006196:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006198:	f7fb fc46 	bl	8001a28 <HAL_RCC_ClockConfig>
 800619c:	b100      	cbz	r0, 80061a0 <SystemClock_Config+0x4c>
 800619e:	e7fe      	b.n	800619e <SystemClock_Config+0x4a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_UART4
 80061a0:	4b11      	ldr	r3, [pc, #68]	; (80061e8 <SystemClock_Config+0x94>)
 80061a2:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80061a4:	9012      	str	r0, [sp, #72]	; 0x48
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80061a6:	9015      	str	r0, [sp, #84]	; 0x54
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80061a8:	9017      	str	r0, [sp, #92]	; 0x5c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80061aa:	f44f 7300 	mov.w	r3, #512	; 0x200
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80061ae:	9022      	str	r0, [sp, #136]	; 0x88
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80061b0:	901e      	str	r0, [sp, #120]	; 0x78
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80061b2:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80061b4:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80061b6:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80061b8:	f7fb fd2e 	bl	8001c18 <HAL_RCCEx_PeriphCLKConfig>
 80061bc:	4604      	mov	r4, r0
 80061be:	b100      	cbz	r0, 80061c2 <SystemClock_Config+0x6e>
 80061c0:	e7fe      	b.n	80061c0 <SystemClock_Config+0x6c>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80061c2:	f7fb fcf3 	bl	8001bac <HAL_RCC_GetHCLKFreq>
 80061c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80061ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80061ce:	f7fa faa5 	bl	800071c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80061d2:	2004      	movs	r0, #4
 80061d4:	f7fa fab8 	bl	8000748 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80061d8:	4622      	mov	r2, r4
 80061da:	4621      	mov	r1, r4
 80061dc:	f04f 30ff 	mov.w	r0, #4294967295
 80061e0:	f7fa fa5c 	bl	800069c <HAL_NVIC_SetPriority>
}
 80061e4:	b026      	add	sp, #152	; 0x98
 80061e6:	bd10      	pop	{r4, pc}
 80061e8:	00b10029 	.word	0x00b10029

080061ec <Config_OnePulseDelayTime>:
	timeout = delay * SystemCoreClock / (float)(htim16.Init.Prescaler + 1) ;
 80061ec:	4b17      	ldr	r3, [pc, #92]	; (800624c <Config_OnePulseDelayTime+0x60>)
{
 80061ee:	b530      	push	{r4, r5, lr}
	timeout = delay * SystemCoreClock / (float)(htim16.Init.Prescaler + 1) ;
 80061f0:	4d17      	ldr	r5, [pc, #92]	; (8006250 <Config_OnePulseDelayTime+0x64>)
 80061f2:	edd3 7a00 	vldr	s15, [r3]
 80061f6:	686b      	ldr	r3, [r5, #4]
 80061f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061fc:	3301      	adds	r3, #1
 80061fe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006202:	ee07 3a90 	vmov	s15, r3
 8006206:	eef8 7a67 	vcvt.f32.u32	s15, s15
{
 800620a:	b08b      	sub	sp, #44	; 0x2c
	timeout = delay * SystemCoreClock / (float)(htim16.Init.Prescaler + 1) ;
 800620c:	ee80 7a27 	vdiv.f32	s14, s0, s15
	HAL_TIM_Base_Init(&htim16);
 8006210:	4628      	mov	r0, r5
	timeout = delay * SystemCoreClock / (float)(htim16.Init.Prescaler + 1) ;
 8006212:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8006216:	edcd 7a01 	vstr	s15, [sp, #4]
	htim16.Init.Period = timeout;
 800621a:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 800621e:	60ec      	str	r4, [r5, #12]
	HAL_TIM_Base_Init(&htim16);
 8006220:	f7fc fb30 	bl	8002884 <HAL_TIM_Base_Init>
	sConfigOC_TIM16.Pulse = timeout;
 8006224:	9404      	str	r4, [sp, #16]
	sConfigOC_TIM16.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006226:	2400      	movs	r4, #0
	sConfigOC_TIM16.OCMode = TIM_OCMODE_ACTIVE;
 8006228:	2310      	movs	r3, #16
	HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC_TIM16,TIM_CHANNEL_1);
 800622a:	4622      	mov	r2, r4
 800622c:	a903      	add	r1, sp, #12
 800622e:	4628      	mov	r0, r5
	sConfigOC_TIM16.OCMode = TIM_OCMODE_ACTIVE;
 8006230:	9303      	str	r3, [sp, #12]
	sConfigOC_TIM16.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006232:	9405      	str	r4, [sp, #20]
	sConfigOC_TIM16.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006234:	9406      	str	r4, [sp, #24]
	sConfigOC_TIM16.OCFastMode = TIM_OCFAST_DISABLE;
 8006236:	9407      	str	r4, [sp, #28]
	sConfigOC_TIM16.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006238:	9408      	str	r4, [sp, #32]
	sConfigOC_TIM16.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800623a:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC_TIM16,TIM_CHANNEL_1);
 800623c:	f7fc fdd0 	bl	8002de0 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OnePulse_Start_IT(&htim16, TIM_CHANNEL_1);
 8006240:	4621      	mov	r1, r4
 8006242:	4628      	mov	r0, r5
 8006244:	f7fc f9c8 	bl	80025d8 <HAL_TIM_OnePulse_Start_IT>
}
 8006248:	b00b      	add	sp, #44	; 0x2c
 800624a:	bd30      	pop	{r4, r5, pc}
 800624c:	20000078 	.word	0x20000078
 8006250:	200022d8 	.word	0x200022d8

08006254 <Check_Bootcount>:
{
 8006254:	b510      	push	{r4, lr}
 8006256:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
    char buff[3] = {};
 800625a:	2400      	movs	r4, #0
    res = f_open(&filer, "CONFIG/BOOTCNT.TXT", FA_READ );
 800625c:	2201      	movs	r2, #1
 800625e:	491f      	ldr	r1, [pc, #124]	; (80062dc <Check_Bootcount+0x88>)
    char buff[3] = {};
 8006260:	f8ad 4004 	strh.w	r4, [sp, #4]
    res = f_open(&filer, "CONFIG/BOOTCNT.TXT", FA_READ );
 8006264:	a802      	add	r0, sp, #8
    char buff[3] = {};
 8006266:	f88d 4006 	strb.w	r4, [sp, #6]
    res = f_open(&filer, "CONFIG/BOOTCNT.TXT", FA_READ );
 800626a:	f7fe ff77 	bl	800515c <f_open>
    if ( FR_OK != res ) {
 800626e:	b308      	cbz	r0, 80062b4 <Check_Bootcount+0x60>
        res = f_mkdir("CONFIG");
 8006270:	481b      	ldr	r0, [pc, #108]	; (80062e0 <Check_Bootcount+0x8c>)
 8006272:	f7ff fbe0 	bl	8005a36 <f_mkdir>
        if ( FR_OK == res ) {
 8006276:	b9a0      	cbnz	r0, 80062a2 <Check_Bootcount+0x4e>
        	res = f_open(&filew, "CONFIG/BOOTCNT.TXT", FA_CREATE_ALWAYS | FA_WRITE );
 8006278:	220a      	movs	r2, #10
 800627a:	4918      	ldr	r1, [pc, #96]	; (80062dc <Check_Bootcount+0x88>)
 800627c:	a88d      	add	r0, sp, #564	; 0x234
 800627e:	f7fe ff6d 	bl	800515c <f_open>
        	if ( FR_OK != res ) {	//	failed to make file
 8006282:	4604      	mov	r4, r0
 8006284:	b140      	cbz	r0, 8006298 <Check_Bootcount+0x44>
        		xprintf("filesystem error!\n");
 8006286:	4817      	ldr	r0, [pc, #92]	; (80062e4 <Check_Bootcount+0x90>)
 8006288:	f001 fbe4 	bl	8007a54 <xprintf>
            	return -1;
 800628c:	f04f 34ff 	mov.w	r4, #4294967295
}
 8006290:	4620      	mov	r0, r4
 8006292:	f50d 6d8c 	add.w	sp, sp, #1120	; 0x460
 8006296:	bd10      	pop	{r4, pc}
        		f_printf(&filew, "%d", bootcount);  //  bootcount = 0
 8006298:	4602      	mov	r2, r0
 800629a:	4913      	ldr	r1, [pc, #76]	; (80062e8 <Check_Bootcount+0x94>)
 800629c:	a88d      	add	r0, sp, #564	; 0x234
 800629e:	f7ff fcfb 	bl	8005c98 <f_printf>
    f_printf(&filew, "%d", bootcount);
 80062a2:	4622      	mov	r2, r4
 80062a4:	4910      	ldr	r1, [pc, #64]	; (80062e8 <Check_Bootcount+0x94>)
 80062a6:	a88d      	add	r0, sp, #564	; 0x234
 80062a8:	f7ff fcf6 	bl	8005c98 <f_printf>
    f_close(&filew);
 80062ac:	a88d      	add	r0, sp, #564	; 0x234
 80062ae:	f7ff fa62 	bl	8005776 <f_close>
    return bootcount;
 80062b2:	e7ed      	b.n	8006290 <Check_Bootcount+0x3c>
        f_gets((TCHAR *)buff, 4	, &filer);
 80062b4:	2104      	movs	r1, #4
 80062b6:	aa02      	add	r2, sp, #8
 80062b8:	eb0d 0001 	add.w	r0, sp, r1
 80062bc:	f7ff fca5 	bl	8005c0a <f_gets>
        bootcount = atoi(buff);
 80062c0:	a801      	add	r0, sp, #4
 80062c2:	f001 fbfe 	bl	8007ac2 <atoi>
        bootcount++;
 80062c6:	1c44      	adds	r4, r0, #1
        f_close(&filer);
 80062c8:	a802      	add	r0, sp, #8
 80062ca:	f7ff fa54 	bl	8005776 <f_close>
        res = f_open(&filew, "CONFIG/BOOTCNT.TXT", FA_CREATE_ALWAYS | FA_WRITE );
 80062ce:	220a      	movs	r2, #10
 80062d0:	4902      	ldr	r1, [pc, #8]	; (80062dc <Check_Bootcount+0x88>)
 80062d2:	a88d      	add	r0, sp, #564	; 0x234
 80062d4:	f7fe ff42 	bl	800515c <f_open>
 80062d8:	e7e3      	b.n	80062a2 <Check_Bootcount+0x4e>
 80062da:	bf00      	nop
 80062dc:	08008e03 	.word	0x08008e03
 80062e0:	08008e16 	.word	0x08008e16
 80062e4:	08008e1d 	.word	0x08008e1d
 80062e8:	08008e30 	.word	0x08008e30

080062ec <Config_Logdir>:
{
 80062ec:	b513      	push	{r0, r1, r4, lr}
	bootcount = Check_Bootcount();
 80062ee:	f7ff ffb1 	bl	8006254 <Check_Bootcount>
	if ( bootcount < 0 ) {
 80062f2:	1e04      	subs	r4, r0, #0
 80062f4:	da18      	bge.n	8006328 <Config_Logdir+0x3c>
		xprintf("bootcount check failure!\n");
 80062f6:	4813      	ldr	r0, [pc, #76]	; (8006344 <Config_Logdir+0x58>)
 80062f8:	f001 fbac 	bl	8007a54 <xprintf>
		sprintf(logdir, "LOG");
 80062fc:	4912      	ldr	r1, [pc, #72]	; (8006348 <Config_Logdir+0x5c>)
 80062fe:	4668      	mov	r0, sp
 8006300:	f001 fd70 	bl	8007de4 <strcpy>
		xprintf("log directory was set to \"LOG\" \n");
 8006304:	4811      	ldr	r0, [pc, #68]	; (800634c <Config_Logdir+0x60>)
 8006306:	f001 fba5 	bl	8007a54 <xprintf>
	f_mkdir(logdir);
 800630a:	4668      	mov	r0, sp
 800630c:	f7ff fb93 	bl	8005a36 <f_mkdir>
	sprintf(dir_syslog, "LOG_%03d/SYSLOG.TXT", bootcount);
 8006310:	4622      	mov	r2, r4
 8006312:	490f      	ldr	r1, [pc, #60]	; (8006350 <Config_Logdir+0x64>)
 8006314:	480f      	ldr	r0, [pc, #60]	; (8006354 <Config_Logdir+0x68>)
 8006316:	f001 fd41 	bl	8007d9c <siprintf>
	sprintf(dir_datlog, "LOG_%03d/DATLOG.CSV", bootcount);
 800631a:	4622      	mov	r2, r4
 800631c:	490e      	ldr	r1, [pc, #56]	; (8006358 <Config_Logdir+0x6c>)
 800631e:	480f      	ldr	r0, [pc, #60]	; (800635c <Config_Logdir+0x70>)
 8006320:	f001 fd3c 	bl	8007d9c <siprintf>
}
 8006324:	b002      	add	sp, #8
 8006326:	bd10      	pop	{r4, pc}
		xprintf("bootcount is %d\n", bootcount);
 8006328:	4621      	mov	r1, r4
 800632a:	480d      	ldr	r0, [pc, #52]	; (8006360 <Config_Logdir+0x74>)
 800632c:	f001 fb92 	bl	8007a54 <xprintf>
		sprintf(logdir, "LOG_%03d", bootcount);
 8006330:	4622      	mov	r2, r4
 8006332:	490c      	ldr	r1, [pc, #48]	; (8006364 <Config_Logdir+0x78>)
 8006334:	4668      	mov	r0, sp
 8006336:	f001 fd31 	bl	8007d9c <siprintf>
		xprintf("log directory was set to \"LOG_%03d\"\n", bootcount);
 800633a:	4621      	mov	r1, r4
 800633c:	480a      	ldr	r0, [pc, #40]	; (8006368 <Config_Logdir+0x7c>)
 800633e:	f001 fb89 	bl	8007a54 <xprintf>
 8006342:	e7e2      	b.n	800630a <Config_Logdir+0x1e>
 8006344:	08008e33 	.word	0x08008e33
 8006348:	08008e4d 	.word	0x08008e4d
 800634c:	08008e51 	.word	0x08008e51
 8006350:	08008eb1 	.word	0x08008eb1
 8006354:	2000005c 	.word	0x2000005c
 8006358:	08008ec5 	.word	0x08008ec5
 800635c:	20000048 	.word	0x20000048
 8006360:	08008e72 	.word	0x08008e72
 8006364:	08008e83 	.word	0x08008e83
 8006368:	08008e8c 	.word	0x08008e8c

0800636c <Init_LoggerSystem>:
{
 800636c:	b538      	push	{r3, r4, r5, lr}
	HAL_TIM_Base_Start(&htim2);
 800636e:	4829      	ldr	r0, [pc, #164]	; (8006414 <Init_LoggerSystem+0xa8>)
	LPS22HB_GetHandle(&lps22hb, &hi2c1);
 8006370:	4c29      	ldr	r4, [pc, #164]	; (8006418 <Init_LoggerSystem+0xac>)
 8006372:	4d2a      	ldr	r5, [pc, #168]	; (800641c <Init_LoggerSystem+0xb0>)
	HAL_TIM_Base_Start(&htim2);
 8006374:	f7fc f915 	bl	80025a2 <HAL_TIM_Base_Start>
	Config_OnePulseDelayTime(TRIG_TIME);
 8006378:	eeb1 0a06 	vmov.f32	s0, #22	; 0x40b00000  5.5
 800637c:	f7ff ff36 	bl	80061ec <Config_OnePulseDelayTime>
	Config_Logdir();
 8006380:	f7ff ffb4 	bl	80062ec <Config_Logdir>
	FlightInfo.d_pos = 0;
 8006384:	4b26      	ldr	r3, [pc, #152]	; (8006420 <Init_LoggerSystem+0xb4>)
 8006386:	2200      	movs	r2, #0
	LPS22HB_GetHandle(&lps22hb, &hi2c1);
 8006388:	4629      	mov	r1, r5
 800638a:	4620      	mov	r0, r4
	FlightInfo.d_pos = 0;
 800638c:	705a      	strb	r2, [r3, #1]
	FlightInfo.d_num = 0;
 800638e:	605a      	str	r2, [r3, #4]
	LPS22HB_GetHandle(&lps22hb, &hi2c1);
 8006390:	f7ff fdaf 	bl	8005ef2 <LPS22HB_GetHandle>
	LPS22HB_SetAddress(&lps22hb, LPS22HB_Address_L);
 8006394:	4620      	mov	r0, r4
 8006396:	21b8      	movs	r1, #184	; 0xb8
 8006398:	f7ff fdad 	bl	8005ef6 <LPS22HB_SetAddress>
	lpsres = LPS22HB_Init(&lps22hb, LPS22HB_ODR_75HZ);
 800639c:	2150      	movs	r1, #80	; 0x50
 800639e:	4620      	mov	r0, r4
 80063a0:	f7ff fe39 	bl	8006016 <LPS22HB_Init>
	xprintf("[lps22hb] status %d\n",  (int)lpsres );
 80063a4:	4601      	mov	r1, r0
 80063a6:	481f      	ldr	r0, [pc, #124]	; (8006424 <Init_LoggerSystem+0xb8>)
 80063a8:	f001 fb54 	bl	8007a54 <xprintf>
	lpsres = LPS22HB_SetLPF(&lps22hb, LPS22HB_LPF_BW9);
 80063ac:	2108      	movs	r1, #8
 80063ae:	4620      	mov	r0, r4
 80063b0:	f7ff fe5a 	bl	8006068 <LPS22HB_SetLPF>
	MPU9250_GetHandle(&mpu9250, &hi2c1);
 80063b4:	4c1c      	ldr	r4, [pc, #112]	; (8006428 <Init_LoggerSystem+0xbc>)
	xprintf("[lps22hb] set lpf bw9 (stat:%d)\n",  (int)lpsres );
 80063b6:	4601      	mov	r1, r0
 80063b8:	481c      	ldr	r0, [pc, #112]	; (800642c <Init_LoggerSystem+0xc0>)
 80063ba:	f001 fb4b 	bl	8007a54 <xprintf>
	MPU9250_GetHandle(&mpu9250, &hi2c1);
 80063be:	4629      	mov	r1, r5
 80063c0:	4620      	mov	r0, r4
 80063c2:	f7fd f872 	bl	80034aa <MPU9250_GetHandle>
	MPU9250_SetAddress(&mpu9250, MPU9250_Address_H);
 80063c6:	2169      	movs	r1, #105	; 0x69
 80063c8:	4620      	mov	r0, r4
 80063ca:	f7fd f870 	bl	80034ae <MPU9250_SetAddress>
	mpures = MPU9250_begin(&mpu9250);
 80063ce:	4620      	mov	r0, r4
 80063d0:	f7fd f8b2 	bl	8003538 <MPU9250_begin>
	xprintf("[mpu9250] status 0x%x\n",  mpures );
 80063d4:	4601      	mov	r1, r0
 80063d6:	4816      	ldr	r0, [pc, #88]	; (8006430 <Init_LoggerSystem+0xc4>)
 80063d8:	f001 fb3c 	bl	8007a54 <xprintf>
	MPU9250_setSensors(&mpu9250, INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS); // Enable all sensors
 80063dc:	2179      	movs	r1, #121	; 0x79
 80063de:	4620      	mov	r0, r4
 80063e0:	f7fd f8ca 	bl	8003578 <MPU9250_setSensors>
	MPU9250_setGyroFSR(&mpu9250, 2000); // Set gyro to 2000 dps
 80063e4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80063e8:	4620      	mov	r0, r4
 80063ea:	f7fd f87b 	bl	80034e4 <MPU9250_setGyroFSR>
	MPU9250_setAccelFSR(&mpu9250, 16); // Set accel to +/-16g
 80063ee:	2110      	movs	r1, #16
 80063f0:	4620      	mov	r0, r4
 80063f2:	f7fd f892 	bl	800351a <MPU9250_setAccelFSR>
	MPU9250_setLPF(&mpu9250, 98); // Set LPF corner frequency to 5Hz
 80063f6:	2162      	movs	r1, #98	; 0x62
 80063f8:	4620      	mov	r0, r4
 80063fa:	f7fd f85a 	bl	80034b2 <MPU9250_setLPF>
	MPU9250_setSampleRate(&mpu9250, 100); // Set sample rate to 10Hz
 80063fe:	2164      	movs	r1, #100	; 0x64
 8006400:	4620      	mov	r0, r4
 8006402:	f7fd f859 	bl	80034b8 <MPU9250_setSampleRate>
	MPU9250_setCompassSampleRate(&mpu9250, 100); // Set mag rate to 100Hz
 8006406:	4620      	mov	r0, r4
 8006408:	2164      	movs	r1, #100	; 0x64
}
 800640a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	MPU9250_setCompassSampleRate(&mpu9250, 100); // Set mag rate to 100Hz
 800640e:	f7fd b856 	b.w	80034be <MPU9250_setCompassSampleRate>
 8006412:	bf00      	nop
 8006414:	20002298 	.word	0x20002298
 8006418:	2000221c 	.word	0x2000221c
 800641c:	20000a54 	.word	0x20000a54
 8006420:	20000aa0 	.word	0x20000aa0
 8006424:	08008f2e 	.word	0x08008f2e
 8006428:	200009f4 	.word	0x200009f4
 800642c:	08008f43 	.word	0x08008f43
 8006430:	08008f64 	.word	0x08008f64

08006434 <HAL_GPIO_EXTI_Callback>:
	if( GPIO_Pin == GPIO_PIN_7 ) {
 8006434:	2880      	cmp	r0, #128	; 0x80
{
 8006436:	b510      	push	{r4, lr}
	if( GPIO_Pin == GPIO_PIN_7 ) {
 8006438:	d11a      	bne.n	8006470 <HAL_GPIO_EXTI_Callback+0x3c>
		if( FlightInfo.status <= Rocket_OnGround ) {
 800643a:	4c0e      	ldr	r4, [pc, #56]	; (8006474 <HAL_GPIO_EXTI_Callback+0x40>)
 800643c:	7823      	ldrb	r3, [r4, #0]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d816      	bhi.n	8006470 <HAL_GPIO_EXTI_Callback+0x3c>
			HAL_TIM_Base_Start_IT(&htim16);
 8006442:	480d      	ldr	r0, [pc, #52]	; (8006478 <HAL_GPIO_EXTI_Callback+0x44>)
 8006444:	f7fc f8ba 	bl	80025bc <HAL_TIM_Base_Start_IT>
			FlightInfo.status = Rocket_Launched;
 8006448:	2302      	movs	r3, #2
 800644a:	7023      	strb	r3, [r4, #0]
			FlightInfo.counter = 0;
 800644c:	f241 4308 	movw	r3, #5128	; 0x1408
 8006450:	2200      	movs	r2, #0
 8006452:	50e2      	str	r2, [r4, r3]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8006454:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006458:	2201      	movs	r2, #1
 800645a:	4808      	ldr	r0, [pc, #32]	; (800647c <HAL_GPIO_EXTI_Callback+0x48>)
 800645c:	f7fa fae2 	bl	8000a24 <HAL_GPIO_WritePin>
			xprintf("Trigger pin was separated!\n");
 8006460:	4807      	ldr	r0, [pc, #28]	; (8006480 <HAL_GPIO_EXTI_Callback+0x4c>)
 8006462:	f001 faf7 	bl	8007a54 <xprintf>
			xprintf("Release timer count down start\n");
 8006466:	4807      	ldr	r0, [pc, #28]	; (8006484 <HAL_GPIO_EXTI_Callback+0x50>)
}
 8006468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			xprintf("Release timer count down start\n");
 800646c:	f001 baf2 	b.w	8007a54 <xprintf>
 8006470:	bd10      	pop	{r4, pc}
 8006472:	bf00      	nop
 8006474:	20000aa0 	.word	0x20000aa0
 8006478:	200022d8 	.word	0x200022d8
 800647c:	48000800 	.word	0x48000800
 8006480:	08008ed9 	.word	0x08008ed9
 8006484:	08008ef5 	.word	0x08008ef5

08006488 <Trigger_ReleaseSystem>:
{
 8006488:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800648a:	2201      	movs	r2, #1
 800648c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006490:	4806      	ldr	r0, [pc, #24]	; (80064ac <Trigger_ReleaseSystem+0x24>)
 8006492:	f7fa fac7 	bl	8000a24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8006496:	4806      	ldr	r0, [pc, #24]	; (80064b0 <Trigger_ReleaseSystem+0x28>)
 8006498:	2201      	movs	r2, #1
 800649a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800649e:	f7fa fac1 	bl	8000a24 <HAL_GPIO_WritePin>
	xprintf("Release system triggered\n");
 80064a2:	4804      	ldr	r0, [pc, #16]	; (80064b4 <Trigger_ReleaseSystem+0x2c>)
}
 80064a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	xprintf("Release system triggered\n");
 80064a8:	f001 bad4 	b.w	8007a54 <xprintf>
 80064ac:	48000800 	.word	0x48000800
 80064b0:	48000400 	.word	0x48000400
 80064b4:	08008f7b 	.word	0x08008f7b

080064b8 <HAL_TIM_OC_DelayElapsedCallback>:
{
 80064b8:	b508      	push	{r3, lr}
	if( htim->Instance == TIM16) {
 80064ba:	6801      	ldr	r1, [r0, #0]
	uint32_t time = TIM16->CNT;
 80064bc:	4b06      	ldr	r3, [pc, #24]	; (80064d8 <HAL_TIM_OC_DelayElapsedCallback+0x20>)
	if( htim->Instance == TIM16) {
 80064be:	4299      	cmp	r1, r3
	uint32_t time = TIM16->CNT;
 80064c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	if( htim->Instance == TIM16) {
 80064c2:	d107      	bne.n	80064d4 <HAL_TIM_OC_DelayElapsedCallback+0x1c>
		if( time != 0) {
 80064c4:	b132      	cbz	r2, 80064d4 <HAL_TIM_OC_DelayElapsedCallback+0x1c>
			Trigger_ReleaseSystem();
 80064c6:	f7ff ffdf 	bl	8006488 <Trigger_ReleaseSystem>
			xprintf("Initiate release system\n");
 80064ca:	4804      	ldr	r0, [pc, #16]	; (80064dc <HAL_TIM_OC_DelayElapsedCallback+0x24>)
}
 80064cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			xprintf("Initiate release system\n");
 80064d0:	f001 bac0 	b.w	8007a54 <xprintf>
 80064d4:	bd08      	pop	{r3, pc}
 80064d6:	bf00      	nop
 80064d8:	40014400 	.word	0x40014400
 80064dc:	08008f15 	.word	0x08008f15

080064e0 <open_append>:
 */
FRESULT open_append(
	    FIL* fp,            /* [OUT] File object to create */
	    const char* path    /* [IN]  File name to be opened */
		)
{
 80064e0:	b538      	push	{r3, r4, r5, lr}
    FRESULT fr;

    /* Opens an existing file. If not exist, creates a new file. */
    fr = f_open(fp, path, FA_WRITE | FA_OPEN_ALWAYS);
 80064e2:	2212      	movs	r2, #18
{
 80064e4:	4605      	mov	r5, r0
    fr = f_open(fp, path, FA_WRITE | FA_OPEN_ALWAYS);
 80064e6:	f7fe fe39 	bl	800515c <f_open>
    if (fr == FR_OK) {
 80064ea:	4604      	mov	r4, r0
 80064ec:	b948      	cbnz	r0, 8006502 <open_append+0x22>
        /* Seek to end of the file to append data */
        fr = f_lseek(fp, f_size(fp));
 80064ee:	f8d5 120c 	ldr.w	r1, [r5, #524]	; 0x20c
 80064f2:	4628      	mov	r0, r5
 80064f4:	f7ff f950 	bl	8005798 <f_lseek>
        if (fr != FR_OK)
 80064f8:	4604      	mov	r4, r0
 80064fa:	b110      	cbz	r0, 8006502 <open_append+0x22>
            f_close(fp);
 80064fc:	4628      	mov	r0, r5
 80064fe:	f7ff f93a 	bl	8005776 <f_close>
    }
    return fr;
}
 8006502:	4620      	mov	r0, r4
 8006504:	bd38      	pop	{r3, r4, r5, pc}
	...

08006508 <main>:
{
 8006508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800650c:	ed2d 8b0a 	vpush	{d8-d12}
 8006510:	f2ad 4da4 	subw	sp, sp, #1188	; 0x4a4
  char wbuff[256] = {}; /* File write buffer */
 8006514:	2100      	movs	r1, #0
 8006516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800651a:	a81d      	add	r0, sp, #116	; 0x74
 800651c:	f001 fb15 	bl	8007b4a <memset>
  xdev_out(uart_putc);
 8006520:	4b9b      	ldr	r3, [pc, #620]	; (8006790 <main+0x288>)
 8006522:	4a9c      	ldr	r2, [pc, #624]	; (8006794 <main+0x28c>)
 8006524:	601a      	str	r2, [r3, #0]
  xdev_in(uart_getc);
 8006526:	4b9c      	ldr	r3, [pc, #624]	; (8006798 <main+0x290>)
 8006528:	4a9c      	ldr	r2, [pc, #624]	; (800679c <main+0x294>)
 800652a:	601a      	str	r2, [r3, #0]
  HAL_Init();
 800652c:	f7fa f874 	bl	8000618 <HAL_Init>
  SystemClock_Config();
 8006530:	f7ff fe10 	bl	8006154 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006534:	4b9a      	ldr	r3, [pc, #616]	; (80067a0 <main+0x298>)
 8006536:	695a      	ldr	r2, [r3, #20]
 8006538:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800653c:	615a      	str	r2, [r3, #20]
 800653e:	695a      	ldr	r2, [r3, #20]
 8006540:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8006544:	921a      	str	r2, [sp, #104]	; 0x68
 8006546:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006548:	695a      	ldr	r2, [r3, #20]
 800654a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800654e:	615a      	str	r2, [r3, #20]
 8006550:	695a      	ldr	r2, [r3, #20]
 8006552:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8006556:	921b      	str	r2, [sp, #108]	; 0x6c
 8006558:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800655a:	695a      	ldr	r2, [r3, #20]
 800655c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006560:	615a      	str	r2, [r3, #20]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006568:	931c      	str	r3, [sp, #112]	; 0x70
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800656a:	2200      	movs	r2, #0
 800656c:	2110      	movs	r1, #16
 800656e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006572:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8006574:	f7fa fa56 	bl	8000a24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin 
 8006578:	2200      	movs	r2, #0
 800657a:	f24f 0180 	movw	r1, #61568	; 0xf080
 800657e:	4889      	ldr	r0, [pc, #548]	; (80067a4 <main+0x29c>)
 8006580:	f7fa fa50 	bl	8000a24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, BUZZ_Pin|TRIG_Pin, GPIO_PIN_RESET);
 8006584:	2200      	movs	r2, #0
 8006586:	f44f 7140 	mov.w	r1, #768	; 0x300
 800658a:	4887      	ldr	r0, [pc, #540]	; (80067a8 <main+0x2a0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800658c:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOC, BUZZ_Pin|TRIG_Pin, GPIO_PIN_RESET);
 800658e:	f7fa fa49 	bl	8000a24 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006592:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006594:	2310      	movs	r3, #16
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006596:	a99d      	add	r1, sp, #628	; 0x274
 8006598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800659c:	939d      	str	r3, [sp, #628]	; 0x274
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800659e:	959e      	str	r5, [sp, #632]	; 0x278
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065a0:	949f      	str	r4, [sp, #636]	; 0x27c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065a2:	94a0      	str	r4, [sp, #640]	; 0x280
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065a4:	f7fa f8e0 	bl	8000768 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin 
 80065a8:	f24f 0380 	movw	r3, #61568	; 0xf080
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065ac:	a99d      	add	r1, sp, #628	; 0x274
 80065ae:	487d      	ldr	r0, [pc, #500]	; (80067a4 <main+0x29c>)
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin 
 80065b0:	939d      	str	r3, [sp, #628]	; 0x274
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065b2:	959e      	str	r5, [sp, #632]	; 0x278
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065b4:	949f      	str	r4, [sp, #636]	; 0x27c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065b6:	94a0      	str	r4, [sp, #640]	; 0x280
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065b8:	f7fa f8d6 	bl	8000768 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FPIN_Pin;
 80065bc:	2380      	movs	r3, #128	; 0x80
 80065be:	939d      	str	r3, [sp, #628]	; 0x274
  HAL_GPIO_Init(FPIN_GPIO_Port, &GPIO_InitStruct);
 80065c0:	a99d      	add	r1, sp, #628	; 0x274
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80065c2:	4b7a      	ldr	r3, [pc, #488]	; (80067ac <main+0x2a4>)
  HAL_GPIO_Init(FPIN_GPIO_Port, &GPIO_InitStruct);
 80065c4:	4878      	ldr	r0, [pc, #480]	; (80067a8 <main+0x2a0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80065c6:	939e      	str	r3, [sp, #632]	; 0x278
  GPIO_InitStruct.Pin = BUZZ_Pin|TRIG_Pin;
 80065c8:	f44f 7840 	mov.w	r8, #768	; 0x300
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065cc:	949f      	str	r4, [sp, #636]	; 0x27c
  HAL_GPIO_Init(FPIN_GPIO_Port, &GPIO_InitStruct);
 80065ce:	f7fa f8cb 	bl	8000768 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065d2:	a99d      	add	r1, sp, #628	; 0x274
 80065d4:	4874      	ldr	r0, [pc, #464]	; (80067a8 <main+0x2a0>)
  GPIO_InitStruct.Pin = BUZZ_Pin|TRIG_Pin;
 80065d6:	f8cd 8274 	str.w	r8, [sp, #628]	; 0x274
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065da:	959e      	str	r5, [sp, #632]	; 0x278
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065dc:	949f      	str	r4, [sp, #636]	; 0x27c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065de:	94a0      	str	r4, [sp, #640]	; 0x280
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065e0:	f7fa f8c2 	bl	8000768 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065e4:	2302      	movs	r3, #2
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80065e6:	2718      	movs	r7, #24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065e8:	939e      	str	r3, [sp, #632]	; 0x278
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80065ea:	2607      	movs	r6, #7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80065ec:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065ee:	a99d      	add	r1, sp, #628	; 0x274
 80065f0:	486c      	ldr	r0, [pc, #432]	; (80067a4 <main+0x29c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80065f2:	93a0      	str	r3, [sp, #640]	; 0x280
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80065f4:	979d      	str	r7, [sp, #628]	; 0x274
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065f6:	949f      	str	r4, [sp, #636]	; 0x27c
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80065f8:	96a1      	str	r6, [sp, #644]	; 0x284
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065fa:	f7fa f8b5 	bl	8000768 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80065fe:	4622      	mov	r2, r4
 8006600:	4621      	mov	r1, r4
 8006602:	2017      	movs	r0, #23
 8006604:	f7fa f84a 	bl	800069c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006608:	2017      	movs	r0, #23
 800660a:	f7fa f87b 	bl	8000704 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 800660e:	4868      	ldr	r0, [pc, #416]	; (80067b0 <main+0x2a8>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006610:	4b68      	ldr	r3, [pc, #416]	; (80067b4 <main+0x2ac>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006612:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006614:	f44f 7e82 	mov.w	lr, #260	; 0x104
 8006618:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800661c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006620:	6183      	str	r3, [r0, #24]
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006622:	2308      	movs	r3, #8
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8006624:	f8c0 800c 	str.w	r8, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006628:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800662a:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800662c:	61c7      	str	r7, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800662e:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006630:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006632:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006634:	62c6      	str	r6, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006636:	6304      	str	r4, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006638:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800663a:	f7fb fe18 	bl	800226e <HAL_SPI_Init>
 800663e:	b100      	cbz	r0, 8006642 <main+0x13a>
 8006640:	e7fe      	b.n	8006640 <main+0x138>
  huart1.Instance = USART1;
 8006642:	4b5d      	ldr	r3, [pc, #372]	; (80067b8 <main+0x2b0>)
  huart1.Init.BaudRate = 115200;
 8006644:	4a5d      	ldr	r2, [pc, #372]	; (80067bc <main+0x2b4>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006646:	6098      	str	r0, [r3, #8]
  huart1.Init.BaudRate = 115200;
 8006648:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
 800664c:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800664e:	6118      	str	r0, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006650:	240c      	movs	r4, #12
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006652:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006654:	61d8      	str	r0, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006656:	6218      	str	r0, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006658:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800665a:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 115200;
 800665c:	e883 0044 	stmia.w	r3, {r2, r6}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006660:	615c      	str	r4, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006662:	f7fc fef0 	bl	8003446 <HAL_UART_Init>
 8006666:	b100      	cbz	r0, 800666a <main+0x162>
 8006668:	e7fe      	b.n	8006668 <main+0x160>
  huart4.Instance = UART4;
 800666a:	4b55      	ldr	r3, [pc, #340]	; (80067c0 <main+0x2b8>)
 800666c:	4a55      	ldr	r2, [pc, #340]	; (80067c4 <main+0x2bc>)
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800666e:	6098      	str	r0, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8006670:	60d8      	str	r0, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8006672:	6118      	str	r0, [r3, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006674:	6198      	str	r0, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8006676:	61d8      	str	r0, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006678:	6218      	str	r0, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800667a:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800667c:	4618      	mov	r0, r3
  huart4.Init.BaudRate = 115200;
 800667e:	e883 0044 	stmia.w	r3, {r2, r6}
  huart4.Init.Mode = UART_MODE_TX_RX;
 8006682:	615c      	str	r4, [r3, #20]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8006684:	f7fc fedf 	bl	8003446 <HAL_UART_Init>
 8006688:	b100      	cbz	r0, 800668c <main+0x184>
 800668a:	e7fe      	b.n	800668a <main+0x182>
  hi2c1.Instance = I2C1;
 800668c:	4c4e      	ldr	r4, [pc, #312]	; (80067c8 <main+0x2c0>)
  hi2c1.Init.Timing = 0x0000020B;
 800668e:	4b4f      	ldr	r3, [pc, #316]	; (80067cc <main+0x2c4>)
  hi2c1.Init.OwnAddress1 = 0;
 8006690:	60a0      	str	r0, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006692:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006694:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006696:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006698:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800669a:	6220      	str	r0, [r4, #32]
  hi2c1.Init.Timing = 0x0000020B;
 800669c:	f240 260b 	movw	r6, #523	; 0x20b
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80066a0:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x0000020B;
 80066a2:	e884 0048 	stmia.w	r4, {r3, r6}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80066a6:	60e5      	str	r5, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80066a8:	f7fa fb48 	bl	8000d3c <HAL_I2C_Init>
 80066ac:	4601      	mov	r1, r0
 80066ae:	b100      	cbz	r0, 80066b2 <main+0x1aa>
 80066b0:	e7fe      	b.n	80066b0 <main+0x1a8>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80066b2:	4620      	mov	r0, r4
 80066b4:	f7fa fec5 	bl	8001442 <HAL_I2CEx_ConfigAnalogFilter>
 80066b8:	4601      	mov	r1, r0
 80066ba:	b100      	cbz	r0, 80066be <main+0x1b6>
 80066bc:	e7fe      	b.n	80066bc <main+0x1b4>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80066be:	4620      	mov	r0, r4
 80066c0:	f7fa fee5 	bl	800148e <HAL_I2CEx_ConfigDigitalFilter>
 80066c4:	4605      	mov	r5, r0
 80066c6:	b100      	cbz	r0, 80066ca <main+0x1c2>
 80066c8:	e7fe      	b.n	80066c8 <main+0x1c0>
  htim2.Instance = TIM2;
 80066ca:	4c41      	ldr	r4, [pc, #260]	; (80067d0 <main+0x2c8>)
  MX_FATFS_Init();
 80066cc:	f7ff fd08 	bl	80060e0 <MX_FATFS_Init>
  htim2.Init.Prescaler = 71;
 80066d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80066d4:	2347      	movs	r3, #71	; 0x47
 80066d6:	e884 0009 	stmia.w	r4, {r0, r3}
  htim2.Init.Period = 4294967295;
 80066da:	f04f 33ff 	mov.w	r3, #4294967295
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80066de:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066e0:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = 4294967295;
 80066e2:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066e4:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066e6:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80066e8:	f7fc f8cc 	bl	8002884 <HAL_TIM_Base_Init>
 80066ec:	b100      	cbz	r0, 80066f0 <main+0x1e8>
 80066ee:	e7fe      	b.n	80066ee <main+0x1e6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80066f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80066f4:	a99d      	add	r1, sp, #628	; 0x274
 80066f6:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80066f8:	939d      	str	r3, [sp, #628]	; 0x274
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80066fa:	f7fc fa4b 	bl	8002b94 <HAL_TIM_ConfigClockSource>
 80066fe:	b100      	cbz	r0, 8006702 <main+0x1fa>
 8006700:	e7fe      	b.n	8006700 <main+0x1f8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006702:	905d      	str	r0, [sp, #372]	; 0x174
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006704:	905f      	str	r0, [sp, #380]	; 0x17c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006706:	a95d      	add	r1, sp, #372	; 0x174
 8006708:	4620      	mov	r0, r4
 800670a:	f7fc fba1 	bl	8002e50 <HAL_TIMEx_MasterConfigSynchronization>
 800670e:	b100      	cbz	r0, 8006712 <main+0x20a>
 8006710:	e7fe      	b.n	8006710 <main+0x208>
  htim3.Instance = TIM3;
 8006712:	4b30      	ldr	r3, [pc, #192]	; (80067d4 <main+0x2cc>)
  htim3.Init.Prescaler = 72;
 8006714:	4930      	ldr	r1, [pc, #192]	; (80067d8 <main+0x2d0>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006716:	6098      	str	r0, [r3, #8]
  htim3.Init.Prescaler = 72;
 8006718:	2248      	movs	r2, #72	; 0x48
 800671a:	e883 0006 	stmia.w	r3, {r1, r2}
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800671e:	6118      	str	r0, [r3, #16]
  htim3.Init.Period = 19999;
 8006720:	f644 621f 	movw	r2, #19999	; 0x4e1f
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006724:	6198      	str	r0, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006726:	4618      	mov	r0, r3
  htim3.Init.Period = 19999;
 8006728:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800672a:	f7fc f8ab 	bl	8002884 <HAL_TIM_Base_Init>
 800672e:	b100      	cbz	r0, 8006732 <main+0x22a>
 8006730:	e7fe      	b.n	8006730 <main+0x228>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006736:	a99d      	add	r1, sp, #628	; 0x274
 8006738:	4826      	ldr	r0, [pc, #152]	; (80067d4 <main+0x2cc>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800673a:	939d      	str	r3, [sp, #628]	; 0x274
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800673c:	f7fc fa2a 	bl	8002b94 <HAL_TIM_ConfigClockSource>
 8006740:	b100      	cbz	r0, 8006744 <main+0x23c>
 8006742:	e7fe      	b.n	8006742 <main+0x23a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006744:	905d      	str	r0, [sp, #372]	; 0x174
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006746:	905f      	str	r0, [sp, #380]	; 0x17c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006748:	a95d      	add	r1, sp, #372	; 0x174
 800674a:	4822      	ldr	r0, [pc, #136]	; (80067d4 <main+0x2cc>)
 800674c:	f7fc fb80 	bl	8002e50 <HAL_TIMEx_MasterConfigSynchronization>
 8006750:	b100      	cbz	r0, 8006754 <main+0x24c>
 8006752:	e7fe      	b.n	8006752 <main+0x24a>
  htim16.Instance = TIM16;
 8006754:	4c21      	ldr	r4, [pc, #132]	; (80067dc <main+0x2d4>)
  htim16.Init.Prescaler = 35999;
 8006756:	4a22      	ldr	r2, [pc, #136]	; (80067e0 <main+0x2d8>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006758:	60a0      	str	r0, [r4, #8]
  htim16.Init.Prescaler = 35999;
 800675a:	f648 439f 	movw	r3, #35999	; 0x8c9f
  htim16.Init.Period = 1999;
 800675e:	f240 75cf 	movw	r5, #1999	; 0x7cf
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006762:	6120      	str	r0, [r4, #16]
  htim16.Init.RepetitionCounter = 0;
 8006764:	6160      	str	r0, [r4, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006766:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8006768:	4620      	mov	r0, r4
  htim16.Init.Prescaler = 35999;
 800676a:	e884 000c 	stmia.w	r4, {r2, r3}
  htim16.Init.Period = 1999;
 800676e:	60e5      	str	r5, [r4, #12]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8006770:	f7fc f888 	bl	8002884 <HAL_TIM_Base_Init>
 8006774:	b100      	cbz	r0, 8006778 <main+0x270>
 8006776:	e7fe      	b.n	8006776 <main+0x26e>
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8006778:	4620      	mov	r0, r4
 800677a:	f7fc f89d 	bl	80028b8 <HAL_TIM_OC_Init>
 800677e:	b100      	cbz	r0, 8006782 <main+0x27a>
 8006780:	e7fe      	b.n	8006780 <main+0x278>
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8006782:	2108      	movs	r1, #8
 8006784:	4620      	mov	r0, r4
 8006786:	f7fc f8b1 	bl	80028ec <HAL_TIM_OnePulse_Init>
 800678a:	4602      	mov	r2, r0
 800678c:	b350      	cbz	r0, 80067e4 <main+0x2dc>
 800678e:	e7fe      	b.n	800678e <main+0x286>
 8006790:	2000231c 	.word	0x2000231c
 8006794:	08006135 	.word	0x08006135
 8006798:	20002318 	.word	0x20002318
 800679c:	08006115 	.word	0x08006115
 80067a0:	40021000 	.word	0x40021000
 80067a4:	48000400 	.word	0x48000400
 80067a8:	48000800 	.word	0x48000800
 80067ac:	10110000 	.word	0x10110000
 80067b0:	20002234 	.word	0x20002234
 80067b4:	40013000 	.word	0x40013000
 80067b8:	20002118 	.word	0x20002118
 80067bc:	40013800 	.word	0x40013800
 80067c0:	200021ac 	.word	0x200021ac
 80067c4:	40004c00 	.word	0x40004c00
 80067c8:	20000a54 	.word	0x20000a54
 80067cc:	40005400 	.word	0x40005400
 80067d0:	20002298 	.word	0x20002298
 80067d4:	20001eac 	.word	0x20001eac
 80067d8:	40000400 	.word	0x40000400
 80067dc:	200022d8 	.word	0x200022d8
 80067e0:	40014400 	.word	0x40014400
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80067e4:	2310      	movs	r3, #16
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80067e6:	905f      	str	r0, [sp, #380]	; 0x17c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80067e8:	9060      	str	r0, [sp, #384]	; 0x180
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80067ea:	9061      	str	r0, [sp, #388]	; 0x184
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80067ec:	9062      	str	r0, [sp, #392]	; 0x188
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80067ee:	9063      	str	r0, [sp, #396]	; 0x18c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80067f0:	a95d      	add	r1, sp, #372	; 0x174
 80067f2:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80067f4:	935d      	str	r3, [sp, #372]	; 0x174
  sConfigOC.Pulse = 1999;
 80067f6:	955e      	str	r5, [sp, #376]	; 0x178
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80067f8:	f7fc faf2 	bl	8002de0 <HAL_TIM_OC_ConfigChannel>
 80067fc:	b100      	cbz	r0, 8006800 <main+0x2f8>
 80067fe:	e7fe      	b.n	80067fe <main+0x2f6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006800:	909d      	str	r0, [sp, #628]	; 0x274
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006802:	909e      	str	r0, [sp, #632]	; 0x278
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006804:	909f      	str	r0, [sp, #636]	; 0x27c
  sBreakDeadTimeConfig.DeadTime = 0;
 8006806:	90a0      	str	r0, [sp, #640]	; 0x280
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006808:	90a1      	str	r0, [sp, #644]	; 0x284
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800680a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.BreakFilter = 0;
 800680e:	90a3      	str	r0, [sp, #652]	; 0x28c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006810:	90a7      	str	r0, [sp, #668]	; 0x29c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8006812:	a99d      	add	r1, sp, #628	; 0x274
 8006814:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006816:	93a2      	str	r3, [sp, #648]	; 0x288
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8006818:	f7fc fb44 	bl	8002ea4 <HAL_TIMEx_ConfigBreakDeadTime>
 800681c:	4605      	mov	r5, r0
 800681e:	b100      	cbz	r0, 8006822 <main+0x31a>
 8006820:	e7fe      	b.n	8006820 <main+0x318>
  hrtc.Instance = RTC;
 8006822:	4cb0      	ldr	r4, [pc, #704]	; (8006ae4 <main+0x5dc>)
 8006824:	4bb0      	ldr	r3, [pc, #704]	; (8006ae8 <main+0x5e0>)
 8006826:	6023      	str	r3, [r4, #0]
if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 8006828:	4601      	mov	r1, r0
 800682a:	4620      	mov	r0, r4
 800682c:	f7fb fc98 	bl	8002160 <HAL_RTCEx_BKUPRead>
 8006830:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8006834:	4298      	cmp	r0, r3
 8006836:	d031      	beq.n	800689c <main+0x394>
  hrtc.Init.AsynchPrediv = 127;
 8006838:	237f      	movs	r3, #127	; 0x7f
 800683a:	60a3      	str	r3, [r4, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800683c:	4620      	mov	r0, r4
  hrtc.Init.SynchPrediv = 255;
 800683e:	23ff      	movs	r3, #255	; 0xff
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006840:	6065      	str	r5, [r4, #4]
  hrtc.Init.SynchPrediv = 255;
 8006842:	60e3      	str	r3, [r4, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006844:	6125      	str	r5, [r4, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006846:	6165      	str	r5, [r4, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006848:	61a5      	str	r5, [r4, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800684a:	f7fb fb5b 	bl	8001f04 <HAL_RTC_Init>
 800684e:	b100      	cbz	r0, 8006852 <main+0x34a>
 8006850:	e7fe      	b.n	8006850 <main+0x348>
  sTime.Hours = 0x0;
 8006852:	f88d 0274 	strb.w	r0, [sp, #628]	; 0x274
  sTime.Minutes = 0x0;
 8006856:	f88d 0275 	strb.w	r0, [sp, #629]	; 0x275
  sTime.Seconds = 0x0;
 800685a:	f88d 0276 	strb.w	r0, [sp, #630]	; 0x276
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800685e:	90a0      	str	r0, [sp, #640]	; 0x280
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006860:	90a1      	str	r0, [sp, #644]	; 0x284
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8006862:	2201      	movs	r2, #1
 8006864:	a99d      	add	r1, sp, #628	; 0x274
 8006866:	4620      	mov	r0, r4
 8006868:	f7fb fba5 	bl	8001fb6 <HAL_RTC_SetTime>
 800686c:	b100      	cbz	r0, 8006870 <main+0x368>
 800686e:	e7fe      	b.n	800686e <main+0x366>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8006870:	2201      	movs	r2, #1
  sDate.Year = 0x0;
 8006872:	2300      	movs	r3, #0
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8006874:	a95d      	add	r1, sp, #372	; 0x174
 8006876:	489b      	ldr	r0, [pc, #620]	; (8006ae4 <main+0x5dc>)
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8006878:	f88d 2174 	strb.w	r2, [sp, #372]	; 0x174
  sDate.Month = RTC_MONTH_JANUARY;
 800687c:	f88d 2175 	strb.w	r2, [sp, #373]	; 0x175
  sDate.Date = 0x1;
 8006880:	f88d 2176 	strb.w	r2, [sp, #374]	; 0x176
  sDate.Year = 0x0;
 8006884:	f88d 3177 	strb.w	r3, [sp, #375]	; 0x177
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8006888:	f7fb fc05 	bl	8002096 <HAL_RTC_SetDate>
 800688c:	4601      	mov	r1, r0
 800688e:	b100      	cbz	r0, 8006892 <main+0x38a>
 8006890:	e7fe      	b.n	8006890 <main+0x388>
    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 8006892:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8006896:	4893      	ldr	r0, [pc, #588]	; (8006ae4 <main+0x5dc>)
 8006898:	f7fb fc5d 	bl	8002156 <HAL_RTCEx_BKUPWrite>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800689c:	2200      	movs	r2, #0
 800689e:	4611      	mov	r1, r2
 80068a0:	2019      	movs	r0, #25
 80068a2:	f7f9 fefb 	bl	800069c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80068a6:	2019      	movs	r0, #25
 80068a8:	f7f9 ff2c 	bl	8000704 <HAL_NVIC_EnableIRQ>
  Init_LoggerSystem();
 80068ac:	f7ff fd5e 	bl	800636c <Init_LoggerSystem>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80068b0:	4e8e      	ldr	r6, [pc, #568]	; (8006aec <main+0x5e4>)
	  fres = open_append(&file, dir_datlog);
 80068b2:	4f8f      	ldr	r7, [pc, #572]	; (8006af0 <main+0x5e8>)
	  MPU9250_update(&mpu9250, UPDATE_ACCEL | UPDATE_GYRO | UPDATE_COMPASS);
 80068b4:	4d8f      	ldr	r5, [pc, #572]	; (8006af4 <main+0x5ec>)
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80068b6:	2201      	movs	r2, #1
 80068b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80068bc:	4630      	mov	r0, r6
	  tmeasure_a = TIM2->CNT;
 80068be:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80068c2:	f7fa f8af 	bl	8000a24 <HAL_GPIO_WritePin>
	  fres = open_append(&file, dir_datlog);
 80068c6:	4639      	mov	r1, r7
 80068c8:	a89d      	add	r0, sp, #628	; 0x274
	  tmeasure_a = TIM2->CNT;
 80068ca:	f8da 9024 	ldr.w	r9, [sl, #36]	; 0x24
	  fres = open_append(&file, dir_datlog);
 80068ce:	f7ff fe07 	bl	80064e0 <open_append>
	  if ( fres != FR_OK ) {
 80068d2:	4683      	mov	fp, r0
 80068d4:	b130      	cbz	r0, 80068e4 <main+0x3dc>
		  xprintf("file open failure!\n");
 80068d6:	4888      	ldr	r0, [pc, #544]	; (8006af8 <main+0x5f0>)
 80068d8:	f001 f8bc 	bl	8007a54 <xprintf>
		  HAL_Delay(100);
 80068dc:	2064      	movs	r0, #100	; 0x64
 80068de:	f7f9 febb 	bl	8000658 <HAL_Delay>
		  continue;
 80068e2:	e7e8      	b.n	80068b6 <main+0x3ae>
	  FlightInfo.time[FlightInfo.d_pos] = TIM2->CNT;
 80068e4:	4c85      	ldr	r4, [pc, #532]	; (8006afc <main+0x5f4>)
	  MPU9250_update(&mpu9250, UPDATE_ACCEL | UPDATE_GYRO | UPDATE_COMPASS);
 80068e6:	4883      	ldr	r0, [pc, #524]	; (8006af4 <main+0x5ec>)
 80068e8:	210e      	movs	r1, #14
 80068ea:	f7fc fe88 	bl	80035fe <MPU9250_update>
	  LPS22HB_GetData(&lps22hb);
 80068ee:	4884      	ldr	r0, [pc, #528]	; (8006b00 <main+0x5f8>)
 80068f0:	f7ff fb04 	bl	8005efc <LPS22HB_GetData>
	  FlightInfo.time[FlightInfo.d_pos] = TIM2->CNT;
 80068f4:	f894 8001 	ldrb.w	r8, [r4, #1]
 80068f8:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
	  FlightInfo.press[FlightInfo.d_pos] = LPS22HB_Pressure(&lps22hb);
 80068fc:	4880      	ldr	r0, [pc, #512]	; (8006b00 <main+0x5f8>)
	  FlightInfo.time[FlightInfo.d_pos] = TIM2->CNT;
 80068fe:	f108 0302 	add.w	r3, r8, #2
	  FlightInfo.press[FlightInfo.d_pos] = LPS22HB_Pressure(&lps22hb);
 8006902:	f208 2802 	addw	r8, r8, #514	; 0x202
	  FlightInfo.time[FlightInfo.d_pos] = TIM2->CNT;
 8006906:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	  FlightInfo.press[FlightInfo.d_pos] = LPS22HB_Pressure(&lps22hb);
 800690a:	f7ff fb41 	bl	8005f90 <LPS22HB_Pressure>
 800690e:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8006912:	ed88 0a00 	vstr	s0, [r8]
	  FlightInfo.pressraw[FlightInfo.d_pos] = LPS22HB_PressureRaw(&lps22hb);
 8006916:	487a      	ldr	r0, [pc, #488]	; (8006b00 <main+0x5f8>)
 8006918:	f894 8001 	ldrb.w	r8, [r4, #1]
 800691c:	f7ff fb3b 	bl	8005f96 <LPS22HB_PressureRaw>
 8006920:	f508 7881 	add.w	r8, r8, #258	; 0x102
	  sprintf(wbuff, "%d,%d,%lu,%g,%g,%g,%g,%g,%g,%g,%g,%g,%g,%g",
 8006924:	7822      	ldrb	r2, [r4, #0]
	  FlightInfo.pressraw[FlightInfo.d_pos] = LPS22HB_PressureRaw(&lps22hb);
 8006926:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	  sprintf(wbuff, "%d,%d,%lu,%g,%g,%g,%g,%g,%g,%g,%g,%g,%g,%g",
 800692a:	f894 8001 	ldrb.w	r8, [r4, #1]
			  LPS22HB_Pressure(&lps22hb),
 800692e:	4874      	ldr	r0, [pc, #464]	; (8006b00 <main+0x5f8>)
	  sprintf(wbuff, "%d,%d,%lu,%g,%g,%g,%g,%g,%g,%g,%g,%g,%g,%g",
 8006930:	9219      	str	r2, [sp, #100]	; 0x64
 8006932:	f108 0302 	add.w	r3, r8, #2
 8006936:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800693a:	9318      	str	r3, [sp, #96]	; 0x60
			  LPS22HB_Pressure(&lps22hb),
 800693c:	f7ff fb28 	bl	8005f90 <LPS22HB_Pressure>
			  LPS22HB_Temperature(&lps22hb),
 8006940:	486f      	ldr	r0, [pc, #444]	; (8006b00 <main+0x5f8>)
			  LPS22HB_Pressure(&lps22hb),
 8006942:	eeb0 8a40 	vmov.f32	s16, s0
			  LPS22HB_Temperature(&lps22hb),
 8006946:	f7ff fb28 	bl	8005f9a <LPS22HB_Temperature>
			  MPU9250_calcAccel(&mpu9250,mpu9250.ax),
 800694a:	68a9      	ldr	r1, [r5, #8]
 800694c:	4869      	ldr	r0, [pc, #420]	; (8006af4 <main+0x5ec>)
			  LPS22HB_Temperature(&lps22hb),
 800694e:	eef0 8a40 	vmov.f32	s17, s0
			  MPU9250_calcAccel(&mpu9250,mpu9250.ax),
 8006952:	f7fc fe77 	bl	8003644 <MPU9250_calcAccel>
			  MPU9250_calcAccel(&mpu9250,mpu9250.ay),
 8006956:	68e9      	ldr	r1, [r5, #12]
 8006958:	4866      	ldr	r0, [pc, #408]	; (8006af4 <main+0x5ec>)
			  MPU9250_calcAccel(&mpu9250,mpu9250.ax),
 800695a:	eeb0 9a40 	vmov.f32	s18, s0
			  MPU9250_calcAccel(&mpu9250,mpu9250.ay),
 800695e:	f7fc fe71 	bl	8003644 <MPU9250_calcAccel>
			  MPU9250_calcAccel(&mpu9250,mpu9250.az),
 8006962:	6929      	ldr	r1, [r5, #16]
 8006964:	4863      	ldr	r0, [pc, #396]	; (8006af4 <main+0x5ec>)
			  MPU9250_calcAccel(&mpu9250,mpu9250.ay),
 8006966:	eef0 9a40 	vmov.f32	s19, s0
			  MPU9250_calcAccel(&mpu9250,mpu9250.az),
 800696a:	f7fc fe6b 	bl	8003644 <MPU9250_calcAccel>
			  MPU9250_calcGyro(&mpu9250,mpu9250.gx),
 800696e:	6969      	ldr	r1, [r5, #20]
 8006970:	4860      	ldr	r0, [pc, #384]	; (8006af4 <main+0x5ec>)
			  MPU9250_calcAccel(&mpu9250,mpu9250.az),
 8006972:	eeb0 aa40 	vmov.f32	s20, s0
			  MPU9250_calcGyro(&mpu9250,mpu9250.gx),
 8006976:	f7fc fe72 	bl	800365e <MPU9250_calcGyro>
			  MPU9250_calcGyro(&mpu9250,mpu9250.gy),
 800697a:	69a9      	ldr	r1, [r5, #24]
 800697c:	485d      	ldr	r0, [pc, #372]	; (8006af4 <main+0x5ec>)
			  MPU9250_calcGyro(&mpu9250,mpu9250.gx),
 800697e:	eef0 aa40 	vmov.f32	s21, s0
			  MPU9250_calcGyro(&mpu9250,mpu9250.gy),
 8006982:	f7fc fe6c 	bl	800365e <MPU9250_calcGyro>
			  MPU9250_calcGyro(&mpu9250,mpu9250.gz),
 8006986:	69e9      	ldr	r1, [r5, #28]
 8006988:	485a      	ldr	r0, [pc, #360]	; (8006af4 <main+0x5ec>)
			  MPU9250_calcGyro(&mpu9250,mpu9250.gy),
 800698a:	eeb0 ba40 	vmov.f32	s22, s0
			  MPU9250_calcGyro(&mpu9250,mpu9250.gz),
 800698e:	f7fc fe66 	bl	800365e <MPU9250_calcGyro>
			  MPU9250_calcMag(&mpu9250,mpu9250.mx),
 8006992:	6a29      	ldr	r1, [r5, #32]
 8006994:	4857      	ldr	r0, [pc, #348]	; (8006af4 <main+0x5ec>)
			  MPU9250_calcGyro(&mpu9250,mpu9250.gz),
 8006996:	eef0 ba40 	vmov.f32	s23, s0
			  MPU9250_calcMag(&mpu9250,mpu9250.mx),
 800699a:	f7fc fe69 	bl	8003670 <MPU9250_calcMag>
			  MPU9250_calcMag(&mpu9250,mpu9250.my),
 800699e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80069a0:	4854      	ldr	r0, [pc, #336]	; (8006af4 <main+0x5ec>)
			  MPU9250_calcMag(&mpu9250,mpu9250.mx),
 80069a2:	eeb0 ca40 	vmov.f32	s24, s0
			  MPU9250_calcMag(&mpu9250,mpu9250.my),
 80069a6:	f7fc fe63 	bl	8003670 <MPU9250_calcMag>
			  MPU9250_calcMag(&mpu9250,mpu9250.mz)
 80069aa:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80069ac:	4851      	ldr	r0, [pc, #324]	; (8006af4 <main+0x5ec>)
			  MPU9250_calcMag(&mpu9250,mpu9250.my),
 80069ae:	eef0 ca40 	vmov.f32	s25, s0
			  MPU9250_calcMag(&mpu9250,mpu9250.mz)
 80069b2:	f7fc fe5d 	bl	8003670 <MPU9250_calcMag>
	  sprintf(wbuff, "%d,%d,%lu,%g,%g,%g,%g,%g,%g,%g,%g,%g,%g,%g",
 80069b6:	ee10 0a10 	vmov	r0, s0
 80069ba:	f7f9 fdc5 	bl	8000548 <__aeabi_f2d>
 80069be:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80069c2:	ee1c 0a90 	vmov	r0, s25
 80069c6:	f7f9 fdbf 	bl	8000548 <__aeabi_f2d>
 80069ca:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 80069ce:	ee1c 0a10 	vmov	r0, s24
 80069d2:	f7f9 fdb9 	bl	8000548 <__aeabi_f2d>
 80069d6:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80069da:	ee1b 0a90 	vmov	r0, s23
 80069de:	f7f9 fdb3 	bl	8000548 <__aeabi_f2d>
 80069e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069e6:	ee1b 0a10 	vmov	r0, s22
 80069ea:	f7f9 fdad 	bl	8000548 <__aeabi_f2d>
 80069ee:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80069f2:	ee1a 0a90 	vmov	r0, s21
 80069f6:	f7f9 fda7 	bl	8000548 <__aeabi_f2d>
 80069fa:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80069fe:	ee1a 0a10 	vmov	r0, s20
 8006a02:	f7f9 fda1 	bl	8000548 <__aeabi_f2d>
 8006a06:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006a0a:	ee19 0a90 	vmov	r0, s19
 8006a0e:	f7f9 fd9b 	bl	8000548 <__aeabi_f2d>
 8006a12:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006a16:	ee19 0a10 	vmov	r0, s18
 8006a1a:	f7f9 fd95 	bl	8000548 <__aeabi_f2d>
 8006a1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006a22:	ee18 0a90 	vmov	r0, s17
 8006a26:	f7f9 fd8f 	bl	8000548 <__aeabi_f2d>
 8006a2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a2e:	ee18 0a10 	vmov	r0, s16
 8006a32:	f7f9 fd89 	bl	8000548 <__aeabi_f2d>
 8006a36:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006a38:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a40:	4643      	mov	r3, r8
 8006a42:	4930      	ldr	r1, [pc, #192]	; (8006b04 <main+0x5fc>)
 8006a44:	a81d      	add	r0, sp, #116	; 0x74
 8006a46:	f001 f9a9 	bl	8007d9c <siprintf>
	  f_puts((TCHAR *)wbuff, &file);
 8006a4a:	a99d      	add	r1, sp, #628	; 0x274
 8006a4c:	a81d      	add	r0, sp, #116	; 0x74
 8006a4e:	f7ff f901 	bl	8005c54 <f_puts>
	  f_close(&file);
 8006a52:	a89d      	add	r0, sp, #628	; 0x274
 8006a54:	f7fe fe8f 	bl	8005776 <f_close>
	  puts(wbuff);
 8006a58:	a81d      	add	r0, sp, #116	; 0x74
 8006a5a:	f001 f987 	bl	8007d6c <puts>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8006a5e:	465a      	mov	r2, fp
 8006a60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a64:	4630      	mov	r0, r6
 8006a66:	f7f9 ffdd 	bl	8000a24 <HAL_GPIO_WritePin>
	  sprintf(ubuff, " %d[t:%lu Pt:%lu] P:%f T:%f A:%f\n",
 8006a6a:	7862      	ldrb	r2, [r4, #1]
	  tmeasure_b = TIM2->CNT;
 8006a6c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
	  sprintf(ubuff, " %d[t:%lu Pt:%lu] P:%f T:%f A:%f\n",
 8006a70:	1c91      	adds	r1, r2, #2
			  FlightInfo.press[FlightInfo.d_pos],
 8006a72:	f202 2202 	addw	r2, r2, #514	; 0x202
 8006a76:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	  sprintf(ubuff, " %d[t:%lu Pt:%lu] P:%f T:%f A:%f\n",
 8006a7a:	eba3 0a09 	sub.w	sl, r3, r9
 8006a7e:	6810      	ldr	r0, [r2, #0]
 8006a80:	f854 b021 	ldr.w	fp, [r4, r1, lsl #2]
 8006a84:	f7f9 fd60 	bl	8000548 <__aeabi_f2d>
 8006a88:	4680      	mov	r8, r0
			  LPS22HB_Temperature(&lps22hb),
 8006a8a:	481d      	ldr	r0, [pc, #116]	; (8006b00 <main+0x5f8>)
	  sprintf(ubuff, " %d[t:%lu Pt:%lu] P:%f T:%f A:%f\n",
 8006a8c:	4689      	mov	r9, r1
			  LPS22HB_Temperature(&lps22hb),
 8006a8e:	f7ff fa84 	bl	8005f9a <LPS22HB_Temperature>
			  FlightInfo.accel[FlightInfo.d_pos]
 8006a92:	7862      	ldrb	r2, [r4, #1]
 8006a94:	9218      	str	r2, [sp, #96]	; 0x60
 8006a96:	f202 3302 	addw	r3, r2, #770	; 0x302
 8006a9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
			  LPS22HB_Temperature(&lps22hb),
 8006a9e:	ed8d 0a19 	vstr	s0, [sp, #100]	; 0x64
	  sprintf(ubuff, " %d[t:%lu Pt:%lu] P:%f T:%f A:%f\n",
 8006aa2:	6818      	ldr	r0, [r3, #0]
 8006aa4:	f7f9 fd50 	bl	8000548 <__aeabi_f2d>
 8006aa8:	ed9d 0a19 	vldr	s0, [sp, #100]	; 0x64
 8006aac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ab0:	ee10 0a10 	vmov	r0, s0
 8006ab4:	f7f9 fd48 	bl	8000548 <__aeabi_f2d>
 8006ab8:	465b      	mov	r3, fp
 8006aba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006abe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006ac0:	4911      	ldr	r1, [pc, #68]	; (8006b08 <main+0x600>)
 8006ac2:	f8cd a000 	str.w	sl, [sp]
 8006ac6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006aca:	a85d      	add	r0, sp, #372	; 0x174
 8006acc:	f001 f966 	bl	8007d9c <siprintf>
	 xputs(ubuff);
 8006ad0:	a85d      	add	r0, sp, #372	; 0x174
 8006ad2:	f000 fee1 	bl	8007898 <xputs>
	  FlightInfo.d_num++;
 8006ad6:	6863      	ldr	r3, [r4, #4]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	6063      	str	r3, [r4, #4]
	  FlightInfo.d_pos++;
 8006adc:	7863      	ldrb	r3, [r4, #1]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	7063      	strb	r3, [r4, #1]
 8006ae2:	e6e8      	b.n	80068b6 <main+0x3ae>
 8006ae4:	2000218c 	.word	0x2000218c
 8006ae8:	40002800 	.word	0x40002800
 8006aec:	48000400 	.word	0x48000400
 8006af0:	20000048 	.word	0x20000048
 8006af4:	200009f4 	.word	0x200009f4
 8006af8:	08008f95 	.word	0x08008f95
 8006afc:	20000aa0 	.word	0x20000aa0
 8006b00:	2000221c 	.word	0x2000221c
 8006b04:	08008fa9 	.word	0x08008fa9
 8006b08:	08008fd4 	.word	0x08008fd4

08006b0c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006b0c:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8006b0e:	4c06      	ldr	r4, [pc, #24]	; (8006b28 <SD_initialize+0x1c>)
 8006b10:	2301      	movs	r3, #1
 8006b12:	7023      	strb	r3, [r4, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8006b14:	f000 f8e8 	bl	8006ce8 <BSP_SD_Init>
 8006b18:	4623      	mov	r3, r4
 8006b1a:	b918      	cbnz	r0, 8006b24 <SD_initialize+0x18>
  {
    Stat &= ~STA_NOINIT;
 8006b1c:	7822      	ldrb	r2, [r4, #0]
 8006b1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b22:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8006b24:	7818      	ldrb	r0, [r3, #0]
}
 8006b26:	bd10      	pop	{r4, pc}
 8006b28:	20000070 	.word	0x20000070

08006b2c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006b2c:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8006b2e:	4c06      	ldr	r4, [pc, #24]	; (8006b48 <SD_status+0x1c>)
 8006b30:	2301      	movs	r3, #1
 8006b32:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetStatus() == MSD_OK)
 8006b34:	f000 fc28 	bl	8007388 <BSP_SD_GetStatus>
 8006b38:	4623      	mov	r3, r4
 8006b3a:	b918      	cbnz	r0, 8006b44 <SD_status+0x18>
  {
    Stat &= ~STA_NOINIT;
 8006b3c:	7822      	ldrb	r2, [r4, #0]
 8006b3e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b42:	7022      	strb	r2, [r4, #0]
  }
  
  return Stat;
 8006b44:	7818      	ldrb	r0, [r3, #0]
}
 8006b46:	bd10      	pop	{r4, pc}
 8006b48:	20000070 	.word	0x20000070

08006b4c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006b4c:	b508      	push	{r3, lr}
 8006b4e:	4608      	mov	r0, r1
  DRESULT res = RES_OK;
  
  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
                       (uint64_t) (sector * BLOCK_SIZE), 
 8006b50:	0251      	lsls	r1, r2, #9
  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8006b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b56:	f000 fb2f 	bl	80071b8 <BSP_SD_ReadBlocks>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 8006b5a:	3000      	adds	r0, #0
 8006b5c:	bf18      	it	ne
 8006b5e:	2001      	movne	r0, #1
 8006b60:	bd08      	pop	{r3, pc}

08006b62 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006b62:	b508      	push	{r3, lr}
 8006b64:	4608      	mov	r0, r1
  DRESULT res = RES_OK;
  
  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
                        (uint64_t)(sector * BLOCK_SIZE), 
 8006b66:	0251      	lsls	r1, r2, #9
  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 8006b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b6c:	f000 fb8e 	bl	800728c <BSP_SD_WriteBlocks>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 8006b70:	3000      	adds	r0, #0
 8006b72:	bf18      	it	ne
 8006b74:	2001      	movne	r0, #1
 8006b76:	bd08      	pop	{r3, pc}

08006b78 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006b78:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006b7a:	4b11      	ldr	r3, [pc, #68]	; (8006bc0 <SD_ioctl+0x48>)
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	07db      	lsls	r3, r3, #31
{
 8006b80:	b08e      	sub	sp, #56	; 0x38
 8006b82:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006b84:	d419      	bmi.n	8006bba <SD_ioctl+0x42>
  
  switch (cmd)
 8006b86:	2903      	cmp	r1, #3
 8006b88:	d803      	bhi.n	8006b92 <SD_ioctl+0x1a>
 8006b8a:	e8df f001 	tbb	[pc, r1]
 8006b8e:	050b      	.short	0x050b
 8006b90:	110d      	.short	0x110d
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = BLOCK_SIZE;
    break;
  
  default:
    res = RES_PARERR;
 8006b92:	2004      	movs	r0, #4
  }
  
  return res;
}
 8006b94:	b00e      	add	sp, #56	; 0x38
 8006b96:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8006b98:	4668      	mov	r0, sp
 8006b9a:	f000 f96b 	bl	8006e74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.CardCapacity / BLOCK_SIZE;
 8006b9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ba0:	0a5b      	lsrs	r3, r3, #9
 8006ba2:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	e7f5      	b.n	8006b94 <SD_ioctl+0x1c>
    *(WORD*)buff = BLOCK_SIZE;
 8006ba8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bac:	8013      	strh	r3, [r2, #0]
 8006bae:	e7f9      	b.n	8006ba4 <SD_ioctl+0x2c>
    *(DWORD*)buff = BLOCK_SIZE;
 8006bb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bb4:	6013      	str	r3, [r2, #0]
  DRESULT res = RES_ERROR;
 8006bb6:	2001      	movs	r0, #1
    break;
 8006bb8:	e7ec      	b.n	8006b94 <SD_ioctl+0x1c>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006bba:	2003      	movs	r0, #3
 8006bbc:	e7ea      	b.n	8006b94 <SD_ioctl+0x1c>
 8006bbe:	bf00      	nop
 8006bc0:	20000070 	.word	0x20000070

08006bc4 <SD_ReadData>:
  * @brief  Waits a data until a value different from SD_DUMMY_BITE
  * @param  None
  * @retval the value read
  */
uint8_t SD_ReadData(void)
{
 8006bc4:	b510      	push	{r4, lr}
 8006bc6:	2408      	movs	r4, #8
  uint8_t timeout = 0x08;
  uint8_t readvalue;
 
  /* Check if response is got or a timeout is happen */
  do {
    readvalue = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8006bc8:	20ff      	movs	r0, #255	; 0xff
 8006bca:	f000 fdd1 	bl	8007770 <SD_IO_WriteByte>
    timeout--;
    
  }while ((readvalue == SD_DUMMY_BYTE) && timeout);
 8006bce:	28ff      	cmp	r0, #255	; 0xff
 8006bd0:	d103      	bne.n	8006bda <SD_ReadData+0x16>
 8006bd2:	3c01      	subs	r4, #1
 8006bd4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8006bd8:	d1f6      	bne.n	8006bc8 <SD_ReadData+0x4>

  /* Right response got */
  return readvalue;
}
 8006bda:	bd10      	pop	{r4, pc}

08006bdc <SD_SendCmd>:
{
 8006bdc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  frame[0] = (Cmd | 0x40);         /* Construct byte 1 */
 8006be0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8006be4:	f88d 1000 	strb.w	r1, [sp]
  frame[1] = (uint8_t)(Arg >> 24); /* Construct byte 2 */
 8006be8:	0e11      	lsrs	r1, r2, #24
 8006bea:	f88d 1001 	strb.w	r1, [sp, #1]
  frame[2] = (uint8_t)(Arg >> 16); /* Construct byte 3 */
 8006bee:	0c11      	lsrs	r1, r2, #16
  frame[5] = (Crc | 0x01);         /* Construct byte 6 */
 8006bf0:	f043 0301 	orr.w	r3, r3, #1
{
 8006bf4:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
  frame[2] = (uint8_t)(Arg >> 16); /* Construct byte 3 */
 8006bf8:	f88d 1002 	strb.w	r1, [sp, #2]
{
 8006bfc:	4604      	mov	r4, r0
  frame[3] = (uint8_t)(Arg >> 8);  /* Construct byte 4 */
 8006bfe:	0a11      	lsrs	r1, r2, #8
  SD_IO_CSState(0);
 8006c00:	2000      	movs	r0, #0
  frame[3] = (uint8_t)(Arg >> 8);  /* Construct byte 4 */
 8006c02:	f88d 1003 	strb.w	r1, [sp, #3]
  frame[4] = (uint8_t)(Arg);       /* Construct byte 5 */
 8006c06:	f88d 2004 	strb.w	r2, [sp, #4]
  frame[5] = (Crc | 0x01);         /* Construct byte 6 */
 8006c0a:	f88d 3005 	strb.w	r3, [sp, #5]
  SD_IO_CSState(0);
 8006c0e:	f000 fd8b 	bl	8007728 <SD_IO_CSState>
  SD_IO_WriteReadData(frame, frameout, SD_CMD_LENGTH); /* Send the Cmd bytes */
 8006c12:	2206      	movs	r2, #6
 8006c14:	a902      	add	r1, sp, #8
 8006c16:	4668      	mov	r0, sp
 8006c18:	f000 fd92 	bl	8007740 <SD_IO_WriteReadData>
  switch(Answer)
 8006c1c:	2d05      	cmp	r5, #5
 8006c1e:	d849      	bhi.n	8006cb4 <SD_SendCmd+0xd8>
 8006c20:	e8df f005 	tbb	[pc, r5]
 8006c24:	352c1403 	.word	0x352c1403
 8006c28:	3548      	.short	0x3548
    retr.r1 = SD_ReadData();
 8006c2a:	f7ff ffcb 	bl	8006bc4 <SD_ReadData>
 8006c2e:	4680      	mov	r8, r0
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 8006c30:	20ff      	movs	r0, #255	; 0xff
 8006c32:	4605      	mov	r5, r0
 8006c34:	4606      	mov	r6, r0
 8006c36:	4607      	mov	r7, r0
  return retr;
 8006c38:	7120      	strb	r0, [r4, #4]
}
 8006c3a:	4620      	mov	r0, r4
  return retr;
 8006c3c:	f884 8000 	strb.w	r8, [r4]
 8006c40:	7067      	strb	r7, [r4, #1]
 8006c42:	70a6      	strb	r6, [r4, #2]
 8006c44:	70e5      	strb	r5, [r4, #3]
}
 8006c46:	b004      	add	sp, #16
 8006c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    retr.r1 = SD_ReadData();
 8006c4c:	f7ff ffba 	bl	8006bc4 <SD_ReadData>
 8006c50:	4680      	mov	r8, r0
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8006c52:	20ff      	movs	r0, #255	; 0xff
 8006c54:	f000 fd8c 	bl	8007770 <SD_IO_WriteByte>
 8006c58:	4607      	mov	r7, r0
    SD_IO_CSState(1);
 8006c5a:	2001      	movs	r0, #1
 8006c5c:	f000 fd64 	bl	8007728 <SD_IO_CSState>
    HAL_Delay(1);
 8006c60:	2001      	movs	r0, #1
 8006c62:	f7f9 fcf9 	bl	8000658 <HAL_Delay>
    SD_IO_CSState(0);
 8006c66:	2000      	movs	r0, #0
 8006c68:	f000 fd5e 	bl	8007728 <SD_IO_CSState>
    while (SD_IO_WriteByte(SD_DUMMY_BYTE) != 0xFF); 
 8006c6c:	20ff      	movs	r0, #255	; 0xff
 8006c6e:	f000 fd7f 	bl	8007770 <SD_IO_WriteByte>
 8006c72:	28ff      	cmp	r0, #255	; 0xff
 8006c74:	d1fa      	bne.n	8006c6c <SD_SendCmd+0x90>
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 8006c76:	4605      	mov	r5, r0
 8006c78:	4606      	mov	r6, r0
    break;
 8006c7a:	e7dd      	b.n	8006c38 <SD_SendCmd+0x5c>
    retr.r1 = SD_ReadData();
 8006c7c:	f7ff ffa2 	bl	8006bc4 <SD_ReadData>
 8006c80:	4680      	mov	r8, r0
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8006c82:	20ff      	movs	r0, #255	; 0xff
 8006c84:	f000 fd74 	bl	8007770 <SD_IO_WriteByte>
 8006c88:	4607      	mov	r7, r0
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 8006c8a:	20ff      	movs	r0, #255	; 0xff
 8006c8c:	e7f3      	b.n	8006c76 <SD_SendCmd+0x9a>
    retr.r1 = SD_ReadData();
 8006c8e:	f7ff ff99 	bl	8006bc4 <SD_ReadData>
 8006c92:	4680      	mov	r8, r0
    retr.r2 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8006c94:	20ff      	movs	r0, #255	; 0xff
 8006c96:	f000 fd6b 	bl	8007770 <SD_IO_WriteByte>
 8006c9a:	4607      	mov	r7, r0
    retr.r3 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8006c9c:	20ff      	movs	r0, #255	; 0xff
 8006c9e:	f000 fd67 	bl	8007770 <SD_IO_WriteByte>
 8006ca2:	4606      	mov	r6, r0
    retr.r4 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8006ca4:	20ff      	movs	r0, #255	; 0xff
 8006ca6:	f000 fd63 	bl	8007770 <SD_IO_WriteByte>
 8006caa:	4605      	mov	r5, r0
    retr.r5 = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8006cac:	20ff      	movs	r0, #255	; 0xff
 8006cae:	f000 fd5f 	bl	8007770 <SD_IO_WriteByte>
    break;
 8006cb2:	e7c1      	b.n	8006c38 <SD_SendCmd+0x5c>
  SD_CmdAnswer_typedef retr = {0xFF, 0xFF , 0xFF, 0xFF, 0xFF};
 8006cb4:	20ff      	movs	r0, #255	; 0xff
 8006cb6:	4605      	mov	r5, r0
 8006cb8:	4606      	mov	r6, r0
 8006cba:	4607      	mov	r7, r0
 8006cbc:	4680      	mov	r8, r0
 8006cbe:	e7bb      	b.n	8006c38 <SD_SendCmd+0x5c>

08006cc0 <SD_WaitData.constprop.0>:
/**
  * @brief  Waits a data from the SD card
  * @param  data : Expected data from the SD card
  * @retval BSP_SD_OK or BSP_SD_TIMEOUT
  */
uint8_t SD_WaitData(uint8_t data)
 8006cc0:	b510      	push	{r4, lr}
{
  uint16_t timeout = 0xFFFF;
 8006cc2:	f64f 74ff 	movw	r4, #65535	; 0xffff
  uint8_t readvalue;
  
  /* Check if response is got or a timeout is happen */
  
  do {
    readvalue = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8006cc6:	20ff      	movs	r0, #255	; 0xff
 8006cc8:	f000 fd52 	bl	8007770 <SD_IO_WriteByte>
    timeout--;
 8006ccc:	3c01      	subs	r4, #1
  }while ((readvalue != data) && timeout);
 8006cce:	28fe      	cmp	r0, #254	; 0xfe
    timeout--;
 8006cd0:	b2a4      	uxth	r4, r4
  }while ((readvalue != data) && timeout);
 8006cd2:	d003      	beq.n	8006cdc <SD_WaitData.constprop.0+0x1c>
 8006cd4:	2c00      	cmp	r4, #0
 8006cd6:	d1f6      	bne.n	8006cc6 <SD_WaitData.constprop.0+0x6>

  if (timeout == 0)
  {
    /* After time out */
    return BSP_SD_TIMEOUT;
 8006cd8:	2002      	movs	r0, #2
 8006cda:	bd10      	pop	{r4, pc}
  }

  /* Right response got */
  return BSP_SD_OK;
 8006cdc:	2c00      	cmp	r4, #0
 8006cde:	bf0c      	ite	eq
 8006ce0:	2002      	moveq	r0, #2
 8006ce2:	2000      	movne	r0, #0
}
 8006ce4:	bd10      	pop	{r4, pc}
	...

08006ce8 <BSP_SD_Init>:
{ 
 8006ce8:	b570      	push	{r4, r5, r6, lr}
 8006cea:	b086      	sub	sp, #24
  SD_IO_Init();
 8006cec:	f000 fd5a 	bl	80077a4 <SD_IO_Init>
  SdStatus = SD_PRESENT;
 8006cf0:	4b5e      	ldr	r3, [pc, #376]	; (8006e6c <BSP_SD_Init+0x184>)
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	701a      	strb	r2, [r3, #0]
  __IO uint8_t counter = 0;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	f88d 300f 	strb.w	r3, [sp, #15]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8006cfc:	461c      	mov	r4, r3
    counter++;
 8006cfe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8006d02:	9400      	str	r4, [sp, #0]
    counter++;
 8006d04:	3301      	adds	r3, #1
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8006d06:	2200      	movs	r2, #0
    counter++;
 8006d08:	b2db      	uxtb	r3, r3
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8006d0a:	4611      	mov	r1, r2
    counter++;
 8006d0c:	f88d 300f 	strb.w	r3, [sp, #15]
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8006d10:	a804      	add	r0, sp, #16
 8006d12:	2395      	movs	r3, #149	; 0x95
 8006d14:	f7ff ff62 	bl	8006bdc <SD_SendCmd>
    SD_IO_CSState(1);
 8006d18:	2001      	movs	r0, #1
    response = SD_SendCmd(SD_CMD_GO_IDLE_STATE, 0, 0x95, SD_ANSWER_R1_EXPECTED);
 8006d1a:	f89d 6010 	ldrb.w	r6, [sp, #16]
    SD_IO_CSState(1);
 8006d1e:	f000 fd03 	bl	8007728 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8006d22:	20ff      	movs	r0, #255	; 0xff
 8006d24:	f000 fd24 	bl	8007770 <SD_IO_WriteByte>
    if(counter >= SD_MAX_TRY)
 8006d28:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8006d2c:	2b63      	cmp	r3, #99	; 0x63
 8006d2e:	d903      	bls.n	8006d38 <BSP_SD_Init+0x50>
      return BSP_SD_ERROR;
 8006d30:	2401      	movs	r4, #1
}
 8006d32:	4620      	mov	r0, r4
 8006d34:	b006      	add	sp, #24
 8006d36:	bd70      	pop	{r4, r5, r6, pc}
  while(response.r1 != SD_R1_IN_IDLE_STATE);
 8006d38:	2e01      	cmp	r6, #1
 8006d3a:	d1e0      	bne.n	8006cfe <BSP_SD_Init+0x16>
  response = SD_SendCmd(SD_CMD_SEND_IF_COND, 0x1AA, 0x87, SD_ANSWER_R7_EXPECTED);
 8006d3c:	2305      	movs	r3, #5
 8006d3e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006d42:	2108      	movs	r1, #8
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	a804      	add	r0, sp, #16
 8006d48:	2387      	movs	r3, #135	; 0x87
 8006d4a:	f7ff ff47 	bl	8006bdc <SD_SendCmd>
 8006d4e:	f89d 5010 	ldrb.w	r5, [sp, #16]
  SD_IO_CSState(1);
 8006d52:	4630      	mov	r0, r6
 8006d54:	f000 fce8 	bl	8007728 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8006d58:	20ff      	movs	r0, #255	; 0xff
 8006d5a:	f000 fd09 	bl	8007770 <SD_IO_WriteByte>
  if((response.r1  & SD_R1_ILLEGAL_COMMAND) == SD_R1_ILLEGAL_COMMAND)
 8006d5e:	f015 0404 	ands.w	r4, r5, #4
 8006d62:	d022      	beq.n	8006daa <BSP_SD_Init+0xc2>
      response = SD_SendCmd(SD_CMD_APP_CMD, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 8006d64:	2400      	movs	r4, #0
 8006d66:	23ff      	movs	r3, #255	; 0xff
 8006d68:	2200      	movs	r2, #0
 8006d6a:	2137      	movs	r1, #55	; 0x37
 8006d6c:	a804      	add	r0, sp, #16
 8006d6e:	9400      	str	r4, [sp, #0]
 8006d70:	f7ff ff34 	bl	8006bdc <SD_SendCmd>
      SD_IO_CSState(1);
 8006d74:	2001      	movs	r0, #1
 8006d76:	f000 fcd7 	bl	8007728 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8006d7a:	20ff      	movs	r0, #255	; 0xff
 8006d7c:	f000 fcf8 	bl	8007770 <SD_IO_WriteByte>
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 8006d80:	23ff      	movs	r3, #255	; 0xff
 8006d82:	2200      	movs	r2, #0
 8006d84:	2129      	movs	r1, #41	; 0x29
 8006d86:	a804      	add	r0, sp, #16
 8006d88:	9400      	str	r4, [sp, #0]
 8006d8a:	f7ff ff27 	bl	8006bdc <SD_SendCmd>
 8006d8e:	f89d 5010 	ldrb.w	r5, [sp, #16]
      SD_IO_CSState(1);
 8006d92:	2001      	movs	r0, #1
 8006d94:	f000 fcc8 	bl	8007728 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8006d98:	20ff      	movs	r0, #255	; 0xff
 8006d9a:	f000 fce9 	bl	8007770 <SD_IO_WriteByte>
    while(response.r1 == SD_R1_IN_IDLE_STATE);
 8006d9e:	2d01      	cmp	r5, #1
 8006da0:	d0e1      	beq.n	8006d66 <BSP_SD_Init+0x7e>
    flag_SDHC = 0;
 8006da2:	4b33      	ldr	r3, [pc, #204]	; (8006e70 <BSP_SD_Init+0x188>)
 8006da4:	801c      	strh	r4, [r3, #0]
  return BSP_SD_OK; 
 8006da6:	2400      	movs	r4, #0
 8006da8:	e7c3      	b.n	8006d32 <BSP_SD_Init+0x4a>
  else if(response.r1 == SD_R1_IN_IDLE_STATE)
 8006daa:	2d01      	cmp	r5, #1
 8006dac:	d1c0      	bne.n	8006d30 <BSP_SD_Init+0x48>
      response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8006dae:	23ff      	movs	r3, #255	; 0xff
 8006db0:	2200      	movs	r2, #0
 8006db2:	2137      	movs	r1, #55	; 0x37
 8006db4:	a804      	add	r0, sp, #16
 8006db6:	9400      	str	r4, [sp, #0]
 8006db8:	f7ff ff10 	bl	8006bdc <SD_SendCmd>
      SD_IO_CSState(1);
 8006dbc:	2001      	movs	r0, #1
 8006dbe:	f000 fcb3 	bl	8007728 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8006dc2:	20ff      	movs	r0, #255	; 0xff
 8006dc4:	f000 fcd4 	bl	8007770 <SD_IO_WriteByte>
      response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x40000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 8006dc8:	23ff      	movs	r3, #255	; 0xff
 8006dca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006dce:	2129      	movs	r1, #41	; 0x29
 8006dd0:	a804      	add	r0, sp, #16
 8006dd2:	9400      	str	r4, [sp, #0]
 8006dd4:	f7ff ff02 	bl	8006bdc <SD_SendCmd>
 8006dd8:	f89d 5010 	ldrb.w	r5, [sp, #16]
      SD_IO_CSState(1);
 8006ddc:	2001      	movs	r0, #1
 8006dde:	f000 fca3 	bl	8007728 <SD_IO_CSState>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8006de2:	20ff      	movs	r0, #255	; 0xff
 8006de4:	f000 fcc4 	bl	8007770 <SD_IO_WriteByte>
    while(response.r1 == SD_R1_IN_IDLE_STATE);
 8006de8:	2d01      	cmp	r5, #1
 8006dea:	d0e0      	beq.n	8006dae <BSP_SD_Init+0xc6>
    if((response.r1 & SD_R1_ILLEGAL_COMMAND) == SD_R1_ILLEGAL_COMMAND)
 8006dec:	076b      	lsls	r3, r5, #29
 8006dee:	d418      	bmi.n	8006e22 <BSP_SD_Init+0x13a>
    response = SD_SendCmd(SD_CMD_READ_OCR, 0x00000000, 0xFF, SD_ANSWER_R3_EXPECTED);
 8006df0:	2303      	movs	r3, #3
 8006df2:	9300      	str	r3, [sp, #0]
 8006df4:	2200      	movs	r2, #0
 8006df6:	23ff      	movs	r3, #255	; 0xff
 8006df8:	213a      	movs	r1, #58	; 0x3a
 8006dfa:	a804      	add	r0, sp, #16
 8006dfc:	f7ff feee 	bl	8006bdc <SD_SendCmd>
 8006e00:	f89d 4010 	ldrb.w	r4, [sp, #16]
    SD_IO_CSState(1);
 8006e04:	2001      	movs	r0, #1
 8006e06:	f000 fc8f 	bl	8007728 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8006e0a:	20ff      	movs	r0, #255	; 0xff
 8006e0c:	f000 fcb0 	bl	8007770 <SD_IO_WriteByte>
    if(response.r1 != SD_R1_NO_ERROR)
 8006e10:	2c00      	cmp	r4, #0
 8006e12:	d18d      	bne.n	8006d30 <BSP_SD_Init+0x48>
    flag_SDHC = (response.r2 & 0x40) >> 6;
 8006e14:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8006e18:	4a15      	ldr	r2, [pc, #84]	; (8006e70 <BSP_SD_Init+0x188>)
 8006e1a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006e1e:	8013      	strh	r3, [r2, #0]
 8006e20:	e787      	b.n	8006d32 <BSP_SD_Init+0x4a>
        response = SD_SendCmd(SD_CMD_APP_CMD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8006e22:	2500      	movs	r5, #0
 8006e24:	23ff      	movs	r3, #255	; 0xff
 8006e26:	2200      	movs	r2, #0
 8006e28:	2137      	movs	r1, #55	; 0x37
 8006e2a:	a804      	add	r0, sp, #16
 8006e2c:	9500      	str	r5, [sp, #0]
 8006e2e:	f7ff fed5 	bl	8006bdc <SD_SendCmd>
 8006e32:	f89d 4010 	ldrb.w	r4, [sp, #16]
        SD_IO_CSState(1);
 8006e36:	2001      	movs	r0, #1
 8006e38:	f000 fc76 	bl	8007728 <SD_IO_CSState>
        SD_IO_WriteByte(SD_DUMMY_BYTE);
 8006e3c:	20ff      	movs	r0, #255	; 0xff
 8006e3e:	f000 fc97 	bl	8007770 <SD_IO_WriteByte>
        if(response.r1 != SD_R1_IN_IDLE_STATE)
 8006e42:	2c01      	cmp	r4, #1
 8006e44:	f47f af74 	bne.w	8006d30 <BSP_SD_Init+0x48>
        response = SD_SendCmd(SD_CMD_SD_APP_OP_COND, 0x00000000, 0xFF, SD_ANSWER_R1_EXPECTED);
 8006e48:	23ff      	movs	r3, #255	; 0xff
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	2129      	movs	r1, #41	; 0x29
 8006e4e:	a804      	add	r0, sp, #16
 8006e50:	9500      	str	r5, [sp, #0]
 8006e52:	f7ff fec3 	bl	8006bdc <SD_SendCmd>
 8006e56:	f89d 6010 	ldrb.w	r6, [sp, #16]
        SD_IO_CSState(1);
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f000 fc64 	bl	8007728 <SD_IO_CSState>
        SD_IO_WriteByte(SD_DUMMY_BYTE);
 8006e60:	20ff      	movs	r0, #255	; 0xff
 8006e62:	f000 fc85 	bl	8007770 <SD_IO_WriteByte>
      while(response.r1 == SD_R1_IN_IDLE_STATE);        
 8006e66:	2e01      	cmp	r6, #1
 8006e68:	d0dc      	beq.n	8006e24 <BSP_SD_Init+0x13c>
 8006e6a:	e7c1      	b.n	8006df0 <BSP_SD_Init+0x108>
 8006e6c:	20000298 	.word	0x20000298
 8006e70:	2000029a 	.word	0x2000029a

08006e74 <BSP_SD_GetCardInfo>:
{
 8006e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e78:	b088      	sub	sp, #32
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	23ff      	movs	r3, #255	; 0xff
{
 8006e7e:	4604      	mov	r4, r0
  response = SD_SendCmd(SD_CMD_SEND_CSD, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8006e80:	9200      	str	r2, [sp, #0]
 8006e82:	2109      	movs	r1, #9
 8006e84:	a802      	add	r0, sp, #8
 8006e86:	f7ff fea9 	bl	8006bdc <SD_SendCmd>
  if(response.r1 == SD_R1_NO_ERROR)
 8006e8a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8006e8e:	b363      	cbz	r3, 8006eea <BSP_SD_GetCardInfo+0x76>
  uint8_t retr = BSP_SD_ERROR;
 8006e90:	2501      	movs	r5, #1
  SD_IO_CSState(1);
 8006e92:	2001      	movs	r0, #1
 8006e94:	f000 fc48 	bl	8007728 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8006e98:	20ff      	movs	r0, #255	; 0xff
 8006e9a:	f000 fc69 	bl	8007770 <SD_IO_WriteByte>
  response = SD_SendCmd(SD_CMD_SEND_CID, 0, 0xFF, SD_ANSWER_R1_EXPECTED);
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	23ff      	movs	r3, #255	; 0xff
 8006ea2:	9200      	str	r2, [sp, #0]
 8006ea4:	210a      	movs	r1, #10
 8006ea6:	a802      	add	r0, sp, #8
 8006ea8:	f7ff fe98 	bl	8006bdc <SD_SendCmd>
  if(response.r1 == SD_R1_NO_ERROR)
 8006eac:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 80fe 	beq.w	80070b2 <BSP_SD_GetCardInfo+0x23e>
  uint8_t retr = BSP_SD_ERROR;
 8006eb6:	2601      	movs	r6, #1
  SD_IO_CSState(1);
 8006eb8:	2001      	movs	r0, #1
 8006eba:	f000 fc35 	bl	8007728 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8006ebe:	20ff      	movs	r0, #255	; 0xff
 8006ec0:	f000 fc56 	bl	8007770 <SD_IO_WriteByte>
  if(flag_SDHC == 1 )
 8006ec4:	4bbb      	ldr	r3, [pc, #748]	; (80071b4 <BSP_SD_GetCardInfo+0x340>)
 8006ec6:	881b      	ldrh	r3, [r3, #0]
  status|= SD_GetCIDRegister(&(pCardInfo->Cid));
 8006ec8:	4335      	orrs	r5, r6
  if(flag_SDHC == 1 )
 8006eca:	2b01      	cmp	r3, #1
  status|= SD_GetCIDRegister(&(pCardInfo->Cid));
 8006ecc:	b2e8      	uxtb	r0, r5
  if(flag_SDHC == 1 )
 8006ece:	f040 8161 	bne.w	8007194 <BSP_SD_GetCardInfo+0x320>
    pCardInfo->CardBlockSize = 512;
 8006ed2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ed6:	6363      	str	r3, [r4, #52]	; 0x34
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v2.DeviceSize + 1) * pCardInfo->CardBlockSize;
 8006ed8:	68a3      	ldr	r3, [r4, #8]
 8006eda:	f3c3 1395 	ubfx	r3, r3, #6, #22
 8006ede:	3301      	adds	r3, #1
 8006ee0:	025b      	lsls	r3, r3, #9
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 8006ee2:	6323      	str	r3, [r4, #48]	; 0x30
}
 8006ee4:	b008      	add	sp, #32
 8006ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 8006eea:	f7ff fee9 	bl	8006cc0 <SD_WaitData.constprop.0>
 8006eee:	4605      	mov	r5, r0
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	d1cd      	bne.n	8006e90 <BSP_SD_GetCardInfo+0x1c>
 8006ef4:	4606      	mov	r6, r0
        CSD_Tab[counter] = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8006ef6:	af04      	add	r7, sp, #16
 8006ef8:	20ff      	movs	r0, #255	; 0xff
 8006efa:	f000 fc39 	bl	8007770 <SD_IO_WriteByte>
 8006efe:	55b8      	strb	r0, [r7, r6]
 8006f00:	3601      	adds	r6, #1
      for (counter = 0; counter < 16; counter++)
 8006f02:	2e10      	cmp	r6, #16
 8006f04:	d1f8      	bne.n	8006ef8 <BSP_SD_GetCardInfo+0x84>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8006f06:	20ff      	movs	r0, #255	; 0xff
 8006f08:	f000 fc32 	bl	8007770 <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 8006f0c:	20ff      	movs	r0, #255	; 0xff
 8006f0e:	f000 fc2f 	bl	8007770 <SD_IO_WriteByte>
      Csd->CSDStruct = (CSD_Tab[0] & 0xC0) >> 6;
 8006f12:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8006f16:	7823      	ldrb	r3, [r4, #0]
 8006f18:	0991      	lsrs	r1, r2, #6
 8006f1a:	f361 0301 	bfi	r3, r1, #0, #2
      Csd->Reserved1 =  CSD_Tab[0] & 0x3F;
 8006f1e:	f362 0387 	bfi	r3, r2, #2, #6
 8006f22:	7023      	strb	r3, [r4, #0]
      Csd->TAAC = CSD_Tab[1];
 8006f24:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8006f28:	7063      	strb	r3, [r4, #1]
      Csd->NSAC = CSD_Tab[2];
 8006f2a:	f89d 3012 	ldrb.w	r3, [sp, #18]
      Csd->CardComdClasses = (CSD_Tab[4] << 4) | ((CSD_Tab[5] & 0xF0) >> 4);
 8006f2e:	f89d 1015 	ldrb.w	r1, [sp, #21]
      Csd->NSAC = CSD_Tab[2];
 8006f32:	70a3      	strb	r3, [r4, #2]
      Csd->MaxBusClkFrec = CSD_Tab[3];
 8006f34:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006f38:	70e3      	strb	r3, [r4, #3]
      Csd->CardComdClasses = (CSD_Tab[4] << 4) | ((CSD_Tab[5] & 0xF0) >> 4);
 8006f3a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8006f3e:	090a      	lsrs	r2, r1, #4
 8006f40:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
 8006f44:	88a3      	ldrh	r3, [r4, #4]
 8006f46:	f362 030b 	bfi	r3, r2, #0, #12
 8006f4a:	80a3      	strh	r3, [r4, #4]
      Csd->RdBlockLen = CSD_Tab[5] & 0x0F;
 8006f4c:	0a1b      	lsrs	r3, r3, #8
 8006f4e:	f361 1307 	bfi	r3, r1, #4, #4
 8006f52:	7163      	strb	r3, [r4, #5]
      Csd->PartBlockRead   = (CSD_Tab[6] & 0x80) >> 7;
 8006f54:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8006f58:	79a2      	ldrb	r2, [r4, #6]
 8006f5a:	09d9      	lsrs	r1, r3, #7
 8006f5c:	f361 0200 	bfi	r2, r1, #0, #1
      Csd->WrBlockMisalign = (CSD_Tab[6] & 0x40) >> 6;
 8006f60:	1199      	asrs	r1, r3, #6
 8006f62:	f361 0241 	bfi	r2, r1, #1, #1
      Csd->RdBlockMisalign = (CSD_Tab[6] & 0x20) >> 5;
 8006f66:	1159      	asrs	r1, r3, #5
 8006f68:	f361 0282 	bfi	r2, r1, #2, #1
      Csd->DSRImpl         = (CSD_Tab[6] & 0x10) >> 4;
 8006f6c:	1119      	asrs	r1, r3, #4
 8006f6e:	f361 02c3 	bfi	r2, r1, #3, #1
 8006f72:	71a2      	strb	r2, [r4, #6]
      if(flag_SDHC == 0)
 8006f74:	4a8f      	ldr	r2, [pc, #572]	; (80071b4 <BSP_SD_GetCardInfo+0x340>)
 8006f76:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8006f7a:	8810      	ldrh	r0, [r2, #0]
 8006f7c:	f89d 201a 	ldrb.w	r2, [sp, #26]
 8006f80:	2800      	cmp	r0, #0
 8006f82:	d17c      	bne.n	800707e <BSP_SD_GetCardInfo+0x20a>
        Csd->version.v1.Reserved1 = ((CSD_Tab[6] & 0x0C) >> 2);
 8006f84:	7a20      	ldrb	r0, [r4, #8]
 8006f86:	109e      	asrs	r6, r3, #2
 8006f88:	f366 0001 	bfi	r0, r6, #0, #2
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 8006f8c:	f89d 6018 	ldrb.w	r6, [sp, #24]
        Csd->version.v1.Reserved1 = ((CSD_Tab[6] & 0x0C) >> 2);
 8006f90:	7220      	strb	r0, [r4, #8]
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10) 
 8006f92:	029b      	lsls	r3, r3, #10
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 8006f94:	09b0      	lsrs	r0, r6, #6
 8006f96:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10) 
 8006f9a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
                                    | ((CSD_Tab[8] & 0xC0) >> 6);
 8006f9e:	4319      	orrs	r1, r3
        Csd->version.v1.DeviceSize =  ((CSD_Tab[6] & 0x03) << 10) 
 8006fa0:	8923      	ldrh	r3, [r4, #8]
 8006fa2:	f361 038d 	bfi	r3, r1, #2, #12
 8006fa6:	8123      	strh	r3, [r4, #8]
        Csd->version.v1.MaxRdCurrentVDDMin = (CSD_Tab[8] & 0x38) >> 3;
 8006fa8:	7aa3      	ldrb	r3, [r4, #10]
 8006faa:	10f1      	asrs	r1, r6, #3
 8006fac:	f361 0302 	bfi	r3, r1, #0, #3
        Csd->version.v1.MaxRdCurrentVDDMax = (CSD_Tab[8] & 0x07);
 8006fb0:	f366 03c5 	bfi	r3, r6, #3, #3
 8006fb4:	72a3      	strb	r3, [r4, #10]
        Csd->version.v1.MaxWrCurrentVDDMin = (CSD_Tab[9] & 0xE0) >> 5;
 8006fb6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8006fba:	7ae1      	ldrb	r1, [r4, #11]
 8006fbc:	0958      	lsrs	r0, r3, #5
 8006fbe:	f360 0102 	bfi	r1, r0, #0, #3
        Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
 8006fc2:	1098      	asrs	r0, r3, #2
 8006fc4:	f360 01c5 	bfi	r1, r0, #3, #3
        Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03) << 1)
 8006fc8:	005b      	lsls	r3, r3, #1
        Csd->version.v1.MaxWrCurrentVDDMax = (CSD_Tab[9] & 0x1C) >> 2;
 8006fca:	72e1      	strb	r1, [r4, #11]
        Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03) << 1)
 8006fcc:	f003 0306 	and.w	r3, r3, #6
 8006fd0:	7b21      	ldrb	r1, [r4, #12]
                                       |((CSD_Tab[10] & 0x80) >> 7);
 8006fd2:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
        Csd->version.v1.DeviceSizeMul = ((CSD_Tab[9] & 0x03) << 1)
 8006fd6:	f363 0102 	bfi	r1, r3, #0, #3
 8006fda:	7321      	strb	r1, [r4, #12]
      Csd->EraseSingleBlockEnable = (CSD_Tab[10] & 0x40) >> 6;
 8006fdc:	7c23      	ldrb	r3, [r4, #16]
 8006fde:	1191      	asrs	r1, r2, #6
 8006fe0:	f361 0300 	bfi	r3, r1, #0, #1
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8006fe4:	0052      	lsls	r2, r2, #1
                              |((CSD_Tab[11] & 0x80) >> 7);
 8006fe6:	f89d 101b 	ldrb.w	r1, [sp, #27]
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8006fea:	f002 027e 	and.w	r2, r2, #126	; 0x7e
                              |((CSD_Tab[11] & 0x80) >> 7);
 8006fee:	ea42 12d1 	orr.w	r2, r2, r1, lsr #7
      Csd->EraseSectorSize   = ((CSD_Tab[10] & 0x3F) << 1)
 8006ff2:	f362 0347 	bfi	r3, r2, #1, #7
 8006ff6:	7423      	strb	r3, [r4, #16]
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 8006ff8:	7c62      	ldrb	r2, [r4, #17]
      Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 8006ffa:	f89d 301c 	ldrb.w	r3, [sp, #28]
      Csd->WrProtectGrSize   = (CSD_Tab[11] & 0x7F);
 8006ffe:	f361 0206 	bfi	r2, r1, #0, #7
      Csd->WrProtectGrEnable = (CSD_Tab[12] & 0x80) >> 7;
 8007002:	09d9      	lsrs	r1, r3, #7
 8007004:	f361 12c7 	bfi	r2, r1, #7, #1
 8007008:	7462      	strb	r2, [r4, #17]
      Csd->Reserved2         = (CSD_Tab[12] & 0x60) >> 5;
 800700a:	7ca2      	ldrb	r2, [r4, #18]
 800700c:	1159      	asrs	r1, r3, #5
 800700e:	f361 0201 	bfi	r2, r1, #0, #2
      Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1C) >> 2;
 8007012:	1099      	asrs	r1, r3, #2
 8007014:	f361 0284 	bfi	r2, r1, #2, #3
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8007018:	009b      	lsls	r3, r3, #2
                              |((CSD_Tab[13] & 0xC0) >> 6);
 800701a:	f89d 101d 	ldrb.w	r1, [sp, #29]
      Csd->WrSpeedFact       = (CSD_Tab[12] & 0x1C) >> 2;
 800701e:	74a2      	strb	r2, [r4, #18]
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 8007020:	f003 030c 	and.w	r3, r3, #12
 8007024:	7ce2      	ldrb	r2, [r4, #19]
                              |((CSD_Tab[13] & 0xC0) >> 6);
 8007026:	ea43 1391 	orr.w	r3, r3, r1, lsr #6
      Csd->MaxWrBlockLen     = ((CSD_Tab[12] & 0x03) << 2)
 800702a:	f363 0203 	bfi	r2, r3, #0, #4
      Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20) >> 5;
 800702e:	1148      	asrs	r0, r1, #5
 8007030:	4613      	mov	r3, r2
 8007032:	f360 1304 	bfi	r3, r0, #4, #1
      Csd->FileFormatGrouop  = (CSD_Tab[14] & 0x80) >> 7;
 8007036:	f89d 201e 	ldrb.w	r2, [sp, #30]
      Csd->WriteBlockPartial = (CSD_Tab[13] & 0x20) >> 5;
 800703a:	74e3      	strb	r3, [r4, #19]
      Csd->Reserved3         = (CSD_Tab[13] & 0x1F);
 800703c:	7d23      	ldrb	r3, [r4, #20]
 800703e:	f361 0304 	bfi	r3, r1, #0, #5
      Csd->FileFormatGrouop  = (CSD_Tab[14] & 0x80) >> 7;
 8007042:	09d1      	lsrs	r1, r2, #7
 8007044:	f361 1345 	bfi	r3, r1, #5, #1
      Csd->CopyFlag          = (CSD_Tab[14] & 0x40) >> 6;
 8007048:	1191      	asrs	r1, r2, #6
 800704a:	f361 1386 	bfi	r3, r1, #6, #1
      Csd->PermWrProtect     = (CSD_Tab[14] & 0x20) >> 5;
 800704e:	1151      	asrs	r1, r2, #5
 8007050:	f361 13c7 	bfi	r3, r1, #7, #1
 8007054:	7523      	strb	r3, [r4, #20]
      Csd->TempWrProtect     = (CSD_Tab[14] & 0x10) >> 4;
 8007056:	7d63      	ldrb	r3, [r4, #21]
 8007058:	1111      	asrs	r1, r2, #4
 800705a:	f361 0300 	bfi	r3, r1, #0, #1
      Csd->FileFormat        = (CSD_Tab[14] & 0x0C) >> 2;
 800705e:	1091      	asrs	r1, r2, #2
 8007060:	f361 0342 	bfi	r3, r1, #1, #2
      Csd->Reserved4         = (CSD_Tab[14] & 0x03);
 8007064:	f362 03c4 	bfi	r3, r2, #3, #2
      Csd->crc               = (CSD_Tab[15] & 0xFE) >> 1;
 8007068:	f89d 201f 	ldrb.w	r2, [sp, #31]
      Csd->Reserved4         = (CSD_Tab[14] & 0x03);
 800706c:	7563      	strb	r3, [r4, #21]
      Csd->crc               = (CSD_Tab[15] & 0xFE) >> 1;
 800706e:	7da3      	ldrb	r3, [r4, #22]
 8007070:	0851      	lsrs	r1, r2, #1
 8007072:	f361 0306 	bfi	r3, r1, #0, #7
      Csd->Reserved5         = (CSD_Tab[15] & 0x01);
 8007076:	f362 13c7 	bfi	r3, r2, #7, #1
 800707a:	75a3      	strb	r3, [r4, #22]
 800707c:	e709      	b.n	8006e92 <BSP_SD_GetCardInfo+0x1e>
        Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0F) << 2) | ((CSD_Tab[7] & 0xC0) >> 6);
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	7a20      	ldrb	r0, [r4, #8]
 8007082:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8007086:	ea43 1391 	orr.w	r3, r3, r1, lsr #6
 800708a:	f363 0005 	bfi	r0, r3, #0, #6
        Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3F) << 16) | (CSD_Tab[8] << 8) | CSD_Tab[9];    
 800708e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
        Csd->version.v2.Reserved1 = ((CSD_Tab[6] & 0x0F) << 2) | ((CSD_Tab[7] & 0xC0) >> 6);
 8007092:	7220      	strb	r0, [r4, #8]
        Csd->version.v2.DeviceSize= ((CSD_Tab[7] & 0x3F) << 16) | (CSD_Tab[8] << 8) | CSD_Tab[9];    
 8007094:	ba5b      	rev16	r3, r3
 8007096:	0409      	lsls	r1, r1, #16
 8007098:	f401 117c 	and.w	r1, r1, #4128768	; 0x3f0000
 800709c:	b29b      	uxth	r3, r3
 800709e:	430b      	orrs	r3, r1
 80070a0:	68a1      	ldr	r1, [r4, #8]
 80070a2:	f363 119b 	bfi	r1, r3, #6, #22
 80070a6:	60a1      	str	r1, [r4, #8]
        Csd->version.v2.Reserved2 = ((CSD_Tab[10] & 0x80) >> 8);
 80070a8:	0e09      	lsrs	r1, r1, #24
 80070aa:	f36f 1104 	bfc	r1, #4, #1
 80070ae:	72e1      	strb	r1, [r4, #11]
 80070b0:	e794      	b.n	8006fdc <BSP_SD_GetCardInfo+0x168>
    if(SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 80070b2:	f7ff fe05 	bl	8006cc0 <SD_WaitData.constprop.0>
 80070b6:	4606      	mov	r6, r0
 80070b8:	2800      	cmp	r0, #0
 80070ba:	f47f aefc 	bne.w	8006eb6 <BSP_SD_GetCardInfo+0x42>
 80070be:	4607      	mov	r7, r0
        CID_Tab[counter] = SD_IO_WriteByte(SD_DUMMY_BYTE);
 80070c0:	f10d 0810 	add.w	r8, sp, #16
 80070c4:	20ff      	movs	r0, #255	; 0xff
 80070c6:	f000 fb53 	bl	8007770 <SD_IO_WriteByte>
 80070ca:	f808 0007 	strb.w	r0, [r8, r7]
      for (counter = 0; counter < 16; counter++)
 80070ce:	3701      	adds	r7, #1
 80070d0:	2f10      	cmp	r7, #16
 80070d2:	d1f7      	bne.n	80070c4 <BSP_SD_GetCardInfo+0x250>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80070d4:	20ff      	movs	r0, #255	; 0xff
 80070d6:	f000 fb4b 	bl	8007770 <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 80070da:	20ff      	movs	r0, #255	; 0xff
 80070dc:	f000 fb48 	bl	8007770 <SD_IO_WriteByte>
      Cid->ManufacturerID = CID_Tab[0];
 80070e0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80070e4:	7623      	strb	r3, [r4, #24]
      Cid->OEM_AppliID = CID_Tab[1] << 8;
 80070e6:	f89d 3011 	ldrb.w	r3, [sp, #17]
      Cid->OEM_AppliID |= CID_Tab[2];
 80070ea:	f89d 2012 	ldrb.w	r2, [sp, #18]
      Cid->OEM_AppliID = CID_Tab[1] << 8;
 80070ee:	021b      	lsls	r3, r3, #8
 80070f0:	8363      	strh	r3, [r4, #26]
      Cid->OEM_AppliID |= CID_Tab[2];
 80070f2:	8b63      	ldrh	r3, [r4, #26]
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	4313      	orrs	r3, r2
 80070f8:	8363      	strh	r3, [r4, #26]
      Cid->ProdName1 = CID_Tab[3] << 24;
 80070fa:	f89d 3013 	ldrb.w	r3, [sp, #19]
      Cid->ProdName1 |= CID_Tab[4] << 16;
 80070fe:	f89d 2014 	ldrb.w	r2, [sp, #20]
      Cid->ProdName1 = CID_Tab[3] << 24;
 8007102:	061b      	lsls	r3, r3, #24
 8007104:	61e3      	str	r3, [r4, #28]
      Cid->ProdName1 |= CID_Tab[4] << 16;
 8007106:	69e3      	ldr	r3, [r4, #28]
 8007108:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800710c:	61e3      	str	r3, [r4, #28]
      Cid->ProdName1 |= CID_Tab[5] << 8;
 800710e:	69e3      	ldr	r3, [r4, #28]
 8007110:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8007114:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007118:	61e3      	str	r3, [r4, #28]
      Cid->ProdName1 |= CID_Tab[6];
 800711a:	69e2      	ldr	r2, [r4, #28]
 800711c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8007120:	4313      	orrs	r3, r2
 8007122:	61e3      	str	r3, [r4, #28]
      Cid->ProdName2 = CID_Tab[7];
 8007124:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8007128:	f884 3020 	strb.w	r3, [r4, #32]
      Cid->ProdRev = CID_Tab[8];
 800712c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8007130:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
      Cid->ProdSN = CID_Tab[9] << 24;
 8007134:	f89d 3019 	ldrb.w	r3, [sp, #25]
      Cid->ProdSN |= CID_Tab[10] << 16;
 8007138:	f89d 201a 	ldrb.w	r2, [sp, #26]
      Cid->ProdSN = CID_Tab[9] << 24;
 800713c:	061b      	lsls	r3, r3, #24
 800713e:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->ProdSN |= CID_Tab[10] << 16;
 8007140:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007142:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007146:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->ProdSN |= CID_Tab[11] << 8;
 8007148:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800714a:	f89d 201b 	ldrb.w	r2, [sp, #27]
 800714e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007152:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->ProdSN |= CID_Tab[12];
 8007154:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007156:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800715a:	4313      	orrs	r3, r2
 800715c:	6263      	str	r3, [r4, #36]	; 0x24
      Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 800715e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8007162:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8007166:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
      Cid->ManufactDate = (CID_Tab[13] & 0x0F) << 8;
 800716a:	021b      	lsls	r3, r3, #8
 800716c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      Cid->Reserved1 |= (CID_Tab[13] & 0xF0) >> 4;
 8007170:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
      Cid->ManufactDate = (CID_Tab[13] & 0x0F) << 8;
 8007174:	8563      	strh	r3, [r4, #42]	; 0x2a
      Cid->ManufactDate |= CID_Tab[14];
 8007176:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007178:	f89d 201e 	ldrb.w	r2, [sp, #30]
 800717c:	b29b      	uxth	r3, r3
 800717e:	4313      	orrs	r3, r2
 8007180:	8563      	strh	r3, [r4, #42]	; 0x2a
      Cid->CID_CRC = (CID_Tab[15] & 0xFE) >> 1;
 8007182:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8007186:	085b      	lsrs	r3, r3, #1
 8007188:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
      Cid->Reserved2 = 1;
 800718c:	2301      	movs	r3, #1
 800718e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8007192:	e691      	b.n	8006eb8 <BSP_SD_GetCardInfo+0x44>
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 8007194:	8923      	ldrh	r3, [r4, #8]
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 8007196:	7b22      	ldrb	r2, [r4, #12]
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 8007198:	f3c3 038b 	ubfx	r3, r3, #2, #12
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 800719c:	f002 0207 	and.w	r2, r2, #7
 80071a0:	3202      	adds	r2, #2
    pCardInfo->CardCapacity = (pCardInfo->Csd.version.v1.DeviceSize + 1) ;
 80071a2:	3301      	adds	r3, #1
    pCardInfo->CardCapacity *= (1 << (pCardInfo->Csd.version.v1.DeviceSizeMul + 2));
 80071a4:	4093      	lsls	r3, r2
    pCardInfo->CardBlockSize = 1 << (pCardInfo->Csd.RdBlockLen);
 80071a6:	7962      	ldrb	r2, [r4, #5]
 80071a8:	2101      	movs	r1, #1
 80071aa:	0912      	lsrs	r2, r2, #4
 80071ac:	4091      	lsls	r1, r2
 80071ae:	6361      	str	r1, [r4, #52]	; 0x34
    pCardInfo->CardCapacity *= pCardInfo->CardBlockSize;
 80071b0:	4093      	lsls	r3, r2
 80071b2:	e696      	b.n	8006ee2 <BSP_SD_GetCardInfo+0x6e>
 80071b4:	2000029a 	.word	0x2000029a

080071b8 <BSP_SD_ReadBlocks>:
{
 80071b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071bc:	b085      	sub	sp, #20
 80071be:	4698      	mov	r8, r3
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 80071c0:	2300      	movs	r3, #0
 80071c2:	9300      	str	r3, [sp, #0]
{
 80071c4:	4604      	mov	r4, r0
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 80071c6:	23ff      	movs	r3, #255	; 0xff
 80071c8:	a802      	add	r0, sp, #8
{
 80071ca:	4689      	mov	r9, r1
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 80071cc:	2110      	movs	r1, #16
{
 80071ce:	4616      	mov	r6, r2
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 80071d0:	f7ff fd04 	bl	8006bdc <SD_SendCmd>
 80071d4:	f89d 5008 	ldrb.w	r5, [sp, #8]
  SD_IO_CSState(1);
 80071d8:	2001      	movs	r0, #1
 80071da:	f000 faa5 	bl	8007728 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 80071de:	20ff      	movs	r0, #255	; 0xff
 80071e0:	f000 fac6 	bl	8007770 <SD_IO_WriteByte>
  if ( response.r1 != SD_R1_NO_ERROR)
 80071e4:	b115      	cbz	r5, 80071ec <BSP_SD_ReadBlocks+0x34>
  uint8_t *ptr = NULL;
 80071e6:	2700      	movs	r7, #0
  uint8_t retr = BSP_SD_ERROR;
 80071e8:	2501      	movs	r5, #1
 80071ea:	e011      	b.n	8007210 <BSP_SD_ReadBlocks+0x58>
  ptr = malloc(sizeof(uint8_t)*BlockSize);
 80071ec:	4630      	mov	r0, r6
 80071ee:	f000 fc91 	bl	8007b14 <malloc>
  if( ptr == NULL )
 80071f2:	4607      	mov	r7, r0
 80071f4:	2800      	cmp	r0, #0
 80071f6:	d0f6      	beq.n	80071e6 <BSP_SD_ReadBlocks+0x2e>
  memset(ptr, SD_DUMMY_BYTE, sizeof(uint8_t)*BlockSize);
 80071f8:	4632      	mov	r2, r6
 80071fa:	21ff      	movs	r1, #255	; 0xff
 80071fc:	f000 fca5 	bl	8007b4a <memset>
    response = SD_SendCmd(SD_CMD_READ_SINGLE_BLOCK, (ReadAddr + offset)/(flag_SDHC == 1 ?BlockSize: 1), 0xFF, SD_ANSWER_R1_EXPECTED);
 8007200:	f8df a084 	ldr.w	sl, [pc, #132]	; 8007288 <BSP_SD_ReadBlocks+0xd0>
 8007204:	eba9 0904 	sub.w	r9, r9, r4
 8007208:	46ab      	mov	fp, r5
  while (NumberOfBlocks--)
 800720a:	f1b8 0f00 	cmp.w	r8, #0
 800720e:	d10d      	bne.n	800722c <BSP_SD_ReadBlocks+0x74>
  SD_IO_CSState(1);
 8007210:	2001      	movs	r0, #1
 8007212:	f000 fa89 	bl	8007728 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 8007216:	20ff      	movs	r0, #255	; 0xff
 8007218:	f000 faaa 	bl	8007770 <SD_IO_WriteByte>
  if(ptr != NULL) free(ptr);
 800721c:	b117      	cbz	r7, 8007224 <BSP_SD_ReadBlocks+0x6c>
 800721e:	4638      	mov	r0, r7
 8007220:	f000 fc80 	bl	8007b24 <free>
}
 8007224:	4628      	mov	r0, r5
 8007226:	b005      	add	sp, #20
 8007228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    response = SD_SendCmd(SD_CMD_READ_SINGLE_BLOCK, (ReadAddr + offset)/(flag_SDHC == 1 ?BlockSize: 1), 0xFF, SD_ANSWER_R1_EXPECTED);
 800722c:	f8ba 3000 	ldrh.w	r3, [sl]
 8007230:	f8cd b000 	str.w	fp, [sp]
 8007234:	2b01      	cmp	r3, #1
 8007236:	bf0c      	ite	eq
 8007238:	4631      	moveq	r1, r6
 800723a:	2101      	movne	r1, #1
 800723c:	23ff      	movs	r3, #255	; 0xff
 800723e:	eb09 0204 	add.w	r2, r9, r4
 8007242:	a802      	add	r0, sp, #8
 8007244:	fbb2 f2f1 	udiv	r2, r2, r1
 8007248:	2111      	movs	r1, #17
 800724a:	f7ff fcc7 	bl	8006bdc <SD_SendCmd>
    if ( response.r1 != SD_R1_NO_ERROR)
 800724e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1c8      	bne.n	80071e8 <BSP_SD_ReadBlocks+0x30>
    if (SD_WaitData(SD_TOKEN_START_DATA_SINGLE_BLOCK_READ) == BSP_SD_OK)
 8007256:	f7ff fd33 	bl	8006cc0 <SD_WaitData.constprop.0>
 800725a:	f108 38ff 	add.w	r8, r8, #4294967295
 800725e:	2800      	cmp	r0, #0
 8007260:	d1c2      	bne.n	80071e8 <BSP_SD_ReadBlocks+0x30>
      SD_IO_WriteReadData(ptr, (uint8_t*)pData + offset, BlockSize);
 8007262:	4621      	mov	r1, r4
 8007264:	4632      	mov	r2, r6
 8007266:	4638      	mov	r0, r7
 8007268:	f000 fa6a 	bl	8007740 <SD_IO_WriteReadData>
      SD_IO_WriteByte(SD_DUMMY_BYTE);
 800726c:	20ff      	movs	r0, #255	; 0xff
 800726e:	f000 fa7f 	bl	8007770 <SD_IO_WriteByte>
      SD_IO_WriteByte(SD_DUMMY_BYTE);      
 8007272:	20ff      	movs	r0, #255	; 0xff
 8007274:	f000 fa7c 	bl	8007770 <SD_IO_WriteByte>
    SD_IO_CSState(1);
 8007278:	2001      	movs	r0, #1
 800727a:	f000 fa55 	bl	8007728 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 800727e:	20ff      	movs	r0, #255	; 0xff
 8007280:	f000 fa76 	bl	8007770 <SD_IO_WriteByte>
 8007284:	4434      	add	r4, r6
 8007286:	e7c0      	b.n	800720a <BSP_SD_ReadBlocks+0x52>
 8007288:	2000029a 	.word	0x2000029a

0800728c <BSP_SD_WriteBlocks>:
{
 800728c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007290:	b085      	sub	sp, #20
 8007292:	461f      	mov	r7, r3
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 8007294:	2300      	movs	r3, #0
 8007296:	9300      	str	r3, [sp, #0]
{
 8007298:	4604      	mov	r4, r0
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 800729a:	23ff      	movs	r3, #255	; 0xff
 800729c:	a802      	add	r0, sp, #8
{
 800729e:	468a      	mov	sl, r1
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 80072a0:	2110      	movs	r1, #16
{
 80072a2:	4616      	mov	r6, r2
  response = SD_SendCmd(SD_CMD_SET_BLOCKLEN, BlockSize, 0xFF, SD_ANSWER_R1_EXPECTED);
 80072a4:	f7ff fc9a 	bl	8006bdc <SD_SendCmd>
 80072a8:	f89d 5008 	ldrb.w	r5, [sp, #8]
  SD_IO_CSState(1);
 80072ac:	2001      	movs	r0, #1
 80072ae:	f000 fa3b 	bl	8007728 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 80072b2:	20ff      	movs	r0, #255	; 0xff
 80072b4:	f000 fa5c 	bl	8007770 <SD_IO_WriteByte>
  if ( response.r1 != SD_R1_NO_ERROR)
 80072b8:	b155      	cbz	r5, 80072d0 <BSP_SD_WriteBlocks+0x44>
  uint8_t retr = BSP_SD_ERROR;
 80072ba:	2501      	movs	r5, #1
  SD_IO_CSState(1);    
 80072bc:	2001      	movs	r0, #1
 80072be:	f000 fa33 	bl	8007728 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 80072c2:	20ff      	movs	r0, #255	; 0xff
 80072c4:	f000 fa54 	bl	8007770 <SD_IO_WriteByte>
}
 80072c8:	4628      	mov	r0, r5
 80072ca:	b005      	add	sp, #20
 80072cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  ptr = malloc(sizeof(uint8_t)*BlockSize);
 80072d0:	4630      	mov	r0, r6
 80072d2:	f000 fc1f 	bl	8007b14 <malloc>
  if (ptr == NULL)
 80072d6:	4680      	mov	r8, r0
 80072d8:	2800      	cmp	r0, #0
 80072da:	d0ee      	beq.n	80072ba <BSP_SD_WriteBlocks+0x2e>
 80072dc:	ebaa 0a04 	sub.w	sl, sl, r4
  while (NumberOfBlocks--)
 80072e0:	b91f      	cbnz	r7, 80072ea <BSP_SD_WriteBlocks+0x5e>
  if(ptr != NULL) free(ptr);
 80072e2:	4640      	mov	r0, r8
 80072e4:	f000 fc1e 	bl	8007b24 <free>
 80072e8:	e7e8      	b.n	80072bc <BSP_SD_WriteBlocks+0x30>
    response = SD_SendCmd(SD_CMD_WRITE_SINGLE_BLOCK, (WriteAddr + offset)/(flag_SDHC == 1 ? BlockSize: 1), 0xFF, SD_ANSWER_R1_EXPECTED);
 80072ea:	4b26      	ldr	r3, [pc, #152]	; (8007384 <BSP_SD_WriteBlocks+0xf8>)
 80072ec:	881b      	ldrh	r3, [r3, #0]
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	f04f 0300 	mov.w	r3, #0
 80072f4:	bf0c      	ite	eq
 80072f6:	4631      	moveq	r1, r6
 80072f8:	2101      	movne	r1, #1
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	eb0a 0204 	add.w	r2, sl, r4
 8007300:	23ff      	movs	r3, #255	; 0xff
 8007302:	fbb2 f2f1 	udiv	r2, r2, r1
 8007306:	a802      	add	r0, sp, #8
 8007308:	2118      	movs	r1, #24
 800730a:	f7ff fc67 	bl	8006bdc <SD_SendCmd>
    if (response.r1 != SD_R1_NO_ERROR)
 800730e:	f89d 9008 	ldrb.w	r9, [sp, #8]
 8007312:	f1b9 0f00 	cmp.w	r9, #0
 8007316:	d133      	bne.n	8007380 <BSP_SD_WriteBlocks+0xf4>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8007318:	20ff      	movs	r0, #255	; 0xff
 800731a:	f000 fa29 	bl	8007770 <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 800731e:	20ff      	movs	r0, #255	; 0xff
 8007320:	f000 fa26 	bl	8007770 <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_TOKEN_START_DATA_SINGLE_BLOCK_WRITE);
 8007324:	20fe      	movs	r0, #254	; 0xfe
 8007326:	f000 fa23 	bl	8007770 <SD_IO_WriteByte>
    SD_IO_WriteReadData((uint8_t*)pData + offset, ptr, BlockSize);
 800732a:	4632      	mov	r2, r6
 800732c:	4641      	mov	r1, r8
 800732e:	4620      	mov	r0, r4
 8007330:	f000 fa06 	bl	8007740 <SD_IO_WriteReadData>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8007334:	20ff      	movs	r0, #255	; 0xff
 8007336:	f000 fa1b 	bl	8007770 <SD_IO_WriteByte>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 800733a:	20ff      	movs	r0, #255	; 0xff
 800733c:	f000 fa18 	bl	8007770 <SD_IO_WriteByte>
  dataresponse = SD_IO_WriteByte(SD_DUMMY_BYTE);
 8007340:	20ff      	movs	r0, #255	; 0xff
 8007342:	f000 fa15 	bl	8007770 <SD_IO_WriteByte>
 8007346:	4683      	mov	fp, r0
  SD_IO_WriteByte(SD_DUMMY_BYTE); /* read the busy response byte*/
 8007348:	20ff      	movs	r0, #255	; 0xff
 800734a:	f000 fa11 	bl	8007770 <SD_IO_WriteByte>
  switch (dataresponse & 0x1F)
 800734e:	f00b 031f 	and.w	r3, fp, #31
 8007352:	2b05      	cmp	r3, #5
 8007354:	d114      	bne.n	8007380 <BSP_SD_WriteBlocks+0xf4>
    SD_IO_CSState(1);
 8007356:	2001      	movs	r0, #1
 8007358:	f000 f9e6 	bl	8007728 <SD_IO_CSState>
    SD_IO_CSState(0);
 800735c:	4648      	mov	r0, r9
 800735e:	f000 f9e3 	bl	8007728 <SD_IO_CSState>
    while (SD_IO_WriteByte(SD_DUMMY_BYTE) != 0xFF);
 8007362:	20ff      	movs	r0, #255	; 0xff
 8007364:	f000 fa04 	bl	8007770 <SD_IO_WriteByte>
 8007368:	28ff      	cmp	r0, #255	; 0xff
 800736a:	4681      	mov	r9, r0
 800736c:	d1f9      	bne.n	8007362 <BSP_SD_WriteBlocks+0xd6>
    SD_IO_CSState(1);    
 800736e:	2001      	movs	r0, #1
 8007370:	f000 f9da 	bl	8007728 <SD_IO_CSState>
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 8007374:	4648      	mov	r0, r9
 8007376:	f000 f9fb 	bl	8007770 <SD_IO_WriteByte>
 800737a:	3f01      	subs	r7, #1
 800737c:	4434      	add	r4, r6
 800737e:	e7af      	b.n	80072e0 <BSP_SD_WriteBlocks+0x54>
  uint8_t retr = BSP_SD_ERROR;
 8007380:	2501      	movs	r5, #1
 8007382:	e7ae      	b.n	80072e2 <BSP_SD_WriteBlocks+0x56>
 8007384:	2000029a 	.word	0x2000029a

08007388 <BSP_SD_GetStatus>:
{
 8007388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  retr = SD_SendCmd(SD_CMD_SEND_STATUS, 0, 0xFF, SD_ANSWER_R2_EXPECTED);
 800738a:	2302      	movs	r3, #2
 800738c:	2200      	movs	r2, #0
 800738e:	210d      	movs	r1, #13
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	a802      	add	r0, sp, #8
 8007394:	23ff      	movs	r3, #255	; 0xff
 8007396:	f7ff fc21 	bl	8006bdc <SD_SendCmd>
  SD_IO_CSState(1);    
 800739a:	2001      	movs	r0, #1
 800739c:	f000 f9c4 	bl	8007728 <SD_IO_CSState>
  SD_IO_WriteByte(SD_DUMMY_BYTE);
 80073a0:	20ff      	movs	r0, #255	; 0xff
 80073a2:	f000 f9e5 	bl	8007770 <SD_IO_WriteByte>
  if(( retr.r1 == SD_R1_NO_ERROR) && ( retr.r2 == SD_R2_NO_ERROR))
 80073a6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80073aa:	b93b      	cbnz	r3, 80073bc <BSP_SD_GetStatus+0x34>
 80073ac:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80073b0:	3000      	adds	r0, #0
 80073b2:	bf18      	it	ne
 80073b4:	2001      	movne	r0, #1
}
 80073b6:	b005      	add	sp, #20
 80073b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80073bc:	2001      	movs	r0, #1
 80073be:	e7fa      	b.n	80073b6 <BSP_SD_GetStatus+0x2e>

080073c0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073c0:	4b1d      	ldr	r3, [pc, #116]	; (8007438 <HAL_MspInit+0x78>)
{
 80073c2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073c4:	699a      	ldr	r2, [r3, #24]
 80073c6:	f042 0201 	orr.w	r2, r2, #1
 80073ca:	619a      	str	r2, [r3, #24]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80073d4:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073d6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80073d8:	f7f9 f94e 	bl	8000678 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80073dc:	2200      	movs	r2, #0
 80073de:	4611      	mov	r1, r2
 80073e0:	f06f 000b 	mvn.w	r0, #11
 80073e4:	f7f9 f95a 	bl	800069c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80073e8:	2200      	movs	r2, #0
 80073ea:	4611      	mov	r1, r2
 80073ec:	f06f 000a 	mvn.w	r0, #10
 80073f0:	f7f9 f954 	bl	800069c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80073f4:	2200      	movs	r2, #0
 80073f6:	4611      	mov	r1, r2
 80073f8:	f06f 0009 	mvn.w	r0, #9
 80073fc:	f7f9 f94e 	bl	800069c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8007400:	2200      	movs	r2, #0
 8007402:	4611      	mov	r1, r2
 8007404:	f06f 0004 	mvn.w	r0, #4
 8007408:	f7f9 f948 	bl	800069c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800740c:	2200      	movs	r2, #0
 800740e:	4611      	mov	r1, r2
 8007410:	f06f 0003 	mvn.w	r0, #3
 8007414:	f7f9 f942 	bl	800069c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8007418:	2200      	movs	r2, #0
 800741a:	4611      	mov	r1, r2
 800741c:	f06f 0001 	mvn.w	r0, #1
 8007420:	f7f9 f93c 	bl	800069c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8007424:	2200      	movs	r2, #0
 8007426:	4611      	mov	r1, r2
 8007428:	f04f 30ff 	mov.w	r0, #4294967295
 800742c:	f7f9 f936 	bl	800069c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007430:	b003      	add	sp, #12
 8007432:	f85d fb04 	ldr.w	pc, [sp], #4
 8007436:	bf00      	nop
 8007438:	40021000 	.word	0x40021000

0800743c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800743c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800743e:	6802      	ldr	r2, [r0, #0]
 8007440:	4b0f      	ldr	r3, [pc, #60]	; (8007480 <HAL_I2C_MspInit+0x44>)
 8007442:	429a      	cmp	r2, r3
 8007444:	d119      	bne.n	800747a <HAL_I2C_MspInit+0x3e>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007446:	f44f 7340 	mov.w	r3, #768	; 0x300
 800744a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800744c:	2312      	movs	r3, #18
 800744e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007450:	2301      	movs	r3, #1
 8007452:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007454:	2303      	movs	r3, #3
 8007456:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007458:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800745a:	eb0d 0103 	add.w	r1, sp, r3
 800745e:	4809      	ldr	r0, [pc, #36]	; (8007484 <HAL_I2C_MspInit+0x48>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007460:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007462:	f7f9 f981 	bl	8000768 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007466:	4b08      	ldr	r3, [pc, #32]	; (8007488 <HAL_I2C_MspInit+0x4c>)
 8007468:	69da      	ldr	r2, [r3, #28]
 800746a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800746e:	61da      	str	r2, [r3, #28]
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800747a:	b007      	add	sp, #28
 800747c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007480:	40005400 	.word	0x40005400
 8007484:	48000400 	.word	0x48000400
 8007488:	40021000 	.word	0x40021000

0800748c <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 800748c:	6802      	ldr	r2, [r0, #0]
 800748e:	4b07      	ldr	r3, [pc, #28]	; (80074ac <HAL_RTC_MspInit+0x20>)
 8007490:	429a      	cmp	r2, r3
 8007492:	d10a      	bne.n	80074aa <HAL_RTC_MspInit+0x1e>
 8007494:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007498:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800749c:	4b04      	ldr	r3, [pc, #16]	; (80074b0 <HAL_RTC_MspInit+0x24>)
 800749e:	fab2 f282 	clz	r2, r2
 80074a2:	4413      	add	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	2201      	movs	r2, #1
 80074a8:	601a      	str	r2, [r3, #0]
 80074aa:	4770      	bx	lr
 80074ac:	40002800 	.word	0x40002800
 80074b0:	10908100 	.word	0x10908100

080074b4 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80074b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80074b6:	6802      	ldr	r2, [r0, #0]
 80074b8:	4b0f      	ldr	r3, [pc, #60]	; (80074f8 <HAL_SPI_MspInit+0x44>)
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d119      	bne.n	80074f2 <HAL_SPI_MspInit+0x3e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80074be:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074c2:	a901      	add	r1, sp, #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80074c4:	699a      	ldr	r2, [r3, #24]
 80074c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80074ca:	619a      	str	r2, [r3, #24]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80074d6:	23e0      	movs	r3, #224	; 0xe0
 80074d8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074da:	2302      	movs	r3, #2
 80074dc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074de:	2300      	movs	r3, #0
 80074e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80074e2:	2303      	movs	r3, #3
 80074e4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80074ea:	2305      	movs	r3, #5
 80074ec:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074ee:	f7f9 f93b 	bl	8000768 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80074f2:	b007      	add	sp, #28
 80074f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80074f8:	40013000 	.word	0x40013000

080074fc <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{

  if(hspi->Instance==SPI1)
 80074fc:	6802      	ldr	r2, [r0, #0]
 80074fe:	4b07      	ldr	r3, [pc, #28]	; (800751c <HAL_SPI_MspDeInit+0x20>)
 8007500:	429a      	cmp	r2, r3
 8007502:	d109      	bne.n	8007518 <HAL_SPI_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8007504:	4a06      	ldr	r2, [pc, #24]	; (8007520 <HAL_SPI_MspDeInit+0x24>)
 8007506:	6993      	ldr	r3, [r2, #24]
 8007508:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800750c:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800750e:	21e0      	movs	r1, #224	; 0xe0
 8007510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007514:	f7f9 b9f8 	b.w	8000908 <HAL_GPIO_DeInit>
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	40013000 	.word	0x40013000
 8007520:	40021000 	.word	0x40021000

08007524 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8007524:	6803      	ldr	r3, [r0, #0]
 8007526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800752a:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM2)
 800752c:	d10c      	bne.n	8007548 <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800752e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8007532:	69da      	ldr	r2, [r3, #28]
 8007534:	f042 0201 	orr.w	r2, r2, #1
 8007538:	61da      	str	r2, [r3, #28]
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	f003 0301 	and.w	r3, r3, #1
 8007540:	9301      	str	r3, [sp, #4]
 8007542:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8007544:	b004      	add	sp, #16
 8007546:	4770      	bx	lr
  else if(htim_base->Instance==TIM3)
 8007548:	4a0d      	ldr	r2, [pc, #52]	; (8007580 <HAL_TIM_Base_MspInit+0x5c>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d10a      	bne.n	8007564 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800754e:	4b0d      	ldr	r3, [pc, #52]	; (8007584 <HAL_TIM_Base_MspInit+0x60>)
 8007550:	69da      	ldr	r2, [r3, #28]
 8007552:	f042 0202 	orr.w	r2, r2, #2
 8007556:	61da      	str	r2, [r3, #28]
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	9302      	str	r3, [sp, #8]
 8007560:	9b02      	ldr	r3, [sp, #8]
 8007562:	e7ef      	b.n	8007544 <HAL_TIM_Base_MspInit+0x20>
  else if(htim_base->Instance==TIM16)
 8007564:	4a08      	ldr	r2, [pc, #32]	; (8007588 <HAL_TIM_Base_MspInit+0x64>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d1ec      	bne.n	8007544 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800756a:	4b06      	ldr	r3, [pc, #24]	; (8007584 <HAL_TIM_Base_MspInit+0x60>)
 800756c:	699a      	ldr	r2, [r3, #24]
 800756e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007572:	619a      	str	r2, [r3, #24]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800757a:	9303      	str	r3, [sp, #12]
 800757c:	9b03      	ldr	r3, [sp, #12]
}
 800757e:	e7e1      	b.n	8007544 <HAL_TIM_Base_MspInit+0x20>
 8007580:	40000400 	.word	0x40000400
 8007584:	40021000 	.word	0x40021000
 8007588:	40014400 	.word	0x40014400

0800758c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800758c:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART4)
 800758e:	6803      	ldr	r3, [r0, #0]
 8007590:	4a1d      	ldr	r2, [pc, #116]	; (8007608 <HAL_UART_MspInit+0x7c>)
 8007592:	4293      	cmp	r3, r2
{
 8007594:	b089      	sub	sp, #36	; 0x24
  if(huart->Instance==UART4)
 8007596:	d11b      	bne.n	80075d0 <HAL_UART_MspInit+0x44>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8007598:	4b1c      	ldr	r3, [pc, #112]	; (800760c <HAL_UART_MspInit+0x80>)
    GPIO_InitStruct.Pin = Debug_TX_Pin|Debug_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800759a:	481d      	ldr	r0, [pc, #116]	; (8007610 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_UART4_CLK_ENABLE();
 800759c:	69da      	ldr	r2, [r3, #28]
 800759e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80075a2:	61da      	str	r2, [r3, #28]
 80075a4:	69db      	ldr	r3, [r3, #28]
 80075a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075aa:	9301      	str	r3, [sp, #4]
 80075ac:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = Debug_TX_Pin|Debug_RX_Pin;
 80075ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80075b2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075b4:	2302      	movs	r3, #2
 80075b6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b8:	2300      	movs	r3, #0
 80075ba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80075bc:	2303      	movs	r3, #3
 80075be:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80075c0:	2305      	movs	r3, #5
 80075c2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80075c4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075c6:	f7f9 f8cf 	bl	8000768 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80075ca:	b009      	add	sp, #36	; 0x24
 80075cc:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(huart->Instance==USART1)
 80075d0:	4a10      	ldr	r2, [pc, #64]	; (8007614 <HAL_UART_MspInit+0x88>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d1f9      	bne.n	80075ca <HAL_UART_MspInit+0x3e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80075d6:	4b0d      	ldr	r3, [pc, #52]	; (800760c <HAL_UART_MspInit+0x80>)
 80075d8:	699a      	ldr	r2, [r3, #24]
 80075da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075de:	619a      	str	r2, [r3, #24]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075e6:	9302      	str	r3, [sp, #8]
 80075e8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 80075ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80075ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075f0:	2302      	movs	r3, #2
 80075f2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075f4:	2300      	movs	r3, #0
 80075f6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80075f8:	2303      	movs	r3, #3
 80075fa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80075fc:	2307      	movs	r3, #7
 80075fe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007600:	a903      	add	r1, sp, #12
 8007602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007606:	e7de      	b.n	80075c6 <HAL_UART_MspInit+0x3a>
 8007608:	40004c00 	.word	0x40004c00
 800760c:	40021000 	.word	0x40021000
 8007610:	48000800 	.word	0x48000800
 8007614:	40013800 	.word	0x40013800

08007618 <NMI_Handler>:
 8007618:	4770      	bx	lr

0800761a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800761a:	e7fe      	b.n	800761a <HardFault_Handler>

0800761c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800761c:	e7fe      	b.n	800761c <MemManage_Handler>

0800761e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800761e:	e7fe      	b.n	800761e <BusFault_Handler>

08007620 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8007620:	e7fe      	b.n	8007620 <UsageFault_Handler>

08007622 <SVC_Handler>:
 8007622:	4770      	bx	lr

08007624 <DebugMon_Handler>:
 8007624:	4770      	bx	lr

08007626 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8007626:	4770      	bx	lr

08007628 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8007628:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800762a:	f7f9 f807 	bl	800063c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800762e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8007632:	f7f9 b895 	b.w	8000760 <HAL_SYSTICK_IRQHandler>

08007636 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8007636:	2080      	movs	r0, #128	; 0x80
 8007638:	f7f9 b9fa 	b.w	8000a30 <HAL_GPIO_EXTI_IRQHandler>

0800763c <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800763c:	4801      	ldr	r0, [pc, #4]	; (8007644 <TIM1_UP_TIM16_IRQHandler+0x8>)
 800763e:	f7fb b807 	b.w	8002650 <HAL_TIM_IRQHandler>
 8007642:	bf00      	nop
 8007644:	200022d8 	.word	0x200022d8

08007648 <SPIx_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval None
  */
static void SPIx_Init(void)
{
 8007648:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(HAL_SPI_GetState(&hnucleo_Spi) == HAL_SPI_STATE_RESET)
 800764a:	4c2f      	ldr	r4, [pc, #188]	; (8007708 <SPIx_Init+0xc0>)
{
 800764c:	b089      	sub	sp, #36	; 0x24
  if(HAL_SPI_GetState(&hnucleo_Spi) == HAL_SPI_STATE_RESET)
 800764e:	4620      	mov	r0, r4
 8007650:	f7fa ffa4 	bl	800259c <HAL_SPI_GetState>
 8007654:	2800      	cmp	r0, #0
 8007656:	d154      	bne.n	8007702 <SPIx_Init+0xba>
  {
    /* SPI Config */
    hnucleo_Spi.Instance = NUCLEO_SPIx;
 8007658:	4b2c      	ldr	r3, [pc, #176]	; (800770c <SPIx_Init+0xc4>)
 800765a:	6023      	str	r3, [r4, #0]
            on write baudrate is considered.
          - SD card SPI interface max baudrate is 25MHz for write/read
          - PCLK1 max frequency is 32 MHz 
          - PCLK2 max frequency is 64 MHz 
       */ 
    hnucleo_Spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800765c:	2308      	movs	r3, #8
 800765e:	61e3      	str	r3, [r4, #28]
    hnucleo_Spi.Init.Direction = SPI_DIRECTION_2LINES;
    hnucleo_Spi.Init.CLKPhase = SPI_PHASE_2EDGE;
    hnucleo_Spi.Init.CLKPolarity = SPI_POLARITY_HIGH;
    hnucleo_Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
    hnucleo_Spi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
    hnucleo_Spi.Init.CRCPolynomial = 7;
 8007660:	2307      	movs	r3, #7
 8007662:	62e3      	str	r3, [r4, #44]	; 0x2c
    hnucleo_Spi.Init.DataSize = SPI_DATASIZE_8BIT;
 8007664:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8007668:	60e3      	str	r3, [r4, #12]
    hnucleo_Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
    hnucleo_Spi.Init.NSS = SPI_NSS_SOFT;
 800766a:	f44f 7300 	mov.w	r3, #512	; 0x200
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 800766e:	4d28      	ldr	r5, [pc, #160]	; (8007710 <SPIx_Init+0xc8>)
    hnucleo_Spi.Init.NSS = SPI_NSS_SOFT;
 8007670:	61a3      	str	r3, [r4, #24]
    hnucleo_Spi.Init.CLKPhase = SPI_PHASE_2EDGE;
 8007672:	2201      	movs	r2, #1
    hnucleo_Spi.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8007674:	2602      	movs	r6, #2
    hnucleo_Spi.Init.TIMode = SPI_TIMODE_DISABLE;
    hnucleo_Spi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
    hnucleo_Spi.Init.Mode = SPI_MODE_MASTER;
 8007676:	f44f 7382 	mov.w	r3, #260	; 0x104
    hnucleo_Spi.Init.CLKPhase = SPI_PHASE_2EDGE;
 800767a:	6162      	str	r2, [r4, #20]
    hnucleo_Spi.Init.Direction = SPI_DIRECTION_2LINES;
 800767c:	60a0      	str	r0, [r4, #8]
    hnucleo_Spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800767e:	62a0      	str	r0, [r4, #40]	; 0x28
    hnucleo_Spi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007680:	6320      	str	r0, [r4, #48]	; 0x30
    hnucleo_Spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007682:	6220      	str	r0, [r4, #32]
    hnucleo_Spi.Init.TIMode = SPI_TIMODE_DISABLE;
 8007684:	6260      	str	r0, [r4, #36]	; 0x24
    hnucleo_Spi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8007686:	6360      	str	r0, [r4, #52]	; 0x34
    hnucleo_Spi.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8007688:	6126      	str	r6, [r4, #16]
    hnucleo_Spi.Init.Mode = SPI_MODE_MASTER;
 800768a:	6063      	str	r3, [r4, #4]
  NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE();
 800768c:	696b      	ldr	r3, [r5, #20]
 800768e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007692:	616b      	str	r3, [r5, #20]
 8007694:	696b      	ldr	r3, [r5, #20]
 8007696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	9b00      	ldr	r3, [sp, #0]
  NUCLEO_SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 800769e:	696b      	ldr	r3, [r5, #20]
 80076a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076a4:	616b      	str	r3, [r5, #20]
 80076a6:	696b      	ldr	r3, [r5, #20]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80076a8:	9205      	str	r2, [sp, #20]
  NUCLEO_SPIx_MISO_MOSI_GPIO_CLK_ENABLE();
 80076aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ae:	9301      	str	r3, [sp, #4]
 80076b0:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076b2:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pin = NUCLEO_SPIx_SCK_PIN;
 80076b4:	2320      	movs	r3, #32
 80076b6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = NUCLEO_SPIx_SCK_AF;
 80076b8:	2705      	movs	r7, #5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80076ba:	2303      	movs	r3, #3
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 80076bc:	a903      	add	r1, sp, #12
 80076be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80076c2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Alternate = NUCLEO_SPIx_SCK_AF;
 80076c4:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(NUCLEO_SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 80076c6:	f7f9 f84f 	bl	8000768 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NUCLEO_SPIx_MOSI_PIN;
 80076ca:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80076cc:	a903      	add	r1, sp, #12
 80076ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = NUCLEO_SPIx_MOSI_PIN;
 80076d2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = NUCLEO_SPIx_MISO_MOSI_AF;
 80076d4:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 80076d6:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80076d8:	f7f9 f846 	bl	8000768 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NUCLEO_SPIx_MISO_PIN;
 80076dc:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80076de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80076e2:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = NUCLEO_SPIx_MISO_PIN;
 80076e4:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(NUCLEO_SPIx_MISO_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80076e6:	f7f9 f83f 	bl	8000768 <HAL_GPIO_Init>
  NUCLEO_SPIx_CLK_ENABLE();
 80076ea:	69ab      	ldr	r3, [r5, #24]
 80076ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80076f0:	61ab      	str	r3, [r5, #24]
 80076f2:	69ab      	ldr	r3, [r5, #24]
 80076f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076f8:	9302      	str	r3, [sp, #8]

    SPIx_MspInit(&hnucleo_Spi);
    HAL_SPI_Init(&hnucleo_Spi);
 80076fa:	4620      	mov	r0, r4
  NUCLEO_SPIx_CLK_ENABLE();
 80076fc:	9b02      	ldr	r3, [sp, #8]
    HAL_SPI_Init(&hnucleo_Spi);
 80076fe:	f7fa fdb6 	bl	800226e <HAL_SPI_Init>
  }
}
 8007702:	b009      	add	sp, #36	; 0x24
 8007704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007706:	bf00      	nop
 8007708:	2000029c 	.word	0x2000029c
 800770c:	40013000 	.word	0x40013000
 8007710:	40021000 	.word	0x40021000

08007714 <SPIx_Error>:
/**
  * @brief  SPI error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 8007714:	b508      	push	{r3, lr}
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&hnucleo_Spi);
 8007716:	4803      	ldr	r0, [pc, #12]	; (8007724 <SPIx_Error+0x10>)
 8007718:	f7fa fdfe 	bl	8002318 <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI communication BUS */
  SPIx_Init();
}
 800771c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SPIx_Init();
 8007720:	f7ff bf92 	b.w	8007648 <SPIx_Init>
 8007724:	2000029c 	.word	0x2000029c

08007728 <SD_IO_CSState>:
  * @param  val: pin value.
  * @retval None
  */
void SD_IO_CSState(uint8_t val)
{
  if(val == 1) 
 8007728:	2801      	cmp	r0, #1
{
 800772a:	4602      	mov	r2, r0
  {
    SD_CS_HIGH();
  }
  else
  {
    SD_CS_LOW();
 800772c:	f04f 0120 	mov.w	r1, #32
 8007730:	bf18      	it	ne
 8007732:	2200      	movne	r2, #0
 8007734:	4801      	ldr	r0, [pc, #4]	; (800773c <SD_IO_CSState+0x14>)
 8007736:	f7f9 b975 	b.w	8000a24 <HAL_GPIO_WritePin>
 800773a:	bf00      	nop
 800773c:	48000400 	.word	0x48000400

08007740 <SD_IO_WriteReadData>:
  * @param  DataOut: read value
  * @param  DataLength: length of data value
  * @retval None
  */
void SD_IO_WriteReadData(const uint8_t *DataIn, uint8_t *DataOut, uint16_t DataLength)
{
 8007740:	b507      	push	{r0, r1, r2, lr}
  status = HAL_SPI_TransmitReceive(&hnucleo_Spi, (uint8_t*) DataIn, DataOut, DataLegnth, SpixTimeout);
 8007742:	4b09      	ldr	r3, [pc, #36]	; (8007768 <SD_IO_WriteReadData+0x28>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	4613      	mov	r3, r2
 800774a:	460a      	mov	r2, r1
 800774c:	4601      	mov	r1, r0
 800774e:	4807      	ldr	r0, [pc, #28]	; (800776c <SD_IO_WriteReadData+0x2c>)
 8007750:	f7fa fdf8 	bl	8002344 <HAL_SPI_TransmitReceive>
  if(status != HAL_OK)
 8007754:	b120      	cbz	r0, 8007760 <SD_IO_WriteReadData+0x20>
//  /* SD chip select low */
//  SD_CS_LOW();
  /* Send the byte */
  SPIx_WriteReadData(DataIn, DataOut, DataLength);
}
 8007756:	b003      	add	sp, #12
 8007758:	f85d eb04 	ldr.w	lr, [sp], #4
    SPIx_Error();
 800775c:	f7ff bfda 	b.w	8007714 <SPIx_Error>
}
 8007760:	b003      	add	sp, #12
 8007762:	f85d fb04 	ldr.w	pc, [sp], #4
 8007766:	bf00      	nop
 8007768:	20000074 	.word	0x20000074
 800776c:	2000029c 	.word	0x2000029c

08007770 <SD_IO_WriteByte>:
  * @brief  Writes a byte on the SD.
  * @param  Data: byte to send.
  * @retval None
  */
uint8_t SD_IO_WriteByte(uint8_t Data)
{
 8007770:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_SPI_TransmitReceive(&hnucleo_Spi, (uint8_t*) DataIn, DataOut, DataLegnth, SpixTimeout);
 8007772:	4b0a      	ldr	r3, [pc, #40]	; (800779c <SD_IO_WriteByte+0x2c>)
{
 8007774:	f88d 000f 	strb.w	r0, [sp, #15]
  status = HAL_SPI_TransmitReceive(&hnucleo_Spi, (uint8_t*) DataIn, DataOut, DataLegnth, SpixTimeout);
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	f10d 0217 	add.w	r2, sp, #23
 8007780:	2301      	movs	r3, #1
 8007782:	f10d 010f 	add.w	r1, sp, #15
 8007786:	4806      	ldr	r0, [pc, #24]	; (80077a0 <SD_IO_WriteByte+0x30>)
 8007788:	f7fa fddc 	bl	8002344 <HAL_SPI_TransmitReceive>
  if(status != HAL_OK)
 800778c:	b108      	cbz	r0, 8007792 <SD_IO_WriteByte+0x22>
    SPIx_Error();
 800778e:	f7ff ffc1 	bl	8007714 <SPIx_Error>
  uint8_t tmp;
  /* Send the byte */
  SPIx_WriteReadData(&Data,&tmp,1);
  return tmp;
}
 8007792:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8007796:	b007      	add	sp, #28
 8007798:	f85d fb04 	ldr.w	pc, [sp], #4
 800779c:	20000074 	.word	0x20000074
 80077a0:	2000029c 	.word	0x2000029c

080077a4 <SD_IO_Init>:
  SD_CS_GPIO_CLK_ENABLE();
 80077a4:	4b13      	ldr	r3, [pc, #76]	; (80077f4 <SD_IO_Init+0x50>)
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &GPIO_InitStruct);
 80077a6:	4814      	ldr	r0, [pc, #80]	; (80077f8 <SD_IO_Init+0x54>)
  SD_CS_GPIO_CLK_ENABLE();
 80077a8:	695a      	ldr	r2, [r3, #20]
{
 80077aa:	b530      	push	{r4, r5, lr}
  SD_CS_GPIO_CLK_ENABLE();
 80077ac:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80077b0:	615a      	str	r2, [r3, #20]
 80077b2:	695b      	ldr	r3, [r3, #20]
{
 80077b4:	b087      	sub	sp, #28
  SD_CS_GPIO_CLK_ENABLE();
 80077b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077ba:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077bc:	2401      	movs	r4, #1
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &GPIO_InitStruct);
 80077be:	a901      	add	r1, sp, #4
  SD_CS_GPIO_CLK_ENABLE();
 80077c0:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077c2:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80077c4:	2303      	movs	r3, #3
  GPIO_InitStruct.Pin = SD_CS_PIN;
 80077c6:	2520      	movs	r5, #32
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80077c8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80077ca:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pin = SD_CS_PIN;
 80077cc:	9501      	str	r5, [sp, #4]
  HAL_GPIO_Init(SD_CS_GPIO_PORT, &GPIO_InitStruct);
 80077ce:	f7f8 ffcb 	bl	8000768 <HAL_GPIO_Init>
  SPIx_Init();
 80077d2:	f7ff ff39 	bl	8007648 <SPIx_Init>
  SD_CS_HIGH();
 80077d6:	4622      	mov	r2, r4
 80077d8:	4629      	mov	r1, r5
 80077da:	4807      	ldr	r0, [pc, #28]	; (80077f8 <SD_IO_Init+0x54>)
 80077dc:	f7f9 f922 	bl	8000a24 <HAL_GPIO_WritePin>
 80077e0:	240a      	movs	r4, #10
    SD_IO_WriteByte(SD_DUMMY_BYTE);
 80077e2:	20ff      	movs	r0, #255	; 0xff
 80077e4:	3c01      	subs	r4, #1
 80077e6:	f7ff ffc3 	bl	8007770 <SD_IO_WriteByte>
  for (counter = 0; counter <= 9; counter++)
 80077ea:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80077ee:	d1f8      	bne.n	80077e2 <SD_IO_Init+0x3e>
}
 80077f0:	b007      	add	sp, #28
 80077f2:	bd30      	pop	{r4, r5, pc}
 80077f4:	40021000 	.word	0x40021000
 80077f8:	48000400 	.word	0x48000400

080077fc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80077fc:	4915      	ldr	r1, [pc, #84]	; (8007854 <SystemInit+0x58>)
 80077fe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8007802:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800780a:	4b13      	ldr	r3, [pc, #76]	; (8007858 <SystemInit+0x5c>)
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	f042 0201 	orr.w	r2, r2, #1
 8007812:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8007814:	6858      	ldr	r0, [r3, #4]
 8007816:	4a11      	ldr	r2, [pc, #68]	; (800785c <SystemInit+0x60>)
 8007818:	4002      	ands	r2, r0
 800781a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8007822:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007826:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800782e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8007836:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8007838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800783a:	f022 020f 	bic.w	r2, r2, #15
 800783e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8007840:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007842:	4a07      	ldr	r2, [pc, #28]	; (8007860 <SystemInit+0x64>)
 8007844:	4002      	ands	r2, r0
 8007846:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8007848:	2200      	movs	r2, #0
 800784a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800784c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007850:	608b      	str	r3, [r1, #8]
 8007852:	4770      	bx	lr
 8007854:	e000ed00 	.word	0xe000ed00
 8007858:	40021000 	.word	0x40021000
 800785c:	f87fc00c 	.word	0xf87fc00c
 8007860:	ff00fccc 	.word	0xff00fccc

08007864 <xputc>:
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 8007864:	280a      	cmp	r0, #10
{
 8007866:	b510      	push	{r4, lr}
 8007868:	4604      	mov	r4, r0
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 800786a:	d102      	bne.n	8007872 <xputc+0xe>
 800786c:	200d      	movs	r0, #13
 800786e:	f7ff fff9 	bl	8007864 <xputc>

	if (outptr) {
 8007872:	4a07      	ldr	r2, [pc, #28]	; (8007890 <xputc+0x2c>)
 8007874:	6813      	ldr	r3, [r2, #0]
 8007876:	b11b      	cbz	r3, 8007880 <xputc+0x1c>
		*outptr++ = (unsigned char)c;
 8007878:	1c59      	adds	r1, r3, #1
 800787a:	701c      	strb	r4, [r3, #0]
 800787c:	6011      	str	r1, [r2, #0]
		return;
 800787e:	bd10      	pop	{r4, pc}
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
 8007880:	4b04      	ldr	r3, [pc, #16]	; (8007894 <xputc+0x30>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	b11b      	cbz	r3, 800788e <xputc+0x2a>
 8007886:	4620      	mov	r0, r4
}
 8007888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (xfunc_out) xfunc_out((unsigned char)c);
 800788c:	4718      	bx	r3
 800788e:	bd10      	pop	{r4, pc}
 8007890:	20000300 	.word	0x20000300
 8007894:	2000231c 	.word	0x2000231c

08007898 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 8007898:	b510      	push	{r4, lr}
 800789a:	1e44      	subs	r4, r0, #1
	while (*str)
 800789c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80078a0:	b900      	cbnz	r0, 80078a4 <xputs+0xc>
		xputc(*str++);
}
 80078a2:	bd10      	pop	{r4, pc}
		xputc(*str++);
 80078a4:	f7ff ffde 	bl	8007864 <xputc>
 80078a8:	e7f8      	b.n	800789c <xputs+0x4>

080078aa <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 80078aa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078ae:	4602      	mov	r2, r0
 80078b0:	460d      	mov	r5, r1
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 80078b2:	7810      	ldrb	r0, [r2, #0]
		if (!c) break;				/* End of format? */
 80078b4:	2800      	cmp	r0, #0
 80078b6:	f000 80ca 	beq.w	8007a4e <xvprintf+0x1a4>
		if (c != '%') {				/* Pass through it if not a % sequense */
 80078ba:	2825      	cmp	r0, #37	; 0x25
 80078bc:	d004      	beq.n	80078c8 <xvprintf+0x1e>
		c = *fmt++;					/* Get a char */
 80078be:	1c57      	adds	r7, r2, #1
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 80078c0:	f7ff ffd0 	bl	8007864 <xputc>
 80078c4:	462c      	mov	r4, r5
 80078c6:	e052      	b.n	800796e <xvprintf+0xc4>
		c = *fmt++;					/* Get first char of the sequense */
 80078c8:	7853      	ldrb	r3, [r2, #1]
		if (c == '0') {				/* Flag: '0' padded */
 80078ca:	2b30      	cmp	r3, #48	; 0x30
 80078cc:	d128      	bne.n	8007920 <xvprintf+0x76>
			f = 1; c = *fmt++;
 80078ce:	7893      	ldrb	r3, [r2, #2]
 80078d0:	1cd7      	adds	r7, r2, #3
 80078d2:	2601      	movs	r6, #1
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 80078d4:	f04f 0800 	mov.w	r8, #0
			w = w * 10 + c - '0';
 80078d8:	210a      	movs	r1, #10
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 80078da:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80078de:	2a09      	cmp	r2, #9
 80078e0:	d927      	bls.n	8007932 <xvprintf+0x88>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80078e2:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 80078e6:	2a4c      	cmp	r2, #76	; 0x4c
			f |= 4; c = *fmt++;
 80078e8:	bf02      	ittt	eq
 80078ea:	783b      	ldrbeq	r3, [r7, #0]
 80078ec:	f046 0604 	orreq.w	r6, r6, #4
 80078f0:	3701      	addeq	r7, #1
		if (!c) break;				/* End of format? */
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f000 80ab 	beq.w	8007a4e <xvprintf+0x1a4>
		if (d >= 'a') d -= 0x20;
 80078f8:	2b60      	cmp	r3, #96	; 0x60
 80078fa:	bf86      	itte	hi
 80078fc:	f1a3 0220 	subhi.w	r2, r3, #32
 8007900:	b2d2      	uxtbhi	r2, r2
 8007902:	461a      	movls	r2, r3
		switch (d) {				/* Type is... */
 8007904:	2a4f      	cmp	r2, #79	; 0x4f
 8007906:	d035      	beq.n	8007974 <xvprintf+0xca>
 8007908:	d81a      	bhi.n	8007940 <xvprintf+0x96>
 800790a:	2a43      	cmp	r2, #67	; 0x43
 800790c:	f000 8088 	beq.w	8007a20 <xvprintf+0x176>
 8007910:	2a44      	cmp	r2, #68	; 0x44
 8007912:	f000 808e 	beq.w	8007a32 <xvprintf+0x188>
 8007916:	2a42      	cmp	r2, #66	; 0x42
 8007918:	f000 8089 	beq.w	8007a2e <xvprintf+0x184>
			xputc(c); continue;
 800791c:	4618      	mov	r0, r3
 800791e:	e7cf      	b.n	80078c0 <xvprintf+0x16>
			if (c == '-') {			/* Flag: left justified */
 8007920:	2b2d      	cmp	r3, #45	; 0x2d
		c = *fmt++;					/* Get first char of the sequense */
 8007922:	bf19      	ittee	ne
 8007924:	1c97      	addne	r7, r2, #2
		f = 0;
 8007926:	2600      	movne	r6, #0
				f = 2; c = *fmt++;
 8007928:	1cd7      	addeq	r7, r2, #3
 800792a:	7893      	ldrbeq	r3, [r2, #2]
 800792c:	bf08      	it	eq
 800792e:	2602      	moveq	r6, #2
 8007930:	e7d0      	b.n	80078d4 <xvprintf+0x2a>
			w = w * 10 + c - '0';
 8007932:	fb01 3808 	mla	r8, r1, r8, r3
 8007936:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 800793a:	f817 3b01 	ldrb.w	r3, [r7], #1
 800793e:	e7cc      	b.n	80078da <xvprintf+0x30>
		switch (d) {				/* Type is... */
 8007940:	2a55      	cmp	r2, #85	; 0x55
 8007942:	d076      	beq.n	8007a32 <xvprintf+0x188>
 8007944:	2a58      	cmp	r2, #88	; 0x58
 8007946:	d070      	beq.n	8007a2a <xvprintf+0x180>
 8007948:	2a53      	cmp	r2, #83	; 0x53
 800794a:	d1e7      	bne.n	800791c <xvprintf+0x72>
			p = va_arg(arp, char*);
 800794c:	f8d5 9000 	ldr.w	r9, [r5]
 8007950:	1d2c      	adds	r4, r5, #4
			for (j = 0; p[j]; j++) ;
 8007952:	464b      	mov	r3, r9
 8007954:	eba3 0509 	sub.w	r5, r3, r9
 8007958:	f813 2b01 	ldrb.w	r2, [r3], #1
 800795c:	2a00      	cmp	r2, #0
 800795e:	d1f9      	bne.n	8007954 <xvprintf+0xaa>
			while (!(f & 2) && j++ < w) xputc(' ');
 8007960:	07b0      	lsls	r0, r6, #30
 8007962:	d552      	bpl.n	8007a0a <xvprintf+0x160>
			xputs(p);
 8007964:	4648      	mov	r0, r9
 8007966:	f7ff ff97 	bl	8007898 <xputs>
			while (j++ < w) xputc(' ');
 800796a:	45a8      	cmp	r8, r5
 800796c:	d853      	bhi.n	8007a16 <xvprintf+0x16c>
			xputc(c); continue;
 800796e:	4625      	mov	r5, r4
 8007970:	463a      	mov	r2, r7
 8007972:	e79e      	b.n	80078b2 <xvprintf+0x8>
			r = 8; break;
 8007974:	2008      	movs	r0, #8
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 8007976:	2a44      	cmp	r2, #68	; 0x44
 8007978:	6829      	ldr	r1, [r5, #0]
 800797a:	f105 0404 	add.w	r4, r5, #4
 800797e:	d104      	bne.n	800798a <xvprintf+0xe0>
		if (d == 'D' && (v & 0x80000000)) {
 8007980:	2900      	cmp	r1, #0
			v = 0 - v;
 8007982:	bfbc      	itt	lt
 8007984:	4249      	neglt	r1, r1
			f |= 8;
 8007986:	f046 0608 	orrlt.w	r6, r6, #8
 800798a:	2b78      	cmp	r3, #120	; 0x78
 800798c:	bf0c      	ite	eq
 800798e:	f04f 0c27 	moveq.w	ip, #39	; 0x27
 8007992:	f04f 0c07 	movne.w	ip, #7
		}
		i = 0;
 8007996:	2200      	movs	r2, #0
		do {
			d = (char)(v % r); v /= r;
 8007998:	fbb1 fef0 	udiv	lr, r1, r0
 800799c:	fb00 151e 	mls	r5, r0, lr, r1
 80079a0:	b2eb      	uxtb	r3, r5
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80079a2:	2d09      	cmp	r5, #9
 80079a4:	bf84      	itt	hi
 80079a6:	4463      	addhi	r3, ip
 80079a8:	b2db      	uxtbhi	r3, r3
			s[i++] = d + '0';
 80079aa:	3330      	adds	r3, #48	; 0x30
			d = (char)(v % r); v /= r;
 80079ac:	4671      	mov	r1, lr
			s[i++] = d + '0';
 80079ae:	1c55      	adds	r5, r2, #1
 80079b0:	f80d 3002 	strb.w	r3, [sp, r2]
		} while (v && i < sizeof(s));
 80079b4:	f1be 0f00 	cmp.w	lr, #0
 80079b8:	d002      	beq.n	80079c0 <xvprintf+0x116>
 80079ba:	2d10      	cmp	r5, #16
 80079bc:	d13b      	bne.n	8007a36 <xvprintf+0x18c>
 80079be:	220f      	movs	r2, #15
		if (f & 8) s[i++] = '-';
 80079c0:	0731      	lsls	r1, r6, #28
 80079c2:	d505      	bpl.n	80079d0 <xvprintf+0x126>
 80079c4:	ab04      	add	r3, sp, #16
 80079c6:	441d      	add	r5, r3
 80079c8:	232d      	movs	r3, #45	; 0x2d
 80079ca:	f805 3c10 	strb.w	r3, [r5, #-16]
 80079ce:	1c95      	adds	r5, r2, #2
		j = i; d = (f & 1) ? '0' : ' ';
 80079d0:	f016 0f01 	tst.w	r6, #1
 80079d4:	bf14      	ite	ne
 80079d6:	f04f 0a30 	movne.w	sl, #48	; 0x30
 80079da:	f04f 0a20 	moveq.w	sl, #32
		while (!(f & 2) && j++ < w) xputc(d);
 80079de:	07b3      	lsls	r3, r6, #30
		j = i; d = (f & 1) ? '0' : ' ';
 80079e0:	46a9      	mov	r9, r5
		while (!(f & 2) && j++ < w) xputc(d);
 80079e2:	d52e      	bpl.n	8007a42 <xvprintf+0x198>
		do xputc(s[--i]); while(i);
 80079e4:	3d01      	subs	r5, #1
 80079e6:	f81d 0005 	ldrb.w	r0, [sp, r5]
 80079ea:	f7ff ff3b 	bl	8007864 <xputc>
 80079ee:	2d00      	cmp	r5, #0
 80079f0:	d1f8      	bne.n	80079e4 <xvprintf+0x13a>
		while (j++ < w) xputc(' ');
 80079f2:	45c8      	cmp	r8, r9
 80079f4:	d9bb      	bls.n	800796e <xvprintf+0xc4>
 80079f6:	2020      	movs	r0, #32
 80079f8:	f7ff ff34 	bl	8007864 <xputc>
 80079fc:	f109 0901 	add.w	r9, r9, #1
 8007a00:	e7f7      	b.n	80079f2 <xvprintf+0x148>
			while (!(f & 2) && j++ < w) xputc(' ');
 8007a02:	2020      	movs	r0, #32
 8007a04:	f7ff ff2e 	bl	8007864 <xputc>
 8007a08:	4635      	mov	r5, r6
 8007a0a:	4545      	cmp	r5, r8
 8007a0c:	f105 0601 	add.w	r6, r5, #1
 8007a10:	d3f7      	bcc.n	8007a02 <xvprintf+0x158>
 8007a12:	4635      	mov	r5, r6
 8007a14:	e7a6      	b.n	8007964 <xvprintf+0xba>
			while (j++ < w) xputc(' ');
 8007a16:	2020      	movs	r0, #32
 8007a18:	f7ff ff24 	bl	8007864 <xputc>
 8007a1c:	3501      	adds	r5, #1
 8007a1e:	e7a4      	b.n	800796a <xvprintf+0xc0>
			xputc((char)va_arg(arp, int)); continue;
 8007a20:	7828      	ldrb	r0, [r5, #0]
 8007a22:	1d2c      	adds	r4, r5, #4
 8007a24:	f7ff ff1e 	bl	8007864 <xputc>
 8007a28:	e7a1      	b.n	800796e <xvprintf+0xc4>
			r = 16; break;
 8007a2a:	2010      	movs	r0, #16
 8007a2c:	e7a3      	b.n	8007976 <xvprintf+0xcc>
			r = 2; break;
 8007a2e:	2002      	movs	r0, #2
 8007a30:	e7a1      	b.n	8007976 <xvprintf+0xcc>
			r = 10; break;
 8007a32:	200a      	movs	r0, #10
 8007a34:	e79f      	b.n	8007976 <xvprintf+0xcc>
 8007a36:	462a      	mov	r2, r5
 8007a38:	e7ae      	b.n	8007998 <xvprintf+0xee>
		while (!(f & 2) && j++ < w) xputc(d);
 8007a3a:	4650      	mov	r0, sl
 8007a3c:	f7ff ff12 	bl	8007864 <xputc>
 8007a40:	46b1      	mov	r9, r6
 8007a42:	45c1      	cmp	r9, r8
 8007a44:	f109 0601 	add.w	r6, r9, #1
 8007a48:	d3f7      	bcc.n	8007a3a <xvprintf+0x190>
 8007a4a:	46b1      	mov	r9, r6
 8007a4c:	e7ca      	b.n	80079e4 <xvprintf+0x13a>
	}
}
 8007a4e:	b004      	add	sp, #16
 8007a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007a54 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 8007a54:	b40f      	push	{r0, r1, r2, r3}
 8007a56:	b507      	push	{r0, r1, r2, lr}
 8007a58:	a904      	add	r1, sp, #16
 8007a5a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list arp;


	va_start(arp, fmt);
 8007a5e:	9101      	str	r1, [sp, #4]
	xvprintf(fmt, arp);
 8007a60:	f7ff ff23 	bl	80078aa <xvprintf>
	va_end(arp);
}
 8007a64:	b003      	add	sp, #12
 8007a66:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a6a:	b004      	add	sp, #16
 8007a6c:	4770      	bx	lr
	...

08007a70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007a70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007aa8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007a74:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007a76:	e003      	b.n	8007a80 <LoopCopyDataInit>

08007a78 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007a78:	4b0c      	ldr	r3, [pc, #48]	; (8007aac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007a7a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007a7c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007a7e:	3104      	adds	r1, #4

08007a80 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007a80:	480b      	ldr	r0, [pc, #44]	; (8007ab0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8007a82:	4b0c      	ldr	r3, [pc, #48]	; (8007ab4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8007a84:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007a86:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007a88:	d3f6      	bcc.n	8007a78 <CopyDataInit>
	ldr	r2, =_sbss
 8007a8a:	4a0b      	ldr	r2, [pc, #44]	; (8007ab8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8007a8c:	e002      	b.n	8007a94 <LoopFillZerobss>

08007a8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007a8e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007a90:	f842 3b04 	str.w	r3, [r2], #4

08007a94 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007a94:	4b09      	ldr	r3, [pc, #36]	; (8007abc <LoopForever+0x16>)
	cmp	r2, r3
 8007a96:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007a98:	d3f9      	bcc.n	8007a8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007a9a:	f7ff feaf 	bl	80077fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007a9e:	f000 f815 	bl	8007acc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007aa2:	f7fe fd31 	bl	8006508 <main>

08007aa6 <LoopForever>:

LoopForever:
    b LoopForever
 8007aa6:	e7fe      	b.n	8007aa6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007aa8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8007aac:	080091d0 	.word	0x080091d0
	ldr	r0, =_sdata
 8007ab0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007ab4:	2000024c 	.word	0x2000024c
	ldr	r2, =_sbss
 8007ab8:	2000024c 	.word	0x2000024c
	ldr	r3, = _ebss
 8007abc:	20002324 	.word	0x20002324

08007ac0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007ac0:	e7fe      	b.n	8007ac0 <ADC1_2_IRQHandler>

08007ac2 <atoi>:
 8007ac2:	220a      	movs	r2, #10
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	f000 ba15 	b.w	8007ef4 <strtol>
	...

08007acc <__libc_init_array>:
 8007acc:	b570      	push	{r4, r5, r6, lr}
 8007ace:	4e0d      	ldr	r6, [pc, #52]	; (8007b04 <__libc_init_array+0x38>)
 8007ad0:	4c0d      	ldr	r4, [pc, #52]	; (8007b08 <__libc_init_array+0x3c>)
 8007ad2:	1ba4      	subs	r4, r4, r6
 8007ad4:	10a4      	asrs	r4, r4, #2
 8007ad6:	2500      	movs	r5, #0
 8007ad8:	42a5      	cmp	r5, r4
 8007ada:	d109      	bne.n	8007af0 <__libc_init_array+0x24>
 8007adc:	4e0b      	ldr	r6, [pc, #44]	; (8007b0c <__libc_init_array+0x40>)
 8007ade:	4c0c      	ldr	r4, [pc, #48]	; (8007b10 <__libc_init_array+0x44>)
 8007ae0:	f001 f8fc 	bl	8008cdc <_init>
 8007ae4:	1ba4      	subs	r4, r4, r6
 8007ae6:	10a4      	asrs	r4, r4, #2
 8007ae8:	2500      	movs	r5, #0
 8007aea:	42a5      	cmp	r5, r4
 8007aec:	d105      	bne.n	8007afa <__libc_init_array+0x2e>
 8007aee:	bd70      	pop	{r4, r5, r6, pc}
 8007af0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007af4:	4798      	blx	r3
 8007af6:	3501      	adds	r5, #1
 8007af8:	e7ee      	b.n	8007ad8 <__libc_init_array+0xc>
 8007afa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007afe:	4798      	blx	r3
 8007b00:	3501      	adds	r5, #1
 8007b02:	e7f2      	b.n	8007aea <__libc_init_array+0x1e>
 8007b04:	080091c8 	.word	0x080091c8
 8007b08:	080091c8 	.word	0x080091c8
 8007b0c:	080091c8 	.word	0x080091c8
 8007b10:	080091cc 	.word	0x080091cc

08007b14 <malloc>:
 8007b14:	4b02      	ldr	r3, [pc, #8]	; (8007b20 <malloc+0xc>)
 8007b16:	4601      	mov	r1, r0
 8007b18:	6818      	ldr	r0, [r3, #0]
 8007b1a:	f000 b86d 	b.w	8007bf8 <_malloc_r>
 8007b1e:	bf00      	nop
 8007b20:	2000007c 	.word	0x2000007c

08007b24 <free>:
 8007b24:	4b02      	ldr	r3, [pc, #8]	; (8007b30 <free+0xc>)
 8007b26:	4601      	mov	r1, r0
 8007b28:	6818      	ldr	r0, [r3, #0]
 8007b2a:	f000 b817 	b.w	8007b5c <_free_r>
 8007b2e:	bf00      	nop
 8007b30:	2000007c 	.word	0x2000007c

08007b34 <memcpy>:
 8007b34:	b510      	push	{r4, lr}
 8007b36:	1e43      	subs	r3, r0, #1
 8007b38:	440a      	add	r2, r1
 8007b3a:	4291      	cmp	r1, r2
 8007b3c:	d100      	bne.n	8007b40 <memcpy+0xc>
 8007b3e:	bd10      	pop	{r4, pc}
 8007b40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b48:	e7f7      	b.n	8007b3a <memcpy+0x6>

08007b4a <memset>:
 8007b4a:	4402      	add	r2, r0
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d100      	bne.n	8007b54 <memset+0xa>
 8007b52:	4770      	bx	lr
 8007b54:	f803 1b01 	strb.w	r1, [r3], #1
 8007b58:	e7f9      	b.n	8007b4e <memset+0x4>
	...

08007b5c <_free_r>:
 8007b5c:	b538      	push	{r3, r4, r5, lr}
 8007b5e:	4605      	mov	r5, r0
 8007b60:	2900      	cmp	r1, #0
 8007b62:	d045      	beq.n	8007bf0 <_free_r+0x94>
 8007b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b68:	1f0c      	subs	r4, r1, #4
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	bfb8      	it	lt
 8007b6e:	18e4      	addlt	r4, r4, r3
 8007b70:	f000 fc8c 	bl	800848c <__malloc_lock>
 8007b74:	4a1f      	ldr	r2, [pc, #124]	; (8007bf4 <_free_r+0x98>)
 8007b76:	6813      	ldr	r3, [r2, #0]
 8007b78:	4610      	mov	r0, r2
 8007b7a:	b933      	cbnz	r3, 8007b8a <_free_r+0x2e>
 8007b7c:	6063      	str	r3, [r4, #4]
 8007b7e:	6014      	str	r4, [r2, #0]
 8007b80:	4628      	mov	r0, r5
 8007b82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b86:	f000 bc82 	b.w	800848e <__malloc_unlock>
 8007b8a:	42a3      	cmp	r3, r4
 8007b8c:	d90c      	bls.n	8007ba8 <_free_r+0x4c>
 8007b8e:	6821      	ldr	r1, [r4, #0]
 8007b90:	1862      	adds	r2, r4, r1
 8007b92:	4293      	cmp	r3, r2
 8007b94:	bf04      	itt	eq
 8007b96:	681a      	ldreq	r2, [r3, #0]
 8007b98:	685b      	ldreq	r3, [r3, #4]
 8007b9a:	6063      	str	r3, [r4, #4]
 8007b9c:	bf04      	itt	eq
 8007b9e:	1852      	addeq	r2, r2, r1
 8007ba0:	6022      	streq	r2, [r4, #0]
 8007ba2:	6004      	str	r4, [r0, #0]
 8007ba4:	e7ec      	b.n	8007b80 <_free_r+0x24>
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	685a      	ldr	r2, [r3, #4]
 8007baa:	b10a      	cbz	r2, 8007bb0 <_free_r+0x54>
 8007bac:	42a2      	cmp	r2, r4
 8007bae:	d9fa      	bls.n	8007ba6 <_free_r+0x4a>
 8007bb0:	6819      	ldr	r1, [r3, #0]
 8007bb2:	1858      	adds	r0, r3, r1
 8007bb4:	42a0      	cmp	r0, r4
 8007bb6:	d10b      	bne.n	8007bd0 <_free_r+0x74>
 8007bb8:	6820      	ldr	r0, [r4, #0]
 8007bba:	4401      	add	r1, r0
 8007bbc:	1858      	adds	r0, r3, r1
 8007bbe:	4282      	cmp	r2, r0
 8007bc0:	6019      	str	r1, [r3, #0]
 8007bc2:	d1dd      	bne.n	8007b80 <_free_r+0x24>
 8007bc4:	6810      	ldr	r0, [r2, #0]
 8007bc6:	6852      	ldr	r2, [r2, #4]
 8007bc8:	605a      	str	r2, [r3, #4]
 8007bca:	4401      	add	r1, r0
 8007bcc:	6019      	str	r1, [r3, #0]
 8007bce:	e7d7      	b.n	8007b80 <_free_r+0x24>
 8007bd0:	d902      	bls.n	8007bd8 <_free_r+0x7c>
 8007bd2:	230c      	movs	r3, #12
 8007bd4:	602b      	str	r3, [r5, #0]
 8007bd6:	e7d3      	b.n	8007b80 <_free_r+0x24>
 8007bd8:	6820      	ldr	r0, [r4, #0]
 8007bda:	1821      	adds	r1, r4, r0
 8007bdc:	428a      	cmp	r2, r1
 8007bde:	bf04      	itt	eq
 8007be0:	6811      	ldreq	r1, [r2, #0]
 8007be2:	6852      	ldreq	r2, [r2, #4]
 8007be4:	6062      	str	r2, [r4, #4]
 8007be6:	bf04      	itt	eq
 8007be8:	1809      	addeq	r1, r1, r0
 8007bea:	6021      	streq	r1, [r4, #0]
 8007bec:	605c      	str	r4, [r3, #4]
 8007bee:	e7c7      	b.n	8007b80 <_free_r+0x24>
 8007bf0:	bd38      	pop	{r3, r4, r5, pc}
 8007bf2:	bf00      	nop
 8007bf4:	20000304 	.word	0x20000304

08007bf8 <_malloc_r>:
 8007bf8:	b570      	push	{r4, r5, r6, lr}
 8007bfa:	1ccd      	adds	r5, r1, #3
 8007bfc:	f025 0503 	bic.w	r5, r5, #3
 8007c00:	3508      	adds	r5, #8
 8007c02:	2d0c      	cmp	r5, #12
 8007c04:	bf38      	it	cc
 8007c06:	250c      	movcc	r5, #12
 8007c08:	2d00      	cmp	r5, #0
 8007c0a:	4606      	mov	r6, r0
 8007c0c:	db01      	blt.n	8007c12 <_malloc_r+0x1a>
 8007c0e:	42a9      	cmp	r1, r5
 8007c10:	d903      	bls.n	8007c1a <_malloc_r+0x22>
 8007c12:	230c      	movs	r3, #12
 8007c14:	6033      	str	r3, [r6, #0]
 8007c16:	2000      	movs	r0, #0
 8007c18:	bd70      	pop	{r4, r5, r6, pc}
 8007c1a:	f000 fc37 	bl	800848c <__malloc_lock>
 8007c1e:	4a23      	ldr	r2, [pc, #140]	; (8007cac <_malloc_r+0xb4>)
 8007c20:	6814      	ldr	r4, [r2, #0]
 8007c22:	4621      	mov	r1, r4
 8007c24:	b991      	cbnz	r1, 8007c4c <_malloc_r+0x54>
 8007c26:	4c22      	ldr	r4, [pc, #136]	; (8007cb0 <_malloc_r+0xb8>)
 8007c28:	6823      	ldr	r3, [r4, #0]
 8007c2a:	b91b      	cbnz	r3, 8007c34 <_malloc_r+0x3c>
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	f000 f8a5 	bl	8007d7c <_sbrk_r>
 8007c32:	6020      	str	r0, [r4, #0]
 8007c34:	4629      	mov	r1, r5
 8007c36:	4630      	mov	r0, r6
 8007c38:	f000 f8a0 	bl	8007d7c <_sbrk_r>
 8007c3c:	1c43      	adds	r3, r0, #1
 8007c3e:	d126      	bne.n	8007c8e <_malloc_r+0x96>
 8007c40:	230c      	movs	r3, #12
 8007c42:	6033      	str	r3, [r6, #0]
 8007c44:	4630      	mov	r0, r6
 8007c46:	f000 fc22 	bl	800848e <__malloc_unlock>
 8007c4a:	e7e4      	b.n	8007c16 <_malloc_r+0x1e>
 8007c4c:	680b      	ldr	r3, [r1, #0]
 8007c4e:	1b5b      	subs	r3, r3, r5
 8007c50:	d41a      	bmi.n	8007c88 <_malloc_r+0x90>
 8007c52:	2b0b      	cmp	r3, #11
 8007c54:	d90f      	bls.n	8007c76 <_malloc_r+0x7e>
 8007c56:	600b      	str	r3, [r1, #0]
 8007c58:	50cd      	str	r5, [r1, r3]
 8007c5a:	18cc      	adds	r4, r1, r3
 8007c5c:	4630      	mov	r0, r6
 8007c5e:	f000 fc16 	bl	800848e <__malloc_unlock>
 8007c62:	f104 000b 	add.w	r0, r4, #11
 8007c66:	1d23      	adds	r3, r4, #4
 8007c68:	f020 0007 	bic.w	r0, r0, #7
 8007c6c:	1ac3      	subs	r3, r0, r3
 8007c6e:	d01b      	beq.n	8007ca8 <_malloc_r+0xb0>
 8007c70:	425a      	negs	r2, r3
 8007c72:	50e2      	str	r2, [r4, r3]
 8007c74:	bd70      	pop	{r4, r5, r6, pc}
 8007c76:	428c      	cmp	r4, r1
 8007c78:	bf0d      	iteet	eq
 8007c7a:	6863      	ldreq	r3, [r4, #4]
 8007c7c:	684b      	ldrne	r3, [r1, #4]
 8007c7e:	6063      	strne	r3, [r4, #4]
 8007c80:	6013      	streq	r3, [r2, #0]
 8007c82:	bf18      	it	ne
 8007c84:	460c      	movne	r4, r1
 8007c86:	e7e9      	b.n	8007c5c <_malloc_r+0x64>
 8007c88:	460c      	mov	r4, r1
 8007c8a:	6849      	ldr	r1, [r1, #4]
 8007c8c:	e7ca      	b.n	8007c24 <_malloc_r+0x2c>
 8007c8e:	1cc4      	adds	r4, r0, #3
 8007c90:	f024 0403 	bic.w	r4, r4, #3
 8007c94:	42a0      	cmp	r0, r4
 8007c96:	d005      	beq.n	8007ca4 <_malloc_r+0xac>
 8007c98:	1a21      	subs	r1, r4, r0
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	f000 f86e 	bl	8007d7c <_sbrk_r>
 8007ca0:	3001      	adds	r0, #1
 8007ca2:	d0cd      	beq.n	8007c40 <_malloc_r+0x48>
 8007ca4:	6025      	str	r5, [r4, #0]
 8007ca6:	e7d9      	b.n	8007c5c <_malloc_r+0x64>
 8007ca8:	bd70      	pop	{r4, r5, r6, pc}
 8007caa:	bf00      	nop
 8007cac:	20000304 	.word	0x20000304
 8007cb0:	20000308 	.word	0x20000308

08007cb4 <_puts_r>:
 8007cb4:	b570      	push	{r4, r5, r6, lr}
 8007cb6:	460e      	mov	r6, r1
 8007cb8:	4605      	mov	r5, r0
 8007cba:	b118      	cbz	r0, 8007cc4 <_puts_r+0x10>
 8007cbc:	6983      	ldr	r3, [r0, #24]
 8007cbe:	b90b      	cbnz	r3, 8007cc4 <_puts_r+0x10>
 8007cc0:	f000 fae0 	bl	8008284 <__sinit>
 8007cc4:	69ab      	ldr	r3, [r5, #24]
 8007cc6:	68ac      	ldr	r4, [r5, #8]
 8007cc8:	b913      	cbnz	r3, 8007cd0 <_puts_r+0x1c>
 8007cca:	4628      	mov	r0, r5
 8007ccc:	f000 fada 	bl	8008284 <__sinit>
 8007cd0:	4b23      	ldr	r3, [pc, #140]	; (8007d60 <_puts_r+0xac>)
 8007cd2:	429c      	cmp	r4, r3
 8007cd4:	d117      	bne.n	8007d06 <_puts_r+0x52>
 8007cd6:	686c      	ldr	r4, [r5, #4]
 8007cd8:	89a3      	ldrh	r3, [r4, #12]
 8007cda:	071b      	lsls	r3, r3, #28
 8007cdc:	d51d      	bpl.n	8007d1a <_puts_r+0x66>
 8007cde:	6923      	ldr	r3, [r4, #16]
 8007ce0:	b1db      	cbz	r3, 8007d1a <_puts_r+0x66>
 8007ce2:	3e01      	subs	r6, #1
 8007ce4:	68a3      	ldr	r3, [r4, #8]
 8007ce6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007cea:	3b01      	subs	r3, #1
 8007cec:	60a3      	str	r3, [r4, #8]
 8007cee:	b9e9      	cbnz	r1, 8007d2c <_puts_r+0x78>
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	da2e      	bge.n	8007d52 <_puts_r+0x9e>
 8007cf4:	4622      	mov	r2, r4
 8007cf6:	210a      	movs	r1, #10
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	f000 f911 	bl	8007f20 <__swbuf_r>
 8007cfe:	3001      	adds	r0, #1
 8007d00:	d011      	beq.n	8007d26 <_puts_r+0x72>
 8007d02:	200a      	movs	r0, #10
 8007d04:	bd70      	pop	{r4, r5, r6, pc}
 8007d06:	4b17      	ldr	r3, [pc, #92]	; (8007d64 <_puts_r+0xb0>)
 8007d08:	429c      	cmp	r4, r3
 8007d0a:	d101      	bne.n	8007d10 <_puts_r+0x5c>
 8007d0c:	68ac      	ldr	r4, [r5, #8]
 8007d0e:	e7e3      	b.n	8007cd8 <_puts_r+0x24>
 8007d10:	4b15      	ldr	r3, [pc, #84]	; (8007d68 <_puts_r+0xb4>)
 8007d12:	429c      	cmp	r4, r3
 8007d14:	bf08      	it	eq
 8007d16:	68ec      	ldreq	r4, [r5, #12]
 8007d18:	e7de      	b.n	8007cd8 <_puts_r+0x24>
 8007d1a:	4621      	mov	r1, r4
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	f000 f951 	bl	8007fc4 <__swsetup_r>
 8007d22:	2800      	cmp	r0, #0
 8007d24:	d0dd      	beq.n	8007ce2 <_puts_r+0x2e>
 8007d26:	f04f 30ff 	mov.w	r0, #4294967295
 8007d2a:	bd70      	pop	{r4, r5, r6, pc}
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	da04      	bge.n	8007d3a <_puts_r+0x86>
 8007d30:	69a2      	ldr	r2, [r4, #24]
 8007d32:	4293      	cmp	r3, r2
 8007d34:	db06      	blt.n	8007d44 <_puts_r+0x90>
 8007d36:	290a      	cmp	r1, #10
 8007d38:	d004      	beq.n	8007d44 <_puts_r+0x90>
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	1c5a      	adds	r2, r3, #1
 8007d3e:	6022      	str	r2, [r4, #0]
 8007d40:	7019      	strb	r1, [r3, #0]
 8007d42:	e7cf      	b.n	8007ce4 <_puts_r+0x30>
 8007d44:	4622      	mov	r2, r4
 8007d46:	4628      	mov	r0, r5
 8007d48:	f000 f8ea 	bl	8007f20 <__swbuf_r>
 8007d4c:	3001      	adds	r0, #1
 8007d4e:	d1c9      	bne.n	8007ce4 <_puts_r+0x30>
 8007d50:	e7e9      	b.n	8007d26 <_puts_r+0x72>
 8007d52:	6823      	ldr	r3, [r4, #0]
 8007d54:	200a      	movs	r0, #10
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	6022      	str	r2, [r4, #0]
 8007d5a:	7018      	strb	r0, [r3, #0]
 8007d5c:	bd70      	pop	{r4, r5, r6, pc}
 8007d5e:	bf00      	nop
 8007d60:	08009044 	.word	0x08009044
 8007d64:	08009064 	.word	0x08009064
 8007d68:	08009024 	.word	0x08009024

08007d6c <puts>:
 8007d6c:	4b02      	ldr	r3, [pc, #8]	; (8007d78 <puts+0xc>)
 8007d6e:	4601      	mov	r1, r0
 8007d70:	6818      	ldr	r0, [r3, #0]
 8007d72:	f7ff bf9f 	b.w	8007cb4 <_puts_r>
 8007d76:	bf00      	nop
 8007d78:	2000007c 	.word	0x2000007c

08007d7c <_sbrk_r>:
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	4c06      	ldr	r4, [pc, #24]	; (8007d98 <_sbrk_r+0x1c>)
 8007d80:	2300      	movs	r3, #0
 8007d82:	4605      	mov	r5, r0
 8007d84:	4608      	mov	r0, r1
 8007d86:	6023      	str	r3, [r4, #0]
 8007d88:	f000 ff92 	bl	8008cb0 <_sbrk>
 8007d8c:	1c43      	adds	r3, r0, #1
 8007d8e:	d102      	bne.n	8007d96 <_sbrk_r+0x1a>
 8007d90:	6823      	ldr	r3, [r4, #0]
 8007d92:	b103      	cbz	r3, 8007d96 <_sbrk_r+0x1a>
 8007d94:	602b      	str	r3, [r5, #0]
 8007d96:	bd38      	pop	{r3, r4, r5, pc}
 8007d98:	20002320 	.word	0x20002320

08007d9c <siprintf>:
 8007d9c:	b40e      	push	{r1, r2, r3}
 8007d9e:	b500      	push	{lr}
 8007da0:	b09c      	sub	sp, #112	; 0x70
 8007da2:	f44f 7102 	mov.w	r1, #520	; 0x208
 8007da6:	ab1d      	add	r3, sp, #116	; 0x74
 8007da8:	f8ad 1014 	strh.w	r1, [sp, #20]
 8007dac:	9002      	str	r0, [sp, #8]
 8007dae:	9006      	str	r0, [sp, #24]
 8007db0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007db4:	480a      	ldr	r0, [pc, #40]	; (8007de0 <siprintf+0x44>)
 8007db6:	9104      	str	r1, [sp, #16]
 8007db8:	9107      	str	r1, [sp, #28]
 8007dba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007dbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dc2:	f8ad 1016 	strh.w	r1, [sp, #22]
 8007dc6:	6800      	ldr	r0, [r0, #0]
 8007dc8:	9301      	str	r3, [sp, #4]
 8007dca:	a902      	add	r1, sp, #8
 8007dcc:	f000 fbbc 	bl	8008548 <_svfiprintf_r>
 8007dd0:	9b02      	ldr	r3, [sp, #8]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	701a      	strb	r2, [r3, #0]
 8007dd6:	b01c      	add	sp, #112	; 0x70
 8007dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ddc:	b003      	add	sp, #12
 8007dde:	4770      	bx	lr
 8007de0:	2000007c 	.word	0x2000007c

08007de4 <strcpy>:
 8007de4:	4603      	mov	r3, r0
 8007de6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dea:	f803 2b01 	strb.w	r2, [r3], #1
 8007dee:	2a00      	cmp	r2, #0
 8007df0:	d1f9      	bne.n	8007de6 <strcpy+0x2>
 8007df2:	4770      	bx	lr

08007df4 <_strtol_l.isra.0>:
 8007df4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df8:	4680      	mov	r8, r0
 8007dfa:	4689      	mov	r9, r1
 8007dfc:	4692      	mov	sl, r2
 8007dfe:	461f      	mov	r7, r3
 8007e00:	468b      	mov	fp, r1
 8007e02:	465d      	mov	r5, fp
 8007e04:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007e06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e0a:	f000 fac5 	bl	8008398 <__locale_ctype_ptr_l>
 8007e0e:	4420      	add	r0, r4
 8007e10:	7846      	ldrb	r6, [r0, #1]
 8007e12:	f016 0608 	ands.w	r6, r6, #8
 8007e16:	d10b      	bne.n	8007e30 <_strtol_l.isra.0+0x3c>
 8007e18:	2c2d      	cmp	r4, #45	; 0x2d
 8007e1a:	d10b      	bne.n	8007e34 <_strtol_l.isra.0+0x40>
 8007e1c:	782c      	ldrb	r4, [r5, #0]
 8007e1e:	2601      	movs	r6, #1
 8007e20:	f10b 0502 	add.w	r5, fp, #2
 8007e24:	b167      	cbz	r7, 8007e40 <_strtol_l.isra.0+0x4c>
 8007e26:	2f10      	cmp	r7, #16
 8007e28:	d114      	bne.n	8007e54 <_strtol_l.isra.0+0x60>
 8007e2a:	2c30      	cmp	r4, #48	; 0x30
 8007e2c:	d00a      	beq.n	8007e44 <_strtol_l.isra.0+0x50>
 8007e2e:	e011      	b.n	8007e54 <_strtol_l.isra.0+0x60>
 8007e30:	46ab      	mov	fp, r5
 8007e32:	e7e6      	b.n	8007e02 <_strtol_l.isra.0+0xe>
 8007e34:	2c2b      	cmp	r4, #43	; 0x2b
 8007e36:	bf04      	itt	eq
 8007e38:	782c      	ldrbeq	r4, [r5, #0]
 8007e3a:	f10b 0502 	addeq.w	r5, fp, #2
 8007e3e:	e7f1      	b.n	8007e24 <_strtol_l.isra.0+0x30>
 8007e40:	2c30      	cmp	r4, #48	; 0x30
 8007e42:	d127      	bne.n	8007e94 <_strtol_l.isra.0+0xa0>
 8007e44:	782b      	ldrb	r3, [r5, #0]
 8007e46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007e4a:	2b58      	cmp	r3, #88	; 0x58
 8007e4c:	d14b      	bne.n	8007ee6 <_strtol_l.isra.0+0xf2>
 8007e4e:	786c      	ldrb	r4, [r5, #1]
 8007e50:	2710      	movs	r7, #16
 8007e52:	3502      	adds	r5, #2
 8007e54:	2e00      	cmp	r6, #0
 8007e56:	bf0c      	ite	eq
 8007e58:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007e5c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007e60:	2200      	movs	r2, #0
 8007e62:	fbb1 fef7 	udiv	lr, r1, r7
 8007e66:	4610      	mov	r0, r2
 8007e68:	fb07 1c1e 	mls	ip, r7, lr, r1
 8007e6c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007e70:	2b09      	cmp	r3, #9
 8007e72:	d811      	bhi.n	8007e98 <_strtol_l.isra.0+0xa4>
 8007e74:	461c      	mov	r4, r3
 8007e76:	42a7      	cmp	r7, r4
 8007e78:	dd1d      	ble.n	8007eb6 <_strtol_l.isra.0+0xc2>
 8007e7a:	1c53      	adds	r3, r2, #1
 8007e7c:	d007      	beq.n	8007e8e <_strtol_l.isra.0+0x9a>
 8007e7e:	4586      	cmp	lr, r0
 8007e80:	d316      	bcc.n	8007eb0 <_strtol_l.isra.0+0xbc>
 8007e82:	d101      	bne.n	8007e88 <_strtol_l.isra.0+0x94>
 8007e84:	45a4      	cmp	ip, r4
 8007e86:	db13      	blt.n	8007eb0 <_strtol_l.isra.0+0xbc>
 8007e88:	fb00 4007 	mla	r0, r0, r7, r4
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e92:	e7eb      	b.n	8007e6c <_strtol_l.isra.0+0x78>
 8007e94:	270a      	movs	r7, #10
 8007e96:	e7dd      	b.n	8007e54 <_strtol_l.isra.0+0x60>
 8007e98:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007e9c:	2b19      	cmp	r3, #25
 8007e9e:	d801      	bhi.n	8007ea4 <_strtol_l.isra.0+0xb0>
 8007ea0:	3c37      	subs	r4, #55	; 0x37
 8007ea2:	e7e8      	b.n	8007e76 <_strtol_l.isra.0+0x82>
 8007ea4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007ea8:	2b19      	cmp	r3, #25
 8007eaa:	d804      	bhi.n	8007eb6 <_strtol_l.isra.0+0xc2>
 8007eac:	3c57      	subs	r4, #87	; 0x57
 8007eae:	e7e2      	b.n	8007e76 <_strtol_l.isra.0+0x82>
 8007eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb4:	e7eb      	b.n	8007e8e <_strtol_l.isra.0+0x9a>
 8007eb6:	1c53      	adds	r3, r2, #1
 8007eb8:	d108      	bne.n	8007ecc <_strtol_l.isra.0+0xd8>
 8007eba:	2322      	movs	r3, #34	; 0x22
 8007ebc:	f8c8 3000 	str.w	r3, [r8]
 8007ec0:	4608      	mov	r0, r1
 8007ec2:	f1ba 0f00 	cmp.w	sl, #0
 8007ec6:	d107      	bne.n	8007ed8 <_strtol_l.isra.0+0xe4>
 8007ec8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ecc:	b106      	cbz	r6, 8007ed0 <_strtol_l.isra.0+0xdc>
 8007ece:	4240      	negs	r0, r0
 8007ed0:	f1ba 0f00 	cmp.w	sl, #0
 8007ed4:	d00c      	beq.n	8007ef0 <_strtol_l.isra.0+0xfc>
 8007ed6:	b122      	cbz	r2, 8007ee2 <_strtol_l.isra.0+0xee>
 8007ed8:	3d01      	subs	r5, #1
 8007eda:	f8ca 5000 	str.w	r5, [sl]
 8007ede:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee2:	464d      	mov	r5, r9
 8007ee4:	e7f9      	b.n	8007eda <_strtol_l.isra.0+0xe6>
 8007ee6:	2430      	movs	r4, #48	; 0x30
 8007ee8:	2f00      	cmp	r7, #0
 8007eea:	d1b3      	bne.n	8007e54 <_strtol_l.isra.0+0x60>
 8007eec:	2708      	movs	r7, #8
 8007eee:	e7b1      	b.n	8007e54 <_strtol_l.isra.0+0x60>
 8007ef0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ef4 <strtol>:
 8007ef4:	4b08      	ldr	r3, [pc, #32]	; (8007f18 <strtol+0x24>)
 8007ef6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ef8:	681c      	ldr	r4, [r3, #0]
 8007efa:	4d08      	ldr	r5, [pc, #32]	; (8007f1c <strtol+0x28>)
 8007efc:	6a23      	ldr	r3, [r4, #32]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	bf08      	it	eq
 8007f02:	462b      	moveq	r3, r5
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	4613      	mov	r3, r2
 8007f08:	460a      	mov	r2, r1
 8007f0a:	4601      	mov	r1, r0
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f7ff ff71 	bl	8007df4 <_strtol_l.isra.0>
 8007f12:	b003      	add	sp, #12
 8007f14:	bd30      	pop	{r4, r5, pc}
 8007f16:	bf00      	nop
 8007f18:	2000007c 	.word	0x2000007c
 8007f1c:	200000e0 	.word	0x200000e0

08007f20 <__swbuf_r>:
 8007f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f22:	460e      	mov	r6, r1
 8007f24:	4614      	mov	r4, r2
 8007f26:	4605      	mov	r5, r0
 8007f28:	b118      	cbz	r0, 8007f32 <__swbuf_r+0x12>
 8007f2a:	6983      	ldr	r3, [r0, #24]
 8007f2c:	b90b      	cbnz	r3, 8007f32 <__swbuf_r+0x12>
 8007f2e:	f000 f9a9 	bl	8008284 <__sinit>
 8007f32:	4b21      	ldr	r3, [pc, #132]	; (8007fb8 <__swbuf_r+0x98>)
 8007f34:	429c      	cmp	r4, r3
 8007f36:	d12a      	bne.n	8007f8e <__swbuf_r+0x6e>
 8007f38:	686c      	ldr	r4, [r5, #4]
 8007f3a:	69a3      	ldr	r3, [r4, #24]
 8007f3c:	60a3      	str	r3, [r4, #8]
 8007f3e:	89a3      	ldrh	r3, [r4, #12]
 8007f40:	071a      	lsls	r2, r3, #28
 8007f42:	d52e      	bpl.n	8007fa2 <__swbuf_r+0x82>
 8007f44:	6923      	ldr	r3, [r4, #16]
 8007f46:	b363      	cbz	r3, 8007fa2 <__swbuf_r+0x82>
 8007f48:	6923      	ldr	r3, [r4, #16]
 8007f4a:	6820      	ldr	r0, [r4, #0]
 8007f4c:	1ac0      	subs	r0, r0, r3
 8007f4e:	6963      	ldr	r3, [r4, #20]
 8007f50:	b2f6      	uxtb	r6, r6
 8007f52:	4298      	cmp	r0, r3
 8007f54:	4637      	mov	r7, r6
 8007f56:	db04      	blt.n	8007f62 <__swbuf_r+0x42>
 8007f58:	4621      	mov	r1, r4
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	f000 f928 	bl	80081b0 <_fflush_r>
 8007f60:	bb28      	cbnz	r0, 8007fae <__swbuf_r+0x8e>
 8007f62:	68a3      	ldr	r3, [r4, #8]
 8007f64:	3b01      	subs	r3, #1
 8007f66:	60a3      	str	r3, [r4, #8]
 8007f68:	6823      	ldr	r3, [r4, #0]
 8007f6a:	1c5a      	adds	r2, r3, #1
 8007f6c:	6022      	str	r2, [r4, #0]
 8007f6e:	701e      	strb	r6, [r3, #0]
 8007f70:	6963      	ldr	r3, [r4, #20]
 8007f72:	3001      	adds	r0, #1
 8007f74:	4298      	cmp	r0, r3
 8007f76:	d004      	beq.n	8007f82 <__swbuf_r+0x62>
 8007f78:	89a3      	ldrh	r3, [r4, #12]
 8007f7a:	07db      	lsls	r3, r3, #31
 8007f7c:	d519      	bpl.n	8007fb2 <__swbuf_r+0x92>
 8007f7e:	2e0a      	cmp	r6, #10
 8007f80:	d117      	bne.n	8007fb2 <__swbuf_r+0x92>
 8007f82:	4621      	mov	r1, r4
 8007f84:	4628      	mov	r0, r5
 8007f86:	f000 f913 	bl	80081b0 <_fflush_r>
 8007f8a:	b190      	cbz	r0, 8007fb2 <__swbuf_r+0x92>
 8007f8c:	e00f      	b.n	8007fae <__swbuf_r+0x8e>
 8007f8e:	4b0b      	ldr	r3, [pc, #44]	; (8007fbc <__swbuf_r+0x9c>)
 8007f90:	429c      	cmp	r4, r3
 8007f92:	d101      	bne.n	8007f98 <__swbuf_r+0x78>
 8007f94:	68ac      	ldr	r4, [r5, #8]
 8007f96:	e7d0      	b.n	8007f3a <__swbuf_r+0x1a>
 8007f98:	4b09      	ldr	r3, [pc, #36]	; (8007fc0 <__swbuf_r+0xa0>)
 8007f9a:	429c      	cmp	r4, r3
 8007f9c:	bf08      	it	eq
 8007f9e:	68ec      	ldreq	r4, [r5, #12]
 8007fa0:	e7cb      	b.n	8007f3a <__swbuf_r+0x1a>
 8007fa2:	4621      	mov	r1, r4
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	f000 f80d 	bl	8007fc4 <__swsetup_r>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	d0cc      	beq.n	8007f48 <__swbuf_r+0x28>
 8007fae:	f04f 37ff 	mov.w	r7, #4294967295
 8007fb2:	4638      	mov	r0, r7
 8007fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	08009044 	.word	0x08009044
 8007fbc:	08009064 	.word	0x08009064
 8007fc0:	08009024 	.word	0x08009024

08007fc4 <__swsetup_r>:
 8007fc4:	4b32      	ldr	r3, [pc, #200]	; (8008090 <__swsetup_r+0xcc>)
 8007fc6:	b570      	push	{r4, r5, r6, lr}
 8007fc8:	681d      	ldr	r5, [r3, #0]
 8007fca:	4606      	mov	r6, r0
 8007fcc:	460c      	mov	r4, r1
 8007fce:	b125      	cbz	r5, 8007fda <__swsetup_r+0x16>
 8007fd0:	69ab      	ldr	r3, [r5, #24]
 8007fd2:	b913      	cbnz	r3, 8007fda <__swsetup_r+0x16>
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	f000 f955 	bl	8008284 <__sinit>
 8007fda:	4b2e      	ldr	r3, [pc, #184]	; (8008094 <__swsetup_r+0xd0>)
 8007fdc:	429c      	cmp	r4, r3
 8007fde:	d10f      	bne.n	8008000 <__swsetup_r+0x3c>
 8007fe0:	686c      	ldr	r4, [r5, #4]
 8007fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	0715      	lsls	r5, r2, #28
 8007fea:	d42c      	bmi.n	8008046 <__swsetup_r+0x82>
 8007fec:	06d0      	lsls	r0, r2, #27
 8007fee:	d411      	bmi.n	8008014 <__swsetup_r+0x50>
 8007ff0:	2209      	movs	r2, #9
 8007ff2:	6032      	str	r2, [r6, #0]
 8007ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ff8:	81a3      	strh	r3, [r4, #12]
 8007ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8007ffe:	bd70      	pop	{r4, r5, r6, pc}
 8008000:	4b25      	ldr	r3, [pc, #148]	; (8008098 <__swsetup_r+0xd4>)
 8008002:	429c      	cmp	r4, r3
 8008004:	d101      	bne.n	800800a <__swsetup_r+0x46>
 8008006:	68ac      	ldr	r4, [r5, #8]
 8008008:	e7eb      	b.n	8007fe2 <__swsetup_r+0x1e>
 800800a:	4b24      	ldr	r3, [pc, #144]	; (800809c <__swsetup_r+0xd8>)
 800800c:	429c      	cmp	r4, r3
 800800e:	bf08      	it	eq
 8008010:	68ec      	ldreq	r4, [r5, #12]
 8008012:	e7e6      	b.n	8007fe2 <__swsetup_r+0x1e>
 8008014:	0751      	lsls	r1, r2, #29
 8008016:	d512      	bpl.n	800803e <__swsetup_r+0x7a>
 8008018:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800801a:	b141      	cbz	r1, 800802e <__swsetup_r+0x6a>
 800801c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008020:	4299      	cmp	r1, r3
 8008022:	d002      	beq.n	800802a <__swsetup_r+0x66>
 8008024:	4630      	mov	r0, r6
 8008026:	f7ff fd99 	bl	8007b5c <_free_r>
 800802a:	2300      	movs	r3, #0
 800802c:	6363      	str	r3, [r4, #52]	; 0x34
 800802e:	89a3      	ldrh	r3, [r4, #12]
 8008030:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008034:	81a3      	strh	r3, [r4, #12]
 8008036:	2300      	movs	r3, #0
 8008038:	6063      	str	r3, [r4, #4]
 800803a:	6923      	ldr	r3, [r4, #16]
 800803c:	6023      	str	r3, [r4, #0]
 800803e:	89a3      	ldrh	r3, [r4, #12]
 8008040:	f043 0308 	orr.w	r3, r3, #8
 8008044:	81a3      	strh	r3, [r4, #12]
 8008046:	6923      	ldr	r3, [r4, #16]
 8008048:	b94b      	cbnz	r3, 800805e <__swsetup_r+0x9a>
 800804a:	89a3      	ldrh	r3, [r4, #12]
 800804c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008054:	d003      	beq.n	800805e <__swsetup_r+0x9a>
 8008056:	4621      	mov	r1, r4
 8008058:	4630      	mov	r0, r6
 800805a:	f000 f9c5 	bl	80083e8 <__smakebuf_r>
 800805e:	89a2      	ldrh	r2, [r4, #12]
 8008060:	f012 0301 	ands.w	r3, r2, #1
 8008064:	d00c      	beq.n	8008080 <__swsetup_r+0xbc>
 8008066:	2300      	movs	r3, #0
 8008068:	60a3      	str	r3, [r4, #8]
 800806a:	6963      	ldr	r3, [r4, #20]
 800806c:	425b      	negs	r3, r3
 800806e:	61a3      	str	r3, [r4, #24]
 8008070:	6923      	ldr	r3, [r4, #16]
 8008072:	b953      	cbnz	r3, 800808a <__swsetup_r+0xc6>
 8008074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008078:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800807c:	d1ba      	bne.n	8007ff4 <__swsetup_r+0x30>
 800807e:	bd70      	pop	{r4, r5, r6, pc}
 8008080:	0792      	lsls	r2, r2, #30
 8008082:	bf58      	it	pl
 8008084:	6963      	ldrpl	r3, [r4, #20]
 8008086:	60a3      	str	r3, [r4, #8]
 8008088:	e7f2      	b.n	8008070 <__swsetup_r+0xac>
 800808a:	2000      	movs	r0, #0
 800808c:	e7f7      	b.n	800807e <__swsetup_r+0xba>
 800808e:	bf00      	nop
 8008090:	2000007c 	.word	0x2000007c
 8008094:	08009044 	.word	0x08009044
 8008098:	08009064 	.word	0x08009064
 800809c:	08009024 	.word	0x08009024

080080a0 <__sflush_r>:
 80080a0:	898a      	ldrh	r2, [r1, #12]
 80080a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080a6:	4605      	mov	r5, r0
 80080a8:	0710      	lsls	r0, r2, #28
 80080aa:	460c      	mov	r4, r1
 80080ac:	d45a      	bmi.n	8008164 <__sflush_r+0xc4>
 80080ae:	684b      	ldr	r3, [r1, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	dc05      	bgt.n	80080c0 <__sflush_r+0x20>
 80080b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	dc02      	bgt.n	80080c0 <__sflush_r+0x20>
 80080ba:	2000      	movs	r0, #0
 80080bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080c2:	2e00      	cmp	r6, #0
 80080c4:	d0f9      	beq.n	80080ba <__sflush_r+0x1a>
 80080c6:	2300      	movs	r3, #0
 80080c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080cc:	682f      	ldr	r7, [r5, #0]
 80080ce:	602b      	str	r3, [r5, #0]
 80080d0:	d033      	beq.n	800813a <__sflush_r+0x9a>
 80080d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080d4:	89a3      	ldrh	r3, [r4, #12]
 80080d6:	075a      	lsls	r2, r3, #29
 80080d8:	d505      	bpl.n	80080e6 <__sflush_r+0x46>
 80080da:	6863      	ldr	r3, [r4, #4]
 80080dc:	1ac0      	subs	r0, r0, r3
 80080de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080e0:	b10b      	cbz	r3, 80080e6 <__sflush_r+0x46>
 80080e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080e4:	1ac0      	subs	r0, r0, r3
 80080e6:	2300      	movs	r3, #0
 80080e8:	4602      	mov	r2, r0
 80080ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080ec:	6a21      	ldr	r1, [r4, #32]
 80080ee:	4628      	mov	r0, r5
 80080f0:	47b0      	blx	r6
 80080f2:	1c43      	adds	r3, r0, #1
 80080f4:	89a3      	ldrh	r3, [r4, #12]
 80080f6:	d106      	bne.n	8008106 <__sflush_r+0x66>
 80080f8:	6829      	ldr	r1, [r5, #0]
 80080fa:	291d      	cmp	r1, #29
 80080fc:	d84b      	bhi.n	8008196 <__sflush_r+0xf6>
 80080fe:	4a2b      	ldr	r2, [pc, #172]	; (80081ac <__sflush_r+0x10c>)
 8008100:	40ca      	lsrs	r2, r1
 8008102:	07d6      	lsls	r6, r2, #31
 8008104:	d547      	bpl.n	8008196 <__sflush_r+0xf6>
 8008106:	2200      	movs	r2, #0
 8008108:	6062      	str	r2, [r4, #4]
 800810a:	04d9      	lsls	r1, r3, #19
 800810c:	6922      	ldr	r2, [r4, #16]
 800810e:	6022      	str	r2, [r4, #0]
 8008110:	d504      	bpl.n	800811c <__sflush_r+0x7c>
 8008112:	1c42      	adds	r2, r0, #1
 8008114:	d101      	bne.n	800811a <__sflush_r+0x7a>
 8008116:	682b      	ldr	r3, [r5, #0]
 8008118:	b903      	cbnz	r3, 800811c <__sflush_r+0x7c>
 800811a:	6560      	str	r0, [r4, #84]	; 0x54
 800811c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800811e:	602f      	str	r7, [r5, #0]
 8008120:	2900      	cmp	r1, #0
 8008122:	d0ca      	beq.n	80080ba <__sflush_r+0x1a>
 8008124:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008128:	4299      	cmp	r1, r3
 800812a:	d002      	beq.n	8008132 <__sflush_r+0x92>
 800812c:	4628      	mov	r0, r5
 800812e:	f7ff fd15 	bl	8007b5c <_free_r>
 8008132:	2000      	movs	r0, #0
 8008134:	6360      	str	r0, [r4, #52]	; 0x34
 8008136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800813a:	6a21      	ldr	r1, [r4, #32]
 800813c:	2301      	movs	r3, #1
 800813e:	4628      	mov	r0, r5
 8008140:	47b0      	blx	r6
 8008142:	1c41      	adds	r1, r0, #1
 8008144:	d1c6      	bne.n	80080d4 <__sflush_r+0x34>
 8008146:	682b      	ldr	r3, [r5, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d0c3      	beq.n	80080d4 <__sflush_r+0x34>
 800814c:	2b1d      	cmp	r3, #29
 800814e:	d001      	beq.n	8008154 <__sflush_r+0xb4>
 8008150:	2b16      	cmp	r3, #22
 8008152:	d101      	bne.n	8008158 <__sflush_r+0xb8>
 8008154:	602f      	str	r7, [r5, #0]
 8008156:	e7b0      	b.n	80080ba <__sflush_r+0x1a>
 8008158:	89a3      	ldrh	r3, [r4, #12]
 800815a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800815e:	81a3      	strh	r3, [r4, #12]
 8008160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008164:	690f      	ldr	r7, [r1, #16]
 8008166:	2f00      	cmp	r7, #0
 8008168:	d0a7      	beq.n	80080ba <__sflush_r+0x1a>
 800816a:	0793      	lsls	r3, r2, #30
 800816c:	680e      	ldr	r6, [r1, #0]
 800816e:	bf08      	it	eq
 8008170:	694b      	ldreq	r3, [r1, #20]
 8008172:	600f      	str	r7, [r1, #0]
 8008174:	bf18      	it	ne
 8008176:	2300      	movne	r3, #0
 8008178:	eba6 0807 	sub.w	r8, r6, r7
 800817c:	608b      	str	r3, [r1, #8]
 800817e:	f1b8 0f00 	cmp.w	r8, #0
 8008182:	dd9a      	ble.n	80080ba <__sflush_r+0x1a>
 8008184:	4643      	mov	r3, r8
 8008186:	463a      	mov	r2, r7
 8008188:	6a21      	ldr	r1, [r4, #32]
 800818a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800818c:	4628      	mov	r0, r5
 800818e:	47b0      	blx	r6
 8008190:	2800      	cmp	r0, #0
 8008192:	dc07      	bgt.n	80081a4 <__sflush_r+0x104>
 8008194:	89a3      	ldrh	r3, [r4, #12]
 8008196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800819a:	81a3      	strh	r3, [r4, #12]
 800819c:	f04f 30ff 	mov.w	r0, #4294967295
 80081a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081a4:	4407      	add	r7, r0
 80081a6:	eba8 0800 	sub.w	r8, r8, r0
 80081aa:	e7e8      	b.n	800817e <__sflush_r+0xde>
 80081ac:	20400001 	.word	0x20400001

080081b0 <_fflush_r>:
 80081b0:	b538      	push	{r3, r4, r5, lr}
 80081b2:	690b      	ldr	r3, [r1, #16]
 80081b4:	4605      	mov	r5, r0
 80081b6:	460c      	mov	r4, r1
 80081b8:	b1db      	cbz	r3, 80081f2 <_fflush_r+0x42>
 80081ba:	b118      	cbz	r0, 80081c4 <_fflush_r+0x14>
 80081bc:	6983      	ldr	r3, [r0, #24]
 80081be:	b90b      	cbnz	r3, 80081c4 <_fflush_r+0x14>
 80081c0:	f000 f860 	bl	8008284 <__sinit>
 80081c4:	4b0c      	ldr	r3, [pc, #48]	; (80081f8 <_fflush_r+0x48>)
 80081c6:	429c      	cmp	r4, r3
 80081c8:	d109      	bne.n	80081de <_fflush_r+0x2e>
 80081ca:	686c      	ldr	r4, [r5, #4]
 80081cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081d0:	b17b      	cbz	r3, 80081f2 <_fflush_r+0x42>
 80081d2:	4621      	mov	r1, r4
 80081d4:	4628      	mov	r0, r5
 80081d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081da:	f7ff bf61 	b.w	80080a0 <__sflush_r>
 80081de:	4b07      	ldr	r3, [pc, #28]	; (80081fc <_fflush_r+0x4c>)
 80081e0:	429c      	cmp	r4, r3
 80081e2:	d101      	bne.n	80081e8 <_fflush_r+0x38>
 80081e4:	68ac      	ldr	r4, [r5, #8]
 80081e6:	e7f1      	b.n	80081cc <_fflush_r+0x1c>
 80081e8:	4b05      	ldr	r3, [pc, #20]	; (8008200 <_fflush_r+0x50>)
 80081ea:	429c      	cmp	r4, r3
 80081ec:	bf08      	it	eq
 80081ee:	68ec      	ldreq	r4, [r5, #12]
 80081f0:	e7ec      	b.n	80081cc <_fflush_r+0x1c>
 80081f2:	2000      	movs	r0, #0
 80081f4:	bd38      	pop	{r3, r4, r5, pc}
 80081f6:	bf00      	nop
 80081f8:	08009044 	.word	0x08009044
 80081fc:	08009064 	.word	0x08009064
 8008200:	08009024 	.word	0x08009024

08008204 <_cleanup_r>:
 8008204:	4901      	ldr	r1, [pc, #4]	; (800820c <_cleanup_r+0x8>)
 8008206:	f000 b8a9 	b.w	800835c <_fwalk_reent>
 800820a:	bf00      	nop
 800820c:	080081b1 	.word	0x080081b1

08008210 <std.isra.0>:
 8008210:	2300      	movs	r3, #0
 8008212:	b510      	push	{r4, lr}
 8008214:	4604      	mov	r4, r0
 8008216:	6003      	str	r3, [r0, #0]
 8008218:	6043      	str	r3, [r0, #4]
 800821a:	6083      	str	r3, [r0, #8]
 800821c:	8181      	strh	r1, [r0, #12]
 800821e:	6643      	str	r3, [r0, #100]	; 0x64
 8008220:	81c2      	strh	r2, [r0, #14]
 8008222:	6103      	str	r3, [r0, #16]
 8008224:	6143      	str	r3, [r0, #20]
 8008226:	6183      	str	r3, [r0, #24]
 8008228:	4619      	mov	r1, r3
 800822a:	2208      	movs	r2, #8
 800822c:	305c      	adds	r0, #92	; 0x5c
 800822e:	f7ff fc8c 	bl	8007b4a <memset>
 8008232:	4b05      	ldr	r3, [pc, #20]	; (8008248 <std.isra.0+0x38>)
 8008234:	6263      	str	r3, [r4, #36]	; 0x24
 8008236:	4b05      	ldr	r3, [pc, #20]	; (800824c <std.isra.0+0x3c>)
 8008238:	62a3      	str	r3, [r4, #40]	; 0x28
 800823a:	4b05      	ldr	r3, [pc, #20]	; (8008250 <std.isra.0+0x40>)
 800823c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800823e:	4b05      	ldr	r3, [pc, #20]	; (8008254 <std.isra.0+0x44>)
 8008240:	6224      	str	r4, [r4, #32]
 8008242:	6323      	str	r3, [r4, #48]	; 0x30
 8008244:	bd10      	pop	{r4, pc}
 8008246:	bf00      	nop
 8008248:	08008a5d 	.word	0x08008a5d
 800824c:	08008a7f 	.word	0x08008a7f
 8008250:	08008ab7 	.word	0x08008ab7
 8008254:	08008adb 	.word	0x08008adb

08008258 <__sfmoreglue>:
 8008258:	b570      	push	{r4, r5, r6, lr}
 800825a:	1e4a      	subs	r2, r1, #1
 800825c:	2568      	movs	r5, #104	; 0x68
 800825e:	4355      	muls	r5, r2
 8008260:	460e      	mov	r6, r1
 8008262:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008266:	f7ff fcc7 	bl	8007bf8 <_malloc_r>
 800826a:	4604      	mov	r4, r0
 800826c:	b140      	cbz	r0, 8008280 <__sfmoreglue+0x28>
 800826e:	2100      	movs	r1, #0
 8008270:	e880 0042 	stmia.w	r0, {r1, r6}
 8008274:	300c      	adds	r0, #12
 8008276:	60a0      	str	r0, [r4, #8]
 8008278:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800827c:	f7ff fc65 	bl	8007b4a <memset>
 8008280:	4620      	mov	r0, r4
 8008282:	bd70      	pop	{r4, r5, r6, pc}

08008284 <__sinit>:
 8008284:	6983      	ldr	r3, [r0, #24]
 8008286:	b510      	push	{r4, lr}
 8008288:	4604      	mov	r4, r0
 800828a:	bb33      	cbnz	r3, 80082da <__sinit+0x56>
 800828c:	6483      	str	r3, [r0, #72]	; 0x48
 800828e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8008290:	6503      	str	r3, [r0, #80]	; 0x50
 8008292:	4b12      	ldr	r3, [pc, #72]	; (80082dc <__sinit+0x58>)
 8008294:	4a12      	ldr	r2, [pc, #72]	; (80082e0 <__sinit+0x5c>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6282      	str	r2, [r0, #40]	; 0x28
 800829a:	4298      	cmp	r0, r3
 800829c:	bf04      	itt	eq
 800829e:	2301      	moveq	r3, #1
 80082a0:	6183      	streq	r3, [r0, #24]
 80082a2:	f000 f81f 	bl	80082e4 <__sfp>
 80082a6:	6060      	str	r0, [r4, #4]
 80082a8:	4620      	mov	r0, r4
 80082aa:	f000 f81b 	bl	80082e4 <__sfp>
 80082ae:	60a0      	str	r0, [r4, #8]
 80082b0:	4620      	mov	r0, r4
 80082b2:	f000 f817 	bl	80082e4 <__sfp>
 80082b6:	2200      	movs	r2, #0
 80082b8:	60e0      	str	r0, [r4, #12]
 80082ba:	2104      	movs	r1, #4
 80082bc:	6860      	ldr	r0, [r4, #4]
 80082be:	f7ff ffa7 	bl	8008210 <std.isra.0>
 80082c2:	2201      	movs	r2, #1
 80082c4:	2109      	movs	r1, #9
 80082c6:	68a0      	ldr	r0, [r4, #8]
 80082c8:	f7ff ffa2 	bl	8008210 <std.isra.0>
 80082cc:	2202      	movs	r2, #2
 80082ce:	2112      	movs	r1, #18
 80082d0:	68e0      	ldr	r0, [r4, #12]
 80082d2:	f7ff ff9d 	bl	8008210 <std.isra.0>
 80082d6:	2301      	movs	r3, #1
 80082d8:	61a3      	str	r3, [r4, #24]
 80082da:	bd10      	pop	{r4, pc}
 80082dc:	08009084 	.word	0x08009084
 80082e0:	08008205 	.word	0x08008205

080082e4 <__sfp>:
 80082e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e6:	4b1c      	ldr	r3, [pc, #112]	; (8008358 <__sfp+0x74>)
 80082e8:	681e      	ldr	r6, [r3, #0]
 80082ea:	69b3      	ldr	r3, [r6, #24]
 80082ec:	4607      	mov	r7, r0
 80082ee:	b913      	cbnz	r3, 80082f6 <__sfp+0x12>
 80082f0:	4630      	mov	r0, r6
 80082f2:	f7ff ffc7 	bl	8008284 <__sinit>
 80082f6:	3648      	adds	r6, #72	; 0x48
 80082f8:	68b4      	ldr	r4, [r6, #8]
 80082fa:	6873      	ldr	r3, [r6, #4]
 80082fc:	3b01      	subs	r3, #1
 80082fe:	d503      	bpl.n	8008308 <__sfp+0x24>
 8008300:	6833      	ldr	r3, [r6, #0]
 8008302:	b133      	cbz	r3, 8008312 <__sfp+0x2e>
 8008304:	6836      	ldr	r6, [r6, #0]
 8008306:	e7f7      	b.n	80082f8 <__sfp+0x14>
 8008308:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800830c:	b16d      	cbz	r5, 800832a <__sfp+0x46>
 800830e:	3468      	adds	r4, #104	; 0x68
 8008310:	e7f4      	b.n	80082fc <__sfp+0x18>
 8008312:	2104      	movs	r1, #4
 8008314:	4638      	mov	r0, r7
 8008316:	f7ff ff9f 	bl	8008258 <__sfmoreglue>
 800831a:	6030      	str	r0, [r6, #0]
 800831c:	2800      	cmp	r0, #0
 800831e:	d1f1      	bne.n	8008304 <__sfp+0x20>
 8008320:	230c      	movs	r3, #12
 8008322:	603b      	str	r3, [r7, #0]
 8008324:	4604      	mov	r4, r0
 8008326:	4620      	mov	r0, r4
 8008328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800832a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800832e:	81e3      	strh	r3, [r4, #14]
 8008330:	2301      	movs	r3, #1
 8008332:	81a3      	strh	r3, [r4, #12]
 8008334:	6665      	str	r5, [r4, #100]	; 0x64
 8008336:	6025      	str	r5, [r4, #0]
 8008338:	60a5      	str	r5, [r4, #8]
 800833a:	6065      	str	r5, [r4, #4]
 800833c:	6125      	str	r5, [r4, #16]
 800833e:	6165      	str	r5, [r4, #20]
 8008340:	61a5      	str	r5, [r4, #24]
 8008342:	2208      	movs	r2, #8
 8008344:	4629      	mov	r1, r5
 8008346:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800834a:	f7ff fbfe 	bl	8007b4a <memset>
 800834e:	6365      	str	r5, [r4, #52]	; 0x34
 8008350:	63a5      	str	r5, [r4, #56]	; 0x38
 8008352:	64a5      	str	r5, [r4, #72]	; 0x48
 8008354:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008356:	e7e6      	b.n	8008326 <__sfp+0x42>
 8008358:	08009084 	.word	0x08009084

0800835c <_fwalk_reent>:
 800835c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008360:	4680      	mov	r8, r0
 8008362:	4689      	mov	r9, r1
 8008364:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008368:	2600      	movs	r6, #0
 800836a:	b914      	cbnz	r4, 8008372 <_fwalk_reent+0x16>
 800836c:	4630      	mov	r0, r6
 800836e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008372:	68a5      	ldr	r5, [r4, #8]
 8008374:	6867      	ldr	r7, [r4, #4]
 8008376:	3f01      	subs	r7, #1
 8008378:	d501      	bpl.n	800837e <_fwalk_reent+0x22>
 800837a:	6824      	ldr	r4, [r4, #0]
 800837c:	e7f5      	b.n	800836a <_fwalk_reent+0xe>
 800837e:	89ab      	ldrh	r3, [r5, #12]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d907      	bls.n	8008394 <_fwalk_reent+0x38>
 8008384:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008388:	3301      	adds	r3, #1
 800838a:	d003      	beq.n	8008394 <_fwalk_reent+0x38>
 800838c:	4629      	mov	r1, r5
 800838e:	4640      	mov	r0, r8
 8008390:	47c8      	blx	r9
 8008392:	4306      	orrs	r6, r0
 8008394:	3568      	adds	r5, #104	; 0x68
 8008396:	e7ee      	b.n	8008376 <_fwalk_reent+0x1a>

08008398 <__locale_ctype_ptr_l>:
 8008398:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800839c:	4770      	bx	lr

0800839e <__swhatbuf_r>:
 800839e:	b570      	push	{r4, r5, r6, lr}
 80083a0:	460e      	mov	r6, r1
 80083a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083a6:	2900      	cmp	r1, #0
 80083a8:	b090      	sub	sp, #64	; 0x40
 80083aa:	4614      	mov	r4, r2
 80083ac:	461d      	mov	r5, r3
 80083ae:	da07      	bge.n	80083c0 <__swhatbuf_r+0x22>
 80083b0:	2300      	movs	r3, #0
 80083b2:	602b      	str	r3, [r5, #0]
 80083b4:	89b3      	ldrh	r3, [r6, #12]
 80083b6:	061a      	lsls	r2, r3, #24
 80083b8:	d410      	bmi.n	80083dc <__swhatbuf_r+0x3e>
 80083ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083be:	e00e      	b.n	80083de <__swhatbuf_r+0x40>
 80083c0:	aa01      	add	r2, sp, #4
 80083c2:	f000 fbbd 	bl	8008b40 <_fstat_r>
 80083c6:	2800      	cmp	r0, #0
 80083c8:	dbf2      	blt.n	80083b0 <__swhatbuf_r+0x12>
 80083ca:	9a02      	ldr	r2, [sp, #8]
 80083cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80083d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80083d4:	425a      	negs	r2, r3
 80083d6:	415a      	adcs	r2, r3
 80083d8:	602a      	str	r2, [r5, #0]
 80083da:	e7ee      	b.n	80083ba <__swhatbuf_r+0x1c>
 80083dc:	2340      	movs	r3, #64	; 0x40
 80083de:	2000      	movs	r0, #0
 80083e0:	6023      	str	r3, [r4, #0]
 80083e2:	b010      	add	sp, #64	; 0x40
 80083e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080083e8 <__smakebuf_r>:
 80083e8:	898b      	ldrh	r3, [r1, #12]
 80083ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083ec:	079d      	lsls	r5, r3, #30
 80083ee:	4606      	mov	r6, r0
 80083f0:	460c      	mov	r4, r1
 80083f2:	d507      	bpl.n	8008404 <__smakebuf_r+0x1c>
 80083f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083f8:	6023      	str	r3, [r4, #0]
 80083fa:	6123      	str	r3, [r4, #16]
 80083fc:	2301      	movs	r3, #1
 80083fe:	6163      	str	r3, [r4, #20]
 8008400:	b002      	add	sp, #8
 8008402:	bd70      	pop	{r4, r5, r6, pc}
 8008404:	ab01      	add	r3, sp, #4
 8008406:	466a      	mov	r2, sp
 8008408:	f7ff ffc9 	bl	800839e <__swhatbuf_r>
 800840c:	9900      	ldr	r1, [sp, #0]
 800840e:	4605      	mov	r5, r0
 8008410:	4630      	mov	r0, r6
 8008412:	f7ff fbf1 	bl	8007bf8 <_malloc_r>
 8008416:	b948      	cbnz	r0, 800842c <__smakebuf_r+0x44>
 8008418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800841c:	059a      	lsls	r2, r3, #22
 800841e:	d4ef      	bmi.n	8008400 <__smakebuf_r+0x18>
 8008420:	f023 0303 	bic.w	r3, r3, #3
 8008424:	f043 0302 	orr.w	r3, r3, #2
 8008428:	81a3      	strh	r3, [r4, #12]
 800842a:	e7e3      	b.n	80083f4 <__smakebuf_r+0xc>
 800842c:	4b0d      	ldr	r3, [pc, #52]	; (8008464 <__smakebuf_r+0x7c>)
 800842e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008430:	89a3      	ldrh	r3, [r4, #12]
 8008432:	6020      	str	r0, [r4, #0]
 8008434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008438:	81a3      	strh	r3, [r4, #12]
 800843a:	9b00      	ldr	r3, [sp, #0]
 800843c:	6163      	str	r3, [r4, #20]
 800843e:	9b01      	ldr	r3, [sp, #4]
 8008440:	6120      	str	r0, [r4, #16]
 8008442:	b15b      	cbz	r3, 800845c <__smakebuf_r+0x74>
 8008444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008448:	4630      	mov	r0, r6
 800844a:	f000 fb8b 	bl	8008b64 <_isatty_r>
 800844e:	b128      	cbz	r0, 800845c <__smakebuf_r+0x74>
 8008450:	89a3      	ldrh	r3, [r4, #12]
 8008452:	f023 0303 	bic.w	r3, r3, #3
 8008456:	f043 0301 	orr.w	r3, r3, #1
 800845a:	81a3      	strh	r3, [r4, #12]
 800845c:	89a3      	ldrh	r3, [r4, #12]
 800845e:	431d      	orrs	r5, r3
 8008460:	81a5      	strh	r5, [r4, #12]
 8008462:	e7cd      	b.n	8008400 <__smakebuf_r+0x18>
 8008464:	08008205 	.word	0x08008205

08008468 <__ascii_mbtowc>:
 8008468:	b082      	sub	sp, #8
 800846a:	b901      	cbnz	r1, 800846e <__ascii_mbtowc+0x6>
 800846c:	a901      	add	r1, sp, #4
 800846e:	b142      	cbz	r2, 8008482 <__ascii_mbtowc+0x1a>
 8008470:	b14b      	cbz	r3, 8008486 <__ascii_mbtowc+0x1e>
 8008472:	7813      	ldrb	r3, [r2, #0]
 8008474:	600b      	str	r3, [r1, #0]
 8008476:	7812      	ldrb	r2, [r2, #0]
 8008478:	1c10      	adds	r0, r2, #0
 800847a:	bf18      	it	ne
 800847c:	2001      	movne	r0, #1
 800847e:	b002      	add	sp, #8
 8008480:	4770      	bx	lr
 8008482:	4610      	mov	r0, r2
 8008484:	e7fb      	b.n	800847e <__ascii_mbtowc+0x16>
 8008486:	f06f 0001 	mvn.w	r0, #1
 800848a:	e7f8      	b.n	800847e <__ascii_mbtowc+0x16>

0800848c <__malloc_lock>:
 800848c:	4770      	bx	lr

0800848e <__malloc_unlock>:
 800848e:	4770      	bx	lr

08008490 <__ssputs_r>:
 8008490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008494:	688e      	ldr	r6, [r1, #8]
 8008496:	429e      	cmp	r6, r3
 8008498:	4682      	mov	sl, r0
 800849a:	460c      	mov	r4, r1
 800849c:	4691      	mov	r9, r2
 800849e:	4698      	mov	r8, r3
 80084a0:	d835      	bhi.n	800850e <__ssputs_r+0x7e>
 80084a2:	898a      	ldrh	r2, [r1, #12]
 80084a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084a8:	d031      	beq.n	800850e <__ssputs_r+0x7e>
 80084aa:	6825      	ldr	r5, [r4, #0]
 80084ac:	6909      	ldr	r1, [r1, #16]
 80084ae:	1a6f      	subs	r7, r5, r1
 80084b0:	6965      	ldr	r5, [r4, #20]
 80084b2:	2302      	movs	r3, #2
 80084b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084b8:	fb95 f5f3 	sdiv	r5, r5, r3
 80084bc:	f108 0301 	add.w	r3, r8, #1
 80084c0:	443b      	add	r3, r7
 80084c2:	429d      	cmp	r5, r3
 80084c4:	bf38      	it	cc
 80084c6:	461d      	movcc	r5, r3
 80084c8:	0553      	lsls	r3, r2, #21
 80084ca:	d531      	bpl.n	8008530 <__ssputs_r+0xa0>
 80084cc:	4629      	mov	r1, r5
 80084ce:	f7ff fb93 	bl	8007bf8 <_malloc_r>
 80084d2:	4606      	mov	r6, r0
 80084d4:	b950      	cbnz	r0, 80084ec <__ssputs_r+0x5c>
 80084d6:	230c      	movs	r3, #12
 80084d8:	f8ca 3000 	str.w	r3, [sl]
 80084dc:	89a3      	ldrh	r3, [r4, #12]
 80084de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084e2:	81a3      	strh	r3, [r4, #12]
 80084e4:	f04f 30ff 	mov.w	r0, #4294967295
 80084e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ec:	463a      	mov	r2, r7
 80084ee:	6921      	ldr	r1, [r4, #16]
 80084f0:	f7ff fb20 	bl	8007b34 <memcpy>
 80084f4:	89a3      	ldrh	r3, [r4, #12]
 80084f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084fe:	81a3      	strh	r3, [r4, #12]
 8008500:	6126      	str	r6, [r4, #16]
 8008502:	6165      	str	r5, [r4, #20]
 8008504:	443e      	add	r6, r7
 8008506:	1bed      	subs	r5, r5, r7
 8008508:	6026      	str	r6, [r4, #0]
 800850a:	60a5      	str	r5, [r4, #8]
 800850c:	4646      	mov	r6, r8
 800850e:	4546      	cmp	r6, r8
 8008510:	bf28      	it	cs
 8008512:	4646      	movcs	r6, r8
 8008514:	4632      	mov	r2, r6
 8008516:	4649      	mov	r1, r9
 8008518:	6820      	ldr	r0, [r4, #0]
 800851a:	f000 fb45 	bl	8008ba8 <memmove>
 800851e:	68a3      	ldr	r3, [r4, #8]
 8008520:	1b9b      	subs	r3, r3, r6
 8008522:	60a3      	str	r3, [r4, #8]
 8008524:	6823      	ldr	r3, [r4, #0]
 8008526:	441e      	add	r6, r3
 8008528:	6026      	str	r6, [r4, #0]
 800852a:	2000      	movs	r0, #0
 800852c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008530:	462a      	mov	r2, r5
 8008532:	f000 fb53 	bl	8008bdc <_realloc_r>
 8008536:	4606      	mov	r6, r0
 8008538:	2800      	cmp	r0, #0
 800853a:	d1e1      	bne.n	8008500 <__ssputs_r+0x70>
 800853c:	6921      	ldr	r1, [r4, #16]
 800853e:	4650      	mov	r0, sl
 8008540:	f7ff fb0c 	bl	8007b5c <_free_r>
 8008544:	e7c7      	b.n	80084d6 <__ssputs_r+0x46>
	...

08008548 <_svfiprintf_r>:
 8008548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854c:	b09d      	sub	sp, #116	; 0x74
 800854e:	4680      	mov	r8, r0
 8008550:	9303      	str	r3, [sp, #12]
 8008552:	898b      	ldrh	r3, [r1, #12]
 8008554:	061c      	lsls	r4, r3, #24
 8008556:	460d      	mov	r5, r1
 8008558:	4616      	mov	r6, r2
 800855a:	d50f      	bpl.n	800857c <_svfiprintf_r+0x34>
 800855c:	690b      	ldr	r3, [r1, #16]
 800855e:	b96b      	cbnz	r3, 800857c <_svfiprintf_r+0x34>
 8008560:	2140      	movs	r1, #64	; 0x40
 8008562:	f7ff fb49 	bl	8007bf8 <_malloc_r>
 8008566:	6028      	str	r0, [r5, #0]
 8008568:	6128      	str	r0, [r5, #16]
 800856a:	b928      	cbnz	r0, 8008578 <_svfiprintf_r+0x30>
 800856c:	230c      	movs	r3, #12
 800856e:	f8c8 3000 	str.w	r3, [r8]
 8008572:	f04f 30ff 	mov.w	r0, #4294967295
 8008576:	e0c5      	b.n	8008704 <_svfiprintf_r+0x1bc>
 8008578:	2340      	movs	r3, #64	; 0x40
 800857a:	616b      	str	r3, [r5, #20]
 800857c:	2300      	movs	r3, #0
 800857e:	9309      	str	r3, [sp, #36]	; 0x24
 8008580:	2320      	movs	r3, #32
 8008582:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008586:	2330      	movs	r3, #48	; 0x30
 8008588:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800858c:	f04f 0b01 	mov.w	fp, #1
 8008590:	4637      	mov	r7, r6
 8008592:	463c      	mov	r4, r7
 8008594:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008598:	2b00      	cmp	r3, #0
 800859a:	d13c      	bne.n	8008616 <_svfiprintf_r+0xce>
 800859c:	ebb7 0a06 	subs.w	sl, r7, r6
 80085a0:	d00b      	beq.n	80085ba <_svfiprintf_r+0x72>
 80085a2:	4653      	mov	r3, sl
 80085a4:	4632      	mov	r2, r6
 80085a6:	4629      	mov	r1, r5
 80085a8:	4640      	mov	r0, r8
 80085aa:	f7ff ff71 	bl	8008490 <__ssputs_r>
 80085ae:	3001      	adds	r0, #1
 80085b0:	f000 80a3 	beq.w	80086fa <_svfiprintf_r+0x1b2>
 80085b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b6:	4453      	add	r3, sl
 80085b8:	9309      	str	r3, [sp, #36]	; 0x24
 80085ba:	783b      	ldrb	r3, [r7, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 809c 	beq.w	80086fa <_svfiprintf_r+0x1b2>
 80085c2:	2300      	movs	r3, #0
 80085c4:	f04f 32ff 	mov.w	r2, #4294967295
 80085c8:	9304      	str	r3, [sp, #16]
 80085ca:	9307      	str	r3, [sp, #28]
 80085cc:	9205      	str	r2, [sp, #20]
 80085ce:	9306      	str	r3, [sp, #24]
 80085d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085d4:	931a      	str	r3, [sp, #104]	; 0x68
 80085d6:	2205      	movs	r2, #5
 80085d8:	7821      	ldrb	r1, [r4, #0]
 80085da:	4850      	ldr	r0, [pc, #320]	; (800871c <_svfiprintf_r+0x1d4>)
 80085dc:	f7f7 fe00 	bl	80001e0 <memchr>
 80085e0:	1c67      	adds	r7, r4, #1
 80085e2:	9b04      	ldr	r3, [sp, #16]
 80085e4:	b9d8      	cbnz	r0, 800861e <_svfiprintf_r+0xd6>
 80085e6:	06d9      	lsls	r1, r3, #27
 80085e8:	bf44      	itt	mi
 80085ea:	2220      	movmi	r2, #32
 80085ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80085f0:	071a      	lsls	r2, r3, #28
 80085f2:	bf44      	itt	mi
 80085f4:	222b      	movmi	r2, #43	; 0x2b
 80085f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80085fa:	7822      	ldrb	r2, [r4, #0]
 80085fc:	2a2a      	cmp	r2, #42	; 0x2a
 80085fe:	d016      	beq.n	800862e <_svfiprintf_r+0xe6>
 8008600:	9a07      	ldr	r2, [sp, #28]
 8008602:	2100      	movs	r1, #0
 8008604:	200a      	movs	r0, #10
 8008606:	4627      	mov	r7, r4
 8008608:	3401      	adds	r4, #1
 800860a:	783b      	ldrb	r3, [r7, #0]
 800860c:	3b30      	subs	r3, #48	; 0x30
 800860e:	2b09      	cmp	r3, #9
 8008610:	d951      	bls.n	80086b6 <_svfiprintf_r+0x16e>
 8008612:	b1c9      	cbz	r1, 8008648 <_svfiprintf_r+0x100>
 8008614:	e011      	b.n	800863a <_svfiprintf_r+0xf2>
 8008616:	2b25      	cmp	r3, #37	; 0x25
 8008618:	d0c0      	beq.n	800859c <_svfiprintf_r+0x54>
 800861a:	4627      	mov	r7, r4
 800861c:	e7b9      	b.n	8008592 <_svfiprintf_r+0x4a>
 800861e:	4a3f      	ldr	r2, [pc, #252]	; (800871c <_svfiprintf_r+0x1d4>)
 8008620:	1a80      	subs	r0, r0, r2
 8008622:	fa0b f000 	lsl.w	r0, fp, r0
 8008626:	4318      	orrs	r0, r3
 8008628:	9004      	str	r0, [sp, #16]
 800862a:	463c      	mov	r4, r7
 800862c:	e7d3      	b.n	80085d6 <_svfiprintf_r+0x8e>
 800862e:	9a03      	ldr	r2, [sp, #12]
 8008630:	1d11      	adds	r1, r2, #4
 8008632:	6812      	ldr	r2, [r2, #0]
 8008634:	9103      	str	r1, [sp, #12]
 8008636:	2a00      	cmp	r2, #0
 8008638:	db01      	blt.n	800863e <_svfiprintf_r+0xf6>
 800863a:	9207      	str	r2, [sp, #28]
 800863c:	e004      	b.n	8008648 <_svfiprintf_r+0x100>
 800863e:	4252      	negs	r2, r2
 8008640:	f043 0302 	orr.w	r3, r3, #2
 8008644:	9207      	str	r2, [sp, #28]
 8008646:	9304      	str	r3, [sp, #16]
 8008648:	783b      	ldrb	r3, [r7, #0]
 800864a:	2b2e      	cmp	r3, #46	; 0x2e
 800864c:	d10e      	bne.n	800866c <_svfiprintf_r+0x124>
 800864e:	787b      	ldrb	r3, [r7, #1]
 8008650:	2b2a      	cmp	r3, #42	; 0x2a
 8008652:	f107 0101 	add.w	r1, r7, #1
 8008656:	d132      	bne.n	80086be <_svfiprintf_r+0x176>
 8008658:	9b03      	ldr	r3, [sp, #12]
 800865a:	1d1a      	adds	r2, r3, #4
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	9203      	str	r2, [sp, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	bfb8      	it	lt
 8008664:	f04f 33ff 	movlt.w	r3, #4294967295
 8008668:	3702      	adds	r7, #2
 800866a:	9305      	str	r3, [sp, #20]
 800866c:	4c2c      	ldr	r4, [pc, #176]	; (8008720 <_svfiprintf_r+0x1d8>)
 800866e:	7839      	ldrb	r1, [r7, #0]
 8008670:	2203      	movs	r2, #3
 8008672:	4620      	mov	r0, r4
 8008674:	f7f7 fdb4 	bl	80001e0 <memchr>
 8008678:	b138      	cbz	r0, 800868a <_svfiprintf_r+0x142>
 800867a:	2340      	movs	r3, #64	; 0x40
 800867c:	1b00      	subs	r0, r0, r4
 800867e:	fa03 f000 	lsl.w	r0, r3, r0
 8008682:	9b04      	ldr	r3, [sp, #16]
 8008684:	4303      	orrs	r3, r0
 8008686:	9304      	str	r3, [sp, #16]
 8008688:	3701      	adds	r7, #1
 800868a:	7839      	ldrb	r1, [r7, #0]
 800868c:	4825      	ldr	r0, [pc, #148]	; (8008724 <_svfiprintf_r+0x1dc>)
 800868e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008692:	2206      	movs	r2, #6
 8008694:	1c7e      	adds	r6, r7, #1
 8008696:	f7f7 fda3 	bl	80001e0 <memchr>
 800869a:	2800      	cmp	r0, #0
 800869c:	d035      	beq.n	800870a <_svfiprintf_r+0x1c2>
 800869e:	4b22      	ldr	r3, [pc, #136]	; (8008728 <_svfiprintf_r+0x1e0>)
 80086a0:	b9fb      	cbnz	r3, 80086e2 <_svfiprintf_r+0x19a>
 80086a2:	9b03      	ldr	r3, [sp, #12]
 80086a4:	3307      	adds	r3, #7
 80086a6:	f023 0307 	bic.w	r3, r3, #7
 80086aa:	3308      	adds	r3, #8
 80086ac:	9303      	str	r3, [sp, #12]
 80086ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086b0:	444b      	add	r3, r9
 80086b2:	9309      	str	r3, [sp, #36]	; 0x24
 80086b4:	e76c      	b.n	8008590 <_svfiprintf_r+0x48>
 80086b6:	fb00 3202 	mla	r2, r0, r2, r3
 80086ba:	2101      	movs	r1, #1
 80086bc:	e7a3      	b.n	8008606 <_svfiprintf_r+0xbe>
 80086be:	2300      	movs	r3, #0
 80086c0:	9305      	str	r3, [sp, #20]
 80086c2:	4618      	mov	r0, r3
 80086c4:	240a      	movs	r4, #10
 80086c6:	460f      	mov	r7, r1
 80086c8:	3101      	adds	r1, #1
 80086ca:	783a      	ldrb	r2, [r7, #0]
 80086cc:	3a30      	subs	r2, #48	; 0x30
 80086ce:	2a09      	cmp	r2, #9
 80086d0:	d903      	bls.n	80086da <_svfiprintf_r+0x192>
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d0ca      	beq.n	800866c <_svfiprintf_r+0x124>
 80086d6:	9005      	str	r0, [sp, #20]
 80086d8:	e7c8      	b.n	800866c <_svfiprintf_r+0x124>
 80086da:	fb04 2000 	mla	r0, r4, r0, r2
 80086de:	2301      	movs	r3, #1
 80086e0:	e7f1      	b.n	80086c6 <_svfiprintf_r+0x17e>
 80086e2:	ab03      	add	r3, sp, #12
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	462a      	mov	r2, r5
 80086e8:	4b10      	ldr	r3, [pc, #64]	; (800872c <_svfiprintf_r+0x1e4>)
 80086ea:	a904      	add	r1, sp, #16
 80086ec:	4640      	mov	r0, r8
 80086ee:	f3af 8000 	nop.w
 80086f2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80086f6:	4681      	mov	r9, r0
 80086f8:	d1d9      	bne.n	80086ae <_svfiprintf_r+0x166>
 80086fa:	89ab      	ldrh	r3, [r5, #12]
 80086fc:	065b      	lsls	r3, r3, #25
 80086fe:	f53f af38 	bmi.w	8008572 <_svfiprintf_r+0x2a>
 8008702:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008704:	b01d      	add	sp, #116	; 0x74
 8008706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800870a:	ab03      	add	r3, sp, #12
 800870c:	9300      	str	r3, [sp, #0]
 800870e:	462a      	mov	r2, r5
 8008710:	4b06      	ldr	r3, [pc, #24]	; (800872c <_svfiprintf_r+0x1e4>)
 8008712:	a904      	add	r1, sp, #16
 8008714:	4640      	mov	r0, r8
 8008716:	f000 f881 	bl	800881c <_printf_i>
 800871a:	e7ea      	b.n	80086f2 <_svfiprintf_r+0x1aa>
 800871c:	08009092 	.word	0x08009092
 8008720:	08009098 	.word	0x08009098
 8008724:	0800909c 	.word	0x0800909c
 8008728:	00000000 	.word	0x00000000
 800872c:	08008491 	.word	0x08008491

08008730 <_printf_common>:
 8008730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008734:	4691      	mov	r9, r2
 8008736:	461f      	mov	r7, r3
 8008738:	688a      	ldr	r2, [r1, #8]
 800873a:	690b      	ldr	r3, [r1, #16]
 800873c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008740:	4293      	cmp	r3, r2
 8008742:	bfb8      	it	lt
 8008744:	4613      	movlt	r3, r2
 8008746:	f8c9 3000 	str.w	r3, [r9]
 800874a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800874e:	4606      	mov	r6, r0
 8008750:	460c      	mov	r4, r1
 8008752:	b112      	cbz	r2, 800875a <_printf_common+0x2a>
 8008754:	3301      	adds	r3, #1
 8008756:	f8c9 3000 	str.w	r3, [r9]
 800875a:	6823      	ldr	r3, [r4, #0]
 800875c:	0699      	lsls	r1, r3, #26
 800875e:	bf42      	ittt	mi
 8008760:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008764:	3302      	addmi	r3, #2
 8008766:	f8c9 3000 	strmi.w	r3, [r9]
 800876a:	6825      	ldr	r5, [r4, #0]
 800876c:	f015 0506 	ands.w	r5, r5, #6
 8008770:	d107      	bne.n	8008782 <_printf_common+0x52>
 8008772:	f104 0a19 	add.w	sl, r4, #25
 8008776:	68e3      	ldr	r3, [r4, #12]
 8008778:	f8d9 2000 	ldr.w	r2, [r9]
 800877c:	1a9b      	subs	r3, r3, r2
 800877e:	429d      	cmp	r5, r3
 8008780:	db29      	blt.n	80087d6 <_printf_common+0xa6>
 8008782:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008786:	6822      	ldr	r2, [r4, #0]
 8008788:	3300      	adds	r3, #0
 800878a:	bf18      	it	ne
 800878c:	2301      	movne	r3, #1
 800878e:	0692      	lsls	r2, r2, #26
 8008790:	d42e      	bmi.n	80087f0 <_printf_common+0xc0>
 8008792:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008796:	4639      	mov	r1, r7
 8008798:	4630      	mov	r0, r6
 800879a:	47c0      	blx	r8
 800879c:	3001      	adds	r0, #1
 800879e:	d021      	beq.n	80087e4 <_printf_common+0xb4>
 80087a0:	6823      	ldr	r3, [r4, #0]
 80087a2:	68e5      	ldr	r5, [r4, #12]
 80087a4:	f8d9 2000 	ldr.w	r2, [r9]
 80087a8:	f003 0306 	and.w	r3, r3, #6
 80087ac:	2b04      	cmp	r3, #4
 80087ae:	bf08      	it	eq
 80087b0:	1aad      	subeq	r5, r5, r2
 80087b2:	68a3      	ldr	r3, [r4, #8]
 80087b4:	6922      	ldr	r2, [r4, #16]
 80087b6:	bf0c      	ite	eq
 80087b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087bc:	2500      	movne	r5, #0
 80087be:	4293      	cmp	r3, r2
 80087c0:	bfc4      	itt	gt
 80087c2:	1a9b      	subgt	r3, r3, r2
 80087c4:	18ed      	addgt	r5, r5, r3
 80087c6:	f04f 0900 	mov.w	r9, #0
 80087ca:	341a      	adds	r4, #26
 80087cc:	454d      	cmp	r5, r9
 80087ce:	d11b      	bne.n	8008808 <_printf_common+0xd8>
 80087d0:	2000      	movs	r0, #0
 80087d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087d6:	2301      	movs	r3, #1
 80087d8:	4652      	mov	r2, sl
 80087da:	4639      	mov	r1, r7
 80087dc:	4630      	mov	r0, r6
 80087de:	47c0      	blx	r8
 80087e0:	3001      	adds	r0, #1
 80087e2:	d103      	bne.n	80087ec <_printf_common+0xbc>
 80087e4:	f04f 30ff 	mov.w	r0, #4294967295
 80087e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ec:	3501      	adds	r5, #1
 80087ee:	e7c2      	b.n	8008776 <_printf_common+0x46>
 80087f0:	18e1      	adds	r1, r4, r3
 80087f2:	1c5a      	adds	r2, r3, #1
 80087f4:	2030      	movs	r0, #48	; 0x30
 80087f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087fa:	4422      	add	r2, r4
 80087fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008800:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008804:	3302      	adds	r3, #2
 8008806:	e7c4      	b.n	8008792 <_printf_common+0x62>
 8008808:	2301      	movs	r3, #1
 800880a:	4622      	mov	r2, r4
 800880c:	4639      	mov	r1, r7
 800880e:	4630      	mov	r0, r6
 8008810:	47c0      	blx	r8
 8008812:	3001      	adds	r0, #1
 8008814:	d0e6      	beq.n	80087e4 <_printf_common+0xb4>
 8008816:	f109 0901 	add.w	r9, r9, #1
 800881a:	e7d7      	b.n	80087cc <_printf_common+0x9c>

0800881c <_printf_i>:
 800881c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008820:	4617      	mov	r7, r2
 8008822:	7e0a      	ldrb	r2, [r1, #24]
 8008824:	b085      	sub	sp, #20
 8008826:	2a6e      	cmp	r2, #110	; 0x6e
 8008828:	4698      	mov	r8, r3
 800882a:	4606      	mov	r6, r0
 800882c:	460c      	mov	r4, r1
 800882e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008830:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8008834:	f000 80bc 	beq.w	80089b0 <_printf_i+0x194>
 8008838:	d81a      	bhi.n	8008870 <_printf_i+0x54>
 800883a:	2a63      	cmp	r2, #99	; 0x63
 800883c:	d02e      	beq.n	800889c <_printf_i+0x80>
 800883e:	d80a      	bhi.n	8008856 <_printf_i+0x3a>
 8008840:	2a00      	cmp	r2, #0
 8008842:	f000 80c8 	beq.w	80089d6 <_printf_i+0x1ba>
 8008846:	2a58      	cmp	r2, #88	; 0x58
 8008848:	f000 808a 	beq.w	8008960 <_printf_i+0x144>
 800884c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008850:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8008854:	e02a      	b.n	80088ac <_printf_i+0x90>
 8008856:	2a64      	cmp	r2, #100	; 0x64
 8008858:	d001      	beq.n	800885e <_printf_i+0x42>
 800885a:	2a69      	cmp	r2, #105	; 0x69
 800885c:	d1f6      	bne.n	800884c <_printf_i+0x30>
 800885e:	6821      	ldr	r1, [r4, #0]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008866:	d023      	beq.n	80088b0 <_printf_i+0x94>
 8008868:	1d11      	adds	r1, r2, #4
 800886a:	6019      	str	r1, [r3, #0]
 800886c:	6813      	ldr	r3, [r2, #0]
 800886e:	e027      	b.n	80088c0 <_printf_i+0xa4>
 8008870:	2a73      	cmp	r2, #115	; 0x73
 8008872:	f000 80b4 	beq.w	80089de <_printf_i+0x1c2>
 8008876:	d808      	bhi.n	800888a <_printf_i+0x6e>
 8008878:	2a6f      	cmp	r2, #111	; 0x6f
 800887a:	d02a      	beq.n	80088d2 <_printf_i+0xb6>
 800887c:	2a70      	cmp	r2, #112	; 0x70
 800887e:	d1e5      	bne.n	800884c <_printf_i+0x30>
 8008880:	680a      	ldr	r2, [r1, #0]
 8008882:	f042 0220 	orr.w	r2, r2, #32
 8008886:	600a      	str	r2, [r1, #0]
 8008888:	e003      	b.n	8008892 <_printf_i+0x76>
 800888a:	2a75      	cmp	r2, #117	; 0x75
 800888c:	d021      	beq.n	80088d2 <_printf_i+0xb6>
 800888e:	2a78      	cmp	r2, #120	; 0x78
 8008890:	d1dc      	bne.n	800884c <_printf_i+0x30>
 8008892:	2278      	movs	r2, #120	; 0x78
 8008894:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8008898:	496e      	ldr	r1, [pc, #440]	; (8008a54 <_printf_i+0x238>)
 800889a:	e064      	b.n	8008966 <_printf_i+0x14a>
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80088a2:	1d11      	adds	r1, r2, #4
 80088a4:	6019      	str	r1, [r3, #0]
 80088a6:	6813      	ldr	r3, [r2, #0]
 80088a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088ac:	2301      	movs	r3, #1
 80088ae:	e0a3      	b.n	80089f8 <_printf_i+0x1dc>
 80088b0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80088b4:	f102 0104 	add.w	r1, r2, #4
 80088b8:	6019      	str	r1, [r3, #0]
 80088ba:	d0d7      	beq.n	800886c <_printf_i+0x50>
 80088bc:	f9b2 3000 	ldrsh.w	r3, [r2]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	da03      	bge.n	80088cc <_printf_i+0xb0>
 80088c4:	222d      	movs	r2, #45	; 0x2d
 80088c6:	425b      	negs	r3, r3
 80088c8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80088cc:	4962      	ldr	r1, [pc, #392]	; (8008a58 <_printf_i+0x23c>)
 80088ce:	220a      	movs	r2, #10
 80088d0:	e017      	b.n	8008902 <_printf_i+0xe6>
 80088d2:	6820      	ldr	r0, [r4, #0]
 80088d4:	6819      	ldr	r1, [r3, #0]
 80088d6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80088da:	d003      	beq.n	80088e4 <_printf_i+0xc8>
 80088dc:	1d08      	adds	r0, r1, #4
 80088de:	6018      	str	r0, [r3, #0]
 80088e0:	680b      	ldr	r3, [r1, #0]
 80088e2:	e006      	b.n	80088f2 <_printf_i+0xd6>
 80088e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80088e8:	f101 0004 	add.w	r0, r1, #4
 80088ec:	6018      	str	r0, [r3, #0]
 80088ee:	d0f7      	beq.n	80088e0 <_printf_i+0xc4>
 80088f0:	880b      	ldrh	r3, [r1, #0]
 80088f2:	4959      	ldr	r1, [pc, #356]	; (8008a58 <_printf_i+0x23c>)
 80088f4:	2a6f      	cmp	r2, #111	; 0x6f
 80088f6:	bf14      	ite	ne
 80088f8:	220a      	movne	r2, #10
 80088fa:	2208      	moveq	r2, #8
 80088fc:	2000      	movs	r0, #0
 80088fe:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8008902:	6865      	ldr	r5, [r4, #4]
 8008904:	60a5      	str	r5, [r4, #8]
 8008906:	2d00      	cmp	r5, #0
 8008908:	f2c0 809c 	blt.w	8008a44 <_printf_i+0x228>
 800890c:	6820      	ldr	r0, [r4, #0]
 800890e:	f020 0004 	bic.w	r0, r0, #4
 8008912:	6020      	str	r0, [r4, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d13f      	bne.n	8008998 <_printf_i+0x17c>
 8008918:	2d00      	cmp	r5, #0
 800891a:	f040 8095 	bne.w	8008a48 <_printf_i+0x22c>
 800891e:	4675      	mov	r5, lr
 8008920:	2a08      	cmp	r2, #8
 8008922:	d10b      	bne.n	800893c <_printf_i+0x120>
 8008924:	6823      	ldr	r3, [r4, #0]
 8008926:	07da      	lsls	r2, r3, #31
 8008928:	d508      	bpl.n	800893c <_printf_i+0x120>
 800892a:	6923      	ldr	r3, [r4, #16]
 800892c:	6862      	ldr	r2, [r4, #4]
 800892e:	429a      	cmp	r2, r3
 8008930:	bfde      	ittt	le
 8008932:	2330      	movle	r3, #48	; 0x30
 8008934:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008938:	f105 35ff 	addle.w	r5, r5, #4294967295
 800893c:	ebae 0305 	sub.w	r3, lr, r5
 8008940:	6123      	str	r3, [r4, #16]
 8008942:	f8cd 8000 	str.w	r8, [sp]
 8008946:	463b      	mov	r3, r7
 8008948:	aa03      	add	r2, sp, #12
 800894a:	4621      	mov	r1, r4
 800894c:	4630      	mov	r0, r6
 800894e:	f7ff feef 	bl	8008730 <_printf_common>
 8008952:	3001      	adds	r0, #1
 8008954:	d155      	bne.n	8008a02 <_printf_i+0x1e6>
 8008956:	f04f 30ff 	mov.w	r0, #4294967295
 800895a:	b005      	add	sp, #20
 800895c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008960:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8008964:	493c      	ldr	r1, [pc, #240]	; (8008a58 <_printf_i+0x23c>)
 8008966:	6822      	ldr	r2, [r4, #0]
 8008968:	6818      	ldr	r0, [r3, #0]
 800896a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800896e:	f100 0504 	add.w	r5, r0, #4
 8008972:	601d      	str	r5, [r3, #0]
 8008974:	d001      	beq.n	800897a <_printf_i+0x15e>
 8008976:	6803      	ldr	r3, [r0, #0]
 8008978:	e002      	b.n	8008980 <_printf_i+0x164>
 800897a:	0655      	lsls	r5, r2, #25
 800897c:	d5fb      	bpl.n	8008976 <_printf_i+0x15a>
 800897e:	8803      	ldrh	r3, [r0, #0]
 8008980:	07d0      	lsls	r0, r2, #31
 8008982:	bf44      	itt	mi
 8008984:	f042 0220 	orrmi.w	r2, r2, #32
 8008988:	6022      	strmi	r2, [r4, #0]
 800898a:	b91b      	cbnz	r3, 8008994 <_printf_i+0x178>
 800898c:	6822      	ldr	r2, [r4, #0]
 800898e:	f022 0220 	bic.w	r2, r2, #32
 8008992:	6022      	str	r2, [r4, #0]
 8008994:	2210      	movs	r2, #16
 8008996:	e7b1      	b.n	80088fc <_printf_i+0xe0>
 8008998:	4675      	mov	r5, lr
 800899a:	fbb3 f0f2 	udiv	r0, r3, r2
 800899e:	fb02 3310 	mls	r3, r2, r0, r3
 80089a2:	5ccb      	ldrb	r3, [r1, r3]
 80089a4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80089a8:	4603      	mov	r3, r0
 80089aa:	2800      	cmp	r0, #0
 80089ac:	d1f5      	bne.n	800899a <_printf_i+0x17e>
 80089ae:	e7b7      	b.n	8008920 <_printf_i+0x104>
 80089b0:	6808      	ldr	r0, [r1, #0]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	6949      	ldr	r1, [r1, #20]
 80089b6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80089ba:	d004      	beq.n	80089c6 <_printf_i+0x1aa>
 80089bc:	1d10      	adds	r0, r2, #4
 80089be:	6018      	str	r0, [r3, #0]
 80089c0:	6813      	ldr	r3, [r2, #0]
 80089c2:	6019      	str	r1, [r3, #0]
 80089c4:	e007      	b.n	80089d6 <_printf_i+0x1ba>
 80089c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80089ca:	f102 0004 	add.w	r0, r2, #4
 80089ce:	6018      	str	r0, [r3, #0]
 80089d0:	6813      	ldr	r3, [r2, #0]
 80089d2:	d0f6      	beq.n	80089c2 <_printf_i+0x1a6>
 80089d4:	8019      	strh	r1, [r3, #0]
 80089d6:	2300      	movs	r3, #0
 80089d8:	6123      	str	r3, [r4, #16]
 80089da:	4675      	mov	r5, lr
 80089dc:	e7b1      	b.n	8008942 <_printf_i+0x126>
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	1d11      	adds	r1, r2, #4
 80089e2:	6019      	str	r1, [r3, #0]
 80089e4:	6815      	ldr	r5, [r2, #0]
 80089e6:	6862      	ldr	r2, [r4, #4]
 80089e8:	2100      	movs	r1, #0
 80089ea:	4628      	mov	r0, r5
 80089ec:	f7f7 fbf8 	bl	80001e0 <memchr>
 80089f0:	b108      	cbz	r0, 80089f6 <_printf_i+0x1da>
 80089f2:	1b40      	subs	r0, r0, r5
 80089f4:	6060      	str	r0, [r4, #4]
 80089f6:	6863      	ldr	r3, [r4, #4]
 80089f8:	6123      	str	r3, [r4, #16]
 80089fa:	2300      	movs	r3, #0
 80089fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a00:	e79f      	b.n	8008942 <_printf_i+0x126>
 8008a02:	6923      	ldr	r3, [r4, #16]
 8008a04:	462a      	mov	r2, r5
 8008a06:	4639      	mov	r1, r7
 8008a08:	4630      	mov	r0, r6
 8008a0a:	47c0      	blx	r8
 8008a0c:	3001      	adds	r0, #1
 8008a0e:	d0a2      	beq.n	8008956 <_printf_i+0x13a>
 8008a10:	6823      	ldr	r3, [r4, #0]
 8008a12:	079b      	lsls	r3, r3, #30
 8008a14:	d507      	bpl.n	8008a26 <_printf_i+0x20a>
 8008a16:	2500      	movs	r5, #0
 8008a18:	f104 0919 	add.w	r9, r4, #25
 8008a1c:	68e3      	ldr	r3, [r4, #12]
 8008a1e:	9a03      	ldr	r2, [sp, #12]
 8008a20:	1a9b      	subs	r3, r3, r2
 8008a22:	429d      	cmp	r5, r3
 8008a24:	db05      	blt.n	8008a32 <_printf_i+0x216>
 8008a26:	68e0      	ldr	r0, [r4, #12]
 8008a28:	9b03      	ldr	r3, [sp, #12]
 8008a2a:	4298      	cmp	r0, r3
 8008a2c:	bfb8      	it	lt
 8008a2e:	4618      	movlt	r0, r3
 8008a30:	e793      	b.n	800895a <_printf_i+0x13e>
 8008a32:	2301      	movs	r3, #1
 8008a34:	464a      	mov	r2, r9
 8008a36:	4639      	mov	r1, r7
 8008a38:	4630      	mov	r0, r6
 8008a3a:	47c0      	blx	r8
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	d08a      	beq.n	8008956 <_printf_i+0x13a>
 8008a40:	3501      	adds	r5, #1
 8008a42:	e7eb      	b.n	8008a1c <_printf_i+0x200>
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1a7      	bne.n	8008998 <_printf_i+0x17c>
 8008a48:	780b      	ldrb	r3, [r1, #0]
 8008a4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a52:	e765      	b.n	8008920 <_printf_i+0x104>
 8008a54:	080090b4 	.word	0x080090b4
 8008a58:	080090a3 	.word	0x080090a3

08008a5c <__sread>:
 8008a5c:	b510      	push	{r4, lr}
 8008a5e:	460c      	mov	r4, r1
 8008a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a64:	f000 f8e0 	bl	8008c28 <_read_r>
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	bfab      	itete	ge
 8008a6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a6e:	89a3      	ldrhlt	r3, [r4, #12]
 8008a70:	181b      	addge	r3, r3, r0
 8008a72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a76:	bfac      	ite	ge
 8008a78:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a7a:	81a3      	strhlt	r3, [r4, #12]
 8008a7c:	bd10      	pop	{r4, pc}

08008a7e <__swrite>:
 8008a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a82:	461f      	mov	r7, r3
 8008a84:	898b      	ldrh	r3, [r1, #12]
 8008a86:	05db      	lsls	r3, r3, #23
 8008a88:	4605      	mov	r5, r0
 8008a8a:	460c      	mov	r4, r1
 8008a8c:	4616      	mov	r6, r2
 8008a8e:	d505      	bpl.n	8008a9c <__swrite+0x1e>
 8008a90:	2302      	movs	r3, #2
 8008a92:	2200      	movs	r2, #0
 8008a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a98:	f000 f874 	bl	8008b84 <_lseek_r>
 8008a9c:	89a3      	ldrh	r3, [r4, #12]
 8008a9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008aa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008aa6:	81a3      	strh	r3, [r4, #12]
 8008aa8:	4632      	mov	r2, r6
 8008aaa:	463b      	mov	r3, r7
 8008aac:	4628      	mov	r0, r5
 8008aae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab2:	f000 b823 	b.w	8008afc <_write_r>

08008ab6 <__sseek>:
 8008ab6:	b510      	push	{r4, lr}
 8008ab8:	460c      	mov	r4, r1
 8008aba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008abe:	f000 f861 	bl	8008b84 <_lseek_r>
 8008ac2:	1c43      	adds	r3, r0, #1
 8008ac4:	89a3      	ldrh	r3, [r4, #12]
 8008ac6:	bf15      	itete	ne
 8008ac8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008aca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ace:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ad2:	81a3      	strheq	r3, [r4, #12]
 8008ad4:	bf18      	it	ne
 8008ad6:	81a3      	strhne	r3, [r4, #12]
 8008ad8:	bd10      	pop	{r4, pc}

08008ada <__sclose>:
 8008ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ade:	f000 b81f 	b.w	8008b20 <_close_r>

08008ae2 <__ascii_wctomb>:
 8008ae2:	b149      	cbz	r1, 8008af8 <__ascii_wctomb+0x16>
 8008ae4:	2aff      	cmp	r2, #255	; 0xff
 8008ae6:	bf85      	ittet	hi
 8008ae8:	238a      	movhi	r3, #138	; 0x8a
 8008aea:	6003      	strhi	r3, [r0, #0]
 8008aec:	700a      	strbls	r2, [r1, #0]
 8008aee:	f04f 30ff 	movhi.w	r0, #4294967295
 8008af2:	bf98      	it	ls
 8008af4:	2001      	movls	r0, #1
 8008af6:	4770      	bx	lr
 8008af8:	4608      	mov	r0, r1
 8008afa:	4770      	bx	lr

08008afc <_write_r>:
 8008afc:	b538      	push	{r3, r4, r5, lr}
 8008afe:	4c07      	ldr	r4, [pc, #28]	; (8008b1c <_write_r+0x20>)
 8008b00:	4605      	mov	r5, r0
 8008b02:	4608      	mov	r0, r1
 8008b04:	4611      	mov	r1, r2
 8008b06:	2200      	movs	r2, #0
 8008b08:	6022      	str	r2, [r4, #0]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	f000 f8de 	bl	8008ccc <_write>
 8008b10:	1c43      	adds	r3, r0, #1
 8008b12:	d102      	bne.n	8008b1a <_write_r+0x1e>
 8008b14:	6823      	ldr	r3, [r4, #0]
 8008b16:	b103      	cbz	r3, 8008b1a <_write_r+0x1e>
 8008b18:	602b      	str	r3, [r5, #0]
 8008b1a:	bd38      	pop	{r3, r4, r5, pc}
 8008b1c:	20002320 	.word	0x20002320

08008b20 <_close_r>:
 8008b20:	b538      	push	{r3, r4, r5, lr}
 8008b22:	4c06      	ldr	r4, [pc, #24]	; (8008b3c <_close_r+0x1c>)
 8008b24:	2300      	movs	r3, #0
 8008b26:	4605      	mov	r5, r0
 8008b28:	4608      	mov	r0, r1
 8008b2a:	6023      	str	r3, [r4, #0]
 8008b2c:	f000 f898 	bl	8008c60 <_close>
 8008b30:	1c43      	adds	r3, r0, #1
 8008b32:	d102      	bne.n	8008b3a <_close_r+0x1a>
 8008b34:	6823      	ldr	r3, [r4, #0]
 8008b36:	b103      	cbz	r3, 8008b3a <_close_r+0x1a>
 8008b38:	602b      	str	r3, [r5, #0]
 8008b3a:	bd38      	pop	{r3, r4, r5, pc}
 8008b3c:	20002320 	.word	0x20002320

08008b40 <_fstat_r>:
 8008b40:	b538      	push	{r3, r4, r5, lr}
 8008b42:	4c07      	ldr	r4, [pc, #28]	; (8008b60 <_fstat_r+0x20>)
 8008b44:	2300      	movs	r3, #0
 8008b46:	4605      	mov	r5, r0
 8008b48:	4608      	mov	r0, r1
 8008b4a:	4611      	mov	r1, r2
 8008b4c:	6023      	str	r3, [r4, #0]
 8008b4e:	f000 f88f 	bl	8008c70 <_fstat>
 8008b52:	1c43      	adds	r3, r0, #1
 8008b54:	d102      	bne.n	8008b5c <_fstat_r+0x1c>
 8008b56:	6823      	ldr	r3, [r4, #0]
 8008b58:	b103      	cbz	r3, 8008b5c <_fstat_r+0x1c>
 8008b5a:	602b      	str	r3, [r5, #0]
 8008b5c:	bd38      	pop	{r3, r4, r5, pc}
 8008b5e:	bf00      	nop
 8008b60:	20002320 	.word	0x20002320

08008b64 <_isatty_r>:
 8008b64:	b538      	push	{r3, r4, r5, lr}
 8008b66:	4c06      	ldr	r4, [pc, #24]	; (8008b80 <_isatty_r+0x1c>)
 8008b68:	2300      	movs	r3, #0
 8008b6a:	4605      	mov	r5, r0
 8008b6c:	4608      	mov	r0, r1
 8008b6e:	6023      	str	r3, [r4, #0]
 8008b70:	f000 f886 	bl	8008c80 <_isatty>
 8008b74:	1c43      	adds	r3, r0, #1
 8008b76:	d102      	bne.n	8008b7e <_isatty_r+0x1a>
 8008b78:	6823      	ldr	r3, [r4, #0]
 8008b7a:	b103      	cbz	r3, 8008b7e <_isatty_r+0x1a>
 8008b7c:	602b      	str	r3, [r5, #0]
 8008b7e:	bd38      	pop	{r3, r4, r5, pc}
 8008b80:	20002320 	.word	0x20002320

08008b84 <_lseek_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	4c07      	ldr	r4, [pc, #28]	; (8008ba4 <_lseek_r+0x20>)
 8008b88:	4605      	mov	r5, r0
 8008b8a:	4608      	mov	r0, r1
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	2200      	movs	r2, #0
 8008b90:	6022      	str	r2, [r4, #0]
 8008b92:	461a      	mov	r2, r3
 8008b94:	f000 f87c 	bl	8008c90 <_lseek>
 8008b98:	1c43      	adds	r3, r0, #1
 8008b9a:	d102      	bne.n	8008ba2 <_lseek_r+0x1e>
 8008b9c:	6823      	ldr	r3, [r4, #0]
 8008b9e:	b103      	cbz	r3, 8008ba2 <_lseek_r+0x1e>
 8008ba0:	602b      	str	r3, [r5, #0]
 8008ba2:	bd38      	pop	{r3, r4, r5, pc}
 8008ba4:	20002320 	.word	0x20002320

08008ba8 <memmove>:
 8008ba8:	4288      	cmp	r0, r1
 8008baa:	b510      	push	{r4, lr}
 8008bac:	eb01 0302 	add.w	r3, r1, r2
 8008bb0:	d803      	bhi.n	8008bba <memmove+0x12>
 8008bb2:	1e42      	subs	r2, r0, #1
 8008bb4:	4299      	cmp	r1, r3
 8008bb6:	d10c      	bne.n	8008bd2 <memmove+0x2a>
 8008bb8:	bd10      	pop	{r4, pc}
 8008bba:	4298      	cmp	r0, r3
 8008bbc:	d2f9      	bcs.n	8008bb2 <memmove+0xa>
 8008bbe:	1881      	adds	r1, r0, r2
 8008bc0:	1ad2      	subs	r2, r2, r3
 8008bc2:	42d3      	cmn	r3, r2
 8008bc4:	d100      	bne.n	8008bc8 <memmove+0x20>
 8008bc6:	bd10      	pop	{r4, pc}
 8008bc8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bcc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008bd0:	e7f7      	b.n	8008bc2 <memmove+0x1a>
 8008bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bd6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008bda:	e7eb      	b.n	8008bb4 <memmove+0xc>

08008bdc <_realloc_r>:
 8008bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bde:	4607      	mov	r7, r0
 8008be0:	4614      	mov	r4, r2
 8008be2:	460e      	mov	r6, r1
 8008be4:	b921      	cbnz	r1, 8008bf0 <_realloc_r+0x14>
 8008be6:	4611      	mov	r1, r2
 8008be8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008bec:	f7ff b804 	b.w	8007bf8 <_malloc_r>
 8008bf0:	b922      	cbnz	r2, 8008bfc <_realloc_r+0x20>
 8008bf2:	f7fe ffb3 	bl	8007b5c <_free_r>
 8008bf6:	4625      	mov	r5, r4
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bfc:	f000 f826 	bl	8008c4c <_malloc_usable_size_r>
 8008c00:	4284      	cmp	r4, r0
 8008c02:	d90f      	bls.n	8008c24 <_realloc_r+0x48>
 8008c04:	4621      	mov	r1, r4
 8008c06:	4638      	mov	r0, r7
 8008c08:	f7fe fff6 	bl	8007bf8 <_malloc_r>
 8008c0c:	4605      	mov	r5, r0
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	d0f2      	beq.n	8008bf8 <_realloc_r+0x1c>
 8008c12:	4631      	mov	r1, r6
 8008c14:	4622      	mov	r2, r4
 8008c16:	f7fe ff8d 	bl	8007b34 <memcpy>
 8008c1a:	4631      	mov	r1, r6
 8008c1c:	4638      	mov	r0, r7
 8008c1e:	f7fe ff9d 	bl	8007b5c <_free_r>
 8008c22:	e7e9      	b.n	8008bf8 <_realloc_r+0x1c>
 8008c24:	4635      	mov	r5, r6
 8008c26:	e7e7      	b.n	8008bf8 <_realloc_r+0x1c>

08008c28 <_read_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4c07      	ldr	r4, [pc, #28]	; (8008c48 <_read_r+0x20>)
 8008c2c:	4605      	mov	r5, r0
 8008c2e:	4608      	mov	r0, r1
 8008c30:	4611      	mov	r1, r2
 8008c32:	2200      	movs	r2, #0
 8008c34:	6022      	str	r2, [r4, #0]
 8008c36:	461a      	mov	r2, r3
 8008c38:	f000 f832 	bl	8008ca0 <_read>
 8008c3c:	1c43      	adds	r3, r0, #1
 8008c3e:	d102      	bne.n	8008c46 <_read_r+0x1e>
 8008c40:	6823      	ldr	r3, [r4, #0]
 8008c42:	b103      	cbz	r3, 8008c46 <_read_r+0x1e>
 8008c44:	602b      	str	r3, [r5, #0]
 8008c46:	bd38      	pop	{r3, r4, r5, pc}
 8008c48:	20002320 	.word	0x20002320

08008c4c <_malloc_usable_size_r>:
 8008c4c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8008c50:	2800      	cmp	r0, #0
 8008c52:	f1a0 0004 	sub.w	r0, r0, #4
 8008c56:	bfbc      	itt	lt
 8008c58:	580b      	ldrlt	r3, [r1, r0]
 8008c5a:	18c0      	addlt	r0, r0, r3
 8008c5c:	4770      	bx	lr
	...

08008c60 <_close>:
 8008c60:	4b02      	ldr	r3, [pc, #8]	; (8008c6c <_close+0xc>)
 8008c62:	2258      	movs	r2, #88	; 0x58
 8008c64:	601a      	str	r2, [r3, #0]
 8008c66:	f04f 30ff 	mov.w	r0, #4294967295
 8008c6a:	4770      	bx	lr
 8008c6c:	20002320 	.word	0x20002320

08008c70 <_fstat>:
 8008c70:	4b02      	ldr	r3, [pc, #8]	; (8008c7c <_fstat+0xc>)
 8008c72:	2258      	movs	r2, #88	; 0x58
 8008c74:	601a      	str	r2, [r3, #0]
 8008c76:	f04f 30ff 	mov.w	r0, #4294967295
 8008c7a:	4770      	bx	lr
 8008c7c:	20002320 	.word	0x20002320

08008c80 <_isatty>:
 8008c80:	4b02      	ldr	r3, [pc, #8]	; (8008c8c <_isatty+0xc>)
 8008c82:	2258      	movs	r2, #88	; 0x58
 8008c84:	601a      	str	r2, [r3, #0]
 8008c86:	2000      	movs	r0, #0
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	20002320 	.word	0x20002320

08008c90 <_lseek>:
 8008c90:	4b02      	ldr	r3, [pc, #8]	; (8008c9c <_lseek+0xc>)
 8008c92:	2258      	movs	r2, #88	; 0x58
 8008c94:	601a      	str	r2, [r3, #0]
 8008c96:	f04f 30ff 	mov.w	r0, #4294967295
 8008c9a:	4770      	bx	lr
 8008c9c:	20002320 	.word	0x20002320

08008ca0 <_read>:
 8008ca0:	4b02      	ldr	r3, [pc, #8]	; (8008cac <_read+0xc>)
 8008ca2:	2258      	movs	r2, #88	; 0x58
 8008ca4:	601a      	str	r2, [r3, #0]
 8008ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8008caa:	4770      	bx	lr
 8008cac:	20002320 	.word	0x20002320

08008cb0 <_sbrk>:
 8008cb0:	4b04      	ldr	r3, [pc, #16]	; (8008cc4 <_sbrk+0x14>)
 8008cb2:	6819      	ldr	r1, [r3, #0]
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	b909      	cbnz	r1, 8008cbc <_sbrk+0xc>
 8008cb8:	4903      	ldr	r1, [pc, #12]	; (8008cc8 <_sbrk+0x18>)
 8008cba:	6019      	str	r1, [r3, #0]
 8008cbc:	6818      	ldr	r0, [r3, #0]
 8008cbe:	4402      	add	r2, r0
 8008cc0:	601a      	str	r2, [r3, #0]
 8008cc2:	4770      	bx	lr
 8008cc4:	2000030c 	.word	0x2000030c
 8008cc8:	20002324 	.word	0x20002324

08008ccc <_write>:
 8008ccc:	4b02      	ldr	r3, [pc, #8]	; (8008cd8 <_write+0xc>)
 8008cce:	2258      	movs	r2, #88	; 0x58
 8008cd0:	601a      	str	r2, [r3, #0]
 8008cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd6:	4770      	bx	lr
 8008cd8:	20002320 	.word	0x20002320

08008cdc <_init>:
 8008cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cde:	bf00      	nop
 8008ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ce2:	bc08      	pop	{r3}
 8008ce4:	469e      	mov	lr, r3
 8008ce6:	4770      	bx	lr

08008ce8 <_fini>:
 8008ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cea:	bf00      	nop
 8008cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cee:	bc08      	pop	{r3}
 8008cf0:	469e      	mov	lr, r3
 8008cf2:	4770      	bx	lr
